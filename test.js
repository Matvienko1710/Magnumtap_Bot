const config = require('./config');
const database = require('./database');
const cache = require('./cache');
const utils = require('./utils');
const userService = require('./services/userService');

async function runTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª–Ω–æ–≥–æ –±–æ—Ç–∞...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('üìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    console.log(`‚úÖ BOT_TOKEN: ${config.BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
    console.log(`‚úÖ MONGODB_URI: ${config.MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
    console.log(`‚úÖ USER_CACHE_TTL: ${config.USER_CACHE_TTL} –º—Å`);
    console.log(`‚úÖ RATE_LIMIT_MAX_REQUESTS: ${config.RATE_LIMIT_MAX_REQUESTS}`);
    console.log(`‚úÖ EXCHANGE_COMMISSION: ${config.EXCHANGE_COMMISSION}%`);
    console.log(`‚úÖ MINER_REWARD_PER_HOUR: ${config.MINER.REWARD_PER_HOUR} ‚≠ê/—á–∞—Å\n`);

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–∏–ª–∏—Ç
    console.log('üîß –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–∏–ª–∏—Ç');
    console.log(`‚úÖ formatNumber(1234): ${utils.formatNumber(1234)}`);
    console.log(`‚úÖ formatNumber(1000000): ${utils.formatNumber(1000000)}`);
    console.log(`‚úÖ calculateCommission(100): ${utils.calculateCommission(100)}`);
    console.log(`‚úÖ calculateMinerReward(): ${utils.calculateMinerReward()}`);
    console.log(`‚úÖ checkCooldown(0, 60): ${utils.checkCooldown(0, 60)}`);
    console.log(`‚úÖ validatePromocode('TEST123'): ${utils.validatePromocode('TEST123')}`);
    console.log(`‚úÖ isAdmin('123'): ${utils.isAdmin('123')}`);
    console.log(`‚úÖ now(): ${utils.now()}`);
    console.log(`‚úÖ generateId(): ${utils.generateId()}`);
    console.log(`‚úÖ formatTime(3661): ${utils.formatTime(3661)}`);
    console.log(`‚úÖ formatDate(Date.now()): ${utils.formatDate(Date.now())}`);
    console.log(`‚úÖ calculateProgress(50, 100): ${utils.calculateProgress(50, 100)}%`);
    console.log(`‚úÖ formatProgress(75, 100): ${utils.formatProgress(75, 100)}`);
    console.log(`‚úÖ generatePromocode(): ${utils.generatePromocode()}`);
    console.log(`‚úÖ roundTo(3.14159, 2): ${utils.roundTo(3.14159, 2)}`);
    console.log(`‚úÖ clamp(150, 0, 100): ${utils.clamp(150, 0, 100)}`);
    console.log(`‚úÖ random(1, 10): ${utils.random(1, 10)}`);
    console.log(`‚úÖ isValidEmail('test@example.com'): ${utils.isValidEmail('test@example.com')}`);
    console.log(`‚úÖ isValidPhone('+1234567890'): ${utils.isValidPhone('+1234567890')}`);
    console.log(`‚úÖ isValidUrl('https://example.com'): ${utils.isValidUrl('https://example.com')}\n`);

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
    console.log('üíæ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞');
    const testUserId = 12345;
    const testUser = { id: testUserId, name: 'Test User' };
    
    cache.setUser(testUserId, testUser);
    const cachedUser = cache.getUser(testUserId);
    console.log(`‚úÖ setUser/getUser: ${cachedUser ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    
    cache.invalidateUser(testUserId);
    const invalidatedUser = cache.getUser(testUserId);
    console.log(`‚úÖ invalidateUser: ${!invalidatedUser ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    
    const rateLimitResult = cache.checkRateLimit(testUserId);
    console.log(`‚úÖ checkRateLimit: ${rateLimitResult ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    
    const cacheStats = cache.getCacheStats();
    console.log(`‚úÖ getCacheStats: ${cacheStats ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}\n`);

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    console.log('üö¶ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting');
    const testUserId2 = 54321;
    let rateLimitChecks = 0;
    
    for (let i = 0; i < 35; i++) {
      if (cache.checkRateLimit(testUserId2)) {
        rateLimitChecks++;
      }
    }
    console.log(`‚úÖ Rate limiting: ${rateLimitChecks} –∏–∑ 35 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—à–ª–∏ (–æ–∂–∏–¥–∞–µ—Ç—Å—è ~30)\n`);

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤
    console.log('üßÆ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤');
    const testUser2 = {
      stars: 100,
      titles: [
        { id: 'farmer', name: '‚ö° –§–∞—Ä–º–µ—Ä' },
        { id: 'collector', name: 'üíé –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä' }
      ],
      dailyStreak: 7
    };
    
    const farmReward = utils.calculateFarmReward(testUser2, 1);
    console.log(`‚úÖ calculateFarmReward: ${farmReward} (—Å –±–æ–Ω—É—Å–∞–º–∏ –∑–∞ —Ç–∏—Ç—É–ª—ã –∏ —Å–µ—Ä–∏—é)`);
    
    const exchangeRate = utils.calculateExchangeRate('magnumCoins', 'stars', { magnumCoins: 1000, stars: 1000 });
    console.log(`‚úÖ calculateExchangeRate: ${exchangeRate}`);
    
    const commission = utils.calculateCommission(100);
    console.log(`‚úÖ calculateCommission: ${commission}\n`);

    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    console.log('‚úÖ –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
    console.log(`‚úÖ validatePromocode('VALID123'): ${utils.validatePromocode('VALID123')}`);
    console.log(`‚úÖ validatePromocode('in'): ${!utils.validatePromocode('in')}`);
    console.log(`‚úÖ validatePromocode(''): ${!utils.validatePromocode('')}`);
    console.log(`‚úÖ validateWithdrawalAmount(150): ${utils.validateWithdrawalAmount(150)}`);
    console.log(`‚úÖ validateWithdrawalAmount(50): ${!utils.validateWithdrawalAmount(50)}`);
    console.log(`‚úÖ validateWallet('T123456789012345678901234567890123', 'USDT'): ${utils.validateWallet('T123456789012345678901234567890123', 'USDT')}`);
    console.log(`‚úÖ validateWallet('invalid', 'USDT'): ${!utils.validateWallet('invalid', 'USDT')}\n`);

    // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    console.log('üö® –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫');
    const testError = new Error('Test error');
    const errorResult = utils.handleError(testError, 'test');
    console.log(`‚úÖ handleError: ${errorResult.success === false ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    
    const mongoError = new Error('Duplicate key');
    mongoError.code = 11000;
    const mongoErrorResult = utils.handleError(mongoError, 'test');
    console.log(`‚úÖ handleError (MongoDB): ${mongoErrorResult.error.includes('—Å—É—â–µ—Å—Ç–≤—É–µ—Ç') ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}\n`);

    // –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üìù –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log(`‚úÖ formatNumber(0): ${utils.formatNumber(0)}`);
    console.log(`‚úÖ formatNumber(null): ${utils.formatNumber(null)}`);
    console.log(`‚úÖ formatNumber(undefined): ${utils.formatNumber(undefined)}`);
    console.log(`‚úÖ formatTime(30): ${utils.formatTime(30)}`);
    console.log(`‚úÖ formatTime(90): ${utils.formatTime(90)}`);
    console.log(`‚úÖ formatTime(3661): ${utils.formatTime(3661)}`);
    console.log(`‚úÖ truncate('Very long text that needs to be truncated', 20): ${utils.truncate('Very long text that needs to be truncated', 20)}`);
    console.log(`‚úÖ escapeMarkdown('*bold* _italic_ [link](url)'): ${utils.escapeMarkdown('*bold* _italic_ [link](url)')}\n`);

    // –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤
    console.log('üì¶ –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤');
    const testArray = [
      { name: 'Alice', age: 25 },
      { name: 'Bob', age: 30 },
      { name: 'Charlie', age: 20 }
    ];
    
    const sortedArray = utils.sortBy(testArray, 'age', 'desc');
    console.log(`‚úÖ sortBy (desc): ${sortedArray[0].name} (${sortedArray[0].age})`);
    
    const testObj = { a: 1, b: 2, c: 3, d: 4 };
    const filteredObj = utils.filterObject(testObj, ['a', 'c']);
    console.log(`‚úÖ filterObject: ${Object.keys(filteredObj).length} –∫–ª—é—á–µ–π`);
    
    const clonedObj = utils.deepClone(testObj);
    console.log(`‚úÖ deepClone: ${JSON.stringify(clonedObj) === JSON.stringify(testObj) ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}\n`);

    // –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    console.log('üî¢ –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π');
    console.log(`‚úÖ roundTo(3.14159, 2): ${utils.roundTo(3.14159, 2)}`);
    console.log(`‚úÖ roundTo(3.14159, 0): ${utils.roundTo(3.14159, 0)}`);
    console.log(`‚úÖ clamp(150, 0, 100): ${utils.clamp(150, 0, 100)}`);
    console.log(`‚úÖ clamp(-50, 0, 100): ${utils.clamp(-50, 0, 100)}`);
    console.log(`‚úÖ clamp(50, 0, 100): ${utils.clamp(50, 0, 100)}`);
    
    const randomNum = utils.random(1, 10);
    console.log(`‚úÖ random(1, 10): ${randomNum} (1-10)`);
    console.log(`‚úÖ calculateProgress(75, 100): ${utils.calculateProgress(75, 100)}%`);
    console.log(`‚úÖ calculateProgress(0, 100): ${utils.calculateProgress(0, 100)}%`);
    console.log(`‚úÖ calculateProgress(100, 100): ${utils.calculateProgress(100, 100)}%`);
    console.log(`‚úÖ calculateProgress(150, 100): ${utils.calculateProgress(150, 100)}%\n`);

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚úÖ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
    console.error('üìç Stack trace:', error.stack);
  }
}

if (require.main === module) {
  runTests();
}

module.exports = { runTests };