// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const { MongoClient } = require('mongodb');
require('dotenv').config();

async function clearUserCache() {
    const client = new MongoClient(process.env.MONGODB_URI);

    try {
        await client.connect();
        const db = client.db();

        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const allUsers = await db.collection('users').find({}, {
            projection: { id: 1, magnumCoins: 1, stars: 1, username: 1 }
        }).toArray();

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${allUsers.length}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let totalMagnumCoins = 0;
        let totalStars = 0;

        for (const user of allUsers) {
            totalMagnumCoins += user.magnumCoins || 0;
            totalStars += user.stars || 0;
        }

        console.log(`üí∞ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª—é—Ç:`);
        console.log(`   Magnum Coins: ${totalMagnumCoins.toLocaleString()}`);
        console.log(`   Stars: ${totalStars.toLocaleString()}`);

        console.log(`\n‚úÖ –ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω!`);
        console.log(`üìù –¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (allUsers.length > 0) {
            console.log(`\nüë• –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
            allUsers.slice(0, 3).forEach(user => {
                console.log(`   ${user.username || 'N/A'} (${user.id}): ${user.magnumCoins} MC, ${user.stars} ‚≠ê`);
            });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞:', error.message);
    } finally {
        await client.close();
    }
}

clearUserCache();
