// ==================== –ú–û–î–£–õ–¨ –í–´–í–û–î–ê –°–†–ï–î–°–¢–í ====================

class WithdrawalModule {
  constructor(db, userCache, config) {
    this.db = db;
    this.userCache = userCache;
    this.config = config;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
  async createWithdrawalRequest(userId, currency, amount, wallet, method) {
    try {
      const user = await this.getUser(userId);
      if (!user) {
        return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      const userBalance = currency === 'stars' ? user.stars : user.magnumCoins;
      if (userBalance < amount) {
        return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
      if (amount < this.config.MIN_WITHDRAWAL) {
        return { success: false, message: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${this.config.MIN_WITHDRAWAL}` };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
      if (amount > this.config.MAX_WITHDRAWAL) {
        return { success: false, message: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${this.config.MAX_WITHDRAWAL}` };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–∞
      if (!this.validateWallet(wallet, method)) {
        return { success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞' };
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
      const withdrawal = {
        userId: userId,
        username: user.username,
        firstName: user.firstName,
        currency: currency,
        amount: amount,
        wallet: wallet,
        method: method,
        status: 'pending', // pending, approved, rejected, completed
        adminId: null,
        adminNotes: '',
        createdAt: new Date(),
        updatedAt: new Date()
      };

      const result = await this.db.collection('withdrawalRequests').insertOne(withdrawal);

      if (result.insertedId) {
        // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        await this.db.collection('users').updateOne(
          { id: userId },
          {
            $inc: {
              [currency === 'stars' ? 'stars' : 'magnumCoins']: -amount,
              'withdrawal.pendingAmount': amount,
              'withdrawal.withdrawalCount': 1
            },
            $set: { updatedAt: new Date() }
          }
        );

        // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userCache.delete(userId);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await this.notifyAdmins(withdrawal);

        return {
          success: true,
          message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
          withdrawalId: result.insertedId
        };
      }

      return { success: false, message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏' };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:', error);
      return { success: false, message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏' };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserWithdrawals(userId, limit = 10) {
    try {
      const withdrawals = await this.db.collection('withdrawalRequests')
        .find({ userId: userId })
        .sort({ createdAt: -1 })
        .limit(limit)
        .toArray();

      return withdrawals;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async getAllWithdrawals(status = null, limit = 50) {
    try {
      const filter = {};
      if (status) {
        filter.status = status;
      }

      const withdrawals = await this.db.collection('withdrawalRequests')
        .find(filter)
        .sort({ createdAt: -1 })
        .limit(limit)
        .toArray();

      return withdrawals;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫:', error);
      return [];
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º
  async processWithdrawal(withdrawalId, adminId, action, notes = '') {
    try {
      const withdrawal = await this.db.collection('withdrawalRequests').findOne({
        _id: withdrawalId
      });

      if (!withdrawal) {
        return { success: false, message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
      }

      if (withdrawal.status !== 'pending') {
        return { success: false, message: '–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' };
      }

      let newStatus = 'pending';
      let updateData = {};

      switch (action) {
        case 'approve':
          newStatus = 'approved';
          updateData = {
            status: newStatus,
            adminId: adminId,
            adminNotes: notes,
            approvedAt: new Date(),
            updatedAt: new Date()
          };
          break;

        case 'reject':
          newStatus = 'rejected';
          updateData = {
            status: newStatus,
            adminId: adminId,
            adminNotes: notes,
            rejectedAt: new Date(),
            updatedAt: new Date()
          };

          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await this.db.collection('users').updateOne(
            { id: withdrawal.userId },
            {
              $inc: {
                [withdrawal.currency === 'stars' ? 'stars' : 'magnumCoins']: withdrawal.amount,
                'withdrawal.pendingAmount': -withdrawal.amount
              },
              $set: { updatedAt: new Date() }
            }
          );

          this.userCache.delete(withdrawal.userId);
          break;

        case 'complete':
          newStatus = 'completed';
          updateData = {
            status: newStatus,
            adminId: adminId,
            adminNotes: notes,
            completedAt: new Date(),
            updatedAt: new Date()
          };

          // –°–Ω–∏–º–∞–µ–º —Å —Ä–µ–∑–µ—Ä–≤–∞
          await this.db.collection('users').updateOne(
            { id: withdrawal.userId },
            {
              $inc: {
                'withdrawal.pendingAmount': -withdrawal.amount,
                'withdrawal.totalWithdrawn': withdrawal.amount
              },
              $set: { updatedAt: new Date() }
            }
          );

          this.userCache.delete(withdrawal.userId);
          break;

        default:
          return { success: false, message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' };
      }

      await this.db.collection('withdrawalRequests').updateOne(
        { _id: withdrawalId },
        { $set: updateData }
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.notifyUser(withdrawal, newStatus, notes);

      return {
        success: true,
        message: `–ó–∞—è–≤–∫–∞ ${action === 'approve' ? '–æ–¥–æ–±—Ä–µ–Ω–∞' : action === 'reject' ? '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞' : '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'}`,
        status: newStatus
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏' };
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
  validateWallet(wallet, method) {
    if (!wallet || wallet.trim().length === 0) {
      return false;
    }

    switch (method) {
      case 'ton':
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TON –∫–æ—à–µ–ª—å–∫–∞
        return /^[0-9a-zA-Z]{48}$/.test(wallet);
      
      case 'btc':
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ BTC –∫–æ—à–µ–ª—å–∫–∞
        return /^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$/.test(wallet);
      
      case 'eth':
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ETH –∫–æ—à–µ–ª—å–∫–∞
        return /^0x[a-fA-F0-9]{40}$/.test(wallet);
      
      case 'usdt':
        // USDT –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç—è—Ö
        return wallet.length >= 26 && wallet.length <= 35;
      
      default:
        return wallet.length >= 10; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
  async notifyAdmins(withdrawal) {
    try {
      if (!this.config.WITHDRAWAL_CHANNEL) return;

      const message = 
        `üí∞ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (@${withdrawal.username || '–±–µ–∑ username'})\n` +
        `üÜî ID: \`${withdrawal.userId}\`\n` +
        `üíé –°—É–º–º–∞: ${withdrawal.amount} ${withdrawal.currency === 'stars' ? 'Stars' : 'Magnum Coins'}\n` +
        `üí≥ –ú–µ—Ç–æ–¥: ${this.getMethodName(withdrawal.method)}\n` +
        `üîó –ö–æ—à–µ–ª–µ–∫: \`${withdrawal.wallet}\`\n` +
        `üìÖ –î–∞—Ç–∞: ${withdrawal.createdAt.toLocaleString('ru-RU')}\n\n` +
        `üÜî ID –∑–∞—è–≤–∫–∏: \`${withdrawal._id}\``;

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º:', message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤:', error);
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async notifyUser(withdrawal, status, notes) {
    try {
      let statusText = '';
      let emoji = '';

      switch (status) {
        case 'approved':
          statusText = '–æ–¥–æ–±—Ä–µ–Ω–∞';
          emoji = '‚úÖ';
          break;
        case 'rejected':
          statusText = '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞';
          emoji = '‚ùå';
          break;
        case 'completed':
          statusText = '–∑–∞–≤–µ—Ä—à–µ–Ω–∞';
          emoji = 'üéâ';
          break;
      }

      const message = 
        `${emoji} *–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${statusText}*\n\n` +
        `üíé –°—É–º–º–∞: ${withdrawal.amount} ${withdrawal.currency === 'stars' ? 'Stars' : 'Magnum Coins'}\n` +
        `üí≥ –ú–µ—Ç–æ–¥: ${this.getMethodName(withdrawal.method)}\n` +
        `üîó –ö–æ—à–µ–ª–µ–∫: \`${withdrawal.wallet}\`\n` +
        `üìÖ –î–∞—Ç–∞: ${withdrawal.createdAt.toLocaleString('ru-RU')}`;

      if (notes) {
        message += `\n\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${notes}`;
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞
  getMethodName(method) {
    const methods = {
      'ton': 'TON',
      'btc': 'Bitcoin',
      'eth': 'Ethereum',
      'usdt': 'USDT',
      'card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
      'qiwi': 'QIWI',
      'yoomoney': '–ÆMoney'
    };

    return methods[method] || method;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–æ–≤
  async getWithdrawalStats(userId = null) {
    try {
      const filter = {};
      if (userId) {
        filter.userId = userId;
      }

      const stats = await this.db.collection('withdrawalRequests')
        .aggregate([
          { $match: filter },
          {
            $group: {
              _id: null,
              totalRequests: { $sum: 1 },
              totalAmount: { $sum: '$amount' },
              pendingRequests: {
                $sum: { $cond: [{ $eq: ['$status', 'pending'] }, 1, 0] }
              },
              pendingAmount: {
                $sum: { $cond: [{ $eq: ['$status', 'pending'] }, '$amount', 0] }
              },
              approvedRequests: {
                $sum: { $cond: [{ $eq: ['$status', 'approved'] }, 1, 0] }
              },
              approvedAmount: {
                $sum: { $cond: [{ $eq: ['$status', 'approved'] }, '$amount', 0] }
              },
              completedRequests: {
                $sum: { $cond: [{ $eq: ['$status', 'completed'] }, 1, 0] }
              },
              completedAmount: {
                $sum: { $cond: [{ $eq: ['$status', 'completed'] }, '$amount', 0] }
              },
              rejectedRequests: {
                $sum: { $cond: [{ $eq: ['$status', 'rejected'] }, 1, 0] }
              },
              rejectedAmount: {
                $sum: { $cond: [{ $eq: ['$status', 'rejected'] }, '$amount', 0] }
              }
            }
          }
        ])
        .toArray();

      return stats[0] || {
        totalRequests: 0,
        totalAmount: 0,
        pendingRequests: 0,
        pendingAmount: 0,
        approvedRequests: 0,
        approvedAmount: 0,
        completedRequests: 0,
        completedAmount: 0,
        rejectedRequests: 0,
        rejectedAmount: 0
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–æ–≤:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUser(userId) {
    try {
      return await this.db.collection('users').findOne({ id: userId });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞
  formatNumber(num) {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K';
    }
    return num.toFixed(2);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —ç–º–æ–¥–∑–∏
  getStatusWithEmoji(status) {
    const statuses = {
      'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
      'approved': '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞',
      'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
      'completed': 'üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–∞'
    };

    return statuses[status] || status;
  }
}

module.exports = WithdrawalModule;