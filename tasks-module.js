// ==================== –ú–û–î–£–õ–¨ –ó–ê–î–ê–ù–ò–ô –ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ====================

const dailyTasks = [
  {
    id: 'farm_10',
    title: 'üåæ –§–∞—Ä–º–µ—Ä',
    description: '–§–∞—Ä–º–∏—Ç—å 10 —Ä–∞–∑',
    type: 'farm',
    target: 10,
    reward: { stars: 5, experience: 50 }
  },
  {
    id: 'miner_24h',
    title: '‚õèÔ∏è –ú–∞–π–Ω–µ—Ä',
    description: '–î–µ—Ä–∂–∞—Ç—å –º–∞–π–Ω–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º 24 —á–∞—Å–∞',
    type: 'miner_time',
    target: 86400, // 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    reward: { stars: 10, experience: 100 }
  },
  {
    id: 'referral_1',
    title: 'üë• –†–µ—Ñ–µ—Ä–∞–ª',
    description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 1 —Ä–µ—Ñ–µ—Ä–∞–ª–∞',
    type: 'referral',
    target: 1,
    reward: { stars: 15, experience: 150 }
  },
  {
    id: 'exchange_5',
    title: 'üí± –¢—Ä–µ–π–¥–µ—Ä',
    description: '–°–¥–µ–ª–∞—Ç—å 5 –æ–±–º–µ–Ω–æ–≤',
    type: 'exchange',
    target: 5,
    reward: { stars: 8, experience: 80 }
  },
  {
    id: 'bonus_7',
    title: 'üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫',
    description: '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    type: 'bonus_streak',
    target: 7,
    reward: { stars: 20, experience: 200 }
  }
];

const achievements = [
  {
    id: 'first_farm',
    title: 'üå± –ü–µ—Ä–≤—ã–π —Ñ–∞—Ä–º',
    description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∞—Ä–º',
    type: 'farm_count',
    target: 1,
    reward: { stars: 10, experience: 100, title: 'üå± –ù–æ–≤–∏—á–æ–∫' }
  },
  {
    id: 'farm_master',
    title: 'üåæ –ú–∞—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞',
    description: '–§–∞—Ä–º–∏—Ç—å 100 —Ä–∞–∑',
    type: 'farm_count',
    target: 100,
    reward: { stars: 100, experience: 1000, title: 'üåæ –§–∞—Ä–º–µ—Ä' }
  },
  {
    id: 'miner_expert',
    title: '‚õèÔ∏è –≠–∫—Å–ø–µ—Ä—Ç –º–∞–π–Ω–∏–Ω–≥–∞',
    description: '–î–æ–±—ã—Ç—å 1000 Stars –º–∞–π–Ω–µ—Ä–æ–º',
    type: 'miner_total',
    target: 1000,
    reward: { stars: 200, experience: 2000, title: '‚õèÔ∏è –ú–∞–π–Ω–µ—Ä' }
  },
  {
    id: 'referral_king',
    title: 'üëë –ö–æ—Ä–æ–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
    description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
    type: 'referral_count',
    target: 10,
    reward: { stars: 500, experience: 5000, title: 'üëë –†–µ—Ñ–µ—Ä–∞–ª' }
  },
  {
    id: 'rich_user',
    title: 'üíé –ë–æ–≥–∞—á',
    description: '–ù–∞–∫–æ–ø–∏—Ç—å 10000 Stars',
    type: 'stars_balance',
    target: 10000,
    reward: { stars: 1000, experience: 10000, title: 'üíé –ë–æ–≥–∞—á' }
  },
  {
    id: 'exchange_master',
    title: 'üí± –ú–∞—Å—Ç–µ—Ä –æ–±–º–µ–Ω–∞',
    description: '–°–¥–µ–ª–∞—Ç—å 50 –æ–±–º–µ–Ω–æ–≤',
    type: 'exchange_count',
    target: 50,
    reward: { stars: 300, experience: 3000, title: 'üí± –¢—Ä–µ–π–¥–µ—Ä' }
  },
  {
    id: 'bonus_champion',
    title: 'üèÜ –ß–µ–º–ø–∏–æ–Ω –±–æ–Ω—É—Å–æ–≤',
    description: '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    type: 'bonus_streak',
    target: 30,
    reward: { stars: 1000, experience: 10000, title: 'üèÜ –ß–µ–º–ø–∏–æ–Ω' }
  }
];

class TasksModule {
  constructor(db, userCache) {
    this.db = db;
    this.userCache = userCache;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createDailyTasks(userId) {
    try {
      const today = new Date().toDateString();
      const user = await this.getUser(userId);
      
      if (!user) return null;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const existingTasks = await this.db.collection('dailyTasks').findOne({
        userId: userId,
        date: today
      });
      
      if (existingTasks) return existingTasks;
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
      const userTasks = dailyTasks.map(task => ({
        ...task,
        userId: userId,
        date: today,
        progress: 0,
        completed: false,
        claimed: false,
        createdAt: new Date()
      }));
      
      await this.db.collection('dailyTasks').insertMany(userTasks);
      
      return userTasks;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getDailyTasks(userId) {
    try {
      const today = new Date().toDateString();
      
      let tasks = await this.db.collection('dailyTasks').find({
        userId: userId,
        date: today
      }).toArray();
      
      if (tasks.length === 0) {
        tasks = await this.createDailyTasks(userId);
      }
      
      return tasks || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
      return [];
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏—è
  async updateTaskProgress(userId, taskType, amount = 1) {
    try {
      const today = new Date().toDateString();
      
      await this.db.collection('dailyTasks').updateMany(
        {
          userId: userId,
          date: today,
          type: taskType,
          completed: false
        },
        {
          $inc: { progress: amount },
          $set: { updatedAt: new Date() }
        }
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
      await this.checkTaskCompletion(userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
  async checkTaskCompletion(userId) {
    try {
      const today = new Date().toDateString();
      
      const tasks = await this.db.collection('dailyTasks').find({
        userId: userId,
        date: today,
        completed: false
      }).toArray();
      
      for (const task of tasks) {
        if (task.progress >= task.target && !task.completed) {
          await this.db.collection('dailyTasks').updateOne(
            { _id: task._id },
            { $set: { completed: true, completedAt: new Date() } }
          );
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
  async claimTaskReward(userId, taskId) {
    try {
      const task = await this.db.collection('dailyTasks').findOne({
        _id: taskId,
        userId: userId,
        completed: true,
        claimed: false
      });
      
      if (!task) {
        return { success: false, message: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ' };
      }
      
      // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
      await this.db.collection('users').updateOne(
        { id: userId },
        {
          $inc: {
            stars: task.reward.stars || 0,
            totalEarnedStars: task.reward.stars || 0,
            experience: task.reward.experience || 0,
            'tasks.completedTasksCount': 1,
            'tasks.totalTaskRewards': task.reward.stars || 0
          }
        }
      );
      
      // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ
      await this.db.collection('dailyTasks').updateOne(
        { _id: taskId },
        { $set: { claimed: true, claimedAt: new Date() } }
      );
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.userCache.delete(userId);
      
      return { 
        success: true, 
        reward: task.reward,
        message: `–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${task.reward.stars} Stars, ${task.reward.experience} –æ–ø—ã—Ç–∞`
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ:', error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã' };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  async checkAchievements(userId) {
    try {
      const user = await this.getUser(userId);
      if (!user) return [];
      
      const newAchievements = [];
      
      for (const achievement of achievements) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        if (user.achievements.includes(achievement.id)) continue;
        
        let progress = 0;
        
        switch (achievement.type) {
          case 'farm_count':
            progress = user.farm.farmCount;
            break;
          case 'miner_total':
            progress = user.miner.totalMined;
            break;
          case 'referral_count':
            progress = user.referralsCount;
            break;
          case 'stars_balance':
            progress = user.stars;
            break;
          case 'exchange_count':
            progress = user.exchange.exchangeCount;
            break;
          case 'bonus_streak':
            progress = user.dailyBonus.streak;
            break;
        }
        
        if (progress >= achievement.target) {
          // –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
          await this.db.collection('users').updateOne(
            { id: userId },
            {
              $inc: {
                stars: achievement.reward.stars || 0,
                totalEarnedStars: achievement.reward.stars || 0,
                experience: achievement.reward.experience || 0,
                achievementsCount: 1
              },
              $push: { 
                achievements: achievement.id,
                titles: achievement.reward.title
              },
              $set: {
                mainTitle: achievement.reward.title,
                updatedAt: new Date()
              }
            }
          );
          
          newAchievements.push(achievement);
        }
      }
      
      if (newAchievements.length > 0) {
        this.userCache.delete(userId);
      }
      
      return newAchievements;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  async getAllAchievements() {
    return achievements;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserAchievements(userId) {
    try {
      const user = await this.getUser(userId);
      if (!user) return [];
      
      return achievements.filter(achievement => 
        user.achievements.includes(achievement.id)
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  async getAchievementProgress(userId) {
    try {
      const user = await this.getUser(userId);
      if (!user) return [];
      
      return achievements.map(achievement => {
        let progress = 0;
        
        switch (achievement.type) {
          case 'farm_count':
            progress = user.farm.farmCount;
            break;
          case 'miner_total':
            progress = user.miner.totalMined;
            break;
          case 'referral_count':
            progress = user.referralsCount;
            break;
          case 'stars_balance':
            progress = user.stars;
            break;
          case 'exchange_count':
            progress = user.exchange.exchangeCount;
            break;
          case 'bonus_streak':
            progress = user.dailyBonus.streak;
            break;
        }
        
        return {
          ...achievement,
          progress,
          completed: user.achievements.includes(achievement.id),
          percentage: Math.min((progress / achievement.target) * 100, 100)
        };
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUser(userId) {
    try {
      return await this.db.collection('users').findOne({ id: userId });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  // –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async resetDailyTasks() {
    try {
      const today = new Date().toDateString();
      
      await this.db.collection('dailyTasks').deleteMany({
        date: today
      });
      
      console.log('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
      return false;
    }
  }
}

module.exports = TasksModule;