// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –≤—ã–≤–æ–¥–∞

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è MongoDB
const mockUsers = new Map();
const mockWithdrawalRequests = new Map();

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
const mockCollection = {
  findOne: async (query) => {
    if (query.id) return mockUsers.get(query.id) || null;
    return mockWithdrawalRequests.get(query.id) || null;
  },
  insertOne: async (doc) => {
    if (doc.userId) mockWithdrawalRequests.set(doc.id, doc);
    return { insertedId: doc.id };
  },
  updateOne: async (query, update) => {
    if (query.id && mockUsers.has(query.id)) {
      const user = mockUsers.get(query.id);
      if (update.$inc && update.$inc.stars) {
        user.stars = (user.stars || 0) + update.$inc.stars;
      }
      mockUsers.set(query.id, user);
    }
    return { modifiedCount: 1 };
  }
};

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
process.env.WITHDRAWAL_CHANNEL = 'test_channel';

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
async function getUser(userId, ctx) {
  if (!mockUsers.has(userId)) {
    mockUsers.set(userId, {
      id: userId,
      stars: 1000, // –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
      username: 'testuser',
      first_name: 'Test User'
    });
  }
  return mockUsers.get(userId);
}

// –§—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.js (–∫–æ–ø–∏—Ä—É–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async function createWithdrawalRequest(userId, method, amount, address) {
  const user = await getUser(userId);
  const requestId = new Date().getTime().toString();
  
  const request = {
    id: requestId,
    userId: userId,
    username: user.username || '',
    firstName: user.first_name || '',
    method: method,
    amount: amount,
    address: address,
    status: 'pending',
    createdAt: Math.floor(Date.now() / 1000),
    updatedAt: Math.floor(Date.now() / 1000),
    fee: Math.round(amount * 0.05 * 100) / 100,
    netAmount: Math.round((amount - amount * 0.05) * 100) / 100
  };
  
  await mockCollection.insertOne(request);
  return request;
}

async function sendWithdrawalToChannel(request) {
  console.log('sendWithdrawalToChannel –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏:', request.id);
  console.log('WITHDRAWAL_CHANNEL:', process.env.WITHDRAWAL_CHANNEL);
  
  if (!process.env.WITHDRAWAL_CHANNEL) {
    console.log('WITHDRAWAL_CHANNEL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –∫–∞–Ω–∞–ª');
    return;
  }
  
  const methodNames = {
    'tg_stars': '‚≠ê Telegram Stars',
    'ton': 'üíé TON Coin', 
    'usdt': 'üíµ USDT TRC-20'
  };
  
  const message = `üí∏ **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥** üí∏\n\n` +
                  `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${request.firstName || request.username || `ID: ${request.userId}`}\n` +
                  `üÜî **ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** ${request.userId}\n` +
                  `üí∞ **–°—É–º–º–∞:** ${request.amount}‚≠ê\n` +
                  `üí∏ **–ö –≤—ã–≤–æ–¥—É:** ${request.netAmount}‚≠ê (–∫–æ–º–∏—Å—Å–∏—è: ${request.fee}‚≠ê)\n` +
                  `üîÑ **–ú–µ—Ç–æ–¥:** ${methodNames[request.method]}\n` +
                  `üìç **–ê–¥—Ä–µ—Å/–î–∞–Ω–Ω—ã–µ:** \`${request.address}\`\n` +
                  `‚è∞ **–í—Ä–µ–º—è:** ${new Date(request.createdAt * 1000).toLocaleString('ru-RU')}\n` +
                  `üìä **–°—Ç–∞—Ç—É—Å:** üü° –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n` +
                  `üè∑Ô∏è **ID –∑–∞—è–≤–∫–∏:** \`${request.id}\``;
  
  console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞:');
  console.log(message);
  console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" –≤ –∫–∞–Ω–∞–ª (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)');
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
async function testWithdrawal() {
  console.log('=== –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –í–´–í–û–î–ê ===\n');
  
  const userId = 123456789;
  const amount = 500;
  const telegramId = '987654321';
  
  console.log('1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  const user = await getUser(userId);
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
  
  console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...');
  if (user.stars < amount) {
    console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.stars}‚≠ê, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç: ${amount}‚≠ê`);
    return;
  }
  console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω: ${user.stars}‚≠ê >= ${amount}‚≠ê`);
  
  console.log('\n3. –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É...');
  const request = await createWithdrawalRequest(userId, 'tg_stars', amount, telegramId);
  console.log('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', request);
  
  console.log('\n4. –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã...');
  await mockCollection.updateOne({ id: userId }, { $inc: { stars: -amount } });
  const updatedUser = await getUser(userId);
  console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å:', updatedUser.stars);
  
  console.log('\n5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª...');
  await sendWithdrawalToChannel(request);
  
  console.log('\n=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testWithdrawal().catch(console.error);