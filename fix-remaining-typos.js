// –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ–ø–µ—á–∞—Ç–æ–∫ magnuStarsoins -> magnumCoins
const fs = require('fs');
const path = require('path');

const filePath = 'magnum-bot-final.js';

try {
    let content = fs.readFileSync(filePath, 'utf8');

    // –ú–∞—Å—Å–∏–≤ –∑–∞–º–µ–Ω –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫
    const replacements = [
        { from: 'magnuStarsoins', to: 'magnumCoins' },
        { from: 'totalEarnedMagnuStarsoins', to: 'totalEarnedMagnumCoins' },
        { from: 'totalWithdrawnMagnuStarsoins', to: 'totalWithdrawnMagnumCoins' },
        { from: 'magnuStarsoinsReserve', to: 'magnumCoinsReserve' },
        { from: 'magnuStarsoinsAmount', to: 'magnumCoinsAmount' },
        { from: 'magnuStarsoinsReceived', to: 'magnumCoinsReceived' }
    ];

    let changesCount = 0;

    replacements.forEach(({ from, to }) => {
        const regex = new RegExp(from, 'g');
        const matches = content.match(regex);
        if (matches) {
            content = content.replace(regex, to);
            changesCount += matches.length;
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ "${from}" -> "${to}": ${matches.length} –≤—Ö–æ–∂–¥–µ–Ω–∏–π`);
        }
    });

    if (changesCount > 0) {
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`\nüéâ –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${changesCount} –æ–ø–µ—á–∞—Ç–æ–∫`);
        console.log('üìÅ –§–∞–π–ª magnum-bot-final.js –æ–±–Ω–æ–≤–ª–µ–Ω');
    } else {
        console.log('‚úÖ –û–ø–µ—á–∞—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—á–∞—Ç–æ–∫:', error.message);
}
