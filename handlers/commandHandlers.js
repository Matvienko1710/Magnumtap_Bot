const { Markup } = require('telegraf');
const config = require('../config/constants');
const logger = require('../utils/logger');
const cache = require('../utils/cache');

class CommandHandlers {
  constructor(db) {
    this.db = db;
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  async handleStart(ctx) {
    try {
      const userId = ctx.from.id;
      const username = ctx.from.username || ctx.from.first_name;
      
      logger.userAction(userId, 'start_command', { username });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      let user = await this.db.collection('users').findOne({ userId: userId });
      
      if (!user) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = {
          userId: userId,
          username: username,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
          magnumCoins: 100, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
          stars: 50,
          level: 1,
          experience: 0,
          joinDate: new Date(),
          lastActivity: new Date(),
          miningStats: {
            totalMinedMC: 0,
            totalMinedStars: 0,
            seasonMinedMC: 0,
            seasonMinedStars: 0,
            passiveRewards: 0,
            activeClicks: 0,
            activeRewards: 0
          },
          miners: [
            { type: 'magnumCoins', level: 1, speed: 1, active: true },
            { type: 'stars', level: 1, speed: 1, active: true }
          ],
          achievements: [],
          referrals: [],
          referralBy: null,
          settings: {
            notifications: true,
            language: 'ru'
          }
        };

        await this.db.collection('users').insertOne(user);
        logger.info(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${userId} (${username})`);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await this.db.collection('users').updateOne(
          { userId: userId },
          { $set: { lastActivity: new Date() } }
        );
      }

      // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      cache.setUser(userId, user);

      const welcomeMessage = `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!*

üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*
‚Ä¢ Magnum Coins: ${user.magnumCoins}
‚Ä¢ Stars: ${user.stars}

üèÜ *–£—Ä–æ–≤–µ–Ω—å:* ${user.level} (${user.experience} XP)

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥', 'miner')],
        [Markup.button.callback('üéØ –ó–∞–¥–∞–Ω–∏—è', 'tasks')],
        [Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')],
        [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')],
        [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')],
        [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')]
      ]);

      await ctx.reply(welcomeMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start', { userId: ctx.from.id, error: error.message });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
  async handleHelp(ctx) {
    try {
      const helpMessage = `üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

üéÆ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
‚Ä¢ /mining - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–æ–º
‚Ä¢ /tasks - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ /referral - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

üí∞ *–í–∞–ª—é—Ç—ã:*
‚Ä¢ Magnum Coins (MC) - –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞
‚Ä¢ Stars - –ø—Ä–µ–º–∏—É–º –≤–∞–ª—é—Ç–∞

‚õèÔ∏è *–ú–∞–π–Ω–∏–Ω–≥:*
‚Ä¢ –ü–∞—Å—Å–∏–≤–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
‚Ä¢ –ê–ø–≥—Ä–µ–π–¥ –º–∞–π–Ω–µ—Ä–æ–≤

üéØ *–ó–∞–¥–∞–Ω–∏—è:*
‚Ä¢ RichAds –æ—Ñ—Ñ–µ—Ä—ã
‚Ä¢ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã

üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*
‚Ä¢ –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

üë• *–†–µ—Ñ–µ—Ä–∞–ª—ã:*
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;

      await ctx.reply(helpMessage, { parse_mode: 'Markdown' });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /help', { userId: ctx.from.id, error: error.message });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
  async handleBalance(ctx) {
    try {
      const userId = ctx.from.id;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î
      let user = cache.getUser(userId);
      if (!user) {
        user = await this.db.collection('users').findOne({ userId: userId });
        if (user) {
          cache.setUser(userId, user);
        }
      }

      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      const balanceMessage = `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*

ü™ô *Magnum Coins:* ${user.magnumCoins}
‚≠ê *Stars:* ${user.stars}

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞:*
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ MC: ${user.miningStats?.totalMinedMC || 0}
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ Stars: ${user.miningStats?.totalMinedStars || 0}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–∫–∏: ${user.miningStats?.activeClicks || 0}

üèÜ *–£—Ä–æ–≤–µ–Ω—å:* ${user.level} (${user.experience} XP)`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–º–µ–Ω –≤–∞–ª—é—Ç', 'exchange')],
        [Markup.button.callback('üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'detailed_stats')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
      ]);

      await ctx.reply(balanceMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /balance', { userId: ctx.from.id, error: error.message });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
  async handleAdmin(ctx) {
    try {
      const userId = ctx.from.id;
      
      if (!config.ADMIN_IDS.includes(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      const adminMessage = `üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'admin_stats')],
        [Markup.button.callback('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'admin_users')],
        [Markup.button.callback('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–æ–π', 'admin_economy')],
        [Markup.button.callback('üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏', 'admin_tasks')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
      ]);

      await ctx.reply(adminMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /admin', { userId: ctx.from.id, error: error.message });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
  async handleStats(ctx) {
    try {
      const userId = ctx.from.id;
      
      let user = cache.getUser(userId);
      if (!user) {
        user = await this.db.collection('users').findOne({ userId: userId });
        if (user) {
          cache.setUser(userId, user);
        }
      }

      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
      const totalUsers = await this.db.collection('users').countDocuments();
      const activeUsers = await this.db.collection('users').countDocuments({
        lastActivity: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
      });

      const statsMessage = `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*
‚Ä¢ ID: ${user.userId}
‚Ä¢ –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.joinDate.toLocaleDateString('ru-RU')}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${user.lastActivity.toLocaleDateString('ru-RU')}

üí∞ *–≠–∫–æ–Ω–æ–º–∏–∫–∞:*
‚Ä¢ Magnum Coins: ${user.magnumCoins}
‚Ä¢ Stars: ${user.stars}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${user.level}
‚Ä¢ –û–ø—ã—Ç: ${user.experience}

‚õèÔ∏è *–ú–∞–π–Ω–∏–Ω–≥:*
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ MC: ${user.miningStats?.totalMinedMC || 0}
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ Stars: ${user.miningStats?.totalMinedStars || 0}
‚Ä¢ –ü–∞—Å—Å–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã: ${user.miningStats?.passiveRewards || 0}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–∫–∏: ${user.miningStats?.activeClicks || 0}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã: ${user.miningStats?.activeRewards || 0}

üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.achievements?.length || 0}

üë• *–†–µ—Ñ–µ—Ä–∞–ª—ã:*
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.referrals?.length || 0}

üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: ${activeUsers}`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'detailed_stats')],
        [Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
      ]);

      await ctx.reply(statsMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /stats', { userId: ctx.from.id, error: error.message });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}

module.exports = CommandHandlers;

