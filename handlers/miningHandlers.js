const { Markup } = require('telegraf');
const config = require('../config/constants');
const logger = require('../utils/logger');
const cache = require('../utils/cache');
const MiningService = require('../services/miningService');

class MiningHandlers {
  constructor(db) {
    this.db = db;
    this.miningService = new MiningService(db);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞
  async showMinerMenu(ctx) {
    try {
      const userId = ctx.from.id;
      
      let user = cache.getUser(userId);
      if (!user) {
        user = await this.db.collection('users').findOne({ userId: userId });
        if (user) {
          cache.setUser(userId, user);
        }
      }

      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞
      const totalSpeed = this.miningService.calculateTotalSpeed(user);
      const totalSpeedSum = totalSpeed.magnumCoins + totalSpeed.stars;

      const miningMessage = `‚õèÔ∏è *–ú–∞–π–Ω–∏–Ω–≥*

üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*
‚Ä¢ Magnum Coins: ${user.magnumCoins}
‚Ä¢ Stars: ${user.stars}

‚ö° *–°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞:*
‚Ä¢ Magnum Coins: ${totalSpeed.magnumCoins}/–º–∏–Ω
‚Ä¢ Stars: ${totalSpeed.stars}/–º–∏–Ω
‚Ä¢ –û–±—â–∞—è: ${totalSpeedSum}/–º–∏–Ω

üîÑ *–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∏–Ω—É—Ç—É:*
‚Ä¢ Magnum Coins: ${(totalSpeed.magnumCoins * config.MINING_REWARD_INTERVAL).toFixed(2)}
‚Ä¢ Stars: ${(totalSpeed.stars * config.MINING_REWARD_INTERVAL).toFixed(2)}

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ MC: ${user.miningStats?.totalMinedMC || 0}
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ Stars: ${user.miningStats?.totalMinedStars || 0}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–∫–∏: ${user.miningStats?.activeClicks || 0}`;

      const keyboardButtons = [
        [Markup.button.callback('‚ö° –ö–ª–∏–∫', 'miner_active_click')],
        [Markup.button.callback('‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥ –º–∞–π–Ω–µ—Ä–æ–≤', 'miner_upgrades')],
        [Markup.button.callback('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'miner_stats')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
      ];

      const keyboard = Markup.inlineKeyboard(keyboardButtons);

      await ctx.reply(miningMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ showMinerMenu', { userId: ctx.from.id, error: error.message });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–∫ –º–∞–π–Ω–µ—Ä–∞
  async handleActiveClick(ctx) {
    try {
      const userId = ctx.from.id;
      
      const result = await this.miningService.processActiveMiningClick(userId);
      
      if (result.success) {
        await ctx.answerCbQuery(result.message);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        let user = await this.db.collection('users').findOne({ userId: userId });
        if (user) {
          cache.setUser(userId, user);
          
          const totalSpeed = this.miningService.calculateTotalSpeed(user);
          const totalSpeedSum = totalSpeed.magnumCoins + totalSpeed.stars;

          const updatedMessage = `‚õèÔ∏è *–ú–∞–π–Ω–∏–Ω–≥*

üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*
‚Ä¢ Magnum Coins: ${user.magnumCoins}
‚Ä¢ Stars: ${user.stars}

‚ö° *–°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞:*
‚Ä¢ Magnum Coins: ${totalSpeed.magnumCoins}/–º–∏–Ω
‚Ä¢ Stars: ${totalSpeed.stars}/–º–∏–Ω
‚Ä¢ –û–±—â–∞—è: ${totalSpeedSum}/–º–∏–Ω

üîÑ *–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∏–Ω—É—Ç—É:*
‚Ä¢ Magnum Coins: ${(totalSpeed.magnumCoins * config.MINING_REWARD_INTERVAL).toFixed(2)}
‚Ä¢ Stars: ${(totalSpeed.stars * config.MINING_REWARD_INTERVAL).toFixed(2)}

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ MC: ${user.miningStats?.totalMinedMC || 0}
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ Stars: ${user.miningStats?.totalMinedStars || 0}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–∫–∏: ${user.miningStats?.activeClicks || 0}

‚úÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–∫:*
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ MC: ${result.rewardMC}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ Stars: ${result.rewardStars}`;

          const keyboardButtons = [
            [Markup.button.callback('‚ö° –ö–ª–∏–∫', 'miner_active_click')],
            [Markup.button.callback('‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥ –º–∞–π–Ω–µ—Ä–æ–≤', 'miner_upgrades')],
            [Markup.button.callback('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'miner_stats')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
          ];

          const keyboard = Markup.inlineKeyboard(keyboardButtons);

          await ctx.editMessageText(updatedMessage, {
            parse_mode: 'Markdown',
            reply_markup: keyboard.reply_markup
          });
        }
      } else {
        await ctx.answerCbQuery(result.message);
      }

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ handleActiveClick', { userId: ctx.from.id, error: error.message });
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∞–ø–≥—Ä–µ–π–¥—ã –º–∞–π–Ω–µ—Ä–æ–≤
  async showMinerUpgrades(ctx) {
    try {
      const userId = ctx.from.id;
      
      let user = cache.getUser(userId);
      if (!user) {
        user = await this.db.collection('users').findOne({ userId: userId });
        if (user) {
          cache.setUser(userId, user);
        }
      }

      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      const minerConfigs = {
        magnumCoins: {
          name: 'Magnum Coins –ú–∞–π–Ω–µ—Ä',
          baseSpeed: 1,
          baseCost: 100,
          costMultiplier: 1.5
        },
        stars: {
          name: 'Stars –ú–∞–π–Ω–µ—Ä',
          baseSpeed: 1,
          baseCost: 200,
          costMultiplier: 2.0
        }
      };

      let upgradeMessage = `‚¨ÜÔ∏è *–ê–ø–≥—Ä–µ–π–¥ –º–∞–π–Ω–µ—Ä–æ–≤*

üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*
‚Ä¢ Magnum Coins: ${user.magnumCoins}
‚Ä¢ Stars: ${user.stars}

‚õèÔ∏è *–¢–µ–∫—É—â–∏–µ –º–∞–π–Ω–µ—Ä—ã:*\n`;

      const keyboardButtons = [
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
      ];

      user.miners.forEach(miner => {
        const config = minerConfigs[miner.type];
        const currentLevel = miner.level || 1;
        const currentSpeed = miner.speed || config.baseSpeed;
        const nextLevel = currentLevel + 1;
        const upgradeCost = Math.round(config.baseCost * Math.pow(config.costMultiplier, currentLevel - 1));
        
        upgradeMessage += `\n*${config.name} (–£—Ä–æ–≤–µ–Ω—å ${currentLevel})*
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: ${currentSpeed}/–º–∏–Ω
‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${nextLevel}
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞: ${upgradeCost} MC\n`;

        if (user.magnumCoins >= upgradeCost) {
          keyboardButtons.unshift([
            Markup.button.callback(`‚¨ÜÔ∏è ${config.name} (${upgradeCost} MC)`, `upgrade_miner_${miner.type}`)
          ]);
        }
      });

      const keyboard = Markup.inlineKeyboard(keyboardButtons);

      await ctx.reply(upgradeMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ showMinerUpgrades', { userId: ctx.from.id, error: error.message });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞
  async handleMinerUpgrade(ctx, minerType) {
    try {
      const userId = ctx.from.id;
      
      const result = await this.miningService.upgradeMiner(userId, minerType);
      
      if (result.success) {
        await ctx.answerCbQuery(result.message);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        cache.delete(`user_${userId}`);
        await this.showMinerUpgrades(ctx);
      } else {
        await ctx.answerCbQuery(result.message);
      }

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ handleMinerUpgrade', { userId: ctx.from.id, minerType, error: error.message });
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–π–Ω–∏–Ω–≥–∞
  async showMiningStats(ctx) {
    try {
      const userId = ctx.from.id;
      
      let user = cache.getUser(userId);
      if (!user) {
        user = await this.db.collection('users').findOne({ userId: userId });
        if (user) {
          cache.setUser(userId, user);
        }
      }

      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      const totalSpeed = this.miningService.calculateTotalSpeed(user);
      const totalSpeedSum = totalSpeed.magnumCoins + totalSpeed.stars;

      const statsMessage = `üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞*

‚õèÔ∏è *–¢–µ–∫—É—â–∏–µ –º–∞–π–Ω–µ—Ä—ã:*
${user.miners.map(miner => {
  const typeName = miner.type === 'magnumCoins' ? 'Magnum Coins' : 'Stars';
  return `‚Ä¢ ${typeName}: –£—Ä–æ–≤–µ–Ω—å ${miner.level}, –°–∫–æ—Ä–æ—Å—Ç—å ${miner.speed}/–º–∏–Ω`;
}).join('\n')}

‚ö° *–û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*
‚Ä¢ Magnum Coins: ${totalSpeed.magnumCoins}/–º–∏–Ω
‚Ä¢ Stars: ${totalSpeed.stars}/–º–∏–Ω
‚Ä¢ –û–±—â–∞—è: ${totalSpeedSum}/–º–∏–Ω

üí∞ *–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥:*
‚Ä¢ –ó–∞ –º–∏–Ω—É—Ç—É: MC ${(totalSpeed.magnumCoins * config.MINING_REWARD_INTERVAL).toFixed(2)}, Stars ${(totalSpeed.stars * config.MINING_REWARD_INTERVAL).toFixed(2)}
‚Ä¢ –ó–∞ —á–∞—Å: MC ${(totalSpeed.magnumCoins * config.MINING_REWARD_INTERVAL * 60).toFixed(2)}, Stars ${(totalSpeed.stars * config.MINING_REWARD_INTERVAL * 60).toFixed(2)}
‚Ä¢ –ó–∞ –¥–µ–Ω—å: MC ${(totalSpeed.magnumCoins * config.MINING_REWARD_INTERVAL * 60 * 24).toFixed(2)}, Stars ${(totalSpeed.stars * config.MINING_REWARD_INTERVAL * 60 * 24).toFixed(2)}

üìà *–ò—Å—Ç–æ—Ä–∏—è –º–∞–π–Ω–∏–Ω–≥–∞:*
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ MC: ${user.miningStats?.totalMinedMC || 0}
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ Stars: ${user.miningStats?.totalMinedStars || 0}
‚Ä¢ –ü–∞—Å—Å–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã: ${user.miningStats?.passiveRewards || 0}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–∫–∏: ${user.miningStats?.activeClicks || 0}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã: ${user.miningStats?.activeRewards || 0}
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ MC: ${user.miningStats?.seasonMinedMC || 0}
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ Stars: ${user.miningStats?.seasonMinedStars || 0}`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'export_mining_stats')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
      ]);

      await ctx.reply(statsMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ showMiningStats', { userId: ctx.from.id, error: error.message });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}

module.exports = MiningHandlers;

