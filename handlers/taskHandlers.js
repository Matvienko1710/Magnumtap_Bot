const { Markup } = require('telegraf');
const config = require('../config/constants');
const logger = require('../utils/logger');
const cache = require('../utils/cache');
const { getRichAdsOffers, verifyRichAdsOffer, sendRichAdsConversion } = require('../richads-integration');

class TaskHandlers {
  constructor(db) {
    this.db = db;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π
  async showTasksMenu(ctx) {
    try {
      const userId = ctx.from.id;
      
      let user = cache.getUser(userId);
      if (!user) {
        user = await this.db.collection('users').findOne({ userId: userId });
        if (user) {
          cache.setUser(userId, user);
        }
      }

      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      const tasksMessage = `üéØ *–ó–∞–¥–∞–Ω–∏—è*

üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*
‚Ä¢ Magnum Coins: ${user.magnumCoins}
‚Ä¢ Stars: ${user.stars}

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π:*
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${user.completedTasks || 0}
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –∑–∞–¥–∞–Ω–∏—è: ${user.taskEarnings || 0} Stars

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π:`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üéØ RichAds –æ—Ñ—Ñ–µ—Ä—ã', 'tasks_richads')],
        [Markup.button.callback('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã', 'tasks_daily')],
        [Markup.button.callback('üè∑Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã', 'tasks_promocodes')],
        [Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–∏–π', 'tasks_history')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
      ]);

      await ctx.reply(tasksMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ showTasksMenu', { userId: ctx.from.id, error: error.message });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å RichAds –æ—Ñ—Ñ–µ—Ä—ã
  async showRichAdsOffers(ctx) {
    try {
      const userId = ctx.from.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –æ—Ñ—Ñ–µ—Ä–æ–≤
      let offers = cache.getRichAdsOffers();
      if (!offers) {
        logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ RichAds –æ—Ñ—Ñ–µ—Ä–æ–≤...');
        offers = await getRichAdsOffers();
        if (offers && offers.length > 0) {
          cache.setRichAdsOffers(offers);
        }
      }

      if (!offers || offers.length === 0) {
        await ctx.reply('‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      const offersMessage = `üéØ *RichAds –æ—Ñ—Ñ–µ—Ä—ã*

–î–æ—Å—Ç—É–ø–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: ${offers.length}

–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:`;

      const keyboardButtons = [];
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—Ñ—Ñ–µ—Ä–æ–≤
      const displayOffers = offers.slice(0, 5);
      
      displayOffers.forEach((offer, index) => {
        const rewardText = offer.rewardType === 'stars' ? `${offer.reward} Stars` : `${offer.reward} MC`;
        keyboardButtons.push([
          Markup.button.callback(
            `${offer.title} (${rewardText})`,
            `richads_offer_${offer.id}`
          )
        ]);
      });

      if (offers.length > 5) {
        keyboardButtons.push([
          Markup.button.callback('‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–µ –æ—Ñ—Ñ–µ—Ä—ã', 'richads_next_page')
        ]);
      }

      keyboardButtons.push([
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'tasks_richads'),
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks')
      ]);

      const keyboard = Markup.inlineKeyboard(keyboardButtons);

      await ctx.reply(offersMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ showRichAdsOffers', { userId: ctx.from.id, error: error.message });
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ RichAds –æ—Ñ—Ñ–µ—Ä–∞
  async showRichAdsOfferDetails(ctx, offerId) {
    try {
      const userId = ctx.from.id;
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
      let offers = cache.getRichAdsOffers();
      if (!offers) {
        offers = await getRichAdsOffers();
        if (offers && offers.length > 0) {
          cache.setRichAdsOffers(offers);
        }
      }

      const offer = offers?.find(o => o.id === offerId);
      if (!offer) {
        await ctx.reply('‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const rewardText = offer.rewardType === 'stars' ? `${offer.reward} Stars` : `${offer.reward} MC`;
      
      let message = `üéØ *${offer.title}*

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*
${offer.description}

üí∞ *–ù–∞–≥—Ä–∞–¥–∞:* ${rewardText}
‚≠ê *–°–ª–æ–∂–Ω–æ—Å—Ç—å:* ${offer.difficulty}
‚è±Ô∏è *–í—Ä–µ–º—è:* ${offer.estimatedTime}
üåç *–°—Ç—Ä–∞–Ω–∞:* ${offer.country}

üìã *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*`;

      if (offer.requirements && Array.isArray(offer.requirements)) {
        offer.requirements.forEach(req => {
          message += `\n‚Ä¢ ${req}`;
        });
      } else if (offer.requirements && typeof offer.requirements === 'string') {
        message += `\n‚Ä¢ ${offer.requirements}`;
      } else {
        message += `\n‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ`;
        message += `\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç`;
      }

      const keyboardButtons = [
        [
          Markup.button.url('üì± –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', offer.url),
          Markup.button.callback('üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', `send_screenshot_${offerId}`)
        ]
      ];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ñ—Ñ–µ—Ä—ã
      const currentIndex = offers.findIndex(o => o.id === offerId);
      const hasNextTask = currentIndex < offers.length - 1;
      
      if (hasNextTask) {
        keyboardButtons.push([
          Markup.button.callback('‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', 'next_richads_offer')
        ]);
      }

      keyboardButtons.push([
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks_richads')
      ]);

      const keyboard = Markup.inlineKeyboard(keyboardButtons);

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ showRichAdsOfferDetails', { userId: ctx.from.id, offerId, error: error.message });
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ—Ñ—Ñ–µ—Ä–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
  async handleScreenshotSubmission(ctx, offerId) {
    try {
      const userId = ctx.from.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (!ctx.message?.photo) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ñ—Ñ–µ—Ä–µ
      let offers = cache.getRichAdsOffers();
      if (!offers) {
        offers = await getRichAdsOffers();
      }

      const offer = offers?.find(o => o.id === offerId);
      if (!offer) {
        await ctx.reply('‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Ñ—Ñ–µ—Ä
      const verificationResult = await verifyRichAdsOffer(offerId, userId);
      
      if (verificationResult.success && verificationResult.verified) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é
        const conversionResult = await sendRichAdsConversion(offerId, userId, 1);
        
        if (conversionResult.success) {
          // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const reward = offer.reward;
          const rewardType = offer.rewardType;
          
          const updateData = {};
          if (rewardType === 'stars') {
            updateData.stars = reward;
            updateData.taskEarnings = (user.taskEarnings || 0) + reward;
          } else {
            updateData.magnumCoins = reward;
          }
          
          updateData.completedTasks = (user.completedTasks || 0) + 1;
          updateData.lastTaskCompletion = new Date();

          await this.db.collection('users').updateOne(
            { userId: userId },
            { $inc: updateData }
          );

          // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          cache.delete(`user_${userId}`);

          const rewardText = rewardType === 'stars' ? `${reward} Stars` : `${reward} MC`;
          
          await ctx.reply(`‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!*

üéâ –ù–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞: ${rewardText}

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è!`);

          logger.userAction(userId, 'task_completed', {
            offerId,
            reward,
            rewardType,
            conversionId: conversionResult.conversion_id
          });

        } else {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      } else {
        await ctx.reply('‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
      }

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ handleScreenshotSubmission', { userId: ctx.from.id, offerId, error: error.message });
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã
  async showDailyBonuses(ctx) {
    try {
      const userId = ctx.from.id;
      
      let user = cache.getUser(userId);
      if (!user) {
        user = await this.db.collection('users').findOne({ userId: userId });
        if (user) {
          cache.setUser(userId, user);
        }
      }

      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
      const lastDailyBonus = user.lastDailyBonus ? new Date(user.lastDailyBonus) : null;
      const now = new Date();
      const canClaimDaily = !lastDailyBonus || 
        (now.getTime() - lastDailyBonus.getTime()) >= 24 * 60 * 60 * 1000;

      const dailyMessage = `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã*

üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*
‚Ä¢ Magnum Coins: ${user.magnumCoins}
‚Ä¢ Stars: ${user.stars}

üéØ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:*
‚Ä¢ Magnum Coins: 50
‚Ä¢ Stars: 25

${canClaimDaily ? '‚úÖ –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω!' : '‚è∞ –ë–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞'}

üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–Ω—É—Å:* ${lastDailyBonus ? lastDailyBonus.toLocaleDateString('ru-RU') : '–ù–µ –ø–æ–ª—É—á–µ–Ω'}`;

      const keyboardButtons = [];
      
      if (canClaimDaily) {
        keyboardButtons.push([
          Markup.button.callback('üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å', 'claim_daily_bonus')
        ]);
      }

      keyboardButtons.push([
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks')
      ]);

      const keyboard = Markup.inlineKeyboard(keyboardButtons);

      await ctx.reply(dailyMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ showDailyBonuses', { userId: ctx.from.id, error: error.message });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
  async claimDailyBonus(ctx) {
    try {
      const userId = ctx.from.id;
      
      let user = await this.db.collection('users').findOne({ userId: userId });
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
      const lastDailyBonus = user.lastDailyBonus ? new Date(user.lastDailyBonus) : null;
      const now = new Date();
      const canClaimDaily = !lastDailyBonus || 
        (now.getTime() - lastDailyBonus.getTime()) >= 24 * 60 * 60 * 1000;

      if (!canClaimDaily) {
        await ctx.answerCbQuery('‚è∞ –ë–æ–Ω—É—Å –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }

      // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
      const bonusMC = 50;
      const bonusStars = 25;

      await this.db.collection('users').updateOne(
        { userId: userId },
        {
          $inc: {
            magnumCoins: bonusMC,
            stars: bonusStars
          },
          $set: {
            lastDailyBonus: now
          }
        }
      );

      // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      cache.delete(`user_${userId}`);

      await ctx.answerCbQuery(`‚úÖ –ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω! +${bonusMC} MC, +${bonusStars} Stars`);

      logger.userAction(userId, 'daily_bonus_claimed', {
        bonusMC,
        bonusStars
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.showDailyBonuses(ctx);

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ claimDailyBonus', { userId: ctx.from.id, error: error.message });
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞');
    }
  }
}

module.exports = TaskHandlers;

