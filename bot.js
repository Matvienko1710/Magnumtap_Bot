require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { MongoClient } = require('mongodb');

if (!process.env.BOT_TOKEN) throw new Error('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN!');
if (!process.env.MONGODB_URI) throw new Error('–ù–µ –∑–∞–¥–∞–Ω MONGODB_URI!');

const bot = new Telegraf(process.env.BOT_TOKEN);
const mongo = new MongoClient(process.env.MONGODB_URI);
let users, promocodes;

async function connectDB() {
  await mongo.connect();
  const db = mongo.db();
  users = db.collection('users');
  promocodes = db.collection('promocodes');
  tasks = db.collection('tasks'); // –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–∞–¥–∞–Ω–∏–π
}

function now() { return Math.floor(Date.now() / 1000); }

async function getUser(id) {
  let user = await users.findOne({ id });
  if (!user) {
    user = { id, stars: 0, lastFarm: 0, lastBonus: 0, invited: 0 };
    await users.insertOne(user);
  }
  return user;
}

const ADMIN_IDS = (process.env.ADMIN_IDS || '').split(',').map(id => id.trim()).filter(Boolean);
function isAdmin(userId) { return ADMIN_IDS.includes(String(userId)); }

function getWelcomeText(balance, invited) {
  return `
üèÜ *–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í MAGNUM TAP* üèÜ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíé *–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–ê–Ø –ü–õ–ê–¢–§–û–†–ú–ê* üíé
üåü –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞
üéØ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ VIP-–∑–∞–¥–∞–Ω–∏—è  
üëë –°—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å —ç–ª–∏—Ç–æ–π MagnumTap

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* \`${balance} ‚≠ê\` –∑–≤—ë–∑–¥
üë• *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:* \`${invited}\` VIP-–¥—Ä—É–∑–µ–π
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üî• *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞–Ω—å—Ç–µ –ª–µ–≥–µ–Ω–¥–æ–π!* üî•`;
}

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å VIP –¥–∏–∑–∞–π–Ω–æ–º
const dailyTasks = [
  { id: 'login', name: 'üëë VIP –í–∏–∑–∏—Ç', reward: 5, description: 'üåü –ó–∞–π–¥–∏—Ç–µ –≤ —ç–ª–∏—Ç–Ω—ã–π –±–æ—Ç!' },
  { id: 'bonus', name: 'üíé –ü—Ä–µ–º–∏—É–º –ë–æ–Ω—É—Å', reward: 10, description: 'üéÅ –ü–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –±–æ–Ω—É—Å' },
  { id: 'invite', name: 'üî• –≠–ª–∏—Ç–Ω–æ–µ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', reward: 20, description: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ VIP-–¥—Ä—É–≥–∞' }
];

// –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞ —Å VIP –¥–∏–∑–∞–π–Ω–æ–º
const sponsorTasks = [
  { id: 'channel1', name: 'üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –ü–æ–¥–ø–∏—Å–∫–∞', reward: 15, description: 'üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª', url: 'https://t.me/example' },
  { id: 'website', name: 'üåü –ü—Ä–µ–º–∏—É–º –í–∏–∑–∏—Ç', reward: 25, description: 'üîó –ü–æ—Å–µ—Ç–∏—Ç–µ VIP-—Å–∞–π—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞', url: 'https://example.com' }
];

async function getUserTasks(userId, isDaily = true) {
  const today = new Date().toDateString();
  let userTasks = await tasks.findOne({ 
    userId, 
    date: isDaily ? today : 'sponsor',
    type: isDaily ? 'daily' : 'sponsor'
  });
  
  if (!userTasks) {
    const taskList = isDaily ? dailyTasks : sponsorTasks;
    userTasks = {
      userId,
      date: isDaily ? today : 'sponsor',
      type: isDaily ? 'daily' : 'sponsor',
      completed: {},
      claimed: {}
    };
    taskList.forEach(task => {
      userTasks.completed[task.id] = false;
      userTasks.claimed[task.id] = false;
    });
    await tasks.insertOne(userTasks);
  }
  return userTasks;
}

function getMainMenu(ctx, balance, invited) {
  const adminRow = isAdmin(ctx.from.id) ? [[Markup.button.callback('‚öôÔ∏è –ê–î–ú–ò–ù-–¶–ï–ù–¢–†', 'admin_panel')]] : [];
  return {
    text: getWelcomeText(balance, invited),
    extra: {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('‚≠ê –§–ê–†–ú –ó–í–Å–ó–î', 'farm'), Markup.button.callback('üéÅ VIP –ë–û–ù–£–°', 'bonus')],
        [Markup.button.callback('üëë –ú–û–ô –ü–†–û–§–ò–õ–¨', 'profile'), Markup.button.callback('üèÜ –≠–õ–ò–¢–ù–´–ô –¢–û–ü', 'top')],
        [Markup.button.callback('üíé –ü–†–ò–ì–õ–ê–°–ò–¢–¨ VIP', 'invite'), Markup.button.callback('üé´ –ü–†–û–ú–û–ö–û–î', 'promo')],
        [Markup.button.callback('üìã –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ö–í–ï–°–¢–´', 'daily_tasks'), Markup.button.callback('üéØ –°–ü–û–ù–°–û–† –ó–ê–î–ê–ù–ò–Ø', 'sponsor_tasks')],
        ...adminRow
      ])
    }
  };
}

bot.start(async (ctx) => {
  const user = await getUser(ctx.from.id);
  const balance = user.stars || 0;
  const invited = user.invited || 0;
  const menu = getMainMenu(ctx, balance, invited);
  await ctx.reply(menu.text, menu.extra);
});

bot.action('main_menu', async (ctx) => {
  try { await ctx.deleteMessage(); } catch (e) {}
  const user = await getUser(ctx.from.id);
  const balance = user.stars || 0;
  const invited = user.invited || 0;
  const adminRow = isAdmin(ctx.from.id) ? [[Markup.button.callback('‚öôÔ∏è –ê–î–ú–ò–ù-–¶–ï–ù–¢–†', 'admin_panel')]] : [];
  ctx.reply(
    getWelcomeText(balance, invited),
    {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('‚≠ê –§–ê–†–ú –ó–í–Å–ó–î', 'farm'), Markup.button.callback('üéÅ VIP –ë–û–ù–£–°', 'bonus')],
        [Markup.button.callback('üëë –ú–û–ô –ü–†–û–§–ò–õ–¨', 'profile'), Markup.button.callback('üèÜ –≠–õ–ò–¢–ù–´–ô –¢–û–ü', 'top')],
        [Markup.button.callback('üíé –ü–†–ò–ì–õ–ê–°–ò–¢–¨ VIP', 'invite'), Markup.button.callback('üé´ –ü–†–û–ú–û–ö–û–î', 'promo')],
        [Markup.button.callback('üìã –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ö–í–ï–°–¢–´', 'daily_tasks'), Markup.button.callback('üéØ –°–ü–û–ù–°–û–† –ó–ê–î–ê–ù–ò–Ø', 'sponsor_tasks')],
        ...adminRow
      ])
    }
  );
});

bot.action('profile', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const profileText = `
üëë *–í–ê–® VIP –ü–†–û–§–ò–õ–¨* üëë
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíé *–°—Ç–∞—Ç—É—Å:* –≠–ª–∏—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
‚≠ê *–ë–∞–ª–∞–Ω—Å:* \`${user.stars || 0}\` –∑–≤—ë–∑–¥
üë• *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ VIP:* \`${user.invited || 0}\` –¥—Ä—É–∑–µ–π
üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* ${new Date(user.created * 1000).toLocaleDateString()}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî• *–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –ª–µ–≥–µ–Ω–¥–æ–π!*`;

  ctx.editMessageText(profileText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('‚ùì FAQ & –ü–û–ú–û–©–¨', 'faq')],
      [Markup.button.callback('üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ', 'main_menu')]
    ])
  });
});

bot.action('top', async (ctx) => {
  const topUsers = await users.find({}).sort({ stars: -1 }).limit(10).toArray();
  let topText = `
üèÜ *–≠–õ–ò–¢–ù–´–ô –†–ï–ô–¢–ò–ù–ì* üèÜ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíé *–¢–û–ü-10 VIP –ò–ì–†–û–ö–û–í* üíé

`;

  topUsers.forEach((user, index) => {
    const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üî∏';
    const username = user.username ? `@${user.username}` : `ID${user.id}`;
    topText += `${medal} \`${index + 1}.\` ${username} ‚Äî \`${user.stars || 0}\` ‚≠ê\n`;
  });

  topText += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüî• *–°—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é —ç–ª–∏—Ç—ã!*`;

  ctx.editMessageText(topText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ', 'main_menu')]])
  });
});

bot.action('invite', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const refLink = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
  const inviteText = `
üíé *VIP –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø* üíé
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üî• *–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ —ç–ª–∏—Ç–Ω—ã–π –∫–ª—É–±!*
üåü –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: \`+5\` –∑–≤—ë–∑–¥
üëë –í–∞—à–∏ –¥—Ä—É–∑—å—è –ø–æ–ª—É—á–∞—é—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å

üîó *–í–∞—à–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞:*
\`${refLink}\`

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë• *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ VIP-–¥—Ä—É–∑–µ–π:* \`${user.invited || 0}\`
üí∞ *–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:* \`${(user.invited || 0) * 5}\` ‚≠ê`;

  ctx.editMessageText(inviteText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ', 'main_menu')]])
  });
});

// –ü—Ä–æ–º–æ–∫–æ–¥—ã (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã ‚Äî —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫)
const promoCodes = { 'MAGNUM10': 10, 'STAR50': 50 };
const userPromoUsed = {};
bot.action('promo', async (ctx) => {
  await ctx.reply('üé´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:', { reply_markup: { force_reply: true } });
});
bot.on('text', async (ctx) => {
  if (ctx.message.reply_to_message && ctx.message.reply_to_message.text.includes('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥')) {
    const code = ctx.message.text.trim().toUpperCase();
    const userId = ctx.from.id;
    if (userPromoUsed[userId + ':' + code]) {
      return ctx.reply('‚ùó –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.', Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
    }
    if (promoCodes[code]) {
      await users.updateOne({ id: userId }, { $inc: { stars: promoCodes[code] } });
      userPromoUsed[userId + ':' + code] = true;
      return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${promoCodes[code]} –∑–≤—ë–∑–¥.`, Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
    } else {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.', Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
    }
  }
});

bot.action('admin_panel', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', { show_alert: true });
  const adminText = `
‚öôÔ∏è *–¶–ï–ù–¢–† –£–ü–†–ê–í–õ–ï–ù–ò–Ø VIP* ‚öôÔ∏è
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üëë *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!*
üî• –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —ç–ª–∏—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíé *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*`;

  ctx.editMessageText(adminText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üì¢ VIP –†–ê–°–°–´–õ–ö–ê', 'admin_broadcast')],
      [Markup.button.callback('üé´ –°–û–ó–î–ê–¢–¨ –ü–†–û–ú–û–ö–û–î', 'admin_addpromo')],
      [Markup.button.callback('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê', 'admin_stats')],
      [Markup.button.callback('‚≠ê –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–í–Å–ó–î–ê–ú–ò', 'admin_stars')],
      [Markup.button.callback('üë• –†–ï–§–ï–†–ê–õ–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø', 'admin_refs')],
      [Markup.button.callback('üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ', 'main_menu')]
    ])
  });
});

bot.action('admin_cancel', async (ctx) => {
  try { await ctx.deleteMessage(); } catch (e) {}
  ctx.answerCbQuery();
  const adminText = `
‚öôÔ∏è *–¶–ï–ù–¢–† –£–ü–†–ê–í–õ–ï–ù–ò–Ø VIP* ‚öôÔ∏è
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üëë *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!*
üî• –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —ç–ª–∏—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíé *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*`;

  ctx.editMessageText(adminText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üì¢ VIP –†–ê–°–°–´–õ–ö–ê', 'admin_broadcast')],
      [Markup.button.callback('üé´ –°–û–ó–î–ê–¢–¨ –ü–†–û–ú–û–ö–û–î', 'admin_addpromo')],
      [Markup.button.callback('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê', 'admin_stats')],
      [Markup.button.callback('‚≠ê –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–í–Å–ó–î–ê–ú–ò', 'admin_stars')],
      [Markup.button.callback('üë• –†–ï–§–ï–†–ê–õ–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø', 'admin_refs')],
      [Markup.button.callback('üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ', 'main_menu')]
    ])
  );
});

// –†–∞—Å—Å—ã–ª–∫–∞
bot.action('admin_broadcast', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;
  await adminForceReply(ctx, 'üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
});

// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
bot.action('admin_addpromo', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;
  await adminForceReply(ctx, '‚ûï –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: NEWCODE 25):');
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.action('admin_stats', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;
  const totalUsers = await users.countDocuments();
  const totalStars = await users.aggregate([{ $group: { _id: null, sum: { $sum: "$stars" } } }]).toArray();
  const totalInvited = await users.aggregate([{ $group: { _id: null, sum: { $sum: "$invited" } } }]).toArray();
  ctx.editMessageText(
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n` +
    `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
    `üí´ –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars[0]?.sum || 0}\n` +
    `ü§ù –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${totalInvited[0]?.sum || 0}`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu'), Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ])
  );
});

// –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã
bot.action('admin_stars', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;
  await adminForceReply(ctx, '‚≠ê –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 10 –∏–ª–∏ 123456789 -5):');
});

// –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('admin_refs', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;
  await adminForceReply(ctx, 'üë• –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:');
});

// –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ force_reply –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ –æ—Ç–º–µ–Ω–µ
function adminForceReply(ctx, text) {
  return ctx.reply(text, {
    reply_markup: {
      force_reply: true,
      inline_keyboard: [[
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_cancel' }
      ]]
    }
  });
}

bot.on('text', async (ctx) => {
  if (!isAdmin(ctx.from.id) || !ctx.message.reply_to_message) return;
  const replyText = ctx.message.reply_to_message.text;
  const adminButtons = Markup.inlineKeyboard([
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu'), Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'admin_panel')]
  ]);
  // –†–∞—Å—Å—ã–ª–∫–∞
  if (replyText.includes('—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')) {
    const text = ctx.message.text;
    const allUsers = await users.find().toArray();
    let sent = 0;
    for (const u of allUsers) {
      try { await ctx.telegram.sendMessage(u.id, `üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n${text}`); sent++; } catch {}
    }
    return ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`, adminButtons);
  }
  // –ü—Ä–æ–º–æ–∫–æ–¥
  if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥')) {
    const [code, stars] = ctx.message.text.trim().split(/\s+/);
    if (!code || isNaN(Number(stars))) return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: –ö–û–î 10', adminButtons);
    promoCodes[code.toUpperCase()] = Number(stars);
    return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ ${code.toUpperCase()} –Ω–∞ ${stars} –∑–≤—ë–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω.`, adminButtons);
  }
  // –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã
  if (replyText.includes('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥')) {
    const [id, stars] = ctx.message.text.trim().split(/\s+/);
    if (!id || isNaN(Number(stars))) return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: ID 10', adminButtons);
    await users.updateOne({ id: Number(id) }, { $inc: { stars: Number(stars) } });
    return ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${id} –≤—ã–¥–∞–Ω–æ/–∑–∞–±—Ä–∞–Ω–æ ${stars} –∑–≤—ë–∑–¥.`, adminButtons);
  }
  // –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (replyText.includes('–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')) {
    const id = ctx.message.text.trim();
    const refs = await users.find({ invitedBy: id }).toArray();
    if (!refs.length) return ctx.reply('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.', adminButtons);
    let msg = `üë• –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:\n\n`;
    refs.forEach((u, i) => { msg += `${i + 1}. ${u.id}\n`; });
    return ctx.reply(msg, adminButtons);
  }
});

bot.action('daily_tasks', async (ctx) => {
  const userTasks = await getUserTasks(ctx.from.id, true);
  let msg = `
üìã *–ï–ñ–ï–î–ù–ï–í–ù–´–ï VIP –ö–í–ï–°–¢–´* üìã
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üî• *–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!*

`;
  
  dailyTasks.forEach(task => {
    const completed = userTasks.completed[task.id];
    const claimed = userTasks.claimed[task.id];
    const status = claimed ? '‚úÖ –ü–û–õ–£–ß–ï–ù–û' : completed ? 'üéÅ –ó–ê–ë–†–ê–¢–¨' : '‚è≥ –í–´–ü–û–õ–ù–ò–¢–¨';
    msg += `${status} ${task.name} \`+${task.reward}\` ‚≠ê\n${task.description}\n\n`;
  });
  
  const buttons = [];
  dailyTasks.forEach(task => {
    const completed = userTasks.completed[task.id];
    const claimed = userTasks.claimed[task.id];
    if (completed && !claimed) {
      buttons.push([Markup.button.callback(`üéÅ ${task.name}`, `claim_daily_${task.id}`)]);
    }
  });
  
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüíé *–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ –∫–≤–µ—Å—Ç–∞–º–∏!*`;
  buttons.push([Markup.button.callback('üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ', 'main_menu')]);
  
  ctx.editMessageText(msg, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard(buttons)
  });
});

bot.action('sponsor_tasks', async (ctx) => {
  const userTasks = await getUserTasks(ctx.from.id, false);
  let msg = `
üéØ *–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ï –°–ü–û–ù–°–û–† –ó–ê–î–ê–ù–ò–Ø* üéØ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíé *–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–µ–º–∏—É–º –Ω–∞–≥—Ä–∞–¥–∞–º–∏!*

`;
  
  const buttons = [];
  sponsorTasks.forEach(task => {
    const completed = userTasks.completed[task.id];
    const claimed = userTasks.claimed[task.id];
    const status = claimed ? '‚úÖ –ü–û–õ–£–ß–ï–ù–û' : completed ? 'üéÅ –ó–ê–ë–†–ê–¢–¨' : '‚è≥ –í–´–ü–û–õ–ù–ò–¢–¨';
    msg += `${status} ${task.name} \`+${task.reward}\` ‚≠ê\n${task.description}\n\n`;
    
    if (!completed) {
      buttons.push([
        Markup.button.url('üîó –ü–ï–†–ï–ô–¢–ò', task.url),
        Markup.button.callback('‚úÖ –ü–†–û–í–ï–†–ò–¢–¨', `check_sponsor_${task.id}`)
      ]);
    } else if (!claimed) {
      buttons.push([Markup.button.callback(`üéÅ ${task.name}`, `claim_sponsor_${task.id}`)]);
    }
  });
  
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüî• *–ë–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!*`;
  buttons.push([Markup.button.callback('üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ', 'main_menu')]);
  
  ctx.editMessageText(msg, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard(buttons)
  });
});

bot.action('faq', async (ctx) => {
  const faqText = `
‚ùì *VIP –ü–û–ú–û–©–¨ –ò FAQ* ‚ùì
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üî• *–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã?*
‚≠ê –§–∞—Ä–º–∏—Ç–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
üéÅ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
üìã –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–≤–µ—Å—Ç—ã
üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π

üíé *–ß—Ç–æ —Ç–∞–∫–æ–µ VIP —Å—Ç–∞—Ç—É—Å?*
–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ MagnumTap ‚Äî —ç–ª–∏—Ç–∞!

üéØ *–ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è?*
–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º

üé´ *–ì–¥–µ –≤–∑—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã?*
–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –∞–Ω–æ–Ω—Å–∞–º–∏ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üëë *–°—Ç–∞–Ω—å—Ç–µ –ª–µ–≥–µ–Ω–¥–æ–π MagnumTap!*`;

  ctx.editMessageText(faqText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ', 'main_menu')]])
  });
});

// –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∞ –∏ –±–æ–Ω—É—Å–∞
bot.action('farm', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const canFarm = !user.lastFarm || (now() - user.lastFarm) >= 60;
  
  if (canFarm) {
    await users.updateOne({ id: ctx.from.id }, { 
      $inc: { stars: 1 }, 
      $set: { lastFarm: now() } 
    });
    ctx.answerCbQuery('üíé +1 VIP –∑–≤–µ–∑–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! ‚≠ê');
  } else {
    const timeLeft = 60 - (now() - user.lastFarm);
    ctx.answerCbQuery(`üî• –§–∞—Ä–º —á–µ—Ä–µ–∑ ${timeLeft} —Å–µ–∫. –≠–ª–∏—Ç–∞ –∂–¥—ë—Ç!`);
  }
});

bot.action('bonus', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const today = Math.floor(Date.now() / (1000 * 60 * 60 * 24));
  const canBonus = !user.lastBonus || user.lastBonus < today;
  
  if (canBonus) {
    await users.updateOne({ id: ctx.from.id }, { 
      $inc: { stars: 10 }, 
      $set: { lastBonus: today } 
    });
    ctx.answerCbQuery('üéÅ VIP –±–æ–Ω—É—Å +10 –∑–≤—ë–∑–¥! –≠–ª–∏—Ç–Ω–æ! üíé');
  } else {
    const hoursLeft = 24 - Math.floor((Date.now() % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    ctx.answerCbQuery(`üëë –°–ª–µ–¥—É—é—â–∏–π VIP –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${hoursLeft}—á!`);
  }
});

// –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
bot.action(/^claim_daily_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const task = dailyTasks.find(t => t.id === taskId);
  if (!task) return;
  
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'daily' },
    { $set: { [`claimed.${taskId}`]: true } }
  );
  await users.updateOne({ id: ctx.from.id }, { $inc: { stars: task.reward } });
  
  ctx.answerCbQuery(`üéÅ VIP –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! +${task.reward} ‚≠ê`);
  ctx.action('daily_tasks')(ctx);
});

bot.action(/^claim_sponsor_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const task = sponsorTasks.find(t => t.id === taskId);
  if (!task) return;
  
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'sponsor' },
    { $set: { [`claimed.${taskId}`]: true } }
  );
  await users.updateOne({ id: ctx.from.id }, { $inc: { stars: task.reward } });
  
  ctx.answerCbQuery(`üíé –ü—Ä–µ–º–∏—É–º –Ω–∞–≥—Ä–∞–¥–∞! +${task.reward} ‚≠ê`);
  ctx.action('sponsor_tasks')(ctx);
});

bot.action(/^check_sponsor_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'sponsor' },
    { $set: { [`completed.${taskId}`]: true } }
  );
  
  ctx.answerCbQuery('‚úÖ VIP –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! üî•');
  ctx.action('sponsor_tasks')(ctx);
});

connectDB().then(() => {
  bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));