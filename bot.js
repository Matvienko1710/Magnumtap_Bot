require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { MongoClient } = require('mongodb');

if (!process.env.BOT_TOKEN) throw new Error('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN!');
if (!process.env.MONGODB_URI) throw new Error('–ù–µ –∑–∞–¥–∞–Ω MONGODB_URI!');

const bot = new Telegraf(process.env.BOT_TOKEN);
const mongo = new MongoClient(process.env.MONGODB_URI);
let users, promocodes;

async function connectDB() {
  await mongo.connect();
  const db = mongo.db();
  users = db.collection('users');
  promocodes = db.collection('promocodes');
  tasks = db.collection('tasks'); // –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–∞–¥–∞–Ω–∏–π
}

function now() { return Math.floor(Date.now() / 1000); }

async function getUser(id) {
  let user = await users.findOne({ id });
  if (!user) {
    user = { id, stars: 0, lastFarm: 0, lastBonus: 0, invited: 0 };
    await users.insertOne(user);
  }
  return user;
}

const ADMIN_IDS = (process.env.ADMIN_IDS || '').split(',').map(id => id.trim()).filter(Boolean);
function isAdmin(userId) { return ADMIN_IDS.includes(String(userId)); }

function getWelcomeText(balance, invited) {
  return (
    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ *MagnumTapBot* ‚Äî –º–µ—Å—Ç–µ, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∫–ª–∞—Å—Å–Ω—ã–µ –±–æ–Ω—É—Å—ã, –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π! ‚ú®\n\n" +
    "–í–æ—Ç —á—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:\n\n" +
    "‚≠ê –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–≤—ë–∑–¥ ‚Äî –≤—ã–ø–æ–ª–Ω—è–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, —Å–æ–±–∏—Ä–∞–π –Ω–∞–≥—Ä–∞–¥—ã –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π –±–∞–ª–∞–Ω—Å.  \n" +
    "üë´ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –±–æ–Ω—É—Å—ã, –∞ –≤–º–µ—Å—Ç–µ –∏–≥—Ä–∞—Ç—å –≤–µ—Å–µ–ª–µ–µ!  \n" +
    "üéÅ –ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏ ‚Äî –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.  \n" +
    "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—à—å, —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –∑–≤—ë–∑–¥ –∏ —Å–∫–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π —É–∂–µ —Å —Ç–æ–±–æ–π.\n\n" +
    `üéØ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å: *${balance} –∑–≤–µ–∑–¥—ã*\n` +
    `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: *${invited}*\n\n` +
    "–í—ã–±–∏—Ä–∞–π –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ –±–æ–ª—å—à–∏–º –Ω–∞–≥—Ä–∞–¥–∞–º –≤–º–µ—Å—Ç–µ —Å *MagnumTapBot*! üöÄ\n\n" +
    "–ü–æ–º–Ω–∏: —á–µ–º –∞–∫—Ç–∏–≤–Ω–µ–µ —Ç—ã ‚Äî —Ç–µ–º –≤—ã—à–µ —Ç–≤–æ–∏ –∑–≤—ë–∑–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üåü"
  );
}

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
const dailyTasks = [
  { id: 'login', name: '–ó–∞–π—Ç–∏ –≤ –±–æ—Ç–∞', reward: 5, description: '–ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!' },
  { id: 'bonus', name: '–ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –±–æ–Ω—É—Å', reward: 10, description: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ë–æ–Ω—É—Å"' },
  { id: 'invite', name: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', reward: 20, description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞' }
];

// –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞
const sponsorTasks = [
  { id: 'channel1', name: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @example', reward: 15, description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø–∞—Ä—Ç–Ω—ë—Ä–∞', url: 'https://t.me/example' },
  { id: 'website', name: '–ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç', reward: 25, description: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞', url: 'https://example.com' }
];

async function getUserTasks(userId, isDaily = true) {
  const today = new Date().toDateString();
  let userTasks = await tasks.findOne({ 
    userId, 
    date: isDaily ? today : 'sponsor',
    type: isDaily ? 'daily' : 'sponsor'
  });
  
  if (!userTasks) {
    const taskList = isDaily ? dailyTasks : sponsorTasks;
    userTasks = {
      userId,
      date: isDaily ? today : 'sponsor',
      type: isDaily ? 'daily' : 'sponsor',
      completed: {},
      claimed: {}
    };
    taskList.forEach(task => {
      userTasks.completed[task.id] = false;
      userTasks.claimed[task.id] = false;
    });
    await tasks.insertOne(userTasks);
  }
  return userTasks;
}

function getMainMenu(ctx, balance, invited) {
  const adminRow = isAdmin(ctx.from.id) ? [[Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]] : [];
  return {
    text: getWelcomeText(balance, invited),
    extra: {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üåü –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üèÜ –¢–æ–ø', 'top')],
        [Markup.button.callback('ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'invite'), Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'promo')],
        [Markup.button.callback('üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', 'daily_tasks'), Markup.button.callback('üéØ –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞', 'sponsor_tasks')],
        ...adminRow
      ])
    }
  };
}

bot.start(async (ctx) => {
  const user = await getUser(ctx.from.id);
  const balance = user.stars || 0;
  const invited = user.invited || 0;
  const menu = getMainMenu(ctx, balance, invited);
  await ctx.reply(menu.text, menu.extra);
});

bot.action('main_menu', async (ctx) => {
  try { await ctx.deleteMessage(); } catch (e) {}
  const user = await getUser(ctx.from.id);
  const balance = user.stars || 0;
  const invited = user.invited || 0;
  const adminRow = isAdmin(ctx.from.id) ? [[Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]] : [];
  ctx.reply(
    getWelcomeText(balance, invited),
    {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üåü –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üèÜ –¢–æ–ø', 'top')],
        [Markup.button.callback('ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'invite'), Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'promo')],
        [Markup.button.callback('üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', 'daily_tasks'), Markup.button.callback('üéØ –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞', 'sponsor_tasks')],
        ...adminRow
      ])
    }
  );
});

bot.action('farm', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const t = now();
  if (t - user.lastFarm < 60) {
    const wait = 60 - (t - user.lastFarm);
    return ctx.answerCbQuery(`‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞: ${wait} —Å–µ–∫.`, { show_alert: true });
  }
  await users.updateOne({ id: ctx.from.id }, { $set: { lastFarm: t }, $inc: { stars: 1 } });
  const updated = await getUser(ctx.from.id);
  const menu = getMainMenu(ctx, updated.stars, updated.invited);
  await ctx.editMessageText(menu.text, menu.extra);
  ctx.answerCbQuery(`üåü +1 –∑–≤–µ–∑–¥–∞! –ë–∞–ª–∞–Ω—Å: ${updated.stars}.`, { show_alert: true });
});

bot.action('bonus', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const t = now();
  if (t - user.lastBonus < 86400) {
    const hours = Math.floor((86400 - (t - user.lastBonus)) / 3600);
    const mins = Math.floor((86400 - (t - user.lastBonus)) % 3600 / 60);
    return ctx.answerCbQuery(`‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞: ${hours}—á ${mins}–º.`, { show_alert: true });
  }
  await users.updateOne({ id: ctx.from.id }, { $set: { lastBonus: t }, $inc: { stars: 50 } });
  const updated = await getUser(ctx.from.id);
  const menu = getMainMenu(ctx, updated.stars, updated.invited);
  await ctx.editMessageText(menu.text, menu.extra);
  ctx.answerCbQuery(`üéÅ +50 –∑–≤—ë–∑–¥! –ë–∞–ª–∞–Ω—Å: ${updated.stars}.`, { show_alert: true });
});

bot.action('profile', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const balance = user.stars || 0;
  const invited = user.invited || 0;
  ctx.editMessageText(
    `üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\nüí´ –ë–∞–ª–∞–Ω—Å: ${balance} –∑–≤—ë–∑–¥\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${invited}`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  );
});

bot.action('top', async (ctx) => {
  const top = await users.find().sort({ stars: -1 }).limit(10).toArray();
  let msg = 'üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∑–≤—ë–∑–¥–∞–º:\n\n';
  top.forEach((u, i) => {
    const name = u.username || u.id;
    msg += `${i + 1}. ${name} ‚Äî ${u.stars || 0} –∑–≤—ë–∑–¥\n`;
  });
  ctx.editMessageText(msg, Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
});

bot.action('invite', async (ctx) => {
  const refLink = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
  ctx.editMessageText(
    `ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π\n\n` +
    `–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è!\n\n` +
    `üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: ${refLink}`,
    Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]])
  );
});

// –ü—Ä–æ–º–æ–∫–æ–¥—ã (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã ‚Äî —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫)
const promoCodes = { 'MAGNUM10': 10, 'STAR50': 50 };
const userPromoUsed = {};
bot.action('promo', async (ctx) => {
  await ctx.reply('üé´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:', { reply_markup: { force_reply: true } });
});
bot.on('text', async (ctx) => {
  if (ctx.message.reply_to_message && ctx.message.reply_to_message.text.includes('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥')) {
    const code = ctx.message.text.trim().toUpperCase();
    const userId = ctx.from.id;
    if (userPromoUsed[userId + ':' + code]) {
      return ctx.reply('‚ùó –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.', Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
    }
    if (promoCodes[code]) {
      await users.updateOne({ id: userId }, { $inc: { stars: promoCodes[code] } });
      userPromoUsed[userId + ':' + code] = true;
      return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${promoCodes[code]} –∑–≤—ë–∑–¥.`, Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
    } else {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.', Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
    }
  }
});

bot.action('admin_panel', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', { show_alert: true });
  ctx.editMessageText(
    '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.inlineKeyboard([
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
      [Markup.button.callback('‚ûï –ü—Ä–æ–º–æ–∫–æ–¥', 'admin_addpromo')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
      [Markup.button.callback('‚≠ê –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_stars')],
      [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_refs')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  );
});

bot.action('admin_cancel', async (ctx) => {
  try { await ctx.deleteMessage(); } catch (e) {}
  ctx.answerCbQuery();
  ctx.reply(
    '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.inlineKeyboard([
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
      [Markup.button.callback('‚ûï –ü—Ä–æ–º–æ–∫–æ–¥', 'admin_addpromo')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
      [Markup.button.callback('‚≠ê –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_stars')],
      [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_refs')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  );
});

// –†–∞—Å—Å—ã–ª–∫–∞
bot.action('admin_broadcast', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;
  await adminForceReply(ctx, 'üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
});

// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
bot.action('admin_addpromo', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;
  await adminForceReply(ctx, '‚ûï –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: NEWCODE 25):');
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.action('admin_stats', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;
  const totalUsers = await users.countDocuments();
  const totalStars = await users.aggregate([{ $group: { _id: null, sum: { $sum: "$stars" } } }]).toArray();
  const totalInvited = await users.aggregate([{ $group: { _id: null, sum: { $sum: "$invited" } } }]).toArray();
  ctx.editMessageText(
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n` +
    `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
    `üí´ –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars[0]?.sum || 0}\n` +
    `ü§ù –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${totalInvited[0]?.sum || 0}`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu'), Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ])
  );
});

// –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã
bot.action('admin_stars', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;
  await adminForceReply(ctx, '‚≠ê –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 10 –∏–ª–∏ 123456789 -5):');
});

// –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('admin_refs', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;
  await adminForceReply(ctx, 'üë• –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:');
});

// –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ force_reply –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ –æ—Ç–º–µ–Ω–µ
function adminForceReply(ctx, text) {
  return ctx.reply(text, {
    reply_markup: {
      force_reply: true,
      inline_keyboard: [[
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_cancel' }
      ]]
    }
  });
}

bot.on('text', async (ctx) => {
  if (!isAdmin(ctx.from.id) || !ctx.message.reply_to_message) return;
  const replyText = ctx.message.reply_to_message.text;
  const adminButtons = Markup.inlineKeyboard([
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu'), Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'admin_panel')]
  ]);
  // –†–∞—Å—Å—ã–ª–∫–∞
  if (replyText.includes('—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')) {
    const text = ctx.message.text;
    const allUsers = await users.find().toArray();
    let sent = 0;
    for (const u of allUsers) {
      try { await ctx.telegram.sendMessage(u.id, `üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n${text}`); sent++; } catch {}
    }
    return ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`, adminButtons);
  }
  // –ü—Ä–æ–º–æ–∫–æ–¥
  if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥')) {
    const [code, stars] = ctx.message.text.trim().split(/\s+/);
    if (!code || isNaN(Number(stars))) return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: –ö–û–î 10', adminButtons);
    promoCodes[code.toUpperCase()] = Number(stars);
    return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ ${code.toUpperCase()} –Ω–∞ ${stars} –∑–≤—ë–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω.`, adminButtons);
  }
  // –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã
  if (replyText.includes('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥')) {
    const [id, stars] = ctx.message.text.trim().split(/\s+/);
    if (!id || isNaN(Number(stars))) return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: ID 10', adminButtons);
    await users.updateOne({ id: Number(id) }, { $inc: { stars: Number(stars) } });
    return ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${id} –≤—ã–¥–∞–Ω–æ/–∑–∞–±—Ä–∞–Ω–æ ${stars} –∑–≤—ë–∑–¥.`, adminButtons);
  }
  // –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (replyText.includes('–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')) {
    const id = ctx.message.text.trim();
    const refs = await users.find({ invitedBy: id }).toArray();
    if (!refs.length) return ctx.reply('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.', adminButtons);
    let msg = `üë• –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:\n\n`;
    refs.forEach((u, i) => { msg += `${i + 1}. ${u.id}\n`; });
    return ctx.reply(msg, adminButtons);
  }
});

bot.action('daily_tasks', async (ctx) => {
  const userTasks = await getUserTasks(ctx.from.id, true);
  let msg = 'üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n\n';
  
  dailyTasks.forEach(task => {
    const completed = userTasks.completed[task.id];
    const claimed = userTasks.claimed[task.id];
    const status = claimed ? '‚úÖ –ü–æ–ª—É—á–µ–Ω–æ' : completed ? 'üéÅ –ó–∞–±—Ä–∞—Ç—å' : '‚è≥ –í—ã–ø–æ–ª–Ω–∏—Ç—å';
    msg += `${status} ${task.name} (+${task.reward} –∑–≤—ë–∑–¥)\n${task.description}\n\n`;
  });
  
  const buttons = [];
  dailyTasks.forEach(task => {
    const completed = userTasks.completed[task.id];
    const claimed = userTasks.claimed[task.id];
    if (completed && !claimed) {
      buttons.push([Markup.button.callback(`üéÅ ${task.name}`, `claim_daily_${task.id}`)]);
    }
  });
  buttons.push([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]);
  
  ctx.editMessageText(msg, Markup.inlineKeyboard(buttons));
});

bot.action('sponsor_tasks', async (ctx) => {
  const userTasks = await getUserTasks(ctx.from.id, false);
  let msg = 'üéØ –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞\n\n';
  
  const buttons = [];
  sponsorTasks.forEach(task => {
    const completed = userTasks.completed[task.id];
    const claimed = userTasks.claimed[task.id];
    const status = claimed ? '‚úÖ –ü–æ–ª—É—á–µ–Ω–æ' : completed ? 'üéÅ –ó–∞–±—Ä–∞—Ç—å' : '‚è≥ –í—ã–ø–æ–ª–Ω–∏—Ç—å';
    msg += `${status} ${task.name} (+${task.reward} –∑–≤—ë–∑–¥)\n${task.description}\n\n`;
    
    if (!completed) {
      buttons.push([
        Markup.button.url('üîó –ü–µ—Ä–µ–π—Ç–∏', task.url),
        Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', `check_sponsor_${task.id}`)
      ]);
    } else if (!claimed) {
      buttons.push([Markup.button.callback(`üéÅ ${task.name}`, `claim_sponsor_${task.id}`)]);
    }
  });
  buttons.push([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]);
  
  ctx.editMessageText(msg, Markup.inlineKeyboard(buttons));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π
bot.action(/^claim_daily_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const task = dailyTasks.find(t => t.id === taskId);
  if (!task) return;
  
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'daily' },
    { $set: { [`claimed.${taskId}`]: true } }
  );
  await users.updateOne({ id: ctx.from.id }, { $inc: { stars: task.reward } });
  
  ctx.answerCbQuery(`üéÅ –ü–æ–ª—É—á–µ–Ω–æ ${task.reward} –∑–≤—ë–∑–¥!`);
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è
  ctx.action('daily_tasks')(ctx);
});

bot.action(/^claim_sponsor_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const task = sponsorTasks.find(t => t.id === taskId);
  if (!task) return;
  
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'sponsor' },
    { $set: { [`claimed.${taskId}`]: true } }
  );
  await users.updateOne({ id: ctx.from.id }, { $inc: { stars: task.reward } });
  
  ctx.answerCbQuery(`üéÅ –ü–æ–ª—É—á–µ–Ω–æ ${task.reward} –∑–≤—ë–∑–¥!`);
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è
  ctx.action('sponsor_tasks')(ctx);
});

bot.action(/^check_sponsor_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª)
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'sponsor' },
    { $set: { [`completed.${taskId}`]: true } }
  );
  
  ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è
  ctx.action('sponsor_tasks')(ctx);
});

connectDB().then(() => {
  bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));