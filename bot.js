require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { MongoClient, ObjectId } = require('mongodb');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGODB_URI = process.env.MONGODB_URI;
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => id.trim()) : [];
const SUPPORT_CHANNEL = process.env.SUPPORT_CHANNEL; // –ò–º—è –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @

// –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
const REQUIRED_CHANNEL_ID = process.env.REQUIRED_CHANNEL_ID;
const REQUIRED_BOT_LINK = process.env.REQUIRED_BOT_LINK || 'https://t.me/ReferalStarsRobot?start=6587897295';

// –°—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const FIRESTARS_BOT_LINK = process.env.FIRESTARS_BOT_LINK || 'https://t.me/firestars_rbot?start=6587897295';
const FARMIK_BOT_LINK = process.env.FARMIK_BOT_LINK || 'https://t.me/farmikstars_bot?start=6587897295';  
const BASKET_BOT_LINK = process.env.BASKET_BOT_LINK || 'https://t.me/basket_gift_bot?start=6587897295';

if (!BOT_TOKEN) throw new Error('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN!');
if (!MONGODB_URI) throw new Error('–ù–µ –∑–∞–¥–∞–Ω MONGODB_URI!');

const bot = new Telegraf(BOT_TOKEN);
const mongo = new MongoClient(MONGODB_URI);
let users, promocodes, taskChecks;

// –°–∏—Å—Ç–µ–º–∞ —Ç–∏—Ç—É–ª–æ–≤
const TITLES = {
  // –û–±—ã—á–Ω—ã–µ —Ç–∏—Ç—É–ª—ã (10)
  'newcomer': { name: 'üå± –ù–æ–≤–∏—á–æ–∫', description: '–ù–∞—á–∞–ª –ø—É—Ç—å –≤ MagnumTap', condition: 'registration', requirement: 1 },
  'farmer': { name: '‚ö° –§–∞—Ä–º–µ—Ä', description: '–í—ã–ø–æ–ª–Ω–∏–ª 30 –¥–µ–π—Å—Ç–≤–∏–π —Ñ–∞—Ä–º–∏–Ω–≥–∞', condition: 'farm_count', requirement: 30 },
  'collector': { name: 'üíé –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', description: '–°–æ–±—Ä–∞–ª 50 –∑–≤—ë–∑–¥', condition: 'stars', requirement: 50 },
  'inviter': { name: 'ü§ù –ê–º–±–∞—Å—Å–∞–¥–æ—Ä', description: '–ü—Ä–∏–≥–ª–∞—Å–∏–ª 3 –¥—Ä—É–∑–µ–π', condition: 'invited', requirement: 3 },
  'daily_visitor': { name: 'üìÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å', description: '5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∑–∞—Ö–æ–¥–∏–ª –≤ –±–æ—Ç–∞', condition: 'daily_streak', requirement: 5 },
  'bonus_hunter': { name: 'üéÅ –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–æ–Ω—É—Å–∞–º–∏', description: '–°–æ–±—Ä–∞–ª 15 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤', condition: 'bonus_count', requirement: 15 },
  'promo_master': { name: 'üé´ –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', description: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª 5 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', condition: 'promo_count', requirement: 5 },
  'task_warrior': { name: '‚öîÔ∏è –í–æ–∏–Ω –∑–∞–¥–∞–Ω–∏–π', description: '–í—ã–ø–æ–ª–Ω–∏–ª 20 –∑–∞–¥–∞–Ω–∏–π', condition: 'task_count', requirement: 20 },
  'star_lord': { name: 'üåü –ó–≤—ë–∑–¥–Ω—ã–π –ª–æ—Ä–¥', description: '–°–æ–±—Ä–∞–ª 200 –∑–≤—ë–∑–¥', condition: 'stars', requirement: 200 },
  'legend': { name: 'üëë –õ–µ–≥–µ–Ω–¥–∞', description: '–°–æ–±—Ä–∞–ª 500 –∑–≤—ë–∑–¥ –∏ –ø—Ä–∏–≥–ª–∞—Å–∏–ª 10 –¥—Ä—É–∑–µ–π', condition: 'combined', requirement: { stars: 500, invited: 10 } },

  // –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏—Ç—É–ª—ã (3)
  'early_bird': { name: 'üåÖ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞', description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏—Ç—É–ª –∑–∞ –æ—Å–æ–±—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', condition: 'secret', requirement: 'special' },
  'night_owl': { name: 'ü¶â –ù–æ—á–Ω–∞—è —Å–æ–≤–∞', description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤', condition: 'secret', requirement: 'special' },
  'vip_elite': { name: 'üí´ VIP –≠–ª–∏—Ç–∞', description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–∏—Ç—É–ª –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', condition: 'secret', requirement: 'admin_only' }
};

// –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤ (–ø–æ –∑–≤—ë–∑–¥–∞–º)
const RANKS = [
  { name: 'ü•â Bronze Star', requirement: 0, color: 'ü•â' },
  { name: 'ü•à Silver Star', requirement: 50, color: 'ü•à' },
  { name: 'ü•á Gold Star', requirement: 150, color: 'ü•á' },
  { name: 'üíé Platinum Star', requirement: 300, color: 'üíé' },
  { name: 'üíç Diamond Star', requirement: 500, color: 'üíç' },
  { name: 'üëë Master Star', requirement: 1000, color: 'üëë' },
  { name: 'üèÜ Grandmaster', requirement: 2000, color: 'üèÜ' },
  { name: '‚≠ê Legend', requirement: 5000, color: '‚≠ê' }
];

// –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const USER_STATUSES = {
  'owner': { 
    name: 'üëë –í–ª–∞–¥–µ–ª–µ—Ü', 
    description: '–°–æ–∑–¥–∞—Ç–µ–ª—å –∏ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞', 
    color: 'üëë',
    priority: 1
  },
  'admin': { 
    name: '‚ö° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 
    description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º', 
    color: '‚ö°',
    priority: 2
  },
  'moderator': { 
    name: 'üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', 
    description: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', 
    color: 'üõ°Ô∏è',
    priority: 3
  },
  'vip_gold': { 
    name: 'üíé VIP Gold', 
    description: '–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è', 
    color: 'üíé',
    priority: 4
  },
  'vip': { 
    name: 'üí´ VIP', 
    description: '–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 
    color: 'üí´',
    priority: 5
  },
  'verified': { 
    name: '‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', 
    description: '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 
    color: '‚úÖ',
    priority: 6
  },
  'member': { 
    name: 'üéÆ –£—á–∞—Å—Ç–Ω–∏–∫', 
    description: '–û–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', 
    color: 'üéÆ',
    priority: 7
  }
};

// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const ACHIEVEMENTS = {
  'first_hundred': { 
    name: 'üí∞ –°–æ—Ç–∫–∞', 
    description: '–ù–∞–∫–æ–ø–∏—Ç—å 100 –∑–≤—ë–∑–¥', 
    condition: 'stars', 
    requirement: 100,
    reward: 5,
    icon: 'üí∞'
  },
  'social_butterfly': { 
    name: 'ü§ù –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞', 
    description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 10 –¥—Ä—É–∑–µ–π', 
    condition: 'invited', 
    requirement: 10,
    reward: 10,
    icon: 'ü§ù'
  },
  'week_warrior': { 
    name: '‚ö° –ù–µ–¥–µ–ª—å–Ω—ã–π –≤–æ–∏–Ω', 
    description: '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', 
    condition: 'daily_streak', 
    requirement: 7,
    reward: 12,
    icon: '‚ö°'
  },
  'farm_master': { 
    name: 'üåæ –ú–∞—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞', 
    description: '–°—Ñ–∞—Ä–º–∏—Ç—å 1000 —Ä–∞–∑', 
    condition: 'farm_count', 
    requirement: 1000,
    reward: 10,
    icon: 'üåæ'
  },
  'promo_hunter': { 
    name: 'üé´ –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –ø—Ä–æ–º–æ', 
    description: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å 15 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', 
    condition: 'promo_count', 
    requirement: 15,
    reward: 15,
    icon: 'üé´'
  }
};

// –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
const TICKET_STATUSES = {
  'new': { name: 'üÜï –ù–æ–≤–∞—è', color: 'üîµ', emoji: 'üîµ' },
  'in_progress': { name: '‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ', color: 'üü°', emoji: '‚öôÔ∏è' },
  'resolved': { name: '‚úÖ –†–µ—à–µ–Ω–∞', color: 'üü¢', emoji: '‚úÖ' },
  'rejected': { name: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞', color: 'üî¥', emoji: '‚ùå' },
  'closed': { name: 'üîí –ó–∞–∫—Ä—ã—Ç–∞', color: '‚ö´', emoji: 'üîí' }
};

async function createTaskCheck(userId, username, taskId, taskTitle, photo = null) {
  const taskCheck = {
    userId: userId,
    username: username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    taskId: taskId,
    taskTitle: taskTitle,
    photo: photo,
    status: 'pending',
    createdAt: new Date(),
    updatedAt: new Date(),
    adminResponse: null
  };
  
  const result = await taskChecks.insertOne(taskCheck);
  taskCheck._id = result.insertedId;
  return taskCheck;
}

async function updateTaskCheckStatus(checkId, status, adminResponse = null) {
  const updateData = { 
    status: status, 
    updatedAt: new Date() 
  };
  
  if (adminResponse) {
    updateData.adminResponse = adminResponse;
  }
  
  await taskChecks.updateOne(
    { _id: checkId },
    { $set: updateData }
  );
}

async function sendTaskCheckToChannel(taskCheck) {
  const supportChannelId = SUPPORT_CHANNEL;
  if (!supportChannelId) return;

  const statusInfo = TASK_CHECK_STATUSES[taskCheck.status];
  
  try {
    const messageText = formatTaskCheckMessage(taskCheck);
    
    let message;
    if (taskCheck.photo) {
      message = await bot.telegram.sendPhoto(`@${supportChannelId}`, taskCheck.photo, {
        caption: messageText,
        parse_mode: 'Markdown',
        reply_markup: getTaskCheckKeyboard(taskCheck._id, taskCheck.status, taskCheck.taskId)
      });
    } else {
      message = await bot.telegram.sendMessage(`@${supportChannelId}`, messageText, {
        parse_mode: 'Markdown',
        reply_markup: getTaskCheckKeyboard(taskCheck._id, taskCheck.status, taskCheck.taskId)
      });
    }
    
    await taskChecks.updateOne(
      { _id: taskCheck._id },
      { $set: { channelMessageId: message.message_id } }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', error);
  }
}

function formatTaskCheckMessage(taskCheck) {
  const statusInfo = TASK_CHECK_STATUSES[taskCheck.status];
  let message = `üìã *–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è #${taskCheck._id.toString().slice(-6)}*\n\n` +
    `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${taskCheck.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: \`${taskCheck.userId}\`)\n` +
    `üìù *–ó–∞–¥–∞–Ω–∏–µ:* ${taskCheck.taskTitle}\n` +
    `üìÖ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* ${taskCheck.createdAt.toLocaleString('ru-RU')}\n` +
    `üìä *–°—Ç–∞—Ç—É—Å:* ${statusInfo.emoji} ${statusInfo.name}`;
  
  if (taskCheck.adminResponse) {
    message += `\n\nüí¨ *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n${taskCheck.adminResponse}`;
  }
  
  if (taskCheck.updatedAt && taskCheck.updatedAt.getTime() !== taskCheck.createdAt.getTime()) {
    message += `\nüîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${taskCheck.updatedAt.toLocaleString('ru-RU')}`;
  }
  
  return message;
}

function getTaskCheckKeyboard(checkId, status, taskId) {
  const keyboards = {
    'pending': [
      [
        { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `task_approve_${checkId}` },
        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `task_reject_${checkId}` }
      ],
      [
        { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `task_reply_${checkId}` }
      ]
    ],
    'approved': [
      [
        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ', callback_data: `task_reject_${checkId}` }
      ]
    ],
    'rejected': [
      [
        { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `task_approve_${checkId}` }
      ]
    ]
  };
  
  return { inline_keyboard: keyboards[status] || keyboards['pending'] };
}

async function updateTaskCheckInChannel(checkId) {
  try {
    const taskCheck = await taskChecks.findOne({ _id: checkId });
    if (!taskCheck || !taskCheck.channelMessageId) return;
    
    const messageText = formatTaskCheckMessage(taskCheck);
    const keyboard = getTaskCheckKeyboard(taskCheck._id, taskCheck.status, taskCheck.taskId);
    
    if (taskCheck.photo) {
      await bot.telegram.editMessageCaption(
        `@${SUPPORT_CHANNEL}`,
        taskCheck.channelMessageId,
        null,
        messageText,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } else {
      await bot.telegram.editMessageText(
        `@${SUPPORT_CHANNEL}`,
        taskCheck.channelMessageId,
        null,
        messageText,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ:', error);
  }
}

async function createSupportTicket(userId, username, message) {
  const ticket = {
    userId: userId,
    username: username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    message: message,
    status: 'new',
    createdAt: new Date(),
    updatedAt: new Date(),
    adminResponse: null
  };
  
  const result = await supportTickets.insertOne(ticket);
  ticket._id = result.insertedId;
  return ticket;
}

async function updateTicketStatus(ticketId, status, adminResponse = null, messageId = null) {
  const updateData = { 
    status: status, 
    updatedAt: new Date() 
  };
  
  if (adminResponse) {
    updateData.adminResponse = adminResponse;
  }
  
  if (messageId) {
    updateData.channelMessageId = messageId;
  }
  
  await supportTickets.updateOne(
    { _id: ticketId },
    { $set: updateData }
  );
}

async function notifyUserStatusChange(ticketId, statusText) {
  try {
    const ticket = await supportTickets.findOne({ _id: ticketId });
    if (!ticket) return;
    
    await bot.telegram.sendMessage(ticket.userId, 
      `üé´ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #${ticketId.toString().slice(-6)}**\n\n` +
      `üìä **–°—Ç–∞—Ç—É—Å:** –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ${statusText}\n\n` +
      `üí¨ **–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** ${ticket.message}\n\n` +
      `üìÖ **–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** ${new Date().toLocaleString('ru-RU')}`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

async function sendTicketToChannel(ticket) {
  const supportChannelId = SUPPORT_CHANNEL;
  if (!supportChannelId) return;

  const statusInfo = TICKET_STATUSES[ticket.status];
  
  try {
    const messageText = formatTicketMessage(ticket);
    const message = await bot.telegram.sendMessage(`@${supportChannelId}`, messageText, {
      parse_mode: 'Markdown',
      reply_markup: getTicketKeyboard(ticket._id, ticket.status)
    });
    
    await updateTicketStatus(ticket._id, ticket.status, null, message.message_id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
  }
}

function formatTicketMessage(ticket) {
  const statusInfo = TICKET_STATUSES[ticket.status];
  let message = `üé´ *–ó–∞—è–≤–∫–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ #${ticket._id.toString().slice(-6)}*\n\n` +
    `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: \`${ticket.userId}\`)\n` +
    `üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${ticket.message}\n` +
    `üìÖ *–°–æ–∑–¥–∞–Ω–∞:* ${ticket.createdAt.toLocaleString('ru-RU')}\n` +
    `üìä *–°—Ç–∞—Ç—É—Å:* ${statusInfo.emoji} ${statusInfo.name}`;
  
  if (ticket.adminResponse) {
    message += `\n\nüí¨ *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n${ticket.adminResponse}`;
  }
  
  if (ticket.updatedAt && ticket.updatedAt.getTime() !== ticket.createdAt.getTime()) {
    message += `\nüîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${ticket.updatedAt.toLocaleString('ru-RU')}`;
  }
  
  return message;
}

function getTicketKeyboard(ticketId, status) {
  const keyboards = {
    'new': [
      [
        { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `ticket_accept_${ticketId}` },
        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `ticket_reject_${ticketId}` }
      ],
      [
        { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `ticket_reply_${ticketId}` }
      ]
    ],
    'in_progress': [
      [
        { text: '‚úÖ –†–µ—à–µ–Ω–æ', callback_data: `ticket_resolve_${ticketId}` },
        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `ticket_reject_${ticketId}` }
      ],
      [
        { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `ticket_reply_${ticketId}` },
        { text: 'üîí –ó–∞–∫—Ä—ã—Ç—å', callback_data: `ticket_close_${ticketId}` }
      ]
    ],
    'resolved': [
      [
        { text: 'üîí –ó–∞–∫—Ä—ã—Ç—å', callback_data: `ticket_close_${ticketId}` },
        { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `ticket_reply_${ticketId}` }
      ]
    ],
    'rejected': [
      [
        { text: 'üîÑ –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å', callback_data: `ticket_accept_${ticketId}` }
      ]
    ],
    'closed': [
      [
        { text: 'üîÑ –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å', callback_data: `ticket_accept_${ticketId}` }
      ]
    ]
  };
  
  return { inline_keyboard: keyboards[status] || keyboards['new'] };
}

async function updateTicketInChannel(ticketId) {
  try {
    const ticket = await supportTickets.findOne({ _id: ticketId });
    if (!ticket || !ticket.channelMessageId) return;
    
    const messageText = formatTicketMessage(ticket);
    const keyboard = getTicketKeyboard(ticket._id, ticket.status);
    
    await bot.telegram.editMessageText(
      `@${SUPPORT_CHANNEL}`,
      ticket.channelMessageId,
      null,
      messageText,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ:', error);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏—Ç—É–ª–∞–º–∏
async function checkAndAwardAchievements(userId) {
  const user = await getUser(userId);
  const newAchievements = [];
  
  for (const [achievementId, achievement] of Object.entries(ACHIEVEMENTS)) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    if (user.achievements && user.achievements.includes(achievementId)) continue;
    
    let earned = false;
    
    switch (achievement.condition) {
      case 'stars':
        earned = user.stars >= achievement.requirement;
        break;
      case 'invited':
        earned = user.invited >= achievement.requirement;
        break;
      case 'daily_streak':
        earned = (user.dailyStreak || 0) >= achievement.requirement;
        break;
      case 'farm_count':
        earned = (user.farmCount || 0) >= achievement.requirement;
        break;
      case 'promo_count':
        earned = (user.promoCount || 0) >= achievement.requirement;
        break;
    }
    
    if (earned) {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ –Ω–∞–≥—Ä–∞–¥—É
      await users.updateOne(
        { id: userId },
        { 
          $addToSet: { achievements: achievementId },
          $inc: { stars: achievement.reward }
        }
      );
      newAchievements.push(achievement);
    }
  }
  
  return newAchievements;
}

async function checkAndAwardTitles(userId) {
  const user = await getUser(userId);
  const userTitles = user.titles || [];
  let newTitles = [];

  for (const [titleId, title] of Object.entries(TITLES)) {
    if (userTitles.includes(titleId) || title.condition === 'secret') continue;

    let earned = false;
    switch (title.condition) {
      case 'registration':
        earned = true;
        break;
      case 'farm_count':
        earned = (user.farmCount || 0) >= title.requirement;
        break;
      case 'stars':
        earned = (user.stars || 0) >= title.requirement;
        break;
      case 'invited':
        earned = (user.invited || 0) >= title.requirement;
        break;
      case 'daily_streak':
        earned = (user.dailyStreak || 0) >= title.requirement;
        break;
      case 'bonus_count':
        earned = (user.bonusCount || 0) >= title.requirement;
        break;
      case 'promo_count':
        earned = (user.promoCount || 0) >= title.requirement;
        break;
      case 'task_count':
        earned = (user.taskCount || 0) >= title.requirement;
        break;
      case 'combined':
        earned = (user.stars || 0) >= title.requirement.stars && (user.invited || 0) >= title.requirement.invited;
        break;
    }

    if (earned) {
      newTitles.push(titleId);
    }
  }

  if (newTitles.length > 0) {
    await users.updateOne(
      { id: userId },
      { $addToSet: { titles: { $each: newTitles } } }
    );
    return newTitles;
  }
  return [];
}

function getUserMainTitle(user) {
  const userTitles = user.titles || [];
  if (userTitles.length === 0) return 'üÜï –ù–µ—Ç —Ç–∏—Ç—É–ª–∞';
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ > –ª–µ–≥–µ–Ω–¥–∞ > –ø–æ –ø–æ—Ä—è–¥–∫—É
  const titleOrder = ['vip_elite', 'early_bird', 'night_owl', 'legend', 'star_lord', 'task_warrior', 'promo_master', 'bonus_hunter', 'daily_visitor', 'inviter', 'collector', 'farmer', 'newcomer'];
  
  for (const titleId of titleOrder) {
    if (userTitles.includes(titleId)) {
      return TITLES[titleId].name;
    }
  }
  return 'üÜï –ù–µ—Ç —Ç–∏—Ç—É–ª–∞';
}

function getUserRank(user) {
  const stars = user.stars || 0;
  let currentRank = RANKS[0]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Bronze Star
  
  for (const rank of RANKS) {
    if (stars >= rank.requirement) {
      currentRank = rank;
    } else {
      break;
    }
  }
  
  return currentRank;
}

function getNextRankInfo(user) {
  const stars = user.stars || 0;
  const currentRank = getUserRank(user);
  
  // –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥
  const currentIndex = RANKS.findIndex(rank => rank.name === currentRank.name);
  if (currentIndex < RANKS.length - 1) {
    const nextRank = RANKS[currentIndex + 1];
    const starsToNext = nextRank.requirement - stars;
    const progress = Math.max(0, Math.min(100, (stars - currentRank.requirement) / (nextRank.requirement - currentRank.requirement) * 100));
    
    return {
      current: currentRank,
      next: nextRank,
      starsToNext: starsToNext,
      progress: Math.round(progress)
    };
  }
  
  return {
    current: currentRank,
    next: null,
    starsToNext: 0,
    progress: 100
  };
}



async function connectDB() {
  await mongo.connect();
  const db = mongo.db();
  users = db.collection('users');
  promocodes = db.collection('promocodes');
  tasks = db.collection('tasks');
  titles = db.collection('titles');
  supportTickets = db.collection('supportTickets'); // –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–∞—è–≤–æ–∫
  taskChecks = db.collection('taskChecks'); // –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞–¥–∞–Ω–∏–π
}

function now() { return Math.floor(Date.now() / 1000); }

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getUser –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏—Ç—É–ª–æ–≤
async function getUser(id) {
  let user = await users.findOne({ id });
  if (!user) {
    user = {
      id,
      username: '',
      stars: 0,
      lastFarm: 0,
      lastBonus: 0,
      created: now(),
      invited: 0,
      invitedBy: null,
      titles: [],
      achievements: [],
      farmCount: 0,
      bonusCount: 0,
      promoCount: 0,
      taskCount: 0,
      dailyStreak: 0,
      status: 'member' // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    };
    await users.insertOne(user);
    // –î–∞—ë–º —Ç–∏—Ç—É–ª –Ω–æ–≤–∏—á–∫–∞
    await checkAndAwardTitles(id);
  }
  return user;
}

function isAdmin(userId) { return ADMIN_IDS.includes(String(userId)); }

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async function checkSubscription(ctx) {
  if (!REQUIRED_CHANNEL_ID) return true; // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
  
  try {
    const member = await ctx.telegram.getChatMember(REQUIRED_CHANNEL_ID, ctx.from.id);
    return ['member', 'administrator', 'creator'].includes(member.status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
async function showSubscriptionMessage(ctx) {
  const message = `üîî **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n\n` +
                  `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n` +
                  `1Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª\n` +
                  `2Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ\n\n` +
                  `–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', `https://t.me/${REQUIRED_CHANNEL_ID.replace('-100', '')}`)],
    [Markup.button.url('ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', REQUIRED_BOT_LINK)],
    [Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', 'check_subscription')]
  ]);
  
  try {
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
    } else {
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:', error);
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
function requireSubscription(handler) {
  return async (ctx) => {
    const isSubscribed = await checkSubscription(ctx);
    if (!isSubscribed) {
      await showSubscriptionMessage(ctx);
      return;
    }
    await handler(ctx);
  };
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
function getUserStatus(user) {
  const userStatus = user.status || 'member';
  return USER_STATUSES[userStatus] ? USER_STATUSES[userStatus] : USER_STATUSES['member'];
}

function getStatusDisplayName(user) {
  const status = getUserStatus(user);
  return status.name;
}

function createProgressBar(current, total, length = 10) {
  if (total <= 0) return '‚ñë'.repeat(length); // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
  const filled = Math.floor((current / total) * length);
  const empty = Math.max(0, length - filled);
  return '‚ñì'.repeat(Math.max(0, filled)) + '‚ñë'.repeat(empty);
}

async function getDetailedProfile(userId) {
  const user = await getUser(userId);
  const balance = Math.round((user.stars || 0) * 100) / 100; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
  const friends = user.invited || 0;
  const title = getUserMainTitle(user);
  const rank = getUserRank(user);
  const nextRankInfo = getNextRankInfo(user);
  const status = getUserStatus(user);
  
  let progressText = '';
  if (nextRankInfo.next && nextRankInfo.starsToNext > 0) {
    const progressBar = createProgressBar(nextRankInfo.progress, 100) + ` ${nextRankInfo.progress}%`;
    progressText = `üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–Ω–≥–∞:**  
${progressBar}
–î–æ ${nextRankInfo.next.name}: ${nextRankInfo.starsToNext} –∑–≤—ë–∑–¥`;
  } else {
    progressText = 'üèÜ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!**';
  }
  
  return `üëë **–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ MagnumTap** üëë

üí´ **–°—Ç–∞—Ç—É—Å:** ${getStatusDisplayName(user)}  
üíé **–ë–∞–ª–∞–Ω—Å:** ${balance} ‚≠ê –∑–≤—ë–∑–¥  
üë• **–î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:** ${friends}  
üèÖ **–†–∞–Ω–≥:** ${rank.name}  
üèÜ **–¢–∏—Ç—É–ª:** ${title}

${progressText}`;
}

function getWelcomeText(balance, invited) {
  return (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *MagnumTapBot*! üåü\n\n" +
    "–¢—ã –≤ –∏–≥—Ä–µ, –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã ‚ú®, –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –∏ —Å–æ–±–∏—Ä–∞—è –±–æ–Ω—É—Å—ã! üöÄ\n\n" +
    "üí´ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: " + balance + " –∑–≤—ë–∑–¥\n" +
    "üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: " + invited + "\n\n" +
    "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞–Ω—å –∑–≤–µ–∑–¥–æ–π MagnumTapBot! üåü"
  );
}

// –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
const SPONSOR_TASKS = [
  {
    id: 'music_channel',
    title: 'üì± –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @musice46',
    description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @musice46',
    reward: 3,
    instruction: '–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª',
    link: 'https://t.me/musice46'
  },
  {
    id: 'firestars_bot',
    title: 'üî• –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ FireStars',
    description: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å',
    reward: 3,
    instruction: '–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞',
    link: FIRESTARS_BOT_LINK
  },
  {
    id: 'farmik_bot',
    title: '‚≠ê –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ FarmikStars',
    description: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤',
    reward: 3,
    instruction: '–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞',
    link: FARMIK_BOT_LINK
  },
  {
    id: 'basket_game_bot',
    title: 'üèÄ –ò–≥—Ä–∞—Ç—å –≤ BasketGift –±–æ—Ç–∞',
    description: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ —Å—ã–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É 3 —Ä–∞–∑–∞',
    reward: 3,
    instruction: '–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ 3 –∏–≥—Ä',
    link: BASKET_BOT_LINK
  }
];

// –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π
const TASK_CHECK_STATUSES = {
  'pending': { name: '‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', emoji: '‚è≥' },
  'approved': { name: '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ', emoji: '‚úÖ' },
  'rejected': { name: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', emoji: '‚ùå' }
};

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
const dailyTasks = [
  { id: 'login', name: '–ó–∞–π—Ç–∏ –≤ –±–æ—Ç–∞', reward: 5, description: '–ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!' },
  { id: 'bonus', name: '–ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –±–æ–Ω—É—Å', reward: 10, description: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ë–æ–Ω—É—Å"' },
  { id: 'invite', name: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', reward: 20, description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞' }
];

// –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞
const sponsorTasks = [
  { id: 'channel1', name: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @example', reward: 15, description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø–∞—Ä—Ç–Ω—ë—Ä–∞', url: 'https://t.me/example' },
  { id: 'website', name: '–ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç', reward: 25, description: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞', url: 'https://example.com' }
];

async function getUserTasks(userId, isDaily = true) {
  const today = new Date().toDateString();
  let userTasks = await tasks.findOne({ 
    userId, 
    date: isDaily ? today : 'sponsor',
    type: isDaily ? 'daily' : 'sponsor'
  });
  
  if (!userTasks) {
    const taskList = isDaily ? dailyTasks : sponsorTasks;
    userTasks = {
      userId,
      date: isDaily ? today : 'sponsor',
      type: isDaily ? 'daily' : 'sponsor',
      completed: {},
      claimed: {}
    };
    taskList.forEach(task => {
      userTasks.completed[task.id] = false;
      userTasks.claimed[task.id] = false;
    });
    await tasks.insertOne(userTasks);
  }
  return userTasks;
}

async function updateMainMenuBalance(ctx) {
  try {
    const menu = await getMainMenu(ctx, ctx.from.id);
    await ctx.editMessageText(menu.text, menu.extra);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –º–µ–Ω—é:', error);
  }
}

async function getMainMenu(ctx, userId) {
  const adminRow = isAdmin(ctx.from.id) ? [[Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]] : [];
  const profileText = await getDetailedProfile(userId);
  
  return {
    text: profileText,
    extra: {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üåü –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üèÜ –¢–æ–ø', 'top')],
        [Markup.button.callback('ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'invite'), Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'promo')],
        [Markup.button.callback('üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', 'daily_tasks'), Markup.button.callback('üéØ –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞', 'sponsor_tasks')],
        ...adminRow
      ])
    }
  };
}

bot.start(async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(ctx);
  if (!isSubscribed) {
    await showSubscriptionMessage(ctx);
    return;
  }
  
  const user = await getUser(ctx.from.id);
  const menu = await getMainMenu(ctx, ctx.from.id);
  await ctx.reply(menu.text, menu.extra);
});

bot.action('check_subscription', async (ctx) => {
  const isSubscribed = await checkSubscription(ctx);
  if (!isSubscribed) {
    await ctx.answerCbQuery('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞.', { show_alert: true });
    return;
  }
  
  await ctx.answerCbQuery('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
  const user = await getUser(ctx.from.id);
  const menu = await getMainMenu(ctx, ctx.from.id);
  await ctx.editMessageText(menu.text, menu.extra);
});

bot.action('main_menu', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(ctx);
  if (!isSubscribed) {
    await showSubscriptionMessage(ctx);
    return;
  }
  
  try { await ctx.deleteMessage(); } catch (e) {}
  const menu = await getMainMenu(ctx, ctx.from.id);
  ctx.reply(menu.text, menu.extra);
});

// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –∫–Ω–æ–ø–∫–æ–π —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
bot.action('profile', requireSubscription(async (ctx) => {
  const profileText = await getDetailedProfile(ctx.from.id);

  ctx.editMessageText(profileText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üèÜ –ú–æ–∏ —Ç–∏—Ç—É–ª—ã', 'my_titles'), Markup.button.callback('üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')],
      [Markup.button.callback('üõ†Ô∏è –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'support_menu'), Markup.button.callback('‚ùì FAQ', 'faq')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  });
}));

bot.action('my_titles', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const userTitles = user.titles || [];
  
  let titlesText = 'üèÜ **–¢–≤–æ–∏ —Ç–∏—Ç—É–ª—ã** üèÜ\n\n';
  
  if (userTitles.length === 0) {
    titlesText += 'üÜï –ü–æ–∫–∞ —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç —Ç–∏—Ç—É–ª–æ–≤.\n–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö!';
  } else {
    userTitles.forEach(titleId => {
      if (TITLES[titleId]) {
        titlesText += `${TITLES[titleId].name}\n${TITLES[titleId].description}\n\n`;
      }
    });
  }

  ctx.editMessageText(titlesText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üë§ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'profile')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  });
});

bot.action('top', requireSubscription(async (ctx) => {
  const topUsers = await users.find({}).sort({ stars: -1 }).limit(10).toArray();
  let msg = 'üèÜ *–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∑–≤—ë–∑–¥–∞–º:*\n\n';
  
  topUsers.forEach((user, i) => {
    const name = user.username || user.id;
    const stars = Math.round((user.stars || 0) * 100) / 100;
    const status = getUserStatus(user);
    const title = getUserMainTitle(user);
    const rank = getUserRank(user);
    
    // –ú–µ–¥–∞–ª–∏ –¥–ª—è —Ç–æ–ø-3
    let medal = '';
    if (i === 0) medal = 'ü•á';
    else if (i === 1) medal = 'ü•à';
    else if (i === 2) medal = 'ü•â';
    else medal = `${i + 1}.`;
    
    msg += `${medal} *${name}*\n`;
    msg += `   üí∞ ${stars} ‚≠ê –∑–≤—ë–∑–¥\n`;
    msg += `   ${status.color} ${status.name}\n`;
    msg += `   üèÖ ${rank.name}\n`;
    msg += `   üèÜ ${title}\n\n`;
  });
  
  if (topUsers.length === 0) {
    msg += 'üì≠ –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.';
  }
  
  ctx.editMessageText(msg, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]])
  });
}));

bot.action('invite', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const refLink = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
  ctx.editMessageText(
    `ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π\n\n` +
    `–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è!\n\n` +
    `üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: ${refLink}\n\n` +
    `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${user.invited || 0}`,
    Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]])
  );
});

// –ü—Ä–æ–º–æ–∫–æ–¥—ã (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã ‚Äî —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫)
const promoCodes = { 'MAGNUM10': 10, 'STAR50': 50 };
const userPromoUsed = {};
bot.action('promo', async (ctx) => {
  await adminForceReply(ctx, 'üé´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
bot.on('photo', async (ctx) => {
  try {
    const replyToMessage = ctx.message.reply_to_message;
    if (!replyToMessage) return;
    
    const replyText = replyToMessage.text || '';
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è
    if (replyText.includes('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è')) {
             console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', replyText);
       
       // –ò—â–µ–º ID –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
       const taskIdMatch = replyText.match(/üÜî ID –∑–∞–¥–∞–Ω–∏—è: (\w+)/);
       
       console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–π ID –∑–∞–¥–∞–Ω–∏—è:', taskIdMatch);
       
       if (!taskIdMatch) {
         console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ:', replyText);
         return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
       }
       
       const taskId = taskIdMatch[1];
       console.log('–ò—â–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å ID:', taskId);
       
       const task = SPONSOR_TASKS.find(t => {
         console.log('–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å ID:', t.id);
         return t.id === taskId;
       });
      
      if (!task) {
        return ctx.reply('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
      const photo = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞–Ω–∏—è
      const taskCheck = await createTaskCheck(
        ctx.from.id,
        ctx.from.username,
        task.id,
        task.title,
        photo
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      await sendTaskCheckToChannel(taskCheck);
      
      ctx.reply(
        `‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!*\n\n` +
        `üìã *–ó–∞–¥–∞–Ω–∏–µ:* ${task.title}\n` +
        `üé´ *ID –ø—Ä–æ–≤–µ—Ä–∫–∏:* \`${taskCheck._id.toString().slice(-6)}\`\n` +
        `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n` +
        `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.`,
        { 
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤', 'sponsor_tasks')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ])
        }
      );
      return;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

bot.on('text', async (ctx) => {
  const replyMsg = ctx.message.reply_to_message;
  if (!replyMsg) return;

  const text = ctx.message.text;
  const replyText = replyMsg.text;

  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
    if (replyText.includes('–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê') && replyText.includes('–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É')) {
      const ticket = await createSupportTicket(
        ctx.from.id,
        ctx.from.username,
        text
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      await sendTicketToChannel(ticket);
      
      ctx.reply(
        `‚úÖ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n` +
        `üé´ **ID –∑–∞—è–≤–∫–∏:** \`${ticket._id.toString().slice(-6)}\`\n` +
        `üìÖ **–î–∞—Ç–∞:** ${new Date().toLocaleString('ru-RU')}\n\n` +
        `üí¨ **–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n${text}\n\n` +
        `‚ö° –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –∏ —É–≤–µ–¥–æ–º–∏–º –æ —Å—Ç–∞—Ç—É—Å–µ.`,
        { 
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', 'my_tickets')],
            [Markup.button.callback('üõ†Ô∏è –ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏', 'support_menu')]
          ])
        }
      );
      return;
    }



    // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if (isAdmin(ctx.from.id)) {
      if (replyText.includes('–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∑–∞—è–≤–∫–µ')) {
        const ticketIdMatch = replyText.match(/#([a-f0-9]{6})/);
        if (!ticketIdMatch) {
          return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∑–∞—è–≤–∫–∏!');
        }
        
        const shortTicketId = ticketIdMatch[1];
        
        // –ò—â–µ–º –∑–∞—è–≤–∫—É –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ ObjectId)
        const tickets = await supportTickets.find({}).toArray();
        const ticket = tickets.find(t => t._id.toString().slice(-6) === shortTicketId);
        
        if (!ticket) {
          return ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º –∞–¥–º–∏–Ω–∞
        await updateTicketStatus(ticket._id, 'in_progress', text);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
          await bot.telegram.sendMessage(ticket.userId,
            `üí¨ *–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n` +
            `üé´ *–ü–æ –∑–∞—è–≤–∫–µ #${shortTicketId}:*\n` +
            `${text}\n\n` +
            `üìù *–í–∞—à–∞ –∏—Å—Ö–æ–¥–Ω–∞—è –∑–∞—è–≤–∫–∞:* ${ticket.message}\n\n` +
            `‚ö° –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å.`,
            { parse_mode: 'Markdown' }
          );
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
          await updateTicketInChannel(ticket._id);
          
          ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.username || ticket.userId}`);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
          ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        }
        return;
      }

      if (replyText.includes('–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏')) {
        // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        return ctx.reply('‚ùå –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      }

      if (replyText.includes('–û—Ç–≤–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è')) {
        const checkIdMatch = replyText.match(/#([a-f0-9]{6})/);
        if (!checkIdMatch) {
          return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø—Ä–æ–≤–µ—Ä–∫–∏!');
        }
        
        const shortCheckId = checkIdMatch[1];
        
        // –ò—â–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID
        const taskChecks_list = await taskChecks.find({}).toArray();
        const taskCheck = taskChecks_list.find(tc => tc._id.toString().slice(-6) === shortCheckId);
        
        if (!taskCheck) {
          return ctx.reply('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º –∞–¥–º–∏–Ω–∞
        await updateTaskCheckStatus(taskCheck._id, taskCheck.status, text);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
          await bot.telegram.sendMessage(taskCheck.userId,
            `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è*\n\n` +
            `üé´ *–ü–æ –ø—Ä–æ–≤–µ—Ä–∫–µ #${shortCheckId}:*\n` +
            `üìã *–ó–∞–¥–∞–Ω–∏–µ:* ${taskCheck.taskTitle}\n\n` +
            `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n${text}`,
            { parse_mode: 'Markdown' }
          );
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
          await updateTaskCheckInChannel(taskCheck._id);
          
          ctx.reply(`‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${taskCheck.username || taskCheck.userId}`);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
          ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        }
        return;
      }
      
      // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–∞
      if (text === '/reset_bonus' && isAdmin(ctx.from.id)) {
        await users.updateOne({ id: ctx.from.id }, { $set: { lastBonus: 0 } });
        return ctx.reply('‚úÖ –ë–æ–Ω—É—Å —Å–±—Ä–æ—à–µ–Ω, –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å');
      }

      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã...
      if (replyText.includes('–í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞')) {
        const [userId, titleId] = text.split(' ');
        if (!userId || !titleId || !TITLES[titleId]) {
          return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏—Ç—É–ª!');
        }

        await users.updateOne(
          { id: parseInt(userId) },
          { $addToSet: { titles: titleId } }
        );
        
        ctx.reply(`‚úÖ –¢–∏—Ç—É–ª "${TITLES[titleId].name}" –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}!`);
      }
      
      else if (replyText.includes('–ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª')) {
        const [userId, titleId] = text.split(' ');
        if (!userId || !titleId || !TITLES[titleId]) {
          return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏—Ç—É–ª!');
        }

        await users.updateOne(
          { id: parseInt(userId) },
          { $pull: { titles: titleId } }
        );
        
        ctx.reply(`‚úÖ –¢–∏—Ç—É–ª "${TITLES[titleId].name}" –∑–∞–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}!`);
      }
      
      else if (replyText.includes('–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')) {
        const userId = parseInt(text);
        const user = await users.findOne({ id: userId });
        
        if (!user) {
          return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }

        const userTitles = user.titles || [];
        let titlesList = `üë§ **–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:**\n\n`;
        
        if (userTitles.length === 0) {
          titlesList += 'üö´ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∏—Ç—É–ª–æ–≤';
        } else {
          userTitles.forEach(titleId => {
            if (TITLES[titleId]) {
              titlesList += `${TITLES[titleId].name}\n`;
            }
          });
        }

        ctx.reply(titlesList, { parse_mode: 'Markdown' });
      }

      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏
      else if (replyText.includes('–í—ã–¥–∞—á–∞ —Å—Ç–∞—Ç—É—Å–∞') && replyText.includes('ID –°–¢–ê–¢–£–°')) {
        const [userId, statusKey] = text.split(' ');
        if (!userId || !statusKey || !USER_STATUSES[statusKey]) {
          return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: owner, admin, moderator, vip_gold, vip, verified, member');
        }

        await users.updateOne(
          { id: parseInt(userId) },
          { $set: { status: statusKey } }
        );
        
        ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å "${USER_STATUSES[statusKey].name}" –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}!`);
      }
      
      else if (replyText.includes('–°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞') && replyText.includes('–æ–±—ã—á–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É')) {
        const userId = parseInt(text);
        if (!userId) {
          return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
        }

        await users.updateOne(
          { id: userId },
          { $set: { status: 'member' } }
        );
        
        ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–±—Ä–æ—à–µ–Ω –∫ –æ–±—ã—á–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É!`);
      }
      
      else if (replyText.includes('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞') && replyText.includes('–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞')) {
        const userId = parseInt(text);
        const user = await users.findOne({ id: userId });
        
        if (!user) {
          return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }

        const currentStatus = getUserStatus(user);
        ctx.reply(
          `üë§ **–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:**\n\n` +
          `${currentStatus.color} **${currentStatus.name}**\n` +
          `‚îî ${currentStatus.description}\n\n` +
          `üìä **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** ${currentStatus.priority}`,
          { parse_mode: 'Markdown' }
        );
      }

      // –†–∞—Å—Å—ã–ª–∫–∞
      else if (replyText.includes('—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')) {
        const allUsers = await users.find().toArray();
        let sent = 0;
        for (const u of allUsers) {
          try { 
            await ctx.telegram.sendMessage(u.id, `üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n${text}`); 
            sent++; 
          } catch {}
        }
        ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`);
      }

      // –ü—Ä–æ–º–æ–∫–æ–¥
      else if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥')) {
        const [code, stars] = text.trim().split(/\s+/);
        if (!code || isNaN(Number(stars))) {
          return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: –ö–û–î 10');
        }
        await promocodes.insertOne({
          code: code.toUpperCase(),
          stars: Number(stars),
          max: 100,
          used: 0,
          created: now()
        });
        ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ ${code.toUpperCase()} –Ω–∞ ${stars} –∑–≤—ë–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω.`);
      }

      // –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã
      else if (replyText.includes('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥')) {
        const [id, stars] = text.trim().split(/\s+/);
        if (!id || isNaN(Number(stars))) {
          return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: ID 10');
        }
        await users.updateOne({ id: Number(id) }, { $inc: { stars: Number(stars) } });
        ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${id} –≤—ã–¥–∞–Ω–æ/–∑–∞–±—Ä–∞–Ω–æ ${stars} –∑–≤—ë–∑–¥.`);
      }

      // –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      else if (replyText.includes('–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')) {
        const id = text.trim();
        const refs = await users.find({ invitedBy: id }).toArray();
        if (!refs.length) {
          return ctx.reply('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.');
        }
        let msg = `üë• –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:\n\n`;
        refs.forEach((u, i) => { msg += `${i + 1}. ${u.id}\n`; });
        ctx.reply(msg);
      }
    }

    // –ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    else if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:')) {
      const code = text.trim().toUpperCase();
      const promo = await promocodes.findOne({ code });
      
      if (!promo) {
        return ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      }
      
      if (promo.used >= promo.max) {
        return ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω!');
      }

      const user = await getUser(ctx.from.id);
      const userPromos = user.usedPromos || [];
      
      if (userPromos.includes(code)) {
        return ctx.reply('‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!');
      }

      await users.updateOne(
        { id: ctx.from.id },
        { 
          $inc: { stars: promo.stars, promoCount: 1 },
          $addToSet: { usedPromos: code }
        }
      );
      await promocodes.updateOne({ code }, { $inc: { used: 1 } });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const newTitles = await checkAndAwardTitles(ctx.from.id);
      const newAchievements = await checkAndAwardAchievements(ctx.from.id);
      
      if (newTitles.length > 0 && newAchievements.length > 0) {
        ctx.reply(`üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${promo.stars} –∑–≤—ë–∑–¥! üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª! üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!`);
      } else if (newTitles.length > 0) {
        ctx.reply(`üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${promo.stars} –∑–≤—ë–∑–¥! üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª –ø–æ–ª—É—á–µ–Ω!`);
      } else if (newAchievements.length > 0) {
        ctx.reply(`üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${promo.stars} –∑–≤—ë–∑–¥! üéñÔ∏è ${newAchievements[0].name}!`);
      } else {
        ctx.reply(`üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${promo.stars} –∑–≤—ë–∑–¥!`);
      }
    }

  } catch (error) {
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!');
  }
});

bot.action('admin_panel', async (ctx) => {
  const adminText = '‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å* ‚öôÔ∏è\n\nüéõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

  ctx.editMessageText(adminText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast'), Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'admin_addpromo')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats'), Markup.button.callback('‚≠ê –ó–≤—ë–∑–¥—ã', 'admin_stars')],
      [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'admin_refs'), Markup.button.callback('üèÜ –¢–∏—Ç—É–ª—ã', 'admin_titles')],
      [Markup.button.callback('üí´ –°—Ç–∞—Ç—É—Å—ã', 'admin_statuses'), Markup.button.callback('‚ùì FAQ –ê–¥–º–∏–Ω–∞', 'admin_faq')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  });
});

bot.action('admin_cancel', async (ctx) => {
  try { await ctx.deleteMessage(); } catch (e) {}
  ctx.answerCbQuery();
  ctx.reply(
    '‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å* ‚öôÔ∏è\n\nüéõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast'), Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'admin_addpromo')],
        [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats'), Markup.button.callback('‚≠ê –ó–≤—ë–∑–¥—ã', 'admin_stars')],
        [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'admin_refs'), Markup.button.callback('üèÜ –¢–∏—Ç—É–ª—ã', 'admin_titles')],
        [Markup.button.callback('üí´ –°—Ç–∞—Ç—É—Å—ã', 'admin_statuses'), Markup.button.callback('‚ùì FAQ –ê–¥–º–∏–Ω–∞', 'admin_faq')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
      ])
    }
  );
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏
bot.action('admin_statuses', async (ctx) => {
  let statusText = 'üí´ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏* üí´\n\n';
  statusText += 'üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:*\n\n';
  
  Object.entries(USER_STATUSES).forEach(([key, status]) => {
    statusText += `${status.color} *${status.name}*\n`;
    statusText += `‚îî ${status.description}\n\n`;
  });

  ctx.editMessageText(statusText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –í—ã–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å', 'admin_give_status')],
      [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å', 'admin_remove_status')],
      [Markup.button.callback('üë§ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_user_status')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
    ])
  });
});

bot.action('admin_give_status', async (ctx) => {
  ctx.reply(
    '‚ûï *–í—ã–¥–∞—á–∞ —Å—Ç–∞—Ç—É—Å–∞*\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\nüìù –§–æ—Ä–º–∞—Ç: ID –°–¢–ê–¢–£–°\n\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n‚Ä¢ owner\n‚Ä¢ admin\n‚Ä¢ moderator\n‚Ä¢ vip\\_gold\n‚Ä¢ vip\n‚Ä¢ verified\n‚Ä¢ member',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true,
        input_field_placeholder: '–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789 vip'
      }
    }
  );
});

bot.action('admin_remove_status', async (ctx) => {
  ctx.reply(
    '‚ûñ *–°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞*\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫ –æ–±—ã—á–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É:',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true,
        input_field_placeholder: '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      }
    }
  );
});

bot.action('admin_user_status', async (ctx) => {
  ctx.reply(
    'üë§ *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞*\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true,
        input_field_placeholder: '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      }
    }
  );
});

// FAQ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
bot.action('admin_faq', async (ctx) => {
  const adminFaqText = `‚ùì *FAQ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏* ‚ùì

üéõÔ∏è *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*

üì¢ *–†–∞—Å—Å—ã–ª–∫–∞* - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚îú –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
‚îî –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

üé´ **–ü—Ä–æ–º–æ–∫–æ–¥** - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚îú –§–æ—Ä–º–∞—Ç: –ù–ê–ó–í–ê–ù–ò–ï –ó–í–Å–ó–î–´ –õ–ò–ú–ò–¢
‚îú –ü—Ä–∏–º–µ—Ä: NEWCODE 25 100
‚îî –°–æ–∑–¥–∞—Å—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 25 –∑–≤—ë–∑–¥ —Å –ª–∏–º–∏—Ç–æ–º 100 –∞–∫—Ç–∏–≤–∞—Ü–∏–π

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚îú –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚îú –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é
‚îî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º –∏ –∑–∞–¥–∞–Ω–∏—è–º

‚≠ê **–ó–≤—ë–∑–¥—ã** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚îú –§–æ—Ä–º–∞—Ç: ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ö–û–õ–ò–ß–ï–°–¢–í–û
‚îú –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ - –¥–æ–±–∞–≤–∏—Ç—å
‚îî –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ - –æ—Ç–Ω—è—Ç—å

üë• **–†–µ—Ñ–µ—Ä–∞–ª—ã** - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚îú –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚îî –ü–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –∏–º –ª—é–¥–µ–π

üèÜ **–¢–∏—Ç—É–ª—ã** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏
‚îú –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç–∏—Ç—É–ª–æ–≤
‚îú –í—ã–¥–∞—á–∞/—É–¥–∞–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–æ–≤
‚îî –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏—Ç—É–ª–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üí´ **–°—Ç–∞—Ç—É—Å—ã** - –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
‚îú üëë –í–ª–∞–¥–µ–ª–µ—Ü - –≤—ã—Å—à–∏–π —Å—Ç–∞—Ç—É—Å
‚îú ‚ö° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
‚îú üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä - –º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚îú üíé VIP Gold - –ø—Ä–µ–º–∏—É–º –≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è
‚îú üí´ VIP - –æ–±—ã—á–Ω—ã–π –ø—Ä–µ–º–∏—É–º
‚îú ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
‚îî üéÆ –£—á–∞—Å—Ç–Ω–∏–∫ - –±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å

üîß **–ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–æ–≤:**
‚Ä¢ –í—ã–¥–∞—Ç—å: ID –°–¢–ê–¢–£–° (123456789 vip)
‚Ä¢ –£–±—Ä–∞—Ç—å: —Å–±—Ä–æ—Å–∏—Ç—å –¥–æ –æ–±—ã—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
- –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
- –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –º–∞—Å—Å–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫—É`;

  ctx.editMessageText(adminFaqText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
    ])
  });
});

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
function adminForceReply(ctx, text) {
  return ctx.reply(text, {
    reply_markup: {
      force_reply: true,
      inline_keyboard: [[
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_cancel' }
      ]]
    }
  });
}

// –†–∞—Å—Å—ã–ª–∫–∞
bot.action('admin_broadcast', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  await adminForceReply(ctx, 'üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
});

// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
bot.action('admin_addpromo', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  await adminForceReply(ctx, '‚ûï –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: NEWCODE 25):');
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.action('admin_stats', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  const totalUsers = await users.countDocuments();
  const totalStars = await users.aggregate([{ $group: { _id: null, total: { $sum: '$stars' } } }]).toArray();
  const totalInvited = await users.aggregate([{ $group: { _id: null, total: { $sum: '$invited' } } }]).toArray();
  
  ctx.editMessageText(
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n` +
    `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
    `‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars[0]?.total || 0}\n` +
    `ü§ù –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${totalInvited[0]?.total || 0}`,
    Markup.inlineKeyboard([[Markup.button.callback('‚öôÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]])
  );
});

// –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã
bot.action('admin_stars', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  await adminForceReply(ctx, '‚≠ê –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 50):');
});

// –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('admin_refs', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  await adminForceReply(ctx, 'üë• –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:');
});

// –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
bot.action('admin_titles', async (ctx) => {
  let titlesList = 'üèÜ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏—Ç—É–ª–∞—Ö** üèÜ\n\n';
  titlesList += '**–û–ë–´–ß–ù–´–ï –¢–ò–¢–£–õ–´:**\n';
  
  Object.entries(TITLES).forEach(([id, title]) => {
    if (title.condition !== 'secret') {
      titlesList += `${title.name}\n${title.description}\n\n`;
    }
  });
  
  titlesList += '**–°–ï–ö–†–ï–¢–ù–´–ï –¢–ò–¢–£–õ–´:**\n';
  Object.entries(TITLES).forEach(([id, title]) => {
    if (title.condition === 'secret') {
      titlesList += `${title.name}\n${title.description}\n\n`;
    }
  });

  ctx.editMessageText(titlesList, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –í—ã–¥–∞—Ç—å —Ç–∏—Ç—É–ª', 'admin_give_title')],
      [Markup.button.callback('‚ûñ –ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª', 'admin_remove_title')],
      [Markup.button.callback('üìã –¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_user_titles')],
      [Markup.button.callback('‚öôÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]
    ])
  });
});

bot.action('admin_give_title', async (ctx) => {
  ctx.reply(
    '‚ûï **–í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID —Ç–∏—Ç—É–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n`123456789 vip_elite`',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true
      }
    }
  );
});

bot.action('admin_remove_title', async (ctx) => {
  ctx.reply(
    '‚ûñ **–ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID —Ç–∏—Ç—É–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n`123456789 vip_elite`',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true
      }
    }
  );
});

bot.action('admin_user_titles', async (ctx) => {
  ctx.reply(
    'üìã **–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true
      }
    }
  );
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–∏—Ç—É–ª–æ–≤
bot.on('text', async (ctx) => {
  const replyMsg = ctx.message.reply_to_message;
  if (!replyMsg || !isAdmin(ctx.from.id)) return;

  const text = ctx.message.text;
  const replyText = replyMsg.text;

  try {
    if (replyText.includes('–í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞')) {
      const [userId, titleId] = text.split(' ');
      if (!userId || !titleId || !TITLES[titleId]) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏—Ç—É–ª!');
      }

      await users.updateOne(
        { id: parseInt(userId) },
        { $addToSet: { titles: titleId } }
      );
      
      ctx.reply(`‚úÖ –¢–∏—Ç—É–ª "${TITLES[titleId].name}" –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}!`);
    }
    
    else if (replyText.includes('–ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª')) {
      const [userId, titleId] = text.split(' ');
      if (!userId || !titleId || !TITLES[titleId]) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏—Ç—É–ª!');
      }

      await users.updateOne(
        { id: parseInt(userId) },
        { $pull: { titles: titleId } }
      );
      
      ctx.reply(`‚úÖ –¢–∏—Ç—É–ª "${TITLES[titleId].name}" –∑–∞–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}!`);
    }
    
    else if (replyText.includes('–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')) {
      const userId = parseInt(text);
      const user = await users.findOne({ id: userId });
      
      if (!user) {
        return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      }

      const userTitles = user.titles || [];
      let titlesList = `üë§ **–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:**\n\n`;
      
      if (userTitles.length === 0) {
        titlesList += 'üö´ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∏—Ç—É–ª–æ–≤';
      } else {
        userTitles.forEach(titleId => {
          if (TITLES[titleId]) {
            titlesList += `${TITLES[titleId].name}\n`;
          }
        });
      }

      ctx.reply(titlesList, { parse_mode: 'Markdown' });
    }

    // ... existing admin text handlers ...
  } catch (error) {
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!');
  }
});

bot.action('daily_tasks', async (ctx) => {
  const userTasks = await getUserTasks(ctx.from.id, true);
  let msg = 'üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n\n';
  
  dailyTasks.forEach(task => {
    const completed = userTasks.completed[task.id];
    const claimed = userTasks.claimed[task.id];
    const status = claimed ? '‚úÖ –ü–æ–ª—É—á–µ–Ω–æ' : completed ? 'üéÅ –ó–∞–±—Ä–∞—Ç—å' : '‚è≥ –í—ã–ø–æ–ª–Ω–∏—Ç—å';
    msg += `${status} ${task.name} (+${task.reward} –∑–≤—ë–∑–¥)\n${task.description}\n\n`;
  });
  
  const buttons = [];
  dailyTasks.forEach(task => {
    const completed = userTasks.completed[task.id];
    const claimed = userTasks.claimed[task.id];
    if (completed && !claimed) {
      buttons.push([Markup.button.callback(`üéÅ ${task.name}`, `claim_daily_${task.id}`)]);
    }
  });
  buttons.push([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]);
  
  ctx.editMessageText(msg, Markup.inlineKeyboard(buttons));
});

bot.action('sponsor_tasks', async (ctx) => {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
  showSponsorTask(ctx, 0);
});

async function showSponsorTask(ctx, taskIndex) {
  if (taskIndex >= SPONSOR_TASKS.length) {
    return ctx.editMessageText(
      'üéâ *–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!*\n\n–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!',
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ])
      }
    );
  }

  const task = SPONSOR_TASKS[taskIndex];
  const user = await getUser(ctx.from.id);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  const pendingCheck = await taskChecks.findOne({
    userId: ctx.from.id,
    taskId: task.id,
    status: 'pending'
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
  const completedTask = await taskChecks.findOne({
    userId: ctx.from.id,
    taskId: task.id,
    status: 'approved'
  });

  let taskText = `üìã *–ó–∞–¥–∞–Ω–∏–µ ${taskIndex + 1}/${SPONSOR_TASKS.length}*\n\n`;
  taskText += `*${task.title}*\n\n`;
  taskText += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.description}\n`;
  taskText += `üéÅ *–ù–∞–≥—Ä–∞–¥–∞:* ${task.reward} –∑–≤—ë–∑–¥\n\n`;
  
  if (completedTask) {
    taskText += `‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!*\n\n`;
  } else if (pendingCheck) {
    taskText += `‚è≥ *–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ*\n–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\\.\n\n`;
  } else {
    taskText += `üìã *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:* ${task.instruction}\n\n`;
  }

  const buttons = [];
  
  if (completedTask) {
    // –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    if (taskIndex < SPONSOR_TASKS.length - 1) {
      buttons.push([Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', `sponsor_task_${taskIndex + 1}`)]);
    }
  } else if (pendingCheck) {
    // –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ - —Ç–æ–ª—å–∫–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if (taskIndex > 0) {
      buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ', `sponsor_task_${taskIndex - 1}`)]);
    }
    if (taskIndex < SPONSOR_TASKS.length - 1) {
      buttons.push([Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ', `sponsor_task_${taskIndex + 1}`)]);
    }
  } else {
    // –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å
    buttons.push([
      Markup.button.url('üîó –ü–µ—Ä–µ–π—Ç–∏', task.link),
      Markup.button.callback('‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª', `task_complete_${task.id}`)
    ]);
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    if (taskIndex > 0) {
      buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ', `sponsor_task_${taskIndex - 1}`)]);
    }
    if (taskIndex < SPONSOR_TASKS.length - 1) {
      buttons.push([Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ', `sponsor_task_${taskIndex + 1}`)]);
    }
  }
  
  buttons.push([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]);

  ctx.editMessageText(taskText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard(buttons)
  });
}

bot.action('faq', async (ctx) => {
  const faqText = `‚ùì **–°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å** ‚ùì

üéØ **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**`;

  ctx.editMessageText(faqText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üåü –ö–∞–∫ —Ñ–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'faq_farming'), Markup.button.callback('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 'faq_bonus')],
      [Markup.button.callback('üéØ –ó–∞–¥–∞–Ω–∏—è', 'faq_tasks'), Markup.button.callback('üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π', 'faq_referrals')],
      [Markup.button.callback('üèÜ –¢–∏—Ç—É–ª—ã –∏ —Ä–∞–Ω–≥–∏', 'faq_titles'), Markup.button.callback('üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'faq_achievements')],
      [Markup.button.callback('üìä –£—Ä–æ–≤–Ω–∏ –∏–≥—Ä–æ–∫–∞', 'faq_levels'), Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã', 'faq_promocodes')],
      [Markup.button.callback('üí´ –°—Ç–∞—Ç—É—Å—ã', 'faq_statuses'), Markup.button.callback('üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'faq_support')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  });
});

// –î–µ—Ç–∞–ª—å–Ω—ã–µ FAQ —Ä–∞–∑–¥–µ–ª—ã
bot.action('faq_farming', async (ctx) => {
  const farmingText = `üåü **–ö–∞–∫ —Ñ–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã** üåü

üí° **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ:**
–§–∞—Ä–º - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥ –≤ –±–æ—Ç–µ. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 0.01 –∑–≤–µ–∑–¥—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É!

üî• **–ö–∞–∫ —Ñ–∞—Ä–º–∏—Ç—å:**
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üåü –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
2Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ (60 —Å–µ–∫—É–Ω–¥)
3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–∞–≥—Ä–∞–¥—É

‚è∞ **–í–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:**
‚Ä¢ ‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60 —Å–µ–∫—É–Ω–¥)
‚Ä¢ üí∞ –ù–∞–≥—Ä–∞–¥–∞: 0.01 –∑–≤–µ–∑–¥—ã –∑–∞ –∫–ª–∏–∫
‚Ä¢ üîÑ –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ: –º–æ–∂–µ—Ç–µ —Ñ–∞—Ä–º–∏—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ
‚Ä¢ üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ø–æ–ª—É—á–∞–π—Ç–µ pop-up —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º

üéØ **–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ñ–∞—Ä–º–∞:**
‚Ä¢ üïê –§–∞—Ä–º–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
‚Ä¢ üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
‚Ä¢ üéñÔ∏è 100 —Ñ–∞—Ä–º–æ–≤ = –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ç–∏—Ç—É–ª—É "–§–∞—Ä–º–µ—Ä"
‚Ä¢ üèÜ 1000 —Ñ–∞—Ä–º–æ–≤ = –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ú–∞—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞" (+10 –∑–≤—ë–∑–¥)

üíé **–°–æ–≤–µ—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞:**
‚Ä¢ –§–∞—Ä–º–∏—Ç–µ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
‚Ä¢ –°–æ–≤–º–µ—â–∞–π—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –¥–µ–ª–∞–º–∏
‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–≤—ë–∑–¥`;

  ctx.editMessageText(farmingText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
    ])
  });
});

bot.action('faq_bonus', async (ctx) => {
  const bonusText = `üéÅ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å** üéÅ

üåÖ **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ:**
–ë–æ–ª—å—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! –ù–∞–º–Ω–æ–≥–æ –≤—ã–≥–æ–¥–Ω–µ–µ –æ–±—ã—á–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞.

üí∞ **–ù–∞–≥—Ä–∞–¥–∞ –∏ —É—Å–ª–æ–≤–∏—è:**
‚Ä¢ üíé **3 –∑–≤–µ–∑–¥—ã** –∑–∞ –∫–∞–∂–¥—ã–π –∑–∞—Ö–æ–¥
‚Ä¢ ‚è∞ **–†–∞–∑ –≤ –¥–µ–Ω—å** (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00)
‚Ä¢ üîÑ **–ï–∂–µ–¥–Ω–µ–≤–Ω–æ** - –∑–∞—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!

üìã **–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ (–Ω–∞–∂–º–∏—Ç–µ /start)
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üéÅ –ë–æ–Ω—É—Å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ 3 –∑–≤–µ–∑–¥—ã!
4Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã

üìä **–°–∏—Å—Ç–µ–º–∞ —Å–µ—Ä–∏–π:**
‚Ä¢ üî• –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞—Ö–æ–¥—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤–∞—à—É —Å–µ—Ä–∏—é
‚Ä¢ üìÖ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = —Ç–∏—Ç—É–ª "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å"
‚Ä¢ ‚ö° 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ù–µ–¥–µ–ª—å–Ω—ã–π –≤–æ–∏–Ω" (+12 –∑–≤—ë–∑–¥)
‚Ä¢ üéØ 15 –±–æ–Ω—É—Å–æ–≤ = —Ç–∏—Ç—É–ª "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–æ–Ω—É—Å–∞–º–∏"

‚è∞ **–ö–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è:**
‚Ä¢ üåô –í –ø–æ–ª–Ω–æ—á—å (00:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
‚Ä¢ üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
‚Ä¢ ‚è≥ –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è - –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å

üéñÔ∏è **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞:**
‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –ö–ê–ñ–î–´–ô –¥–µ–Ω—å –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
‚Ä¢ –°–æ–≤–º–µ—â–∞–π—Ç–µ —Å —Ñ–∞—Ä–º–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ—Å—Ç–∞
‚Ä¢ 3 –∑–≤–µ–∑–¥—ã –≤ –¥–µ–Ω—å = 90 –∑–≤—ë–∑–¥ –≤ –º–µ—Å—è—Ü!`;

  ctx.editMessageText(bonusText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
    ])
  });
});

bot.action('faq_tasks', async (ctx) => {
  const tasksText = `üéØ **–°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π** üéØ

üìã **–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:**

üîπ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:**
‚Ä¢ üìÖ –û–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ üéÅ –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è

üî∏ **–ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:**
‚Ä¢ üéØ –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üíé –õ—É—á—à–∏–µ –Ω–∞–≥—Ä–∞–¥—ã (–ø–æ 3 –∑–≤–µ–∑–¥—ã)
‚Ä¢ üì∏ –¢—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º

üéØ **–ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è:**

**–®–∞–≥ 1:** –û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è
‚îî –ù–∞–∂–º–∏—Ç–µ "üéØ –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞" –≤ –º–µ–Ω—é

**–®–∞–≥ 2:** –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ  
‚îî –õ–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏ "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ" / "‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ"

**–®–∞–≥ 3:** –ò–∑—É—á–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
‚îî –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ

**–®–∞–≥ 4:** –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ
‚îî –ù–∞–∂–º–∏—Ç–µ "üîó –ü–µ—Ä–µ–π—Ç–∏" –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

**–®–∞–≥ 5:** –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚îî –ù–∞–∂–º–∏—Ç–µ "‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª"

**–®–∞–≥ 6:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç
‚îî –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ

**–®–∞–≥ 7:** –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏
‚îî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

üì∏ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º:**
‚Ä¢ üì± –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
‚Ä¢ ‚úÖ –í–∏–¥–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ üìù –°–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

üéÅ **–ù–∞–≥—Ä–∞–¥—ã:**
‚Ä¢ üéØ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ: 3 –∑–≤–µ–∑–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
‚Ä¢ üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ: —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
‚Ä¢ üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ç–∏—Ç—É–ª—É "–í–æ–∏–Ω –∑–∞–¥–∞–Ω–∏–π"

‚ùå **–ü–æ—á–µ–º—É –º–æ–≥—É—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å:**
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã`;

  ctx.editMessageText(tasksText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
    ])
  });
});

bot.action('faq_referrals', async (ctx) => {
  const referralsText = `üë• **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π** üë•

üéØ **–ó–∞—á–µ–º –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π:**
‚Ä¢ üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤—ë–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ç–∏—Ç—É–ª–∞–º –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
‚Ä¢ üìà –ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
‚Ä¢ üéñÔ∏è –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

üîó **–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞:**

**–®–∞–≥ 1:** –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É
‚îî –ù–∞–∂–º–∏—Ç–µ "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π" –≤ –º–µ–Ω—é

**–®–∞–≥ 2:** –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É
‚îî –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

**–®–∞–≥ 3:** –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏
‚îî –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –ª—é–±–æ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ/—Å–æ—Ü—Å–µ—Ç–∏

**–®–∞–≥ 4:** –î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ
‚îî –î—Ä—É–≥ –Ω–∞–∂–∏–º–∞–µ—Ç /start –≤ –±–æ—Ç–µ

**–®–∞–≥ 5:** –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!
‚îî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è –≤ –≤–∞—à –±–∞–ª–∞–Ω—Å

üíé **–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç–µ:**
‚Ä¢ ‚≠ê –ó–≤—ë–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
‚Ä¢ üìä –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ "–î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ"
‚Ä¢ üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ç–∏—Ç—É–ª–∞–º:
  ‚îî 3 –¥—Ä—É–≥–∞ = "–ê–º–±–∞—Å—Å–∞–¥–æ—Ä"  
  ‚îî 10 –¥—Ä—É–∑–µ–π = "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞" (+10 –∑–≤—ë–∑–¥)

üî• **–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:**
‚Ä¢ üí¨ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–∞—Ö/—á–∞—Ç–∞—Ö
‚Ä¢ üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–ª–∏–∑–∫–∏–º –¥—Ä—É–∑—å—è–º
‚Ä¢ üåê –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
‚Ä¢ üéÆ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ª—é–±–∏—Ç–µ–ª–µ–π –∏–≥—Ä

üìã **–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ üö´ –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Ñ–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
‚Ä¢ ‚úÖ –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
‚Ä¢ üîÑ –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
‚Ä¢ üéØ –ö–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

üìä **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:**
‚Ä¢ üë§ –í –ø—Ä–æ—Ñ–∏–ª–µ –≤–∏–¥–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π
‚Ä¢ üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
‚Ä¢ üèÜ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–∏—Ç—É–ª–∞—Ö`;

  ctx.editMessageText(referralsText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
    ])
  });
});

bot.action('faq_titles', async (ctx) => {
  const titlesText = `üèÜ **–†–∞–Ω–≥–∏ –∏ —Ç–∏—Ç—É–ª—ã** üèÜ

üèÖ **–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–∞–Ω–≥–∏:**
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–≤—ë–∑–¥. –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–∞—à–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ!

**üìä –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤ (–ø–æ –∑–≤—ë–∑–¥–∞–º):**
‚Ä¢ ü•â **Bronze Star** - 0+ –∑–≤—ë–∑–¥
‚Ä¢ ü•à **Silver Star** - 50+ –∑–≤—ë–∑–¥  
‚Ä¢ ü•á **Gold Star** - 150+ –∑–≤—ë–∑–¥
‚Ä¢ üíé **Platinum Star** - 300+ –∑–≤—ë–∑–¥
‚Ä¢ üíç **Diamond Star** - 500+ –∑–≤—ë–∑–¥
‚Ä¢ üëë **Master Star** - 1000+ –∑–≤—ë–∑–¥
‚Ä¢ üèÜ **Grandmaster** - 2000+ –∑–≤—ë–∑–¥
‚Ä¢ ‚≠ê **Legend** - 5000+ –∑–≤—ë–∑–¥

üéñÔ∏è **–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∏—Ç—É–ª—ã:**
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–æ—Ç–µ. –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!

üëë **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏—Ç—É–ª–æ–≤:**

**üü¢ –û–±—ã—á–Ω—ã–µ —Ç–∏—Ç—É–ª—ã (10 —à—Ç—É–∫):**
‚Ä¢ üå± **–ù–æ–≤–∏—á–æ–∫** - –ù–∞—á–∞–ª –ø—É—Ç—å –≤ MagnumTap
‚Ä¢ ‚ö° **–§–∞—Ä–º–µ—Ä** - 30 –¥–µ–π—Å—Ç–≤–∏–π —Ñ–∞—Ä–º–∏–Ω–≥–∞  
‚Ä¢ üíé **–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä** - –°–æ–±—Ä–∞–ª 50 –∑–≤—ë–∑–¥
‚Ä¢ ü§ù **–ê–º–±–∞—Å—Å–∞–¥–æ—Ä** - –ü—Ä–∏–≥–ª–∞—Å–∏–ª 3 –¥—Ä—É–∑–µ–π
‚Ä¢ üìÖ **–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å** - 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
‚Ä¢ üéÅ **–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–æ–Ω—É—Å–∞–º–∏** - 15 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
‚Ä¢ üé´ **–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤** - 5 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚Ä¢ ‚öîÔ∏è **–í–æ–∏–Ω –∑–∞–¥–∞–Ω–∏–π** - 20 –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ üåü **–ó–≤—ë–∑–¥–Ω—ã–π –ª–æ—Ä–¥** - 200 –∑–≤—ë–∑–¥
‚Ä¢ üëë **–õ–µ–≥–µ–Ω–¥–∞** - 500 –∑–≤—ë–∑–¥ + 10 –¥—Ä—É–∑–µ–π

**üî¥ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏—Ç—É–ª—ã (3 —à—Ç—É–∫–∏):**
‚Ä¢ üåÖ **–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞** - –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
‚Ä¢ ü¶â **–ù–æ—á–Ω–∞—è —Å–æ–≤–∞** - –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ  
‚Ä¢ üí´ **VIP –≠–ª–∏—Ç–∞** - –í—ã–¥–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π

üéØ **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–∏—Ç—É–ª—ã:**

**–î–ª—è —Ñ–∞—Ä–º–∞:** 
‚îî –ù–∞–∂–∏–º–∞–π—Ç–µ "üåü –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã" 30 —Ä–∞–∑

**–î–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–∞:**
‚îî –ù–∞–∫–æ–ø–∏—Ç–µ 50 –∑–≤—ë–∑–¥ –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º

**–î–ª—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞:**
‚îî –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 3 —Ä–µ–∞–ª—å–Ω—ã—Ö –¥—Ä—É–∑–µ–π

**–î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è:**
‚îî –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∑–∞ –±–æ–Ω—É—Å–æ–º

**–î–ª—è –æ—Ö–æ—Ç–Ω–∏–∫–∞ –∑–∞ –±–æ–Ω—É—Å–∞–º–∏:**
‚îî –ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å 15 —Ä–∞–∑

**–î–ª—è –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:**
‚îî –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ 5 —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

**–î–ª—è –≤–æ–∏–Ω–∞ –∑–∞–¥–∞–Ω–∏–π:**
‚îî –í—ã–ø–æ–ª–Ω–∏—Ç–µ 20 –∑–∞–¥–∞–Ω–∏–π (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö + —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö)

**–î–ª—è –∑–≤—ë–∑–¥–Ω–æ–≥–æ –ª–æ—Ä–¥–∞:**
‚îî –ù–∞–∫–æ–ø–∏—Ç–µ 200 –∑–≤—ë–∑–¥

**–î–ª—è –ª–µ–≥–µ–Ω–¥—ã:**
‚îî –ù–∞–∫–æ–ø–∏—Ç–µ 500 –∑–≤—ë–∑–¥ –ò –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 10 –¥—Ä—É–∑–µ–π

üìä **–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–∏—Ç—É–ª—ã:**
1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üèÜ –ú–æ–∏ —Ç–∏—Ç—É–ª—ã"  
3Ô∏è‚É£ –£–≤–∏–¥–∏—Ç–µ –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–∏—Ç—É–ª—ã

üéñÔ∏è **–ì–ª–∞–≤–Ω—ã–π —Ç–∏—Ç—É–ª:**
–í –ø—Ä–æ—Ñ–∏–ª–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–∞—à –ª—É—á—à–∏–π —Ç–∏—Ç—É–ª –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É!`;

  ctx.editMessageText(titlesText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
    ])
  });
});

bot.action('faq_achievements', async (ctx) => {
  const achievementsText = `üéñÔ∏è **–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π** üéñÔ∏è

üèÖ **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ:**
–û—Å–æ–±—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ü–µ–ª–µ–π. –î–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤—ë–∑–¥—ã!

üéØ **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:**

üí∞ **"–°–æ—Ç–∫–∞"** (5 –∑–≤—ë–∑–¥)
‚îî –ù–∞–∫–æ–ø–∏—Ç–µ 100 –∑–≤—ë–∑–¥ –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º

ü§ù **"–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞"** (10 –∑–≤—ë–∑–¥)
‚îî –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 10 —Ä–µ–∞–ª—å–Ω—ã—Ö –¥—Ä—É–∑–µ–π

‚ö° **"–ù–µ–¥–µ–ª—å–Ω—ã–π –≤–æ–∏–Ω"** (12 –∑–≤—ë–∑–¥)  
‚îî –ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥

üåæ **"–ú–∞—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞"** (10 –∑–≤—ë–∑–¥)
‚îî –°–¥–µ–ª–∞–π—Ç–µ 1000 –¥–µ–π—Å—Ç–≤–∏–π —Ñ–∞—Ä–º–∏–Ω–≥–∞

üé´ **"–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –ø—Ä–æ–º–æ"** (15 –∑–≤—ë–∑–¥)
‚îî –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ 15 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

üìä **–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å:**
1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
3Ô∏è‚É£ –£–≤–∏–¥–∏—Ç–µ –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å

üéØ **–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è:**

**–î–ª—è "–°–æ—Ç–∫–∏":**
‚Ä¢ –§–∞—Ä–º–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ (0.01 –∑–∞ –∫–ª–∏–∫ = 10,000 –∫–ª–∏–∫–æ–≤)
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã (3 –∑–≤–µ–∑–¥—ã –≤ –¥–µ–Ω—å)
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è (3 –∑–≤–µ–∑–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ)
‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã

**–î–ª—è "–°–æ—Ü–∏–∞–ª—å–Ω–æ–π –±–∞–±–æ—á–∫–∏":**
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π/–∫–æ–ª–ª–µ–≥
‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –±–æ—Ç–µ –∑–Ω–∞–∫–æ–º—ã–º

**–î–ª—è "–ù–µ–¥–µ–ª—å–Ω–æ–≥–æ –≤–æ–∏–Ω–∞":**
‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –ö–ê–ñ–î–´–ô –¥–µ–Ω—å –∑–∞ –±–æ–Ω—É—Å–æ–º
‚Ä¢ –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

**–î–ª—è "–ú–∞—Å—Ç–µ—Ä–∞ —Ñ–∞—Ä–º–∞":**
‚Ä¢ –§–∞—Ä–º–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã
‚Ä¢ 1000 –∫–ª–∏–∫–æ–≤ = –ø—Ä–∏–º–µ—Ä–Ω–æ 1 –º–µ—Å—è—Ü –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

**–î–ª—è "–û—Ö–æ—Ç–Ω–∏–∫–∞ –∑–∞ –ø—Ä–æ–º–æ":**
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö

üèÜ **–ù–∞–≥—Ä–∞–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ:**
–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –∑–≤—ë–∑–¥—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Å—Ä–∞–∑—É!`;

  ctx.editMessageText(achievementsText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
    ])
  });
});

bot.action('faq_levels', async (ctx) => {
  const levelsText = `üìä **–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π** üìä

üéØ **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ:**
–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤–∞—à–µ–≥–æ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –±–æ—Ç–µ. –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–≤—ë–∑–¥.

‚≠ê **–í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É:**

ü•â **Bronze Star** - 50 –∑–≤—ë–∑–¥
‚îî –ü–µ—Ä–≤—ã–π —Å–µ—Ä—å–µ–∑–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å

ü•à **Silver Star** - 150 –∑–≤—ë–∑–¥  
‚îî –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤

ü•á **Gold Star** - 300 –∑–≤—ë–∑–¥
‚îî –î–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ñ–∞–Ω–∞—Ç–æ–≤

üíé **Platinum Star** - 500 –∑–≤—ë–∑–¥
‚îî –≠–ª–∏—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å

üí† **Diamond Star** - 1000 –∑–≤—ë–∑–¥
‚îî –î–ª—è —Å–∞–º—ã—Ö –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö

üëë **Master Star** - 2000 –∑–≤—ë–∑–¥
‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!

üìä **–ö–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å:**
‚Ä¢ –í –ø—Ä–æ—Ñ–∏–ª–µ –µ—Å—Ç—å —à–∫–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
‚Ä¢ –í–∏–¥–Ω–æ —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –æ—Å—Ç–∞–ª–æ—Å—å

üéØ **–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–æ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è:**

**–î–æ Bronze (50 –∑–≤—ë–∑–¥):**
‚Ä¢ 17 –¥–Ω–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
‚Ä¢ 5000 –∫–ª–∏–∫–æ–≤ —Ñ–∞—Ä–º–∞
‚Ä¢ 17 —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π

**–î–æ Silver (150 –∑–≤—ë–∑–¥):**
‚Ä¢ 50 –¥–Ω–µ–π –±–æ–Ω—É—Å–æ–≤
‚Ä¢ 15000 –∫–ª–∏–∫–æ–≤ —Ñ–∞—Ä–º–∞  
‚Ä¢ 50 —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π

**–î–æ Gold (300 –∑–≤—ë–∑–¥):**
‚Ä¢ 100 –¥–Ω–µ–π –±–æ–Ω—É—Å–æ–≤
‚Ä¢ 30000 –∫–ª–∏–∫–æ–≤ —Ñ–∞—Ä–º–∞
‚Ä¢ 100 —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π

üí° **–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:**
‚Ä¢ üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (–æ—Å–Ω–æ–≤–∞)
‚Ä¢ üéØ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è (–±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç)
‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π (–±–æ–Ω—É—Å—ã)
‚Ä¢ üåü –§–∞—Ä–º (–¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞)
‚Ä¢ üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤—ë–∑–¥—ã)

üèÜ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π:**
‚Ä¢ –ü—Ä–µ—Å—Ç–∏–∂ –∏ —Å—Ç–∞—Ç—É—Å
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ–ø—ã—Ç–∞
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —Ä–æ—Å—Ç–∞`;

  ctx.editMessageText(levelsText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
    ])
  });
});

bot.action('faq_promocodes', async (ctx) => {
  const promocodesText = `üé´ **–ü—Ä–æ–º–æ–∫–æ–¥—ã** üé´

üíé **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ:**
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤—ë–∑–¥—ã! –ü—É–±–ª–∏–∫—É—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.

üîë **–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:**

**–®–∞–≥ 1:** –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥
‚îî –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –∞–¥–º–∏–Ω–æ–≤

**–®–∞–≥ 2:** –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤  
‚îî –ù–∞–∂–º–∏—Ç–µ "üé´ –ü—Ä–æ–º–æ–∫–æ–¥" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é

**–®–∞–≥ 3:** –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥
‚îî –ù–∞–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –¢–û–ß–ù–û –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ

**–®–∞–≥ 4:** –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!
‚îî –ó–≤—ë–∑–¥—ã –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üéØ **–ì–¥–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:**
‚Ä¢ üì¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
‚Ä¢ üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –∞–∫—Ü–∏–∏  
‚Ä¢ üèÜ –ö–æ–Ω–∫—É—Ä—Å—ã –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
‚Ä¢ üéÆ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ üë• –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã

üí∞ **–¢–∏–ø—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:**
‚Ä¢ üéÅ **–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ** - –ø–æ –æ—Å–æ–±—ã–º –¥–∞—Ç–∞–º
‚Ä¢ üéØ **–ò–≤–µ–Ω—Ç–æ–≤—ã–µ** - –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö
‚Ä¢ üë• **–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ** - –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
‚Ä¢ üî• **–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ** - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ

‚ö†Ô∏è **–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ üö´ –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –û–î–ò–ù —Ä–∞–∑
‚Ä¢ ‚è∞ –ü—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–≥—É—Ç –∏—Å—Ç–µ–∫–∞—Ç—å
‚Ä¢ üë• –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
‚Ä¢ ‚úÖ –ö–æ–¥—ã —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É

üèÜ **–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ç–∏—Ç—É–ª–∞–º:**
‚Ä¢ 5 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ = —Ç–∏—Ç—É–ª "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"
‚Ä¢ 15 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ = –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –ø—Ä–æ–º–æ" (+15 –∑–≤—ë–∑–¥)

üîç **–°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É:**
‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π (–∏–Ω–æ–≥–¥–∞ –¥–∞—é—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã)

‚ùå **–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:**
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–¥–∞
‚Ä¢ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π`;

  ctx.editMessageText(promocodesText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
    ])
  });
});

bot.action('faq_statuses', async (ctx) => {
  const statusesText = `üí´ **–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤** üí´

üëë **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ:**
–í–∞—à –æ—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –±–æ—Ç–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!

üéñÔ∏è **–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏:**

üëë **–í–ª–∞–¥–µ–ª–µ—Ü** (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
‚îî –°–æ–∑–¥–∞—Ç–µ–ª—å –∏ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞

‚ö° **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)  
‚îî –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º

üõ°Ô∏è **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä** (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)
‚îî –ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

üíé **VIP Gold** (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4)
‚îî –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è

üí´ **VIP** (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5)
‚îî –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

‚úÖ **–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π** (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 6)
‚îî –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

üéÆ **–£—á–∞—Å—Ç–Ω–∏–∫** (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 7)
‚îî –û–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å)

üéØ **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å:**
‚Ä¢ üéÆ **–£—á–∞—Å—Ç–Ω–∏–∫** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ ‚úÖ **–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π** - –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ
‚Ä¢ üí´ **VIP** - –∑–∞ –æ—Å–æ–±—ã–µ –∑–∞—Å–ª—É–≥–∏
‚Ä¢ üíé **VIP Gold** - –∑–∞ –≤—ã–¥–∞—é—â–∏–µ—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ üõ°Ô∏è **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä** - –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
‚Ä¢ ‚ö° **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** - –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
‚Ä¢ üëë **–í–ª–∞–¥–µ–ª–µ—Ü** - —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞

üìä **–ì–¥–µ –≤–∏–¥–Ω–æ —Å—Ç–∞—Ç—É—Å:**
‚Ä¢ –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ
‚Ä¢ –†—è–¥–æ–º —Å –∏–º–µ–Ω–µ–º –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
‚Ä¢ –ü—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏

üéÅ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:**
‚Ä¢ üåü –ü—Ä–µ—Å—Ç–∏–∂ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
‚Ä¢ üéØ –û—Å–æ–±–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
‚Ä¢ üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ üèÜ –°—Ç–∞—Ç—É—Å–Ω—ã–π —Å–∏–º–≤–æ–ª

üìã **–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:**
‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –≤—ã–¥–∞—é—Ç—Å—è –∑–∞ –∑–∞—Å–ª—É–≥–∏
‚Ä¢ –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å –∏–ª–∏ –æ–±–º–µ–Ω—è—Ç—å
‚Ä¢ –ú–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–æ–∑–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
‚Ä¢ –í—ã—Å–æ–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–≤–µ—Ä–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏`;

  ctx.editMessageText(statusesText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
    ])
  });
});

bot.action('faq_support', async (ctx) => {
  const supportText = `üõ†Ô∏è **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞** üõ†Ô∏è

üí¨ **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ:**
–°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å –ª—é–±–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–º!

üéØ **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É:**

**–®–∞–≥ 1:** –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚îî –ó–∞–π–¥–∏—Ç–µ –≤ "üë§ –ü—Ä–æ—Ñ–∏–ª—å" ‚Üí "üõ†Ô∏è –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞"

**–®–∞–≥ 2:** –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É
‚îî –ù–∞–∂–º–∏—Ç–µ "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"

**–®–∞–≥ 3:** –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É
‚îî –ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ

**–®–∞–≥ 4:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É
‚îî –ù–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

**–®–∞–≥ 5:** –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞
‚îî –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

üìã **–° —á–µ–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è:**
‚Ä¢ üêõ –ë–∞–≥–∏ –∏ –æ—à–∏–±–∫–∏ –≤ –±–æ—Ç–µ
‚Ä¢ ‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É
‚Ä¢ üí∞ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
‚Ä¢ üéØ –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
‚Ä¢ üé´ –í–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º
‚Ä¢ üë• –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
‚Ä¢ üèÜ –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–∏—Ç—É–ª–∞–º
‚Ä¢ üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

‚úçÔ∏è **–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É:**
‚Ä¢ üìù –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å
‚Ä¢ ‚è∞ –£–∫–∞–∂–∏—Ç–µ –∫–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ
‚Ä¢ üîÑ –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏
‚Ä¢ üì± –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

üé´ **–°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫:**
‚Ä¢ üÜï **–ù–æ–≤–∞—è** - —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞
‚Ä¢ ‚öôÔ∏è **–í —Ä–∞–±–æ—Ç–µ** - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ ‚úÖ **–†–µ—à–µ–Ω–∞** - –ø—Ä–æ–±–ª–µ–º–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞
‚Ä¢ ‚ùå **–û—Ç–∫–ª–æ–Ω–µ–Ω–∞** - –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞
‚Ä¢ üîí **–ó–∞–∫—Ä—ã—Ç–∞** - –∑–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

üìä **–ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞—è–≤–∫–∏:**
1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ "üõ†Ô∏è –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üé´ –ú–æ–∏ –∑–∞—è–≤–∫–∏"
3Ô∏è‚É£ –£–≤–∏–¥–∏—Ç–µ –≤—Å–µ –≤–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è

‚ö° **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:**
‚Ä¢ üì± –û–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
‚Ä¢ üî• –°—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã—Å—Ç—Ä–µ–µ
‚Ä¢ üìÖ –í –≤—ã—Ö–æ–¥–Ω—ã–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏

üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è:**
‚Ä¢ –ü–∏—à–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–≤–æ–π ID
‚Ä¢ –ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –¥—É–±–ª–∏ –∑–∞—è–≤–æ–∫`;

  ctx.editMessageText(supportText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
    ])
  });
});

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
bot.action('achievements', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const userAchievements = user.achievements || [];
  
  let achievementsText = `üéñÔ∏è *–î–û–°–¢–ò–ñ–ï–ù–ò–Ø* üéñÔ∏è\n\n`;
  
  for (const [achievementId, achievement] of Object.entries(ACHIEVEMENTS)) {
    const isEarned = userAchievements.includes(achievementId);
    const progress = getUserProgress(user, achievement);
    const progressPercent = Math.min(100, Math.floor((progress / achievement.requirement) * 100));
    
    if (isEarned) {
      achievementsText += `‚úÖ ${achievement.icon} *${achievement.name}*\n`;
      achievementsText += `üìù ${achievement.description}\n`;
      achievementsText += `üéÅ –ù–∞–≥—Ä–∞–¥–∞: +${achievement.reward} –∑–≤—ë–∑–¥ *(–ø–æ–ª—É—á–µ–Ω–æ)*\n\n`;
    } else {
      achievementsText += `‚¨ú ${achievement.icon} *${achievement.name}*\n`;
      achievementsText += `üìù ${achievement.description}\n`;
      achievementsText += `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}/${achievement.requirement} (${progressPercent}%)\n`;
      achievementsText += `üéÅ –ù–∞–≥—Ä–∞–¥–∞: +${achievement.reward} –∑–≤—ë–∑–¥\n\n`;
    }
  }
  
  const earnedCount = userAchievements.length;
  const totalCount = Object.keys(ACHIEVEMENTS).length;
  achievementsText += `üìà *–ü–æ–ª—É—á–µ–Ω–æ: ${earnedCount}/${totalCount} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π*`;
  
  ctx.editMessageText(achievementsText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üë§ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'profile')]
    ])
  });
});

function getUserProgress(user, achievement) {
  switch (achievement.condition) {
    case 'stars':
      return user.stars || 0;
    case 'invited':
      return user.invited || 0;
    case 'daily_streak':
      return user.dailyStreak || 0;
    case 'farm_count':
      return user.farmCount || 0;
    case 'promo_count':
      return user.promoCount || 0;
    default:
      return 0;
  }
}

// –ú–µ–Ω—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
bot.action('support_menu', async (ctx) => {
  const supportText = `üõ†Ô∏è *–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê* üõ†Ô∏è

üí¨ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*

üÜï *–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É* ‚Äî –æ–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É
üìã *–ú–æ–∏ –∑–∞—è–≤–∫–∏* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫

‚ö° –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!`;

  ctx.editMessageText(supportText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'support_create')],
      [Markup.button.callback('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', 'my_tickets')],
      [Markup.button.callback('üë§ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'profile')]
    ])
  });
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
bot.action('support_create', async (ctx) => {
  const supportText = `üõ†Ô∏è **–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê** üõ†Ô∏è

üí¨ **–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:**

–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:
‚Ä¢ –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?
‚Ä¢ –ö–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?
‚Ä¢ –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏?

‚ö° –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!`;

  // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å force_reply
  await ctx.deleteMessage();
  
  ctx.reply(supportText, {
    parse_mode: 'Markdown',
    reply_markup: {
      force_reply: true,
      input_field_placeholder: '–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É...'
    }
  });
});

// –ú–æ–∏ –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
bot.action('my_tickets', async (ctx) => {
  const userTickets = await supportTickets.find({ userId: ctx.from.id }).sort({ createdAt: -1 }).limit(10).toArray();
  
  let ticketsText = `üé´ *–ú–û–ò –ó–ê–Ø–í–ö–ò –í –ü–û–î–î–ï–†–ñ–ö–£* üé´\n\n`;

  if (userTickets.length === 0) {
    ticketsText += 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.';
  } else {
      userTickets.forEach(ticket => {
    const statusInfo = TICKET_STATUSES[ticket.status];
    const date = ticket.createdAt ? ticket.createdAt.toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const shortId = ticket._id.toString().slice(-6);
    
    ticketsText += `${statusInfo.emoji} *#${shortId}* ‚Äî ${statusInfo.name}\n`;
    ticketsText += `üìÖ ${date} | üí¨ ${ticket.message.substring(0, 50)}${ticket.message.length > 50 ? '...' : ''}\n`;
    
    if (ticket.adminResponse) {
      ticketsText += `üí¨ *–û—Ç–≤–µ—Ç:* ${ticket.adminResponse.substring(0, 50)}${ticket.adminResponse.length > 50 ? '...' : ''}\n`;
    }
    
    ticketsText += `\n`;
  });
  }

  ctx.editMessageText(ticketsText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'support_create')],
      [Markup.button.callback('üõ†Ô∏è –ù–∞–∑–∞–¥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'support_menu')]
    ])
  });
});

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∞ –∏ –±–æ–Ω—É—Å–∞
bot.action('farm', requireSubscription(async (ctx) => {
  const user = await getUser(ctx.from.id);
  const canFarm = !user.lastFarm || (now() - user.lastFarm) >= 60;
  
  if (canFarm) {
    await users.updateOne({ id: ctx.from.id }, { 
      $inc: { stars: 0.01, farmCount: 1 }, 
      $set: { lastFarm: now() } 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const newTitles = await checkAndAwardTitles(ctx.from.id);
    const newAchievements = await checkAndAwardAchievements(ctx.from.id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    await updateMainMenuBalance(ctx);
    
    if (newTitles.length > 0 && newAchievements.length > 0) {
      ctx.answerCbQuery('‚≠ê +0.01 –∑–≤–µ–∑–¥—ã! üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª! üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!');
    } else if (newTitles.length > 0) {
      ctx.answerCbQuery('‚≠ê +0.01 –∑–≤–µ–∑–¥—ã! üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª –ø–æ–ª—É—á–µ–Ω!');
    } else if (newAchievements.length > 0) {
      ctx.answerCbQuery(`‚≠ê +0.01 –∑–≤–µ–∑–¥—ã! üéñÔ∏è ${newAchievements[0].name}!`);
    } else {
      ctx.answerCbQuery('‚≠ê +0.01 –∑–≤–µ–∑–¥—ã!');
    }
  } else {
    const timeLeft = 60 - (now() - user.lastFarm);
    ctx.answerCbQuery(`‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞: ${timeLeft} —Å–µ–∫.`);
  }
}));

bot.action('bonus', requireSubscription(async (ctx) => {
  const user = await getUser(ctx.from.id);
  const today = Math.floor(Date.now() / (1000 * 60 * 60 * 24));
  const canBonus = !user.lastBonus || user.lastBonus < today;
  
  console.log(`–ë–æ–Ω—É—Å - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from.id}, lastBonus: ${user.lastBonus}, today: ${today}, canBonus: ${canBonus}`);
  
  if (canBonus) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞—Ö–æ–¥–æ–≤
    const yesterday = today - 1;
    let dailyStreak = 1;
    if (user.lastBonus === yesterday) {
      dailyStreak = (user.dailyStreak || 0) + 1;
    }
    
    await users.updateOne({ id: ctx.from.id }, { 
      $inc: { stars: 3, bonusCount: 1 }, 
      $set: { lastBonus: today, dailyStreak: dailyStreak } 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const newTitles = await checkAndAwardTitles(ctx.from.id);
    const newAchievements = await checkAndAwardAchievements(ctx.from.id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    await updateMainMenuBalance(ctx);
    
    if (newTitles.length > 0 && newAchievements.length > 0) {
      ctx.answerCbQuery('üéÅ +3 –∑–≤–µ–∑–¥—ã! üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª! üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!');
    } else if (newTitles.length > 0) {
      ctx.answerCbQuery('üéÅ +3 –∑–≤–µ–∑–¥—ã –±–æ–Ω—É—Å! üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª!');
    } else if (newAchievements.length > 0) {
      ctx.answerCbQuery(`üéÅ +3 –∑–≤–µ–∑–¥—ã! üéñÔ∏è ${newAchievements[0].name}!`);
    } else {
      ctx.answerCbQuery('üéÅ +3 –∑–≤–µ–∑–¥—ã! –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!');
    }
  } else {
    // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (00:00)
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);
    
    const timeLeft = tomorrow.getTime() - now.getTime();
    const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
    const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    
    console.log(`–ë–æ–Ω—É—Å - timeLeft: ${timeLeft}, hoursLeft: ${hoursLeft}, minutesLeft: ${minutesLeft}`);
    
    if (hoursLeft > 0) {
      ctx.answerCbQuery(`üïê –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${hoursLeft}—á ${minutesLeft}–º–∏–Ω`);
    } else {
      ctx.answerCbQuery(`üïê –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${minutesLeft} –º–∏–Ω—É—Ç`);
    }
  }
}));

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
bot.action(/^claim_daily_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const task = dailyTasks.find(t => t.id === taskId);
  if (!task) return;
  
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'daily' },
    { $set: { [`claimed.${taskId}`]: true } }
  );
  await users.updateOne({ id: ctx.from.id }, { $inc: { stars: task.reward } });
  
  ctx.answerCbQuery(`üéÅ –ü–æ–ª—É—á–µ–Ω–æ ${task.reward} –∑–≤—ë–∑–¥!`);
  ctx.action('daily_tasks')(ctx);
});

bot.action(/^claim_sponsor_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const task = sponsorTasks.find(t => t.id === taskId);
  if (!task) return;
  
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'sponsor' },
    { $set: { [`claimed.${taskId}`]: true } }
  );
  await users.updateOne({ id: ctx.from.id }, { $inc: { stars: task.reward } });
  
  ctx.answerCbQuery(`üéÅ –ü–æ–ª—É—á–µ–Ω–æ ${task.reward} –∑–≤—ë–∑–¥!`);
  ctx.action('sponsor_tasks')(ctx);
});

bot.action(/^check_sponsor_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'sponsor' },
    { $set: { [`completed.${taskId}`]: true } }
  );
  
  ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
  ctx.action('sponsor_tasks')(ctx);
});

connectDB().then(() => {
  bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
bot.action(/^ticket_accept_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const ticketId = ctx.match[1];
  const objectId = new ObjectId(ticketId);
  await updateTicketStatus(objectId, 'in_progress');
  await notifyUserStatusChange(objectId, '–ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É ‚öôÔ∏è');
  await updateTicketInChannel(objectId);
  
  ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É');
});

bot.action(/^ticket_reject_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const ticketId = ctx.match[1];
  const objectId = new ObjectId(ticketId);
  await updateTicketStatus(objectId, 'rejected');
  await notifyUserStatusChange(objectId, '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå');
  await updateTicketInChannel(objectId);
  
  ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
});

bot.action(/^ticket_resolve_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const ticketId = ctx.match[1];
  const objectId = new ObjectId(ticketId);
  await updateTicketStatus(objectId, 'resolved');
  await notifyUserStatusChange(objectId, '—Ä–µ—à–µ–Ω–∞ ‚úÖ');
  await updateTicketInChannel(objectId);
  
  ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ —Ä–µ—à–µ–Ω–∞');
});

bot.action(/^ticket_close_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const ticketId = ctx.match[1];
  const objectId = new ObjectId(ticketId);
  await updateTicketStatus(objectId, 'closed');
  await notifyUserStatusChange(objectId, '–∑–∞–∫—Ä—ã—Ç–∞ üîí');
  await updateTicketInChannel(objectId);
  
  ctx.answerCbQuery('üîí –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞');
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—è–º —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
bot.action(/^sponsor_task_(\d+)$/, async (ctx) => {
  const taskIndex = parseInt(ctx.match[1]);
  showSponsorTask(ctx, taskIndex);
});

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
bot.action(/^task_complete_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const task = SPONSOR_TASKS.find(t => t.id === taskId);
  
  if (!task) {
    return ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }

  await ctx.deleteMessage();
  
  ctx.reply(
    `üì∑ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è\n\n` +
    `üìã –ó–∞–¥–∞–Ω–∏–µ: ${task.title}\n` +
    `üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${task.instruction}\n\n` +
    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n` +
    `üÜî ID –∑–∞–¥–∞–Ω–∏—è: ${task.id}`,
    {
      reply_markup: {
        force_reply: true,
        input_field_placeholder: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç...'
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
bot.action(/^task_approve_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const checkId = ctx.match[1];
  const objectId = new ObjectId(checkId);
  
  const taskCheck = await taskChecks.findOne({ _id: objectId });
  if (!taskCheck) {
    return ctx.answerCbQuery('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  const task = SPONSOR_TASKS.find(t => t.id === taskCheck.taskId);
  if (!task) {
    return ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  await updateTaskCheckStatus(objectId, 'approved');
  
  // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
  await users.updateOne(
    { id: taskCheck.userId },
    { $inc: { stars: task.reward } }
  );
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    await bot.telegram.sendMessage(
      taskCheck.userId,
      `‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!*\n\n` +
      `üìã *–ó–∞–¥–∞–Ω–∏–µ:* ${task.title}\n` +
      `üéÅ *–ü–æ–ª—É—á–µ–Ω–æ:* +${task.reward} –∑–≤—ë–∑–¥\n\n` +
      `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º!`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
  
  await updateTaskCheckInChannel(objectId);
  ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ');
});

bot.action(/^task_reject_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const checkId = ctx.match[1];
  const objectId = new ObjectId(checkId);
  
  const taskCheck = await taskChecks.findOne({ _id: objectId });
  if (!taskCheck) {
    return ctx.answerCbQuery('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  const task = SPONSOR_TASKS.find(t => t.id === taskCheck.taskId);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  await updateTaskCheckStatus(objectId, 'rejected');
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    await bot.telegram.sendMessage(
      taskCheck.userId,
      `‚ùå *–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ*\n\n` +
      `üìã *–ó–∞–¥–∞–Ω–∏–µ:* ${task ? task.title : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å–Ω–æ–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
  
  await updateTaskCheckInChannel(objectId);
  ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
});

bot.action(/^task_reply_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const checkId = ctx.match[1];
  
  try {
    await bot.telegram.sendMessage(
      ctx.from.id,
      `üí¨ *–û—Ç–≤–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è #${checkId.slice(-6)}*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          force_reply: true,
          input_field_placeholder: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...'
        }
      }
    );
    
    ctx.answerCbQuery('üí¨ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:', error);
    ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});

bot.action(/^ticket_reply_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const ticketId = ctx.match[1];
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    await bot.telegram.sendMessage(
      ctx.from.id,
      `üí¨ *–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∑–∞—è–≤–∫–µ #${ticketId.slice(-6)}*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          force_reply: true,
          input_field_placeholder: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...'
        }
      }
    );
    
    ctx.answerCbQuery('üí¨ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:', error);
    ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});