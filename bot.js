require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { MongoClient } = require('mongodb');

if (!process.env.BOT_TOKEN) {
  throw new Error('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
}
if (!process.env.MONGODB_URI) {
  throw new Error('–ù–µ –∑–∞–¥–∞–Ω MONGODB_URI –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
}

const bot = new Telegraf(process.env.BOT_TOKEN);
const mongo = new MongoClient(process.env.MONGODB_URI);

let db, users;

async function connectDB() {
  await mongo.connect();
  db = mongo.db();
  users = db.collection('users');
}

function now() {
  return Math.floor(Date.now() / 1000);
}

async function getUser(id) {
  let user = await users.findOne({ id });
  if (!user) {
    user = { id, stars: 0, lastFarm: 0, lastBonus: 0 };
    await users.insertOne(user);
  }
  return user;
}

const REQUIRED_CHANNEL = process.env.REQUIRED_CHANNEL;

async function checkSubscription(ctx) {
  if (!REQUIRED_CHANNEL) return true;
  try {
    const member = await ctx.telegram.getChatMember(REQUIRED_CHANNEL, ctx.from.id);
    if (["member", "administrator", "creator"].includes(member.status)) {
      return true;
    }
    // not subscribed
  } catch (e) {
    // channel not found or user not found
  }
  await ctx.reply(
    `‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}` }
          ]
        ]
      }
    }
  );
  return false;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
function withSubscription(handler) {
  return async (ctx, ...args) => {
    if (!(await checkSubscription(ctx))) return;
    return handler(ctx, ...args);
  };
}

const ADMIN_IDS = (process.env.ADMIN_IDS || '').split(',').map(id => id.trim()).filter(Boolean);

function isAdmin(userId) {
  return ADMIN_IDS.includes(String(userId));
}

function mainMenuKeyboard(userId) {
  const rows = [
    [
      Markup.button.callback('üåü –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'farm'),
      Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')
    ],
    [
      Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'),
      Markup.button.callback('üèÜ –¢–æ–ø', 'top')
    ],
    [
      Markup.button.callback('ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'invite'),
      Markup.button.callback('üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'promo')
    ]
  ];
  if (isAdmin(userId)) {
    rows.push([Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')]);
  }
  return Markup.inlineKeyboard(rows);
}

function mainMenuButton(userId) {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
    ...(isAdmin(userId) ? [[Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')]] : [])
  ]);
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ force_reply
bot.on('text', withSubscription(async (ctx) => {
  if (ctx.message.reply_to_message) {
    const replyText = ctx.message.reply_to_message.text;
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∞–¥–º–∏–Ω)
    if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥')) {
      if (!isAdmin(ctx.from.id)) return;
      const [code, stars, max] = ctx.message.text.trim().split(/\s+/);
      if (!code || isNaN(Number(stars)) || isNaN(Number(max))) {
        console.log(`[ADMIN] ${ctx.from.id} –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${ctx.message.text}`);
        return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: –ö–û–î 10 5', mainMenuButton(ctx.from.id));
      }
      promoCodes[code.toUpperCase()] = { stars: Number(stars), max: Number(max), used: 0 };
      console.log(`[ADMIN] ${ctx.from.id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥ ${code.toUpperCase()} –Ω–∞ ${stars} –∑–≤—ë–∑–¥, ${max} –∞–∫—Ç–∏–≤–∞—Ü–∏–π`);
      return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ ${code.toUpperCase()} –Ω–∞ ${stars} –∑–≤—ë–∑–¥, ${max} –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω.`, mainMenuButton(ctx.from.id));
    }
    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º')) {
      const code = ctx.message.text.trim().toUpperCase();
      const userId = ctx.from.id;
      if (userPromoUsed[userId + ':' + code]) {
        console.log(`[USER] ${userId} –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${code}`);
        return ctx.reply('‚ùó –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.', mainMenuButton(userId));
      }
      const promo = promoCodes[code];
      if (promo && promo.used < promo.max) {
        await users.updateOne({ id: userId }, { $inc: { stars: promo.stars } });
        userPromoUsed[userId + ':' + code] = true;
        promoCodes[code].used++;
        console.log(`[USER] ${userId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ ${code}, –æ—Å—Ç–∞–ª–æ—Å—å ${promo.max - promo.used}`);
        return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${promo.stars} –∑–≤—ë–∑–¥. –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${promo.max - promo.used}`, mainMenuButton(userId));
      } else if (promo) {
        console.log(`[USER] ${userId} –ø–æ–ø—ã—Ç–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${code}`);
        return ctx.reply('‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.', mainMenuButton(userId));
      } else {
        console.log(`[USER] ${userId} –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ${code}`);
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.', mainMenuButton(userId));
      }
    }
    // –†–∞—Å—Å—ã–ª–∫–∞ (–∞–¥–º–∏–Ω)
    if (replyText.includes('—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')) {
      if (!isAdmin(ctx.from.id)) return;
      const text = ctx.message.text;
      const allUsers = await users.find().toArray();
      let sent = 0;
      for (const u of allUsers) {
        try {
          await ctx.telegram.sendMessage(u.id, `üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n${text}`);
          sent++;
        } catch {}
      }
      console.log(`[ADMIN] ${ctx.from.id} —Å–¥–µ–ª–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${sent}`);
      return ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`, mainMenuButton(ctx.from.id));
    }
  }
}));

// –ü—Ä–æ–º–æ–∫–æ–¥—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π
const promoCodes = {
  // 'CODE': { stars: 10, max: 5, used: 0 }
  'MAGNUM10': { stars: 10, max: 100, used: 0 },
  'STAR50': { stars: 50, max: 10, used: 0 }
};

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å —É—á—ë—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
const userPromoUsed = {};

// –•–µ–ª–ø–µ—Ä –¥–ª—è –≥–∞—à–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –ø–∞–Ω–µ–ª–µ–π
async function tryDisableOldPanel(ctx) {
  try {
    await ctx.editMessageText('–ü–∞–Ω–µ–ª—å —É—Å—Ç–∞—Ä–µ–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.');
  } catch (e) {}
}

// –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è action: –µ—Å–ª–∏ action –Ω–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–∞—Å–∏–º —Å—Ç–∞—Ä—É—é –ø–∞–Ω–µ–ª—å
function withPanelGuard(handler) {
  return async (ctx, ...args) => {
    // –ï—Å–ª–∏ —ç—Ç–æ callback_query –∏ message –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, message_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º /start), –≥–∞—Å–∏–º –ø–∞–Ω–µ–ª—å
    if (ctx.updateType === 'callback_query' && ctx.callbackQuery && ctx.callbackQuery.message) {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ "—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –ø—Ä–æ—â–µ –≤—Å–µ–≥–¥–∞ –≥–∞—Å–∏—Ç—å —Å—Ç–∞—Ä—É—é –ø–∞–Ω–µ–ª—å
      try {
        await handler(ctx, ...args);
      } catch (e) {
        await tryDisableOldPanel(ctx);
      }
    } else {
      await handler(ctx, ...args);
    }
  };
}

// –ü—Ä–∏–º–µ–Ω–∏—Ç—å withSubscription –∫–æ –≤—Å–µ–º action –∏ start
// –£–¥–∞–ª—è–µ–º –æ—à–∏–±–æ—á–Ω—É—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –º–µ—Ç–æ–¥–æ–≤ bot.start, bot.action, bot.command
// –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π handler –≤—Ä—É—á–Ω—É—é:

bot.start(withSubscription(async (ctx) => {
  // –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å, –Ω–µ –ø—ã—Ç–∞—è—Å—å —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  // –†–µ—Ñ–µ—Ä–∞–ª: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –ø–æ —á—É–∂–æ–π —Å—Å—ã–ª–∫–µ
  let ref = null;
  if (ctx.startPayload && ctx.startPayload !== String(ctx.from.id)) {
    ref = ctx.startPayload;
    const refUser = await getUser(ref);
    const user = await users.findOne({ id: ctx.from.id });
    if (refUser && ref !== String(ctx.from.id) && user && (!user.invitedBy)) {
      await users.updateOne({ id: ref }, { $inc: { invited: 1, stars: 5 } });
      await users.updateOne({ id: ctx.from.id }, { $set: { invitedBy: ref } });
    }
  }
  const user = await getUser(ctx.from.id);
  const balance = user.stars || 0;
  const invited = user.invited || 0;
  return ctx.reply(
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MagnumTapBot! üåü\n\n` +
    `–¢—ã –≤ –∏–≥—Ä–µ, –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã ‚ú®, –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –∏ —Å–æ–±–∏—Ä–∞—è –±–æ–Ω—É—Å—ã! üöÄ\n\n` +
    `üí´ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${balance} –∑–≤—ë–∑–¥\n` +
    `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${invited}\n\n` +
    `–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞–Ω—å –∑–≤–µ–∑–¥–æ–π MagnumTapBot! üåü`,
    mainMenuKeyboard(ctx.from.id)
  );
}));

bot.action('invite', withPanelGuard(withSubscription(async (ctx) => {
  const user = await getUser(ctx.from.id);
  const refLink = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
  ctx.editMessageText(
    `ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π\n\n` +
    `–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è!\n\n` +
    `üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: ${refLink}\n\n` +
    `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${user.invited || 0}`,
    mainMenuButton(ctx.from.id)
  );
}));

bot.action('main_menu', withSubscription(async (ctx) => {
  const user = await getUser(ctx.from.id);
  const balance = user.stars || 0;
  const invited = user.invited || 0;
  ctx.editMessageText(
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MagnumTapBot! üåü\n\n` +
    `–¢—ã –≤ –∏–≥—Ä–µ, –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã ‚ú®, –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –∏ —Å–æ–±–∏—Ä–∞—è –±–æ–Ω—É—Å—ã! üöÄ\n\n` +
    `üí´ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${balance} –∑–≤—ë–∑–¥\n` +
    `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${invited}\n\n` +
    `–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞–Ω—å –∑–≤–µ–∑–¥–æ–π MagnumTapBot! üåü`,
    mainMenuKeyboard(ctx.from.id)
  );
}));

bot.action('farm', withSubscription(async (ctx) => {
  const user = await getUser(ctx.from.id);
  const t = now();
  if (t - user.lastFarm < 60) {
    const wait = 60 - (t - user.lastFarm);
    return ctx.answerCbQuery(`‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞: ${wait} —Å–µ–∫.`, { show_alert: true });
  }
  await users.updateOne({ id: ctx.from.id }, { $set: { lastFarm: t }, $inc: { stars: 1 } });
  ctx.answerCbQuery(`üåü +1 –∑–≤–µ–∑–¥–∞! –ë–∞–ª–∞–Ω—Å: ${user.stars + 1}. –°–ª–µ–¥—É—é—â–∏–π —Ñ–∞—Ä–º —á–µ—Ä–µ–∑ 60 —Å–µ–∫.`, { show_alert: true });
}));

bot.action('bonus', withSubscription(async (ctx) => {
  const user = await getUser(ctx.from.id);
  const t = now();
  if (t - user.lastBonus < 86400) {
    const hours = Math.floor((86400 - (t - user.lastBonus)) / 3600);
    const mins = Math.floor((86400 - (t - user.lastBonus)) % 3600 / 60);
    return ctx.answerCbQuery(`‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞: ${hours}—á ${mins}–º.`, { show_alert: true });
  }
  await users.updateOne({ id: ctx.from.id }, { $set: { lastBonus: t }, $inc: { stars: 50 } });
  ctx.answerCbQuery(`üéÅ +50 –∑–≤—ë–∑–¥! –ë–∞–ª–∞–Ω—Å: ${user.stars + 50}. –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ 24—á.`, { show_alert: true });
}));

bot.action('profile', withSubscription(async (ctx) => {
  const user = await getUser(ctx.from.id);
  const balance = user.stars || 0;
  const invited = user.invited || 0;
  ctx.editMessageText(
    `üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\nüí´ –ë–∞–ª–∞–Ω—Å: ${balance} –∑–≤—ë–∑–¥\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${invited}\n\n–§–∞—Ä–º–∏—Ç–µ –∑–≤—ë–∑–¥—ã, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!`,
    Markup.inlineKeyboard([
      [Markup.button.callback('‚ùì FAQ', 'faq')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
      ...(isAdmin(ctx.from.id) ? [[Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')]] : [])
    ])
  );
}));

bot.action('top', withSubscription(async (ctx) => {
  const top = await users.find().sort({ stars: -1 }).limit(10).toArray();
  let msg = 'üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∑–≤—ë–∑–¥–∞–º:\n\n';
  top.forEach((u, i) => {
    const name = u.username || u.id;
    msg += `${i + 1}. ${name} ‚Äî ${u.stars || 0} –∑–≤—ë–∑–¥\n`;
  });
  ctx.editMessageText(msg, mainMenuButton(ctx.from.id));
}));

bot.action('admin', withSubscription(async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', { show_alert: true });
  }
  ctx.editMessageText(
    '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.inlineKeyboard([
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addpromo')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  );
}));

bot.action('admin_addpromo', withSubscription(async (ctx) => {
  await ctx.reply('‚ûï –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: NEWCODE 25 10):', { reply_markup: { force_reply: true } });
  console.log(`[ADMIN] ${ctx.from.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞`);
}));

bot.action('promo', withSubscription(async (ctx) => {
  await ctx.reply('üé´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:', { reply_markup: { force_reply: true } });
  console.log(`[USER] ${ctx.from.id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞`);
}));

bot.action('admin_broadcast', withSubscription(async (ctx) => {
  await ctx.reply('üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', { reply_markup: { force_reply: true } });
  console.log(`[ADMIN] ${ctx.from.id} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É`);
}));

bot.action('admin_stats', withSubscription(async (ctx) => {
  const totalUsers = await users.countDocuments();
  const totalStars = await users.aggregate([{ $group: { _id: null, sum: { $sum: "$stars" } } }]).toArray();
  const totalInvited = await users.aggregate([{ $group: { _id: null, sum: { $sum: "$invited" } } }]).toArray();
  ctx.editMessageText(
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n` +
    `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
    `üí´ –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars[0]?.sum || 0}\n` +
    `ü§ù –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${totalInvited[0]?.sum || 0}`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
      [Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')]
    ])
  );
}));

connectDB().then(() => {
  bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

bot.action('faq', withSubscription(async (ctx) => {
  ctx.editMessageText(
    `‚ùì <b>FAQ MagnumTapBot</b>\n\n` +
    `‚Ä¢ –§–∞—Ä–º–∏—Ç–µ –∑–≤—ë–∑–¥—ã —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É\n` +
    `‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞\n` +
    `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã\n` +
    `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–≤—ë–∑–¥\n\n` +
    `–í—Å–µ –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.`,
    { parse_mode: 'HTML', ...mainMenuButton(ctx.from.id) }
  );
}));