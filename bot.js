require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { MongoClient } = require('mongodb');

if (!process.env.BOT_TOKEN) throw new Error('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN!');
if (!process.env.MONGODB_URI) throw new Error('–ù–µ –∑–∞–¥–∞–Ω MONGODB_URI!');

const bot = new Telegraf(process.env.BOT_TOKEN);
const mongo = new MongoClient(process.env.MONGODB_URI);
let users, promocodes;

// –°–∏—Å—Ç–µ–º–∞ —Ç–∏—Ç—É–ª–æ–≤
const TITLES = {
  // –û–±—ã—á–Ω—ã–µ —Ç–∏—Ç—É–ª—ã (10)
  'newcomer': { name: 'üå± –ù–æ–≤–∏—á–æ–∫', description: '–ù–∞—á–∞–ª –ø—É—Ç—å –≤ MagnumTap', condition: 'registration', requirement: 1 },
  'farmer': { name: '‚ö° –§–∞—Ä–º–µ—Ä', description: '–í—ã–ø–æ–ª–Ω–∏–ª 50 –¥–µ–π—Å—Ç–≤–∏–π —Ñ–∞—Ä–º–∏–Ω–≥–∞', condition: 'farm_count', requirement: 50 },
  'collector': { name: 'üíé –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', description: '–°–æ–±—Ä–∞–ª 100 –∑–≤—ë–∑–¥', condition: 'stars', requirement: 100 },
  'inviter': { name: 'ü§ù –ê–º–±–∞—Å—Å–∞–¥–æ—Ä', description: '–ü—Ä–∏–≥–ª–∞—Å–∏–ª 5 –¥—Ä—É–∑–µ–π', condition: 'invited', requirement: 5 },
  'daily_visitor': { name: 'üìÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å', description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∑–∞—Ö–æ–¥–∏–ª –≤ –±–æ—Ç–∞', condition: 'daily_streak', requirement: 7 },
  'bonus_hunter': { name: 'üéÅ –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–æ–Ω—É—Å–∞–º–∏', description: '–°–æ–±—Ä–∞–ª 30 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤', condition: 'bonus_count', requirement: 30 },
  'promo_master': { name: 'üé´ –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', description: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª 10 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', condition: 'promo_count', requirement: 10 },
  'task_warrior': { name: '‚öîÔ∏è –í–æ–∏–Ω –∑–∞–¥–∞–Ω–∏–π', description: '–í—ã–ø–æ–ª–Ω–∏–ª 100 –∑–∞–¥–∞–Ω–∏–π', condition: 'task_count', requirement: 100 },
  'star_lord': { name: 'üåü –ó–≤—ë–∑–¥–Ω—ã–π –ª–æ—Ä–¥', description: '–°–æ–±—Ä–∞–ª 500 –∑–≤—ë–∑–¥', condition: 'stars', requirement: 500 },
  'legend': { name: 'üëë –õ–µ–≥–µ–Ω–¥–∞', description: '–°–æ–±—Ä–∞–ª 1000 –∑–≤—ë–∑–¥ –∏ –ø—Ä–∏–≥–ª–∞—Å–∏–ª 20 –¥—Ä—É–∑–µ–π', condition: 'combined', requirement: { stars: 1000, invited: 20 } },

  // –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏—Ç—É–ª—ã (3)
  'early_bird': { name: 'üåÖ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞', description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏—Ç—É–ª –∑–∞ –æ—Å–æ–±—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', condition: 'secret', requirement: 'special' },
  'night_owl': { name: 'ü¶â –ù–æ—á–Ω–∞—è —Å–æ–≤–∞', description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤', condition: 'secret', requirement: 'special' },
  'vip_elite': { name: 'üí´ VIP –≠–ª–∏—Ç–∞', description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–∏—Ç—É–ª –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', condition: 'secret', requirement: 'admin_only' }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏—Ç—É–ª–∞–º–∏
async function checkAndAwardTitles(userId) {
  const user = await getUser(userId);
  const userTitles = user.titles || [];
  let newTitles = [];

  for (const [titleId, title] of Object.entries(TITLES)) {
    if (userTitles.includes(titleId) || title.condition === 'secret') continue;

    let earned = false;
    switch (title.condition) {
      case 'registration':
        earned = true;
        break;
      case 'farm_count':
        earned = (user.farmCount || 0) >= title.requirement;
        break;
      case 'stars':
        earned = (user.stars || 0) >= title.requirement;
        break;
      case 'invited':
        earned = (user.invited || 0) >= title.requirement;
        break;
      case 'daily_streak':
        earned = (user.dailyStreak || 0) >= title.requirement;
        break;
      case 'bonus_count':
        earned = (user.bonusCount || 0) >= title.requirement;
        break;
      case 'promo_count':
        earned = (user.promoCount || 0) >= title.requirement;
        break;
      case 'task_count':
        earned = (user.taskCount || 0) >= title.requirement;
        break;
      case 'combined':
        earned = (user.stars || 0) >= title.requirement.stars && (user.invited || 0) >= title.requirement.invited;
        break;
    }

    if (earned) {
      newTitles.push(titleId);
    }
  }

  if (newTitles.length > 0) {
    await users.updateOne(
      { id: userId },
      { $addToSet: { titles: { $each: newTitles } } }
    );
    return newTitles;
  }
  return [];
}

function getUserMainTitle(user) {
  const userTitles = user.titles || [];
  if (userTitles.length === 0) return 'üÜï –ù–æ–≤–∏—á–æ–∫';
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ > –ª–µ–≥–µ–Ω–¥–∞ > –ø–æ –ø–æ—Ä—è–¥–∫—É
  const titleOrder = ['vip_elite', 'early_bird', 'night_owl', 'legend', 'star_lord', 'task_warrior', 'promo_master', 'bonus_hunter', 'daily_visitor', 'inviter', 'collector', 'farmer', 'newcomer'];
  
  for (const titleId of titleOrder) {
    if (userTitles.includes(titleId)) {
      return TITLES[titleId].name;
    }
  }
  return 'üÜï –ù–æ–≤–∏—á–æ–∫';
}

function getNextLevelInfo(user) {
  const stars = user.stars || 0;
  const levels = [
    { name: 'Bronze Star', requirement: 50 },
    { name: 'Silver Star', requirement: 150 },
    { name: 'Gold Star', requirement: 300 },
    { name: 'Platinum Star', requirement: 500 },
    { name: 'Diamond Star', requirement: 1000 },
    { name: 'Master Star', requirement: 2000 }
  ];

  for (const level of levels) {
    if (stars < level.requirement) {
      return {
        nextLevel: level.name,
        starsNeeded: level.requirement - stars
      };
    }
  }
  return { nextLevel: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å', starsNeeded: 0 };
}

async function connectDB() {
  await mongo.connect();
  const db = mongo.db();
  users = db.collection('users');
  promocodes = db.collection('promocodes');
  tasks = db.collection('tasks');
  titles = db.collection('titles'); // –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ç–∏—Ç—É–ª–æ–≤
}

function now() { return Math.floor(Date.now() / 1000); }

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getUser –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏—Ç—É–ª–æ–≤
async function getUser(id) {
  let user = await users.findOne({ id });
  if (!user) {
    user = {
      id,
      username: '',
      stars: 0,
      lastFarm: 0,
      lastBonus: 0,
      created: now(),
      invited: 0,
      invitedBy: null,
      titles: [],
      farmCount: 0,
      bonusCount: 0,
      promoCount: 0,
      taskCount: 0,
      dailyStreak: 0
    };
    await users.insertOne(user);
    // –î–∞—ë–º —Ç–∏—Ç—É–ª –Ω–æ–≤–∏—á–∫–∞
    await checkAndAwardTitles(id);
  }
  return user;
}

const ADMIN_IDS = (process.env.ADMIN_IDS || '').split(',').map(id => id.trim()).filter(Boolean);
function isAdmin(userId) { return ADMIN_IDS.includes(String(userId)); }

function getWelcomeText(balance, invited) {
  return (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *MagnumTapBot*! üåü\n\n" +
    "–¢—ã –≤ –∏–≥—Ä–µ, –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã ‚ú®, –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –∏ —Å–æ–±–∏—Ä–∞—è –±–æ–Ω—É—Å—ã! üöÄ\n\n" +
    "üí´ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: " + balance + " –∑–≤—ë–∑–¥\n" +
    "üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: " + invited + "\n\n" +
    "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞–Ω—å –∑–≤–µ–∑–¥–æ–π MagnumTapBot! üåü"
  );
}

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
const dailyTasks = [
  { id: 'login', name: '–ó–∞–π—Ç–∏ –≤ –±–æ—Ç–∞', reward: 5, description: '–ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!' },
  { id: 'bonus', name: '–ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –±–æ–Ω—É—Å', reward: 10, description: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ë–æ–Ω—É—Å"' },
  { id: 'invite', name: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', reward: 20, description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞' }
];

// –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞
const sponsorTasks = [
  { id: 'channel1', name: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @example', reward: 15, description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø–∞—Ä—Ç–Ω—ë—Ä–∞', url: 'https://t.me/example' },
  { id: 'website', name: '–ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç', reward: 25, description: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞', url: 'https://example.com' }
];

async function getUserTasks(userId, isDaily = true) {
  const today = new Date().toDateString();
  let userTasks = await tasks.findOne({ 
    userId, 
    date: isDaily ? today : 'sponsor',
    type: isDaily ? 'daily' : 'sponsor'
  });
  
  if (!userTasks) {
    const taskList = isDaily ? dailyTasks : sponsorTasks;
    userTasks = {
      userId,
      date: isDaily ? today : 'sponsor',
      type: isDaily ? 'daily' : 'sponsor',
      completed: {},
      claimed: {}
    };
    taskList.forEach(task => {
      userTasks.completed[task.id] = false;
      userTasks.claimed[task.id] = false;
    });
    await tasks.insertOne(userTasks);
  }
  return userTasks;
}

function getMainMenu(ctx, balance, invited) {
  const adminRow = isAdmin(ctx.from.id) ? [[Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]] : [];
  return {
    text: getWelcomeText(balance, invited),
    extra: {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üåü –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üèÜ –¢–æ–ø', 'top')],
        [Markup.button.callback('ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'invite'), Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'promo')],
        [Markup.button.callback('üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', 'daily_tasks'), Markup.button.callback('üéØ –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞', 'sponsor_tasks')],
        ...adminRow
      ])
    }
  };
}

bot.start(async (ctx) => {
  const user = await getUser(ctx.from.id);
  const balance = user.stars || 0;
  const invited = user.invited || 0;
  const menu = getMainMenu(ctx, balance, invited);
  await ctx.reply(menu.text, menu.extra);
});

bot.action('main_menu', async (ctx) => {
  try { await ctx.deleteMessage(); } catch (e) {}
  const user = await getUser(ctx.from.id);
  const balance = user.stars || 0;
  const invited = user.invited || 0;
  const adminRow = isAdmin(ctx.from.id) ? [[Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]] : [];
  ctx.reply(
    getWelcomeText(balance, invited),
    {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üåü –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üèÜ –¢–æ–ø', 'top')],
        [Markup.button.callback('ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'invite'), Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'promo')],
        [Markup.button.callback('üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', 'daily_tasks'), Markup.button.callback('üéØ –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞', 'sponsor_tasks')],
        ...adminRow
      ])
    }
  );
});

bot.action('profile', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const balance = user.stars || 0;
  const friends = user.invited || 0;
  const rank = getUserMainTitle(user);
  const nextLevel = getNextLevelInfo(user);
  
  const profileText = `üëë **–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ MagnumTap** üëë

üí´ **–°—Ç–∞—Ç—É—Å:** VIP-—É—á–∞—Å—Ç–Ω–∏–∫  
üíé **–ë–∞–ª–∞–Ω—Å:** ${balance} ‚≠ê –∑–≤—ë–∑–¥  
üë• **–î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:** ${friends}  
üèÜ **–†–∞–Ω–≥:** ${rank} üåü

‚ú® **–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**  
1. üå† –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ MagnumTap  
2. üéØ –ü—É—Ç—å –∫ —É—Å–ø–µ—Ö—É ‚Äî –ø–µ—Ä–≤—ã–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–≤—ë–∑–¥—ã  
3. ü§ù –ê–º–±–∞—Å—Å–∞–¥–æ—Ä ‚Äî –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ —Ä–∞—Å—Ç–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ  

‚ö° **–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å:**  
‚Äî –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë ${nextLevel.starsNeeded} –∑–≤—ë–∑–¥ –¥–æ —É—Ä–æ–≤–Ω—è **${nextLevel.nextLevel}** üèÖ  

üíº **–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:**  
- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏  
- üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã  
- üîê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7`;

  ctx.editMessageText(profileText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üèÜ –ú–æ–∏ —Ç–∏—Ç—É–ª—ã', 'my_titles')],
      [Markup.button.callback('‚ùì FAQ', 'faq')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  });
});

bot.action('my_titles', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const userTitles = user.titles || [];
  
  let titlesText = 'üèÜ **–¢–≤–æ–∏ —Ç–∏—Ç—É–ª—ã** üèÜ\n\n';
  
  if (userTitles.length === 0) {
    titlesText += 'üÜï –ü–æ–∫–∞ —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç —Ç–∏—Ç—É–ª–æ–≤.\n–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö!';
  } else {
    userTitles.forEach(titleId => {
      if (TITLES[titleId]) {
        titlesText += `${TITLES[titleId].name}\n${TITLES[titleId].description}\n\n`;
      }
    });
  }

  ctx.editMessageText(titlesText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üë§ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'profile')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  });
});

bot.action('top', async (ctx) => {
  const topUsers = await users.find({}).sort({ stars: -1 }).limit(10).toArray();
  let msg = 'üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∑–≤—ë–∑–¥–∞–º:\n\n';
  topUsers.forEach((user, i) => {
    const name = user.username || user.id;
    msg += `${i + 1}. ${name} ‚Äî ${user.stars || 0} –∑–≤—ë–∑–¥\n`;
  });
  ctx.editMessageText(msg, Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
});

bot.action('invite', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const refLink = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
  ctx.editMessageText(
    `ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π\n\n` +
    `–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è!\n\n` +
    `üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: ${refLink}\n\n` +
    `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${user.invited || 0}`,
    Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]])
  );
});

// –ü—Ä–æ–º–æ–∫–æ–¥—ã (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã ‚Äî —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫)
const promoCodes = { 'MAGNUM10': 10, 'STAR50': 50 };
const userPromoUsed = {};
bot.action('promo', async (ctx) => {
  await adminForceReply(ctx, 'üé´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
});
bot.on('text', async (ctx) => {
  const replyMsg = ctx.message.reply_to_message;
  if (!replyMsg) return;

  const text = ctx.message.text;
  const replyText = replyMsg.text;

  try {
    // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if (isAdmin(ctx.from.id)) {
      if (replyText.includes('–í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞')) {
        const [userId, titleId] = text.split(' ');
        if (!userId || !titleId || !TITLES[titleId]) {
          return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏—Ç—É–ª!');
        }

        await users.updateOne(
          { id: parseInt(userId) },
          { $addToSet: { titles: titleId } }
        );
        
        ctx.reply(`‚úÖ –¢–∏—Ç—É–ª "${TITLES[titleId].name}" –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}!`);
      }
      
      else if (replyText.includes('–ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª')) {
        const [userId, titleId] = text.split(' ');
        if (!userId || !titleId || !TITLES[titleId]) {
          return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏—Ç—É–ª!');
        }

        await users.updateOne(
          { id: parseInt(userId) },
          { $pull: { titles: titleId } }
        );
        
        ctx.reply(`‚úÖ –¢–∏—Ç—É–ª "${TITLES[titleId].name}" –∑–∞–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}!`);
      }
      
      else if (replyText.includes('–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')) {
        const userId = parseInt(text);
        const user = await users.findOne({ id: userId });
        
        if (!user) {
          return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }

        const userTitles = user.titles || [];
        let titlesList = `üë§ **–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:**\n\n`;
        
        if (userTitles.length === 0) {
          titlesList += 'üö´ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∏—Ç—É–ª–æ–≤';
        } else {
          userTitles.forEach(titleId => {
            if (TITLES[titleId]) {
              titlesList += `${TITLES[titleId].name}\n`;
            }
          });
        }

        ctx.reply(titlesList, { parse_mode: 'Markdown' });
      }

      // –†–∞—Å—Å—ã–ª–∫–∞
      else if (replyText.includes('—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')) {
        const allUsers = await users.find().toArray();
        let sent = 0;
        for (const u of allUsers) {
          try { 
            await ctx.telegram.sendMessage(u.id, `üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n${text}`); 
            sent++; 
          } catch {}
        }
        ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`);
      }

      // –ü—Ä–æ–º–æ–∫–æ–¥
      else if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥')) {
        const [code, stars] = text.trim().split(/\s+/);
        if (!code || isNaN(Number(stars))) {
          return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: –ö–û–î 10');
        }
        await promocodes.insertOne({
          code: code.toUpperCase(),
          stars: Number(stars),
          max: 100,
          used: 0,
          created: now()
        });
        ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ ${code.toUpperCase()} –Ω–∞ ${stars} –∑–≤—ë–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω.`);
      }

      // –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã
      else if (replyText.includes('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥')) {
        const [id, stars] = text.trim().split(/\s+/);
        if (!id || isNaN(Number(stars))) {
          return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: ID 10');
        }
        await users.updateOne({ id: Number(id) }, { $inc: { stars: Number(stars) } });
        ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${id} –≤—ã–¥–∞–Ω–æ/–∑–∞–±—Ä–∞–Ω–æ ${stars} –∑–≤—ë–∑–¥.`);
      }

      // –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      else if (replyText.includes('–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')) {
        const id = text.trim();
        const refs = await users.find({ invitedBy: id }).toArray();
        if (!refs.length) {
          return ctx.reply('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.');
        }
        let msg = `üë• –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:\n\n`;
        refs.forEach((u, i) => { msg += `${i + 1}. ${u.id}\n`; });
        ctx.reply(msg);
      }
    }

    // –ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    else if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:')) {
      const code = text.trim().toUpperCase();
      const promo = await promocodes.findOne({ code });
      
      if (!promo) {
        return ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      }
      
      if (promo.used >= promo.max) {
        return ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω!');
      }

      const user = await getUser(ctx.from.id);
      const userPromos = user.usedPromos || [];
      
      if (userPromos.includes(code)) {
        return ctx.reply('‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!');
      }

      await users.updateOne(
        { id: ctx.from.id },
        { 
          $inc: { stars: promo.stars, promoCount: 1 },
          $addToSet: { usedPromos: code }
        }
      );
      await promocodes.updateOne({ code }, { $inc: { used: 1 } });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã
      const newTitles = await checkAndAwardTitles(ctx.from.id);
      if (newTitles.length > 0) {
        ctx.reply(`üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${promo.stars} –∑–≤—ë–∑–¥! üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª –ø–æ–ª—É—á–µ–Ω!`);
      } else {
        ctx.reply(`üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${promo.stars} –∑–≤—ë–∑–¥!`);
      }
    }

  } catch (error) {
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!');
  }
});

bot.action('admin_panel', async (ctx) => {
  const adminText = '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

  ctx.editMessageText(adminText, Markup.inlineKeyboard([
    [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
    [Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'admin_addpromo')],
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
    [Markup.button.callback('‚≠ê –ó–≤—ë–∑–¥—ã', 'admin_stars')],
    [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'admin_refs')],
    [Markup.button.callback('üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]));
});

bot.action('admin_cancel', async (ctx) => {
  try { await ctx.deleteMessage(); } catch (e) {}
  ctx.answerCbQuery();
  ctx.reply(
    '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.inlineKeyboard([
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
      [Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'admin_addpromo')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
      [Markup.button.callback('‚≠ê –ó–≤—ë–∑–¥—ã', 'admin_stars')],
      [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'admin_refs')],
      [Markup.button.callback('üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  );
});

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
function adminForceReply(ctx, text) {
  return ctx.reply(text, {
    reply_markup: {
      force_reply: true,
      inline_keyboard: [[
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_cancel' }
      ]]
    }
  });
}

// –†–∞—Å—Å—ã–ª–∫–∞
bot.action('admin_broadcast', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  await adminForceReply(ctx, 'üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
});

// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
bot.action('admin_addpromo', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  await adminForceReply(ctx, '‚ûï –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: NEWCODE 25):');
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.action('admin_stats', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  const totalUsers = await users.countDocuments();
  const totalStars = await users.aggregate([{ $group: { _id: null, total: { $sum: '$stars' } } }]).toArray();
  const totalInvited = await users.aggregate([{ $group: { _id: null, total: { $sum: '$invited' } } }]).toArray();
  
  ctx.editMessageText(
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n` +
    `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
    `‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars[0]?.total || 0}\n` +
    `ü§ù –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${totalInvited[0]?.total || 0}`,
    Markup.inlineKeyboard([[Markup.button.callback('‚öôÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]])
  );
});

// –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã
bot.action('admin_stars', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  await adminForceReply(ctx, '‚≠ê –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 50):');
});

// –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('admin_refs', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  await adminForceReply(ctx, 'üë• –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:');
});

// –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
bot.action('admin_titles', async (ctx) => {
  let titlesList = 'üèÜ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏—Ç—É–ª–∞—Ö** üèÜ\n\n';
  titlesList += '**–û–ë–´–ß–ù–´–ï –¢–ò–¢–£–õ–´:**\n';
  
  Object.entries(TITLES).forEach(([id, title]) => {
    if (title.condition !== 'secret') {
      titlesList += `${title.name}\n${title.description}\n\n`;
    }
  });
  
  titlesList += '**–°–ï–ö–†–ï–¢–ù–´–ï –¢–ò–¢–£–õ–´:**\n';
  Object.entries(TITLES).forEach(([id, title]) => {
    if (title.condition === 'secret') {
      titlesList += `${title.name}\n${title.description}\n\n`;
    }
  });

  ctx.editMessageText(titlesList, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –í—ã–¥–∞—Ç—å —Ç–∏—Ç—É–ª', 'admin_give_title')],
      [Markup.button.callback('‚ûñ –ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª', 'admin_remove_title')],
      [Markup.button.callback('üìã –¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_user_titles')],
      [Markup.button.callback('‚öôÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]
    ])
  });
});

bot.action('admin_give_title', async (ctx) => {
  ctx.reply(
    '‚ûï **–í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID —Ç–∏—Ç—É–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n`123456789 vip_elite`',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true
      }
    }
  );
});

bot.action('admin_remove_title', async (ctx) => {
  ctx.reply(
    '‚ûñ **–ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID —Ç–∏—Ç—É–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n`123456789 vip_elite`',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true
      }
    }
  );
});

bot.action('admin_user_titles', async (ctx) => {
  ctx.reply(
    'üìã **–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true
      }
    }
  );
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–∏—Ç—É–ª–æ–≤
bot.on('text', async (ctx) => {
  const replyMsg = ctx.message.reply_to_message;
  if (!replyMsg || !isAdmin(ctx.from.id)) return;

  const text = ctx.message.text;
  const replyText = replyMsg.text;

  try {
    if (replyText.includes('–í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞')) {
      const [userId, titleId] = text.split(' ');
      if (!userId || !titleId || !TITLES[titleId]) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏—Ç—É–ª!');
      }

      await users.updateOne(
        { id: parseInt(userId) },
        { $addToSet: { titles: titleId } }
      );
      
      ctx.reply(`‚úÖ –¢–∏—Ç—É–ª "${TITLES[titleId].name}" –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}!`);
    }
    
    else if (replyText.includes('–ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª')) {
      const [userId, titleId] = text.split(' ');
      if (!userId || !titleId || !TITLES[titleId]) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏—Ç—É–ª!');
      }

      await users.updateOne(
        { id: parseInt(userId) },
        { $pull: { titles: titleId } }
      );
      
      ctx.reply(`‚úÖ –¢–∏—Ç—É–ª "${TITLES[titleId].name}" –∑–∞–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}!`);
    }
    
    else if (replyText.includes('–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')) {
      const userId = parseInt(text);
      const user = await users.findOne({ id: userId });
      
      if (!user) {
        return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      }

      const userTitles = user.titles || [];
      let titlesList = `üë§ **–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:**\n\n`;
      
      if (userTitles.length === 0) {
        titlesList += 'üö´ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∏—Ç—É–ª–æ–≤';
      } else {
        userTitles.forEach(titleId => {
          if (TITLES[titleId]) {
            titlesList += `${TITLES[titleId].name}\n`;
          }
        });
      }

      ctx.reply(titlesList, { parse_mode: 'Markdown' });
    }

    // ... existing admin text handlers ...
  } catch (error) {
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!');
  }
});

bot.action('daily_tasks', async (ctx) => {
  const userTasks = await getUserTasks(ctx.from.id, true);
  let msg = 'üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n\n';
  
  dailyTasks.forEach(task => {
    const completed = userTasks.completed[task.id];
    const claimed = userTasks.claimed[task.id];
    const status = claimed ? '‚úÖ –ü–æ–ª—É—á–µ–Ω–æ' : completed ? 'üéÅ –ó–∞–±—Ä–∞—Ç—å' : '‚è≥ –í—ã–ø–æ–ª–Ω–∏—Ç—å';
    msg += `${status} ${task.name} (+${task.reward} –∑–≤—ë–∑–¥)\n${task.description}\n\n`;
  });
  
  const buttons = [];
  dailyTasks.forEach(task => {
    const completed = userTasks.completed[task.id];
    const claimed = userTasks.claimed[task.id];
    if (completed && !claimed) {
      buttons.push([Markup.button.callback(`üéÅ ${task.name}`, `claim_daily_${task.id}`)]);
    }
  });
  buttons.push([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]);
  
  ctx.editMessageText(msg, Markup.inlineKeyboard(buttons));
});

bot.action('sponsor_tasks', async (ctx) => {
  const userTasks = await getUserTasks(ctx.from.id, false);
  let msg = 'üéØ –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞\n\n';
  
  const buttons = [];
  sponsorTasks.forEach(task => {
    const completed = userTasks.completed[task.id];
    const claimed = userTasks.claimed[task.id];
    const status = claimed ? '‚úÖ –ü–æ–ª—É—á–µ–Ω–æ' : completed ? 'üéÅ –ó–∞–±—Ä–∞—Ç—å' : '‚è≥ –í—ã–ø–æ–ª–Ω–∏—Ç—å';
    msg += `${status} ${task.name} (+${task.reward} –∑–≤—ë–∑–¥)\n${task.description}\n\n`;
    
    if (!completed) {
      buttons.push([
        Markup.button.url('üîó –ü–µ—Ä–µ–π—Ç–∏', task.url),
        Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', `check_sponsor_${task.id}`)
      ]);
    } else if (!claimed) {
      buttons.push([Markup.button.callback(`üéÅ ${task.name}`, `claim_sponsor_${task.id}`)]);
    }
  });
  buttons.push([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]);
  
  ctx.editMessageText(msg, Markup.inlineKeyboard(buttons));
});

bot.action('faq', async (ctx) => {
  const faqText = `‚ùì FAQ –∏ –ø–æ–º–æ—â—å\n\n` +
    `üåü –ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã?\n` +
    `‚≠ê –§–∞—Ä–º–∏—Ç–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n` +
    `üéÅ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n` +
    `üìã –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è\n` +
    `üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n\n` +
    `üéØ –ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è?\n` +
    `–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n\n` +
    `üé´ –ì–¥–µ –≤–∑—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã?\n` +
    `–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –∞–Ω–æ–Ω—Å–∞–º–∏ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏`;

  ctx.editMessageText(faqText, Markup.inlineKeyboard([[Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]]));
});

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∞ –∏ –±–æ–Ω—É—Å–∞
bot.action('farm', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const canFarm = !user.lastFarm || (now() - user.lastFarm) >= 60;
  
  if (canFarm) {
    await users.updateOne({ id: ctx.from.id }, { 
      $inc: { stars: 1, farmCount: 1 }, 
      $set: { lastFarm: now() } 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã
    const newTitles = await checkAndAwardTitles(ctx.from.id);
    if (newTitles.length > 0) {
      ctx.answerCbQuery('üåü +1 –∑–≤–µ–∑–¥–∞! üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª –ø–æ–ª—É—á–µ–Ω!');
    } else {
      ctx.answerCbQuery('üåü +1 –∑–≤–µ–∑–¥–∞!');
    }
  } else {
    const timeLeft = 60 - (now() - user.lastFarm);
    ctx.answerCbQuery(`‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞: ${timeLeft} —Å–µ–∫.`);
  }
});

bot.action('bonus', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const today = Math.floor(Date.now() / (1000 * 60 * 60 * 24));
  const canBonus = !user.lastBonus || user.lastBonus < today;
  
  if (canBonus) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞—Ö–æ–¥–æ–≤
    const yesterday = today - 1;
    let dailyStreak = 1;
    if (user.lastBonus === yesterday) {
      dailyStreak = (user.dailyStreak || 0) + 1;
    }
    
    await users.updateOne({ id: ctx.from.id }, { 
      $inc: { stars: 10, bonusCount: 1 }, 
      $set: { lastBonus: today, dailyStreak: dailyStreak } 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã
    const newTitles = await checkAndAwardTitles(ctx.from.id);
    if (newTitles.length > 0) {
      ctx.answerCbQuery('üéÅ +10 –∑–≤—ë–∑–¥ –±–æ–Ω—É—Å! üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª!');
    } else {
      ctx.answerCbQuery('üéÅ +10 –∑–≤—ë–∑–¥ –±–æ–Ω—É—Å!');
    }
  } else {
    const hoursLeft = 24 - Math.floor((Date.now() % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    ctx.answerCbQuery(`üïê –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${hoursLeft}—á`);
  }
});

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
bot.action(/^claim_daily_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const task = dailyTasks.find(t => t.id === taskId);
  if (!task) return;
  
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'daily' },
    { $set: { [`claimed.${taskId}`]: true } }
  );
  await users.updateOne({ id: ctx.from.id }, { $inc: { stars: task.reward } });
  
  ctx.answerCbQuery(`üéÅ –ü–æ–ª—É—á–µ–Ω–æ ${task.reward} –∑–≤—ë–∑–¥!`);
  ctx.action('daily_tasks')(ctx);
});

bot.action(/^claim_sponsor_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const task = sponsorTasks.find(t => t.id === taskId);
  if (!task) return;
  
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'sponsor' },
    { $set: { [`claimed.${taskId}`]: true } }
  );
  await users.updateOne({ id: ctx.from.id }, { $inc: { stars: task.reward } });
  
  ctx.answerCbQuery(`üéÅ –ü–æ–ª—É—á–µ–Ω–æ ${task.reward} –∑–≤—ë–∑–¥!`);
  ctx.action('sponsor_tasks')(ctx);
});

bot.action(/^check_sponsor_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'sponsor' },
    { $set: { [`completed.${taskId}`]: true } }
  );
  
  ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
  ctx.action('sponsor_tasks')(ctx);
});

connectDB().then(() => {
  bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));