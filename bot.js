require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { MongoClient, ObjectId } = require('mongodb');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGODB_URI = process.env.MONGODB_URI;
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => id.trim()) : [];
const SUPPORT_CHANNEL = process.env.SUPPORT_CHANNEL; // –ò–º—è –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @
const WITHDRAWAL_CHANNEL = process.env.WITHDRAWAL_CHANNEL; // –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥

// –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
const REQUIRED_CHANNEL = process.env.REQUIRED_CHANNEL;
const REQUIRED_BOT_LINK = process.env.REQUIRED_BOT_LINK || 'https://t.me/ReferalStarsRobot?start=6587897295';

// –°—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const FIRESTARS_BOT_LINK = process.env.FIRESTARS_BOT_LINK || 'https://t.me/firestars_rbot?start=6587897295';
const FARMIK_BOT_LINK = process.env.FARMIK_BOT_LINK || 'https://t.me/farmikstars_bot?start=6587897295';
const BASKET_BOT_LINK = process.env.BASKET_BOT_LINK || 'https://t.me/basket_gift_bot?start=6587897295';

// –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
const WITHDRAWAL_STATUSES = {
  'pending': { name: '‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', color: 'üü°' },
  'approved': { name: '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ', color: 'üü¢' },
  'rejected': { name: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', color: 'üî¥' },
  'processing': { name: 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', color: 'üîµ' },
  'completed': { name: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', color: 'üü¢' }
};

const REJECTION_REASONS = {
  'fraud': { name: 'üö´ –ù–∞–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞–∫—Ä—É—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤' },
  'bug_abuse': { name: 'üêõ –ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–∞–≥–∞–º–∏', description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–≥–æ–≤ –∏–ª–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤—ë–∑–¥' },
  'multi_account': { name: 'üë• –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–∏–Ω–≥', description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' },
  'insufficient_activity': { name: 'üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', description: '–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥' },
  'suspicious_pattern': { name: 'üîç –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' },
  'other': { name: '‚ùì –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞', description: '–ü—Ä–∏—á–∏–Ω–∞ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ' }
};

console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
console.log('ü§ñ BOT_TOKEN:', BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('üóÑÔ∏è MONGODB_URI:', MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('üëë ADMIN_IDS:', ADMIN_IDS.length ? ADMIN_IDS.join(', ') : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´');
console.log('üìû SUPPORT_CHANNEL:', SUPPORT_CHANNEL || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('üí≥ WITHDRAWAL_CHANNEL:', WITHDRAWAL_CHANNEL || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('üîê REQUIRED_CHANNEL:', REQUIRED_CHANNEL || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('üì¢ PROMO_NOTIFICATIONS_CHAT:', process.env.PROMO_NOTIFICATIONS_CHAT || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('üì¢ –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç–æ–≤:', REQUIRED_CHANNEL ? `@${REQUIRED_CHANNEL}` : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');

if (!BOT_TOKEN) throw new Error('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN!');
if (!MONGODB_URI) throw new Error('–ù–µ –∑–∞–¥–∞–Ω MONGODB_URI!');

const bot = new Telegraf(BOT_TOKEN);
const mongo = new MongoClient(MONGODB_URI);
let users, promocodes, taskChecks, withdrawalRequests, reserve;

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
const userStates = new Map();

// –ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ 30 —Å–µ–∫—É–Ω–¥)
const userCache = new Map();
const USER_CACHE_TTL = 30000;

// –ö–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
let botStatsCache = null;
let botStatsCacheTime = 0;
const BOT_STATS_CACHE_TTL = 30000; // 30 —Å–µ–∫—É–Ω–¥

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function invalidateBotStatsCache() {
  botStatsCache = null;
  botStatsCacheTime = 0;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞ —Ñ–∞—Ä–º–∞
let farmCooldownEnabled = true;
let farmCooldownSeconds = 10; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫—É–Ω–¥

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function invalidateUserCache(userId) {
  userCache.delete(userId.toString());
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function getBotStatistics() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
  const now = Date.now();
  if (botStatsCache && (now - botStatsCacheTime) < BOT_STATS_CACHE_TTL) {
    return botStatsCache;
  }

  try {
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const totalUsers = await users.countDocuments();
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö Magnum Coin (—Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    const totalMagnumCoinsResult = await users.aggregate([
      { $group: { _id: null, total: { $sum: { $ifNull: ['$totalEarnedMagnumCoins', '$magnumCoins'] } } } }
    ]).toArray();
    const totalMagnumCoins = totalMagnumCoinsResult.length > 0 ? totalMagnumCoinsResult[0].total : 0;
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–≤—ë–∑–¥
    const totalStarsResult = await users.aggregate([
      { $group: { _id: null, total: { $sum: '$stars' } } }
    ]).toArray();
    const totalStars = totalStarsResult.length > 0 ? totalStarsResult[0].total : 0;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
    let totalWithdrawn = 0;
    try {
      const withdrawnResult = await withdrawalRequests.aggregate([
        { $match: { status: 'approved' } },
        { $group: { _id: null, total: { $sum: '$amount' } } }
      ]).toArray();
      totalWithdrawn = withdrawnResult.length > 0 ? withdrawnResult[0].total : 0;
    } catch {
      totalWithdrawn = 0;
    }
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∑–≤—ë–∑–¥ (–ø–æ–∫—É–ø–∫–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    let totalStarsSpent = 0;
    try {
      const spentStarsResult = await users.aggregate([
        { $unwind: '$purchases' },
        { $group: { _id: null, total: { $sum: '$purchases.price' } } }
      ]).toArray();
      totalStarsSpent = spentStarsResult.length > 0 ? spentStarsResult[0].total : 0;
    } catch {
      totalStarsSpent = 0;
    }
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö Magnum Coin (–æ–±–º–µ–Ω –Ω–∞ –∑–≤—ë–∑–¥—ã + –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–∏—Ç—É–ª—ã)
    let totalMagnumCoinsSpent = 0;
    try {
      // –û–±–º–µ–Ω –Ω–∞ –∑–≤—ë–∑–¥—ã (–∫–∞–∂–¥–∞—è –≤—ã–≤–µ–¥–µ–Ω–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 10 –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö Magnum Coin)
      const exchangedMagnumCoins = totalWithdrawn * 10;
      
      // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–∏—Ç—É–ª—ã (–æ–±—ã—á–Ω–æ —Å—Ç–æ—è—Ç 100 Magnum Coin)
      let customTitlesSpent = 0;
      const customTitlesResult = await supportTickets.aggregate([
        { $match: { type: 'custom_title', status: 'approved' } },
        { $count: 'total' }
      ]).toArray();
      const customTitlesCount = customTitlesResult.length > 0 ? customTitlesResult[0].total : 0;
      customTitlesSpent = customTitlesCount * 100; // 100 Magnum Coin –∑–∞ —Ç–∏—Ç—É–ª
      
      totalMagnumCoinsSpent = exchangedMagnumCoins + customTitlesSpent;
    } catch {
      totalMagnumCoinsSpent = 0;
    }
    
    const stats = {
      totalUsers: totalUsers,
      totalMagnumCoins: Math.round(totalMagnumCoins * 100) / 100,
      totalStars: Math.round(totalStars * 100) / 100,
      totalWithdrawn: Math.round(totalWithdrawn * 100) / 100,
      totalStarsSpent: Math.round(totalStarsSpent * 100) / 100,
      totalMagnumCoinsSpent: Math.round(totalMagnumCoinsSpent * 100) / 100
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    botStatsCache = stats;
    botStatsCacheTime = now;
    
    return stats;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞:', error);
    return {
      totalUsers: 0,
      totalMagnumCoins: 0,
      totalStars: 0,
      totalWithdrawn: 0,
      totalStarsSpent: 0,
      totalMagnumCoinsSpent: 0
    };
  }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫–µ—à–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
setInterval(() => {
  const now = Date.now();
  for (const [key, cached] of userCache.entries()) {
    if (now - cached.timestamp > USER_CACHE_TTL) {
      userCache.delete(key);
    }
  }
}, 300000); // 5 –º–∏–Ω—É—Ç

// –ö–µ—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const photoUrlCache = process.env.BOT_PHOTO_URL;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ
async function sendMainMenuWithPhoto(ctx, text, keyboard, isEdit = true) {
  try {
    if (photoUrlCache && isEdit) {
      // –ü–æ–ø—ã—Ç–∫–∞ 1: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å —Ñ–æ—Ç–æ)
      try {
        return await ctx.editMessageMedia({
          type: 'photo',
          media: photoUrlCache,
          caption: text,
          parse_mode: 'Markdown'
        }, keyboard);
      } catch (mediaError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞:', mediaError.message);
        
        // –ü–æ–ø—ã—Ç–∫–∞ 2: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        try {
          return await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            ...keyboard
          });
        } catch (textError) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç:', textError.message);
          
          // –ü–æ–ø—ã—Ç–∫–∞ 3: —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
          try {
            await ctx.deleteMessage();
          } catch (deleteError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', deleteError.message);
          }
          
          try {
            return await ctx.replyWithPhoto(photoUrlCache, {
              caption: text,
              parse_mode: 'Markdown',
              ...keyboard
            });
          } catch (photoError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:', photoError.message);
            
            // –§–∏–Ω–∞–ª—å–Ω—ã–π fallback: –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await ctx.reply(text, {
              parse_mode: 'Markdown',
              ...keyboard
            });
          }
        }
      }
    } else if (photoUrlCache && !isEdit) {
      // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
      try {
        return await ctx.replyWithPhoto(photoUrlCache, {
          caption: text,
          parse_mode: 'Markdown',
          ...keyboard
        });
      } catch (photoError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:', photoError.message);
        return await ctx.reply(text, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
    } else {
      // –ë–µ–∑ —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (isEdit) {
        try {
          return await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            ...keyboard
          });
        } catch (editError) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ:', editError.message);
          
          try {
            await ctx.deleteMessage();
          } catch (deleteError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ:', deleteError.message);
          }
          
          return await ctx.reply(text, {
            parse_mode: 'Markdown',
            ...keyboard
          });
        }
      } else {
        return await ctx.reply(text, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
    }
  } catch (criticalError) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ sendMainMenuWithPhoto:', criticalError);
    
    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try {
      return await ctx.reply('‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.', {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'main_menu' }
          ]]
        }
      });
    } catch (finalError) {
      console.error('–ü–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', finalError);
      return null;
    }
  }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ë–ï–ó —Ñ–æ—Ç–æ (–¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ–Ω—é)
async function sendMessageWithPhoto(ctx, text, keyboard, isEdit = true) {
  try {
    if (isEdit) {
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –≤—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      // –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      try {
        await ctx.deleteMessage();
      } catch (deleteError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è - —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      return await ctx.reply(text, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      return await ctx.reply(text, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
  } catch (criticalError) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ sendMessageWithPhoto:', criticalError);
    
    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try {
      return await ctx.reply('‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.', {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'main_menu' }
          ]]
        }
      });
    } catch (finalError) {
      console.error('–ü–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', finalError);
      return null;
    }
  }
}

// –°–∏—Å—Ç–µ–º–∞ —Ç–∏—Ç—É–ª–æ–≤
const TITLES = {
  // –û–±—ã—á–Ω—ã–µ —Ç–∏—Ç—É–ª—ã (10)
  'newcomer': { name: '–ù–æ–≤–∏—á–æ–∫', description: '–ù–∞—á–∞–ª –ø—É—Ç—å –≤ MagnumTap', condition: 'registration', requirement: 1, icon: 'üå±' },
  'farmer': { name: '–§–∞—Ä–º–µ—Ä', description: '–í—ã–ø–æ–ª–Ω–∏–ª 30 –¥–µ–π—Å—Ç–≤–∏–π —Ñ–∞—Ä–º–∏–Ω–≥–∞', condition: 'farm_count', requirement: 30, icon: '‚ö°' },
  'collector': { name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', description: '–°–æ–±—Ä–∞–ª 50 –∑–≤—ë–∑–¥', condition: 'stars', requirement: 50, icon: 'üíé' },
  'inviter': { name: '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä', description: '–ü—Ä–∏–≥–ª–∞—Å–∏–ª 3 –¥—Ä—É–∑–µ–π', condition: 'invited', requirement: 3, icon: 'ü§ù' },
  'daily_visitor': { name: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å', description: '5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∑–∞—Ö–æ–¥–∏–ª –≤ –±–æ—Ç–∞', condition: 'daily_streak', requirement: 5, icon: 'üìÖ' },
  'bonus_hunter': { name: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–æ–Ω—É—Å–∞–º–∏', description: '–°–æ–±—Ä–∞–ª 15 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤', condition: 'bonus_count', requirement: 15, icon: 'üéÅ' },
  'promo_master': { name: '–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', description: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª 5 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', condition: 'promo_count', requirement: 5, icon: 'üé´' },
  'task_warrior': { name: '–í–æ–∏–Ω –∑–∞–¥–∞–Ω–∏–π', description: '–í—ã–ø–æ–ª–Ω–∏–ª 20 –∑–∞–¥–∞–Ω–∏–π', condition: 'task_count', requirement: 20, icon: '‚öîÔ∏è' },
  'star_lord': { name: '–ó–≤—ë–∑–¥–Ω—ã–π –ª–æ—Ä–¥', description: '–°–æ–±—Ä–∞–ª 200 –∑–≤—ë–∑–¥', condition: 'stars', requirement: 200, icon: 'üåü' },
  'legend': { name: '–õ–µ–≥–µ–Ω–¥–∞', description: '–°–æ–±—Ä–∞–ª 500 –∑–≤—ë–∑–¥ –∏ –ø—Ä–∏–≥–ª–∞—Å–∏–ª 10 –¥—Ä—É–∑–µ–π', condition: 'combined', requirement: { stars: 500, invited: 10 }, icon: 'üëë' },

  // –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏—Ç—É–ª—ã (3)
  'early_bird': { name: '–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞', description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏—Ç—É–ª –∑–∞ –æ—Å–æ–±—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', condition: 'secret', requirement: 'special', icon: 'üåÖ' },
  'night_owl': { name: '–ù–æ—á–Ω–∞—è —Å–æ–≤–∞', description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤', condition: 'secret', requirement: 'special', icon: 'ü¶â' },
  'vip_elite': { name: 'VIP –≠–ª–∏—Ç–∞', description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–∏—Ç—É–ª –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', condition: 'secret', requirement: 'admin_only', icon: 'üí´' }
};

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π (–ø–æ –∑–≤–µ–∑–¥–∞–º)
const RANKS = [
  { name: '–ù–æ–≤–∏—á–æ–∫', requirement: 0, color: 'üÜï' },           // –£—Ä–æ–≤–µ–Ω—å 1
  { name: '–£—á–µ–Ω–∏–∫', requirement: 10, color: 'üìö' },           // –£—Ä–æ–≤–µ–Ω—å 2 
  { name: '–°—Ç–∞–∂—ë—Ä', requirement: 25, color: 'üéì' },           // –£—Ä–æ–≤–µ–Ω—å 3
  { name: '–†–∞–±–æ—Ç–Ω–∏–∫', requirement: 50, color: '‚öôÔ∏è' },         // –£—Ä–æ–≤–µ–Ω—å 4
  { name: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', requirement: 100, color: 'üîß' },      // –£—Ä–æ–≤–µ–Ω—å 5
  { name: '–≠–∫—Å–ø–µ—Ä—Ç', requirement: 200, color: 'üíº' },         // –£—Ä–æ–≤–µ–Ω—å 6
  { name: '–ú–∞—Å—Ç–µ—Ä', requirement: 350, color: 'üèÖ' },          // –£—Ä–æ–≤–µ–Ω—å 7
  { name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', requirement: 500, color: 'ü•â' },    // –£—Ä–æ–≤–µ–Ω—å 8
  { name: '–í–∏—Ä—Ç—É–æ–∑', requirement: 750, color: 'ü•à' },         // –£—Ä–æ–≤–µ–Ω—å 9
  { name: '–≠–ª–∏—Ç–∞', requirement: 1000, color: 'ü•á' },          // –£—Ä–æ–≤–µ–Ω—å 10
  { name: '–ß–µ–º–ø–∏–æ–Ω', requirement: 1500, color: 'üèÜ' },        // –£—Ä–æ–≤–µ–Ω—å 11
  { name: '–¢–∏—Ç–∞–Ω', requirement: 2500, color: 'üíé' },          // –£—Ä–æ–≤–µ–Ω—å 12
  { name: '–ë–æ–∂–µ—Å—Ç–≤–æ', requirement: 4000, color: 'üëë' },       // –£—Ä–æ–≤–µ–Ω—å 13
  { name: '–õ–µ–≥–µ–Ω–¥–∞', requirement: 6000, color: '‚≠ê' },        // –£—Ä–æ–≤–µ–Ω—å 14
  { name: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä', requirement: 10000, color: 'üåü' }      // –£—Ä–æ–≤–µ–Ω—å 15 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)
];

// –°–∏—Å—Ç–µ–º–∞ –º–∞–≥–∞–∑–∏–Ω–∞
const SHOP_ITEMS = {
  'boost_farm': {
    name: '‚ö° –ë—É—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞ x2',
    description: '–£–¥–≤–∞–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ñ–∞—Ä–º –Ω–∞ 1 —á–∞—Å',
    price: 50,
    icon: '‚ö°',
    duration: 3600, // 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    category: 'boosts'
  },
  'boost_bonus': {
    name: 'üéÅ –ë—É—Å—Ç–µ—Ä –±–æ–Ω—É—Å–∞ x2', 
    description: '–£–¥–≤–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞ 3 –¥–Ω—è',
    price: 100,
    icon: 'üéÅ',
    duration: 259200, // 3 –¥–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    category: 'boosts'
  },
  'multiplier_stars': {
    name: '‚ú® –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∑–≤—ë–∑–¥ x3',
    description: '–£—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–≤—ë–∑–¥—ã –Ω–∞ 30 –º–∏–Ω—É—Ç',
    price: 200,
    icon: '‚ú®',
    duration: 1800, // 30 –º–∏–Ω—É—Ç
    category: 'multipliers'
  },
  'premium_week': {
    name: 'üëë –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å',
    description: 'VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–µ–¥–µ–ª—é + –≤—Å–µ –±–æ–Ω—É—Å—ã',
    price: 500,
    icon: 'üëë',
    duration: 604800, // 7 –¥–Ω–µ–π
    category: 'premium'
  },
  'lucky_box': {
    name: 'üé≤ –ö–æ—Ä–æ–±–∫–∞ —É–¥–∞—á–∏',
    description: '–°—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à ~10‚≠ê (–¥–∏–∞–ø–∞–∑–æ–Ω 1-100‚≠ê)',
    price: 25,
    icon: 'üé≤',
    category: 'boxes'
  },
  'mega_box': {
    name: 'üíé –ú–µ–≥–∞ –∫–æ—Ä–æ–±–∫–∞',
    description: '–°—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à ~75‚≠ê (–¥–∏–∞–ø–∞–∑–æ–Ω 20-284‚≠ê)',
    price: 150,
    icon: 'üíé',
    category: 'boxes'
  },
  'custom_title': {
    name: 'üè∑Ô∏è –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª',
    description: '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–∏—Ç—É–ª',
    price: 1000,
    icon: 'üè∑Ô∏è',
    category: 'cosmetic'
  },
  'miner': {
    name: '‚õèÔ∏è –ú–∞–π–Ω–µ—Ä',
    description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–π–Ω–µ—Ä –∑–≤–µ–∑–¥. –î–æ—Ö–æ–¥ 24/7. –û–∫—É–ø–∞–µ—Ç—Å—è –∑–∞ 30-60 –¥–Ω–µ–π',
    price: 1000,
    icon: '‚õèÔ∏è',
    category: 'miner',
    currency: 'magnumCoins'  // –ü–æ–∫—É–ø–∞–µ—Ç—Å—è –∑–∞ Magnum Coin
  }
};

// –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–∏—Å—Å–∏–π –æ–±–º–µ–Ω–∞
let EXCHANGE_COMMISSION = 0; // –ö–æ–º–∏—Å—Å–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0 = –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏ –≤ –ë–î
async function initializeCommission() {
  try {
    const existingCommission = await reserve.findOne({ type: 'commission' });
    if (!existingCommission) {
      await reserve.insertOne({
        type: 'commission',
        value: 0,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      console.log('‚úÖ –ö–æ–º–∏—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ë–î: 0%');
    } else {
      EXCHANGE_COMMISSION = existingCommission.value;
      console.log(`‚úÖ –ö–æ–º–∏—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î: ${EXCHANGE_COMMISSION}%`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ –≤ –ë–î
async function saveCommissionToDB() {
  try {
    await reserve.updateOne(
      { type: 'commission' },
      {
        $set: {
          value: EXCHANGE_COMMISSION,
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );
    console.log(`üíæ –ö–æ–º–∏—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: ${EXCHANGE_COMMISSION}%`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ –≤ –ë–î:', error);
  }
}

// –õ–∏–º–∏—Ç—ã –æ–±–º–µ–Ω–∞
const EXCHANGE_LIMITS = {
  MIN_MAGNUM_COINS: 100, // –ú–∏–Ω–∏–º—É–º Magnum Coin –¥–ª—è –æ–±–º–µ–Ω–∞
  MAX_MAGNUM_COINS: 10000, // –ú–∞–∫—Å–∏–º—É–º Magnum Coin –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é
  MIN_STARS: 0.01, // –ú–∏–Ω–∏–º—É–º –∑–≤—ë–∑–¥ –¥–ª—è –æ–±–º–µ–Ω–∞
  MAX_STARS: 1000 // –ú–∞–∫—Å–∏–º—É–º –∑–≤—ë–∑–¥ –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é
};

// –ë–∞–ª–∞–Ω—Å —Ä–µ–∑–µ—Ä–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è)
let RESERVE_MAGNUM_COINS = 1000000000; // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ Magnum Coin (1,000,000,000)
let RESERVE_STARS = 10000; // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –∑–≤—ë–∑–¥ (10,000) (–∫—É—Ä—Å: 100ü™ô = 0.001‚≠ê)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞ –≤ –ë–î
async function initializeReserve() {
  try {
    const existingReserve = await reserve.findOne({});
    if (!existingReserve) {
      await reserve.insertOne({
        magnumCoins: 1000000000, // 1,000,000,000 Magnum Coin
        stars: 10000, // 10,000 –∑–≤—ë–∑–¥
        createdAt: new Date(),
        updatedAt: new Date()
      });
      console.log('‚úÖ –†–µ–∑–µ—Ä–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –ë–î (–∫—É—Ä—Å: 100ü™ô = 0.001‚≠ê)');
    } else {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∑–µ—Ä–≤ –≤ –ø–∞–º—è—Ç—å
      RESERVE_MAGNUM_COINS = existingReserve.magnumCoins;
      RESERVE_STARS = existingReserve.stars;
      console.log(`‚úÖ –†–µ–∑–µ—Ä–≤ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î: ${RESERVE_MAGNUM_COINS}ü™ô, ${RESERVE_STARS}‚≠ê`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞ –≤ –ë–î
async function saveReserveToDB() {
  try {
    await reserve.updateOne(
      {},
      {
        $set: {
          magnumCoins: RESERVE_MAGNUM_COINS,
          stars: RESERVE_STARS,
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );
    console.log(`üíæ –†–µ–∑–µ—Ä–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: ${RESERVE_MAGNUM_COINS}ü™ô, ${RESERVE_STARS}‚≠ê`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞ –≤ –ë–î:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑–µ—Ä–≤–∞ –∏–∑ –ë–î
async function loadReserveFromDB() {
  try {
    const reserveData = await reserve.findOne({});
    if (reserveData) {
      RESERVE_MAGNUM_COINS = reserveData.magnumCoins;
      RESERVE_STARS = reserveData.stars;
      console.log(`üì• –†–µ–∑–µ—Ä–≤ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î: ${RESERVE_MAGNUM_COINS}ü™ô, ${RESERVE_STARS}‚≠ê`);
      return true;
    }
    return false;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑–µ—Ä–≤–∞ –∏–∑ –ë–î:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
async function resetDatabase() {
  try {
    console.log('üóÑÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const collections = [
      { collection: users, description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' },
      { collection: promocodes, description: '–ü—Ä–æ–º–æ–∫–æ–¥—ã' },
      { collection: withdrawalRequests, description: '–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥' },
      { collection: supportTickets, description: '–¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏' },
      { collection: taskChecks, description: '–ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π' },
      { collection: reserve, description: '–†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏' }
    ];
    
    let deletedCount = 0;
    
    for (const item of collections) {
      try {
        const result = await item.collection.deleteMany({});
        console.log(`‚úÖ ${item.description}: —É–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –∑–∞–ø–∏—Å–µ–π`);
        deletedCount += result.deletedCount;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ${item.description}:`, error);
      }
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à–∏
    userCache.clear();
    botStatsCache = null;
    botStatsCacheTime = 0;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤ –∑–∞–Ω–æ–≤–æ
    await initializeReserve();
    await initializeCommission();
    
    console.log(`üóÑÔ∏è –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω! –£–¥–∞–ª–µ–Ω–æ ${deletedCount} –∑–∞–ø–∏—Å–µ–π`);
    return { success: true, deletedCount };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    return { success: false, error: error.message };
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑–µ—Ä–≤–∞
function calculateExchangeRate(fromCurrency, toCurrency, amount) {
  try {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    if (RESERVE_MAGNUM_COINS <= 0 || RESERVE_STARS <= 0) {
      console.error('‚ùå –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏ –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π!');
      return 0;
    }
    
    if (fromCurrency === 'magnumCoins' && toCurrency === 'stars') {
      // –û–±–º–µ–Ω Magnum Coin –Ω–∞ –∑–≤—ë–∑–¥—ã
      const rate = RESERVE_STARS / RESERVE_MAGNUM_COINS;
      return amount * rate;
    } else if (fromCurrency === 'stars' && toCurrency === 'magnumCoins') {
      // –û–±–º–µ–Ω –∑–≤—ë–∑–¥ –Ω–∞ Magnum Coin
      const rate = RESERVE_MAGNUM_COINS / RESERVE_STARS;
      return amount * rate;
    }
    return 0;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞:', error);
    return 0;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
function calculateCommission(amount) {
  if (EXCHANGE_COMMISSION <= 0) return 0;
  return amount * (EXCHANGE_COMMISSION / 100);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
function calculateAmountWithCommission(amount) {
  if (EXCHANGE_COMMISSION <= 0) return amount;
  return amount * (1 - EXCHANGE_COMMISSION / 100);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤
function formatNumber(num) {
  if (num === 0) return '0';
  if (num < 0.01) {
    // –î–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∏—Å–µ–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤
    return num.toFixed(6).replace(/\.?0+$/, '');
  } else if (num < 1) {
    // –î–ª—è —á–∏—Å–µ–ª –º–µ–Ω—å—à–µ 1 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 4 –∑–Ω–∞–∫–æ–≤
    return num.toFixed(4).replace(/\.?0+$/, '');
  } else if (num < 100) {
    // –î–ª—è —á–∏—Å–µ–ª –¥–æ 100 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    return num.toFixed(2).replace(/\.?0+$/, '');
  } else {
    // –î–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    return num.toFixed(2).replace(/\.?0+$/, '');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
function formatLargeNumber(num) {
  if (num === 0) return '0';
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
  return num.toLocaleString('de-DE', {
    minimumFractionDigits: 0,
    maximumFractionDigits: 2
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–∞ –º–∞–π–Ω–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—É—Ä—Å–∞ –∑–≤—ë–∑–¥
function calculateMinerReward() {
  try {
    // –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥: 1000 MC —Å—Ç–æ–∏—Ç –º–∞–π–Ω–µ—Ä, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å 45 –¥–Ω–µ–π
    const minerCost = 1000; // –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞–π–Ω–µ—Ä–∞ –≤ Magnum Coin
    const paybackDays = 45; // –î–Ω–∏ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
    const paybackHours = paybackDays * 24; // –ß–∞—Å—ã –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥ –≤ Magnum Coin –∑–∞ —á–∞—Å
    const baseRewardPerHourMC = minerCost / paybackHours;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    const magnumToStarsRate = RESERVE_STARS / RESERVE_MAGNUM_COINS;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ –≤ –∑–≤—ë–∑–¥–∞—Ö —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞
    const rewardPerHourStars = baseRewardPerHourMC * magnumToStarsRate;
    
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    const roundedReward = Math.round(rewardPerHourStars * 10000) / 10000;
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: 0.0001 –∑–≤–µ–∑–¥—ã –≤ —á–∞—Å
    const minReward = 0.0001;
    
    return Math.max(roundedReward, minReward);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–∞ –º–∞–π–Ω–µ—Ä–∞:', error);
    return 0.0001; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ñ–∞—Ä–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
function calculateFarmReward() {
  try {
    // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ñ–∞—Ä–º (–≤ Magnum Coin)
    const baseReward = 1;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    const magnumToStarsRate = RESERVE_STARS / RESERVE_MAGNUM_COINS;
    
    // –ï—Å–ª–∏ –∫—É—Ä—Å –≤—ã—Å–æ–∫–∏–π (–º–Ω–æ–≥–æ –∑–≤—ë–∑–¥ –∑–∞ Magnum Coin), —Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è
    // –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–∏–∑–∫–∏–π (–º–∞–ª–æ –∑–≤—ë–∑–¥ –∑–∞ Magnum Coin), —Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
    const rateMultiplier = Math.max(0.5, Math.min(2.0, magnumToStarsRate * 100));
    
    const dynamicReward = baseReward * rateMultiplier;
    
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    const roundedReward = Math.round(dynamicReward * 100) / 100;
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ 0.5, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 2.0
    const minReward = 0.5;
    const maxReward = 2.0;
    
    return Math.max(minReward, Math.min(maxReward, roundedReward));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ñ–∞—Ä–º:', error);
    return 1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞ –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞
async function updateReserve(fromCurrency, toCurrency, fromAmount, toAmount, commissionAmount = 0) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (fromAmount <= 0 || toAmount <= 0) {
      console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞');
      return false;
    }
    
    if (fromCurrency === 'magnumCoins' && toCurrency === 'stars') {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–∞ –∑–≤—ë–∑–¥
      if (RESERVE_STARS < toAmount) {
        console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –≤ —Ä–µ–∑–µ—Ä–≤–µ –¥–ª—è –æ–±–º–µ–Ω–∞');
        return false;
      }
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–¥–∞–µ—Ç fromAmount, –Ω–æ –ø–æ–ª—É—á–∞–µ—Ç toAmount (—É–∂–µ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏)
      // –ö–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ
      RESERVE_MAGNUM_COINS += fromAmount;
      RESERVE_STARS -= toAmount;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏—è, –æ–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤
      if (commissionAmount > 0) {
        console.log(`üí∞ –ö–æ–º–∏—Å—Å–∏—è ${commissionAmount.toFixed(2)}ü™ô –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤`);
      }
    } else if (fromCurrency === 'stars' && toCurrency === 'magnumCoins') {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–∞ Magnum Coin
      if (RESERVE_MAGNUM_COINS < toAmount) {
        console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coin –≤ —Ä–µ–∑–µ—Ä–≤–µ –¥–ª—è –æ–±–º–µ–Ω–∞');
        return false;
      }
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–¥–∞–µ—Ç fromAmount, –Ω–æ –ø–æ–ª—É—á–∞–µ—Ç toAmount (—É–∂–µ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏)
      // –ö–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ
      RESERVE_STARS += fromAmount;
      RESERVE_MAGNUM_COINS -= toAmount;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏—è, –æ–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤
      if (commissionAmount > 0) {
        console.log(`üí∞ –ö–æ–º–∏—Å—Å–∏—è ${commissionAmount.toFixed(2)}‚≠ê –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
    if (RESERVE_MAGNUM_COINS < 0 || RESERVE_STARS < 0) {
      console.error('‚ùå –†–µ–∑–µ—Ä–≤ —Å—Ç–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º! –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π');
      // –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
      if (fromCurrency === 'magnumCoins' && toCurrency === 'stars') {
        RESERVE_MAGNUM_COINS -= fromAmount;
        RESERVE_STARS += toAmount;
      } else if (fromCurrency === 'stars' && toCurrency === 'magnumCoins') {
        RESERVE_STARS -= fromAmount;
        RESERVE_MAGNUM_COINS += toAmount;
      }
      return false;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤ –≤ –ë–î
    await saveReserveToDB();
    
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: ${RESERVE_MAGNUM_COINS.toFixed(2)}ü™ô, ${RESERVE_STARS.toFixed(2)}‚≠ê`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º
function getReserveManagementText() {
  const minerReward = calculateMinerReward();
  const dailyMinerReward = minerReward * 24;
  const farmReward = calculateFarmReward();
  const bonusReward = farmReward * 3;
  
  return `üè¶ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ó–ï–†–í–û–ú –ë–ò–†–ñ–ò** üè¶\n\n` +
         `üìä **–¢–µ–∫—É—â–∏–π —Ä–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏:**\n` +
         `ü™ô ${formatLargeNumber(RESERVE_MAGNUM_COINS)} Magnum Coin\n` +
         `‚≠ê ${formatLargeNumber(RESERVE_STARS)} –∑–≤—ë–∑–¥\n\n` +
         `üìà **–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞:**\n` +
         `‚Ä¢ 100ü™ô = ${formatNumber(100 * (RESERVE_STARS / RESERVE_MAGNUM_COINS))}‚≠ê\n` +
         `‚Ä¢ 10‚≠ê = ${formatNumber(10 * (RESERVE_MAGNUM_COINS / RESERVE_STARS))}ü™ô\n\n` +
         `üåæ **–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n` +
         `‚Ä¢ –§–∞—Ä–º: ${formatNumber(farmReward)}ü™ô –∑–∞ –∫–ª–∏–∫\n` +
         `‚Ä¢ –ë–æ–Ω—É—Å: ${formatNumber(bonusReward)}ü™ô –≤ –¥–µ–Ω—å\n` +
         `‚Ä¢ –ó–∞–≤–∏—Å—è—Ç –æ—Ç –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞\n\n` +
         `‚õèÔ∏è **–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–∞–π–Ω–µ—Ä–∞:**\n` +
         `‚Ä¢ ${formatNumber(minerReward)}‚≠ê –≤ —á–∞—Å (${formatNumber(dailyMinerReward)}‚≠ê –≤ –¥–µ–Ω—å)\n` +
         `‚Ä¢ –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: ~45 –¥–Ω–µ–π\n\n` +
         `üìä **–õ–∏–º–∏—Ç—ã –æ–±–º–µ–Ω–∞:**\n` +
         `‚Ä¢ –ú–∏–Ω–∏–º—É–º: ${EXCHANGE_LIMITS.MIN_MAGNUM_COINS}ü™ô / ${EXCHANGE_LIMITS.MIN_STARS}‚≠ê\n` +
         `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏—é: ${EXCHANGE_LIMITS.MAX_MAGNUM_COINS}ü™ô / ${EXCHANGE_LIMITS.MAX_STARS}‚≠ê\n` +
         `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: ${EXCHANGE_COMMISSION}%\n\n` +
         `üí° **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤:**\n` +
         `‚Ä¢ –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ —Ä–µ–∑–µ—Ä–≤–∞\n` +
         `‚Ä¢ –ü—Ä–∏ –æ–±–º–µ–Ω–µ —Ä–µ–∑–µ—Ä–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è\n` +
         `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∑–µ—Ä–≤\n` +
         `‚Ä¢ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ñ–∞—Ä–º –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫—É—Ä—Å–∞\n` +
         `‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–∞–π–Ω–µ—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫—É—Ä—Å–∞\n` +
         `‚Ä¢ –ë–æ–ª—å—à–µ —Ä–µ–∑–µ—Ä–≤–∞ = –ª—É—á—à–µ –∫—É—Ä—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫—É—Ä—Å–æ–≤ –æ–±–º–µ–Ω–∞
function getExchangeRatesText() {
  try {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    if (RESERVE_MAGNUM_COINS <= 0 || RESERVE_STARS <= 0) {
      return `üîÑ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:**\n\n` +
             `‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n` +
             `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑–µ—Ä–≤–∞
    const magnumToStarsRate = RESERVE_STARS / RESERVE_MAGNUM_COINS;
    const starsToMagnumRate = RESERVE_MAGNUM_COINS / RESERVE_STARS;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å—ã —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
    const baseMagnumToStars = 100 * magnumToStarsRate;
    const baseStarsToMagnum = 10 * starsToMagnumRate;
    const magnumToStarsWithCommission = calculateAmountWithCommission(baseMagnumToStars);
    const starsToMagnumWithCommission = calculateAmountWithCommission(baseStarsToMagnum);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–∞–π–Ω–µ—Ä–∞ –∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ñ–∞—Ä–º
    const minerReward = calculateMinerReward();
    const dailyMinerReward = minerReward * 24;
    const farmReward = calculateFarmReward();
    const bonusReward = farmReward * 3;
    
                    return `üîÑ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:**\n\n` +
                       `‚≠ê **Telegram Stars:**\n` +
                       `‚Ä¢ –ö—É—Ä—Å: 100ü™ô = ${formatNumber(magnumToStarsWithCommission)}‚≠ê TG Stars\n` +
                       `‚Ä¢ –û–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å: 10‚≠ê = ${formatNumber(starsToMagnumWithCommission)}ü™ô\n` +
                       `‚Ä¢ –ú–∏–Ω–∏–º—É–º: ${EXCHANGE_LIMITS.MIN_MAGNUM_COINS}ü™ô –∏–ª–∏ ${EXCHANGE_LIMITS.MIN_STARS}‚≠ê\n` +
                       `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏—é: ${EXCHANGE_LIMITS.MAX_MAGNUM_COINS}ü™ô –∏–ª–∏ ${EXCHANGE_LIMITS.MAX_STARS}‚≠ê\n` +
                       `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: ${EXCHANGE_COMMISSION}%\n\n` +
                       `üåæ **–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n` +
                       `‚Ä¢ –§–∞—Ä–º: ${formatNumber(farmReward)}ü™ô –∑–∞ –∫–ª–∏–∫\n` +
                       `‚Ä¢ –ë–æ–Ω—É—Å: ${formatNumber(bonusReward)}ü™ô –≤ –¥–µ–Ω—å\n` +
                       `‚Ä¢ –ó–∞–≤–∏—Å—è—Ç –æ—Ç –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞\n\n` +
                       `‚õèÔ∏è **–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–∞–π–Ω–µ—Ä–∞:**\n` +
                       `‚Ä¢ ${formatNumber(minerReward)}‚≠ê –≤ —á–∞—Å (${formatNumber(dailyMinerReward)}‚≠ê –≤ –¥–µ–Ω—å)\n` +
                       `‚Ä¢ –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: ~45 –¥–Ω–µ–π\n\n` +
                       `üí° **–û—Ç —á–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –∫—É—Ä—Å:**\n` +
                       `‚Ä¢ –ë–∞–ª–∞–Ω—Å —Ä–µ–∑–µ—Ä–≤–∞ –±–∏—Ä–∂–∏\n` +
                       `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–æ–≤\n` +
                       `‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏ —Å –æ–±–º–µ–Ω–æ–≤\n` +
                       `‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n` +
                       `üíµ **USDT TRC-20:**\n` +
                       `‚Ä¢ –ö—É—Ä—Å: —Å–∫–æ—Ä–æ\n` +
                       `‚Ä¢ –°—Ç–∞—Ç—É—Å: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n` +
                       `üíé **TON Coin:**\n` +
                       `‚Ä¢ –ö—É—Ä—Å: —Å–∫–æ—Ä–æ\n` +
                       `‚Ä¢ –°—Ç–∞—Ç—É—Å: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫—É—Ä—Å–æ–≤:', error);
    return `üîÑ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:**\n\n` +
           `‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞\n` +
           `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –æ–±–º–µ–Ω–∞
function getExchangeButtons(magnumCoinsBalance, starsBalance) {
  console.log(`üîò getExchangeButtons: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ ${magnumCoinsBalance}ü™ô –∏ ${starsBalance}‚≠ê`);

  const buttons = [];

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑–µ—Ä–≤–∞
  const magnumToStarsRate = RESERVE_STARS / RESERVE_MAGNUM_COINS;
  const starsToMagnumRate = RESERVE_MAGNUM_COINS / RESERVE_STARS;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å—ã —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
  const baseMagnumToStars = EXCHANGE_LIMITS.MIN_MAGNUM_COINS * magnumToStarsRate;
  const baseStarsToMagnum = EXCHANGE_LIMITS.MIN_STARS * starsToMagnumRate;
  const magnumToStarsWithCommission = calculateAmountWithCommission(baseMagnumToStars);
  const starsToMagnumWithCommission = calculateAmountWithCommission(baseStarsToMagnum);

    // –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–º–µ–Ω–∞ (—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏) - 3 —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã
  const quickBuyAmounts = [100, 1000, 10000]; // Magnum Coin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥
  const quickSellAmounts = [1, 10, 100]; // –ó–≤—ë–∑–¥—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
  
  // –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥ (—Ç—Ä–∞—Ç–∏–º Magnum Coin, –ø–æ–ª—É—á–∞–µ–º –∑–≤—ë–∑–¥—ã)
  const buyButtons = [];
  for (const amount of quickBuyAmounts) {
    if (magnumCoinsBalance >= amount) {
      const baseStarsToReceive = amount * magnumToStarsRate;
      const starsToReceive = calculateAmountWithCommission(baseStarsToReceive);
      const buttonText = `${amount}ü™ô‚Üí${formatNumber(starsToReceive)}‚≠ê`;
      console.log(`üîò getExchangeButtons: –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–º–µ–Ω–∞ "${buttonText}" —Å callback_data: buy_tg_stars_${amount}`);
      buyButtons.push(Markup.button.callback(buttonText, `buy_tg_stars_${amount}`));
    }
  }
  if (buyButtons.length > 0) {
    buttons.push(buyButtons);
  } else {
    buttons.push([Markup.button.callback('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coin', 'insufficient_funds')]);
  }

  // –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–≤—ë–∑–¥ (—Ç—Ä–∞—Ç–∏–º –∑–≤—ë–∑–¥—ã, –ø–æ–ª—É—á–∞–µ–º Magnum Coin)
  const sellButtons = [];
  for (const amount of quickSellAmounts) {
    if (starsBalance >= amount) {
      const baseCoinsToReceive = amount * starsToMagnumRate;
      const coinsToReceive = calculateAmountWithCommission(baseCoinsToReceive);
      const buttonText = `${amount}‚≠ê‚Üí${formatNumber(coinsToReceive)}ü™ô`;
      console.log(`üîò getExchangeButtons: –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–º–µ–Ω–∞ "${buttonText}" —Å callback_data: sell_tg_stars_${amount}`);
      sellButtons.push(Markup.button.callback(buttonText, `sell_tg_stars_${amount}`));
    }
  }
  if (sellButtons.length > 0) {
    buttons.push(sellButtons);
  } else {
    buttons.push([Markup.button.callback('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥', 'insufficient_stars')]);
  }

  buttons.push(
    [Markup.button.callback('üíµ –ö—É–ø–∏—Ç—å USDT (—Å–∫–æ—Ä–æ)', 'buy_usdt'), Markup.button.callback('üíé –ö—É–ø–∏—Ç—å TON (—Å–∫–æ—Ä–æ)', 'buy_ton')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –Ω–∞ –±–∏—Ä–∂—É', 'exchange')]
  );

  console.log(`üîò getExchangeButtons: –°–æ–∑–¥–∞–Ω–æ ${buttons.length} —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫`);
  return buttons;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç
async function updateExchangeInterface(ctx, userId) {
  console.log(`üîò updateExchangeInterface: –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

  const user = await getUser(userId, ctx);
  const starsBalance = Math.round((user.stars || 0) * 100) / 100;
  const magnumCoinsBalance = Math.round((user.magnumCoins || 0) * 100) / 100;

  console.log(`üîò updateExchangeInterface: –ë–∞–ª–∞–Ω—Å ${magnumCoinsBalance}ü™ô –∏ ${starsBalance}‚≠ê`);

  const currencyText = `üíé **–û–ë–ú–ï–ù –í–ê–õ–Æ–¢** üíé\n\n` +
                      `üí∞ **–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:**\n` +
                      `ü™ô ${formatLargeNumber(magnumCoinsBalance)} Magnum Coin\n` +
                      `‚≠ê ${formatLargeNumber(starsBalance)} –∑–≤—ë–∑–¥\n\n` +
                      `üè¶ **–†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏:**\n` +
                      `ü™ô ${formatLargeNumber(RESERVE_MAGNUM_COINS)} Magnum Coin\n` +
                      `‚≠ê ${formatLargeNumber(RESERVE_STARS)} –∑–≤—ë–∑–¥\n\n` +
                      getExchangeRatesText();

  const buttons = getExchangeButtons(magnumCoinsBalance, starsBalance);
  const keyboard = Markup.inlineKeyboard(buttons);

  console.log(`üîò updateExchangeInterface: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å`);
  await sendMessageWithPhoto(ctx, currencyText, keyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ä—ã—Ö –±–ª–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function replaceOldExchangeInterface() {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ä—ã—Ö –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
  // –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ updateExchangeInterface
}

// –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const USER_STATUSES = {
  'owner': { 
    name: '–í–ª–∞–¥–µ–ª–µ—Ü', 
    description: '–°–æ–∑–¥–∞—Ç–µ–ª—å –∏ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞', 
    color: 'üëë',
    priority: 1
  },
  'admin': { 
    name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 
    description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º', 
    color: '‚ö°',
    priority: 2
  },
  'moderator': { 
    name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', 
    description: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', 
    color: 'üõ°Ô∏è',
    priority: 3
  },
  'veteran': { 
    name: '–í–µ—Ç–µ—Ä–∞–Ω', 
    description: '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', 
    color: 'üéñÔ∏è',
    priority: 4
  },
  'volunteer': { 
    name: '–í–æ–ª–æ–Ω—Ç–µ—Ä', 
    description: '–ü–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞', 
    color: 'ü§ù',
    priority: 5
  },
  'elite': { 
    name: '–≠–ª–∏—Ç–∞', 
    description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö', 
    color: '‚≠ê',
    priority: 6
  },
  'guardian': { 
    name: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å', 
    description: '–ó–∞—â–∏—Ç–Ω–∏–∫ –∏ –ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', 
    color: 'üõ°Ô∏è',
    priority: 7
  },
  'vip_gold': { 
    name: 'VIP Gold', 
    description: '–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è', 
    color: 'üíé',
    priority: 8
  },
  'vip': { 
    name: 'VIP', 
    description: '–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 
    color: 'üí´',
    priority: 9
  },
  'verified': { 
    name: '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', 
    description: '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 
    color: '‚úÖ',
    priority: 10
  },
  'member': { 
    name: '–£—á–∞—Å—Ç–Ω–∏–∫', 
    description: '–û–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', 
    color: 'üéÆ',
    priority: 11
  }
};

// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const ACHIEVEMENTS = {
  'first_hundred': { 
    name: 'üí∞ –°–æ—Ç–∫–∞', 
    description: '–ù–∞–∫–æ–ø–∏—Ç—å 100 –∑–≤—ë–∑–¥', 
    condition: 'stars', 
    requirement: 100,
    reward: 5,
    icon: 'üí∞'
  },
  'social_butterfly': { 
    name: 'ü§ù –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞', 
    description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 10 –¥—Ä—É–∑–µ–π', 
    condition: 'invited', 
    requirement: 10,
    reward: 10,
    icon: 'ü§ù'
  },
  'week_warrior': { 
    name: '‚ö° –ù–µ–¥–µ–ª—å–Ω—ã–π –≤–æ–∏–Ω', 
    description: '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', 
    condition: 'daily_streak', 
    requirement: 7,
    reward: 12,
    icon: '‚ö°'
  },
  'farm_master': { 
    name: 'üåæ –ú–∞—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞', 
    description: '–°—Ñ–∞—Ä–º–∏—Ç—å 1000 —Ä–∞–∑', 
    condition: 'farm_count', 
    requirement: 1000,
    reward: 10,
    icon: 'üåæ'
  },
  'promo_hunter': { 
    name: 'üé´ –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –ø—Ä–æ–º–æ', 
    description: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å 15 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', 
    condition: 'promo_count', 
    requirement: 15,
    reward: 15,
    icon: 'üé´'
  }
};

// –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
const TICKET_STATUSES = {
  'new': { name: 'üÜï –ù–æ–≤–∞—è', color: 'üîµ', emoji: 'üîµ' },
  'in_progress': { name: '‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ', color: 'üü°', emoji: '‚öôÔ∏è' },
  'resolved': { name: '‚úÖ –†–µ—à–µ–Ω–∞', color: 'üü¢', emoji: '‚úÖ' },
  'rejected': { name: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞', color: 'üî¥', emoji: '‚ùå' },
  'closed': { name: 'üîí –ó–∞–∫—Ä—ã—Ç–∞', color: '‚ö´', emoji: 'üîí' }
};

async function createTaskCheck(userId, username, taskId, taskTitle, photo = null) {
  const taskCheck = {
    userId: userId,
    username: username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    taskId: taskId,
    taskTitle: taskTitle,
    photo: photo,
    status: 'pending',
    createdAt: new Date(),
    updatedAt: new Date(),
    adminResponse: null
  };
  
  const result = await taskChecks.insertOne(taskCheck);
  taskCheck._id = result.insertedId;
  return taskCheck;
}

async function updateTaskCheckStatus(checkId, status, adminResponse = null) {
  const updateData = { 
    status: status, 
    updatedAt: new Date() 
  };
  
  if (adminResponse) {
    updateData.adminResponse = adminResponse;
  }
  
  await taskChecks.updateOne(
    { _id: checkId },
    { $set: updateData }
  );
}

async function sendTaskCheckToChannel(taskCheck) {
  const supportChannelId = SUPPORT_CHANNEL;
  if (!supportChannelId) return;

  const statusInfo = TASK_CHECK_STATUSES[taskCheck.status];
  
  try {
    const messageText = formatTaskCheckMessage(taskCheck);
    
    let message;
    if (taskCheck.photo) {
      message = await bot.telegram.sendPhoto(`@${supportChannelId}`, taskCheck.photo, {
        caption: messageText,
        parse_mode: 'Markdown',
        reply_markup: getTaskCheckKeyboard(taskCheck._id, taskCheck.status, taskCheck.taskId)
      });
    } else {
      message = await bot.telegram.sendMessage(`@${supportChannelId}`, messageText, {
        parse_mode: 'Markdown',
        reply_markup: getTaskCheckKeyboard(taskCheck._id, taskCheck.status, taskCheck.taskId)
      });
    }
    
    await taskChecks.updateOne(
      { _id: taskCheck._id },
      { $set: { channelMessageId: message.message_id } }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', error);
  }
}

function formatTaskCheckMessage(taskCheck) {
  const statusInfo = TASK_CHECK_STATUSES[taskCheck.status];
  let message = `üìã *–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è #${taskCheck._id.toString().slice(-6)}*\n\n` +
    `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${taskCheck.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: \`${taskCheck.userId}\`)\n` +
    `üìù *–ó–∞–¥–∞–Ω–∏–µ:* ${taskCheck.taskTitle}\n` +
    `üìÖ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* ${taskCheck.createdAt.toLocaleString('ru-RU')}\n` +
    `üìä *–°—Ç–∞—Ç—É—Å:* ${statusInfo.emoji} ${statusInfo.name}`;
  
  if (taskCheck.adminResponse) {
    message += `\n\nüí¨ *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n${taskCheck.adminResponse}`;
  }
  
  if (taskCheck.updatedAt && taskCheck.updatedAt.getTime() !== taskCheck.createdAt.getTime()) {
    message += `\nüîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${taskCheck.updatedAt.toLocaleString('ru-RU')}`;
  }
  
  return message;
}

function getTaskCheckKeyboard(checkId, status, taskId) {
  const keyboards = {
    'pending': [
      [
        { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `task_approve_${checkId}` },
        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `task_reject_${checkId}` }
      ],
      [
        { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `task_reply_${checkId}` }
      ]
    ],
    'approved': [
      [
        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ', callback_data: `task_reject_${checkId}` }
      ]
    ],
    'rejected': [
      [
        { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `task_approve_${checkId}` }
      ]
    ]
  };
  
  return { inline_keyboard: keyboards[status] || keyboards['pending'] };
}

async function updateTaskCheckInChannel(checkId) {
  try {
    const taskCheck = await taskChecks.findOne({ _id: checkId });
    if (!taskCheck || !taskCheck.channelMessageId) return;
    
    const messageText = formatTaskCheckMessage(taskCheck);
    const keyboard = getTaskCheckKeyboard(taskCheck._id, taskCheck.status, taskCheck.taskId);
    
    if (taskCheck.photo) {
      await bot.telegram.editMessageCaption(
        `@${SUPPORT_CHANNEL}`,
        taskCheck.channelMessageId,
        null,
        messageText,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } else {
      await bot.telegram.editMessageText(
        `@${SUPPORT_CHANNEL}`,
        taskCheck.channelMessageId,
        null,
        messageText,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ:', error);
  }
}

async function createSupportTicket(userId, username, message) {
  const ticket = {
    userId: userId,
    username: username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    message: message,
    status: 'new',
    createdAt: new Date(),
    updatedAt: new Date(),
    adminResponse: null
  };
  
  const result = await supportTickets.insertOne(ticket);
  ticket._id = result.insertedId;
  return ticket;
}

async function updateTicketStatus(ticketId, status, adminResponse = null, messageId = null) {
  const updateData = { 
    status: status, 
    updatedAt: new Date() 
  };
  
  if (adminResponse) {
    updateData.adminResponse = adminResponse;
  }
  
  if (messageId) {
    updateData.channelMessageId = messageId;
  }
  
  await supportTickets.updateOne(
    { _id: ticketId },
    { $set: updateData }
  );
}

async function notifyUserStatusChange(ticketId, statusText) {
  try {
    const ticket = await supportTickets.findOne({ _id: ticketId });
    if (!ticket) return;
    
    await bot.telegram.sendMessage(ticket.userId, 
      `üé´ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #${ticketId.toString().slice(-6)}**\n\n` +
      `üìä **–°—Ç–∞—Ç—É—Å:** –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ${statusText}\n\n` +
      `üí¨ **–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** ${ticket.message}\n\n` +
      `üìÖ **–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** ${new Date().toLocaleString('ru-RU')}`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

async function sendTicketToChannel(ticket) {
  const supportChannelId = SUPPORT_CHANNEL;
  if (!supportChannelId) return;

  const statusInfo = TICKET_STATUSES[ticket.status];
  
  try {
    const messageText = formatTicketMessage(ticket);
    const message = await bot.telegram.sendMessage(`@${supportChannelId}`, messageText, {
      parse_mode: 'Markdown',
      reply_markup: getTicketKeyboard(ticket._id, ticket.status)
    });
    
    await updateTicketStatus(ticket._id, ticket.status, null, message.message_id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
  }
}

function formatTicketMessage(ticket) {
  const statusInfo = TICKET_STATUSES[ticket.status];
  let message = `üé´ *–ó–∞—è–≤–∫–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ #${ticket._id.toString().slice(-6)}*\n\n` +
    `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: \`${ticket.userId}\`)\n` +
    `üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${ticket.message}\n` +
    `üìÖ *–°–æ–∑–¥–∞–Ω–∞:* ${ticket.createdAt.toLocaleString('ru-RU')}\n` +
    `üìä *–°—Ç–∞—Ç—É—Å:* ${statusInfo.emoji} ${statusInfo.name}`;
  
  if (ticket.adminResponse) {
    message += `\n\nüí¨ *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n${ticket.adminResponse}`;
  }
  
  if (ticket.updatedAt && ticket.updatedAt.getTime() !== ticket.createdAt.getTime()) {
    message += `\nüîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${ticket.updatedAt.toLocaleString('ru-RU')}`;
  }
  
  return message;
}

function getTicketKeyboard(ticketId, status) {
  const keyboards = {
    'new': [
      [
        { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `ticket_accept_${ticketId}` },
        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `ticket_reject_${ticketId}` }
      ],
      [
        { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `ticket_reply_${ticketId}` }
      ]
    ],
    'in_progress': [
      [
        { text: '‚úÖ –†–µ—à–µ–Ω–æ', callback_data: `ticket_resolve_${ticketId}` },
        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `ticket_reject_${ticketId}` }
      ],
      [
        { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `ticket_reply_${ticketId}` },
        { text: 'üîí –ó–∞–∫—Ä—ã—Ç—å', callback_data: `ticket_close_${ticketId}` }
      ]
    ],
    'resolved': [
      [
        { text: 'üîí –ó–∞–∫—Ä—ã—Ç—å', callback_data: `ticket_close_${ticketId}` },
        { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `ticket_reply_${ticketId}` }
      ]
    ],
    'rejected': [
      [
        { text: 'üîÑ –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å', callback_data: `ticket_accept_${ticketId}` }
      ]
    ],
    'closed': [
      [
        { text: 'üîÑ –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å', callback_data: `ticket_accept_${ticketId}` }
      ]
    ]
  };
  
  return { inline_keyboard: keyboards[status] || keyboards['new'] };
}

async function updateTicketInChannel(ticketId) {
  try {
    const ticket = await supportTickets.findOne({ _id: ticketId });
    if (!ticket || !ticket.channelMessageId) return;
    
    const messageText = formatTicketMessage(ticket);
    const keyboard = getTicketKeyboard(ticket._id, ticket.status);
    
    await bot.telegram.editMessageText(
      `@${SUPPORT_CHANNEL}`,
      ticket.channelMessageId,
      null,
      messageText,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ:', error);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏—Ç—É–ª–∞–º–∏
async function checkAndAwardAchievements(userId) {
  const user = await getUser(userId);
  const newAchievements = [];
  
  for (const [achievementId, achievement] of Object.entries(ACHIEVEMENTS)) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    if (user.achievements && user.achievements.includes(achievementId)) continue;
    
    let earned = false;
    
    switch (achievement.condition) {
      case 'stars':
        earned = user.stars >= achievement.requirement;
        break;
      case 'invited':
        earned = user.invited >= achievement.requirement;
        break;
      case 'daily_streak':
        earned = (user.dailyStreak || 0) >= achievement.requirement;
        break;
      case 'farm_count':
        earned = (user.farmCount || 0) >= achievement.requirement;
        break;
      case 'promo_count':
        earned = (user.promoCount || 0) >= achievement.requirement;
        break;
    }
    
    if (earned) {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ –Ω–∞–≥—Ä–∞–¥—É
      await users.updateOne(
        { id: userId },
        { 
          $addToSet: { achievements: achievementId },
          $inc: { magnumCoins: achievement.reward, totalEarnedMagnumCoins: achievement.reward }
        }
      );
      invalidateUserCache(userId);
      invalidateBotStatsCache();
      newAchievements.push(achievement);
    }
  }
  
  return newAchievements;
}

async function checkAndAwardTitles(userId) {
  const user = await getUser(userId);
  const userTitles = user.titles || [];
  let newTitles = [];

  for (const [titleId, title] of Object.entries(TITLES)) {
    if (userTitles.includes(titleId) || title.condition === 'secret') continue;

    let earned = false;
    switch (title.condition) {
      case 'registration':
        earned = true;
        break;
      case 'farm_count':
        earned = (user.farmCount || 0) >= title.requirement;
        break;
      case 'stars':
        earned = (user.stars || 0) >= title.requirement;
        break;
      case 'invited':
        earned = (user.invited || 0) >= title.requirement;
        break;
      case 'daily_streak':
        earned = (user.dailyStreak || 0) >= title.requirement;
        break;
      case 'bonus_count':
        earned = (user.bonusCount || 0) >= title.requirement;
        break;
      case 'promo_count':
        earned = (user.promoCount || 0) >= title.requirement;
        break;
      case 'task_count':
        earned = (user.taskCount || 0) >= title.requirement;
        break;
      case 'combined':
        earned = (user.stars || 0) >= title.requirement.stars && (user.invited || 0) >= title.requirement.invited;
        break;
    }

    if (earned) {
      newTitles.push(titleId);
    }
  }

  if (newTitles.length > 0) {
    await users.updateOne(
      { id: userId },
      { $addToSet: { titles: { $each: newTitles } } }
    );
    return newTitles;
  }
  return [];
}

function getUserMainTitle(user) {
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–ª–∞–≤–Ω—ã–π —Ç–∏—Ç—É–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (user.selectedTitle) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª
    if (user.selectedTitle === 'custom' && user.customTitle) {
      return `‚ú® ${user.customTitle}`;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–∏—Ç—É–ª—ã
    if (TITLES[user.selectedTitle] && (user.titles || []).includes(user.selectedTitle)) {
      const title = TITLES[user.selectedTitle];
      return `${title.icon} ${title.name}`;
    }
  }
  
  // –ï—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (user.customTitle) {
    return `‚ú® ${user.customTitle}`;
  }
  
  const userTitles = user.titles || [];
  if (userTitles.length === 0) return 'üÜï –ù–µ—Ç —Ç–∏—Ç—É–ª–∞';
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ > –ª–µ–≥–µ–Ω–¥–∞ > –ø–æ –ø–æ—Ä—è–¥–∫—É
  const titleOrder = ['vip_elite', 'early_bird', 'night_owl', 'legend', 'star_lord', 'task_warrior', 'promo_master', 'bonus_hunter', 'daily_visitor', 'inviter', 'collector', 'farmer', 'newcomer'];
  
  for (const titleId of titleOrder) {
    if (userTitles.includes(titleId)) {
      const title = TITLES[titleId];
      return `${title.icon} ${title.name}`;
    }
  }
  return 'üÜï –ù–µ—Ç —Ç–∏—Ç—É–ª–∞';
}

function getUserRank(user) {
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Ä–æ–≤–Ω–∏ —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ –∑–≤–µ–∑–¥–∞–º
  const stars = user.stars || 0;
  let currentRank = RANKS[0]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–æ–≤–∏—á–æ–∫
  
  for (const rank of RANKS) {
    if (stars >= rank.requirement) {
      currentRank = rank;
    } else {
      break;
    }
  }
  
  return currentRank;
}

function getNextRankInfo(user) {
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Ä–æ–≤–Ω–∏ —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ –∑–≤–µ–∑–¥–∞–º
  const stars = user.stars || 0;
  const currentRank = getUserRank(user);
  
  // –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
  const currentIndex = RANKS.findIndex(rank => rank.name === currentRank.name);
  if (currentIndex < RANKS.length - 1) {
    const nextRank = RANKS[currentIndex + 1];
    const starsToNext = nextRank.requirement - stars;
    const progress = Math.max(0, Math.min(100, (stars - currentRank.requirement) / (nextRank.requirement - currentRank.requirement) * 100));
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log(`üî•üî•üî• –†–ê–°–ß–ï–¢ –ü–†–û–ì–†–ï–°–°–ê –£–†–û–í–ù–Ø:`);
    console.log(`üî• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.id}`);
    console.log(`üî• –ó–≤–µ–∑–¥—ã: ${stars}`);
    console.log(`üî• –¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: ${currentRank.name} (–æ—Ç ${currentRank.requirement}‚≠ê)`);
    console.log(`üî• –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥: ${nextRank.name} (–Ω—É–∂–Ω–æ ${nextRank.requirement}‚≠ê)`);
    console.log(`üî• –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ: ${starsToNext}‚≠ê`);
    console.log(`üî• –§–æ—Ä–º—É–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: (${stars} - ${currentRank.requirement}) / (${nextRank.requirement} - ${currentRank.requirement}) * 100`);
    console.log(`üî• –ß–∏—Å–ª–∏—Ç–µ–ª—å: ${stars - currentRank.requirement}`);
    console.log(`üî• –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å: ${nextRank.requirement - currentRank.requirement}`);
    console.log(`üî• –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}% (–æ–∫—Ä—É–≥–ª–µ–Ω–æ: ${Math.round(progress)}%)`);
    console.log(`üî•üî•üî• –ö–û–ù–ï–¶ –†–ê–°–ß–ï–¢–ê`);
    
    return {
      current: currentRank,
      next: nextRank,
      starsToNext: starsToNext, // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–≤–µ–∑–¥—ã
      progress: Math.round(progress)
    };
  }
  
  return {
    current: currentRank,
    next: null,
    starsToNext: 0,
    progress: 100
  };
}



async function connectDB() {
  console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB...');
  console.log('üìç MONGODB_URI:', MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
  console.log('üí≥ WITHDRAWAL_CHANNEL:', WITHDRAWAL_CHANNEL || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
  
  await mongo.connect();
  console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');
  
  const db = mongo.db();
  users = db.collection('users');
  promocodes = db.collection('promocodes');
  tasks = db.collection('tasks');
  titles = db.collection('titles');
  supportTickets = db.collection('supportTickets'); // –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–∞—è–≤–æ–∫
  taskChecks = db.collection('taskChecks'); // –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞–¥–∞–Ω–∏–π
  withdrawalRequests = db.collection('withdrawalRequests'); // –∫–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
  reserve = db.collection('reserve'); // –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞ –±–∏—Ä–∂–∏
  
  console.log('üìã –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤ –∏ –∫–æ–º–∏—Å—Å–∏—é
  await initializeReserve();
  await initializeCommission();
  
  console.log('üéØ –°–∏—Å—Ç–µ–º–∞ –≤—ã–≤–æ–¥–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
  console.log('üè¶ –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  console.log('üí∞ –ö–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

function now() { return Math.floor(Date.now() / 1000); }

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getUser –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏—Ç—É–ª–æ–≤
// –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - –í–°–ï–ì–î–ê –∏–∑ –±–∞–∑—ã, –ù–ò–ö–û–ì–î–ê –∫–µ—à –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async function getUserDirectFromDB(id, ctx = null) {
  console.log(`üî• –ü–†–Ø–ú–û–ï –ß–¢–ï–ù–ò–ï –ò–ó –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}`);
  const user = await users.findOne({ id });
  if (!user) {
    const newUser = {
      id,
      username: ctx?.from?.username || '',
      magnumCoins: 0,
      totalEarnedMagnumCoins: 0,
      stars: 100,
      lastFarm: 0,
      lastBonus: 0,
      farmCount: 0,
      bonusCount: 0,
      promoCodesUsed: 0,
      invited: 0,
      invitedBy: null,
      titles: [],
      mainTitle: null,
      purchases: [],
      customTitleRequested: false,
      achievements: [],
      dailyStreak: 0,
      lastDaily: 0,
      lastSeen: Math.floor(Date.now() / 1000),
      userStatus: 'user',
      dailyTasks: {},
      dailyFarms: 0,
      miner: { active: false }
    };
    await users.insertOne(newUser);
    return newUser;
  }
  
  // Backward compatibility
  if (user.totalEarnedMagnumCoins === undefined) {
    await users.updateOne({ id }, { $set: { totalEarnedMagnumCoins: user.magnumCoins || 0 } });
    user.totalEarnedMagnumCoins = user.magnumCoins || 0;
  }
  
  console.log(`üî• –ü–û–õ–£–ß–ï–ù–´ –°–í–ï–ñ–ò–ï –î–ê–ù–ù–´–ï: ${user.stars} –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}`);
  return user;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –°–í–ï–ñ–ò–• –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–ï–ó –∫–µ—à–∞
async function getUserFresh(id, ctx = null) {
  const user = await users.findOne({ id });
  if (!user) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const newUser = {
      id,
      username: ctx?.from?.username || '',
      magnumCoins: 0,
      totalEarnedMagnumCoins: 0,
      stars: 100,
      lastFarm: 0,
      lastBonus: 0,
      farmCount: 0,
      bonusCount: 0,
      promoCodesUsed: 0,
      invited: 0,
      invitedBy: null,
      titles: [],
      mainTitle: null,
      purchases: [],
      customTitleRequested: false,
      achievements: [],
      dailyStreak: 0,
      lastDaily: 0,
      lastSeen: Math.floor(Date.now() / 1000),
      userStatus: 'user',
      dailyTasks: {},
      dailyFarms: 0,
      miner: { active: false }
    };
    
    await users.insertOne(newUser);
    return newUser;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
  await users.updateOne({ id }, { $set: { lastSeen: Math.floor(Date.now() / 1000) } });
  
  // Backward compatibility
  if (user.totalEarnedMagnumCoins === undefined) {
    await users.updateOne({ id }, { $set: { totalEarnedMagnumCoins: user.magnumCoins || 0 } });
    user.totalEarnedMagnumCoins = user.magnumCoins || 0;
  }
  
  return user;
}

async function getUser(id, ctx = null) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
  const cacheKey = id.toString();
  const cached = userCache.get(cacheKey);
  if (cached && (Date.now() - cached.timestamp) < USER_CACHE_TTL) {
    return cached.user;
  }

  let user = await users.findOne({ id });
  if (!user) {
    user = {
      id,
      username: ctx ? (ctx.from.username || '') : '',
      first_name: ctx ? (ctx.from.first_name || '') : '',
      stars: 0,
      magnumCoins: 0,
      totalEarnedMagnumCoins: 0, // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
      lastFarm: 0,
      lastBonus: 0,
      created: now(),
      invited: 0,
      invitedBy: null,
      titles: [],
      achievements: [],
      farmCount: 0,
      bonusCount: 0,
      promoCount: 0,
      taskCount: 0,
      dailyStreak: 0,
      status: 'member'
    };
    await users.insertOne(user);
    await checkAndAwardTitles(id);
  } else {
    // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    if (user.magnumCoins === undefined) {
      await users.updateOne({ id }, { $set: { magnumCoins: 0 } });
      user.magnumCoins = 0;
    }
    
    if (user.totalEarnedMagnumCoins === undefined) {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await users.updateOne({ id }, { $set: { totalEarnedMagnumCoins: user.magnumCoins || 0 } });
      user.totalEarnedMagnumCoins = user.magnumCoins || 0;
    }
    
    if (ctx) {
      const updates = {};
      if (ctx.from.username && ctx.from.username !== user.username) {
        updates.username = ctx.from.username;
      }
      if (ctx.from.first_name && ctx.from.first_name !== user.first_name) {
        updates.first_name = ctx.from.first_name;
      }
      if (Object.keys(updates).length > 0) {
        await users.updateOne({ id }, { $set: updates });
        Object.assign(user, updates);
      }
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
  userCache.set(cacheKey, { user, timestamp: Date.now() });
  return user;
}

function isAdmin(userId) { return ADMIN_IDS.includes(String(userId)); }

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async function checkSubscription(ctx) {
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
  if (!REQUIRED_CHANNEL || !REQUIRED_BOT_LINK) return true;
  
  try {
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –¥–ª—è API
    const channelId = REQUIRED_CHANNEL.startsWith('@') ? REQUIRED_CHANNEL : `@${REQUIRED_CHANNEL}`;
    const member = await ctx.telegram.getChatMember(channelId, ctx.from.id);
    return ['member', 'administrator', 'creator'].includes(member.status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
async function showSubscriptionMessage(ctx) {
  if (!REQUIRED_CHANNEL || !REQUIRED_BOT_LINK) return; // –ï—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
  
  const message = `üîî **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n\n` +
                  `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n` +
                  `1Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª\n` +
                  `2Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ\n\n` +
                  `–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"`;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
  const channelName = REQUIRED_CHANNEL.replace('@', ''); // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
  const channelLink = `https://t.me/${channelName}`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', channelLink)],
    [Markup.button.url('ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', REQUIRED_BOT_LINK)],
    [Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', 'check_subscription')]
  ]);
  
  try {
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
    } else {
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:', error);
  }
}



// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞–≥–∞–∑–∏–Ω–æ–º
function getShopCategories() {
  const categories = {};
  Object.entries(SHOP_ITEMS).forEach(([id, item]) => {
    if (!categories[item.category]) {
      categories[item.category] = [];
    }
    categories[item.category].push({ id, ...item });
  });
  return categories;
}

function getActiveBoosts(user) {
  const now = Math.floor(Date.now() / 1000);
  const boosts = user.boosts || {};
  const active = {};
  
  Object.entries(boosts).forEach(([type, data]) => {
    if (data.expiresAt && data.expiresAt > now) {
      active[type] = data;
    }
  });
  
  return active;
}

function applyBoostMultiplier(baseReward, user, boostType) {
  const activeBoosts = getActiveBoosts(user);
  let multiplier = 1;
  
  if (activeBoosts.boost_farm && boostType === 'farm') multiplier *= 2;
  if (activeBoosts.boost_bonus && boostType === 'bonus') multiplier *= 2;
  if (activeBoosts.multiplier_stars) multiplier *= 3;
  
  return baseReward * multiplier;
}

async function purchaseItem(userId, itemId) {
  const user = await getUser(userId);
  const item = SHOP_ITEMS[itemId];
  
  if (!item) return { success: false, message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ–∫—É–ø–∫–∏
  if (item.currency === 'magnumCoins') {
    if ((user.magnumCoins || 0) < item.price) return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coin' };
  } else {
    if (user.stars < item.price) return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥' };
  }
  
  const now = Math.floor(Date.now() / 1000);
  let result = { success: true, message: '' };
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ (–∫—Ä–æ–º–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤ –∏ –º–∞–π–Ω–µ—Ä–∞)
  if ((item.category !== 'cosmetic' || itemId !== 'custom_title') && item.category !== 'miner') {
    const updateQuery = { 
      $push: { purchases: { itemId, price: item.price, timestamp: now, currency: item.currency || 'stars' } }
    };
    
    if (item.currency === 'magnumCoins') {
      updateQuery.$inc = { magnumCoins: -item.price };
    } else {
      updateQuery.$inc = { stars: -item.price };
    }
    
    await users.updateOne({ id: userId }, updateQuery);
    invalidateUserCache(userId);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
  switch (item.category) {
    case 'boosts':
    case 'multipliers':
    case 'premium':
      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Å—Ç—ã
      const expiresAt = now + item.duration;
      await users.updateOne(
        { id: userId },
        { $set: { [`boosts.${itemId}`]: { expiresAt, active: true } } }
      );
      result.message = `${item.icon} ${item.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`;
      break;
      
    case 'boxes':
      // –ö–æ—Ä–æ–±–∫–∏ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
      let reward = 0;
      if (itemId === 'lucky_box') {
        reward = calculateLuckyBoxReward('lucky');
      } else if (itemId === 'mega_box') {
        reward = calculateLuckyBoxReward('mega');
      }
      
      const profitText = reward > 0 ? ` (–≤—ã–∏–≥—Ä—ã—à: +${reward}‚≠ê)` : ` (–ø—É—Å—Ç–∞—è –∫–æ—Ä–æ–±–∫–∞)`;
      
      await users.updateOne(
        { id: userId },
        { $inc: { stars: reward } }
      );
      result.message = `${item.icon} –ü–æ–ª—É—á–µ–Ω–æ ${reward} –∑–≤—ë–∑–¥!${profitText}`;
      break;
      
    case 'cosmetic':
      // –ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      if (itemId === 'custom_title') {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞
        userStates.set(userId, { 
          type: 'custom_title_request',
          itemId: itemId,
          price: item.price
        });
        result.message = `${item.icon} –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª –≥–æ—Ç–æ–≤! –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.`;
        result.needInput = true;
      }
      break;
      
    case 'miner':
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–ª–µ–Ω –ª–∏ —É–∂–µ –º–∞–π–Ω–µ—Ä
      if (user.miner && user.miner.active) {
        return { success: false, message: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞–π–Ω–µ—Ä!' };
      }
      
      // –ú–∞–π–Ω–µ—Ä - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
      await users.updateOne(
        { id: userId },
        { 
          $inc: { magnumCoins: -item.price },
          $set: { 
            'miner.active': true,
            'miner.purchasedAt': now,
            'miner.lastReward': now,
            'miner.totalEarned': 0
          },
          $push: { purchases: { itemId, price: item.price, timestamp: now, currency: 'magnumCoins' } }
        }
      );
      result.message = `${item.icon} –ú–∞–π–Ω–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –∑–≤–µ–∑–¥—ã –∫–∞–∂–¥—ã–π —á–∞—Å.`;
      break;
  }
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –∫–æ—Ä–æ–±–∫–∏ —É–¥–∞—á–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
function calculateLuckyBoxReward(boxType = 'lucky') {
  if (boxType === 'lucky') {
    // –û–±—ã—á–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞ —É–¥–∞—á–∏: —Å—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à 8-12 –∑–≤—ë–∑–¥
    const rand = Math.random() * 100;
    
    // –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Å–æ —Å—Ä–µ–¥–Ω–∏–º –≤—ã–∏–≥—Ä—ã—à–µ–º ~10 –∑–≤—ë–∑–¥
    if (rand <= 25) return Math.floor(Math.random() * 5) + 1;   // 1-5 –∑–≤—ë–∑–¥ (25%)
    if (rand <= 45) return Math.floor(Math.random() * 5) + 6;   // 6-10 –∑–≤—ë–∑–¥ (20%)
    if (rand <= 65) return Math.floor(Math.random() * 5) + 11;  // 11-15 –∑–≤—ë–∑–¥ (20%)
    if (rand <= 80) return Math.floor(Math.random() * 5) + 16;  // 16-20 –∑–≤—ë–∑–¥ (15%)
    if (rand <= 90) return Math.floor(Math.random() * 10) + 21; // 21-30 –∑–≤—ë–∑–¥ (10%)
    if (rand <= 96) return Math.floor(Math.random() * 15) + 31; // 31-45 –∑–≤—ë–∑–¥ (6%)
    if (rand <= 99) return Math.floor(Math.random() * 25) + 46; // 46-70 –∑–≤—ë–∑–¥ (3%)
    return Math.floor(Math.random() * 30) + 71; // 71-100 –∑–≤—ë–∑–¥ (1%)
    
  } else if (boxType === 'mega') {
    // –ú–µ–≥–∞ –∫–æ—Ä–æ–±–∫–∞: —Å—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à 60-90 –∑–≤—ë–∑–¥
    const rand = Math.random() * 100;
    
    // –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Å–æ —Å—Ä–µ–¥–Ω–∏–º –≤—ã–∏–≥—Ä—ã—à–µ–º ~75 –∑–≤—ë–∑–¥
    if (rand <= 20) return Math.floor(Math.random() * 15) + 20; // 20-34 –∑–≤—ë–∑–¥ (20%)
    if (rand <= 35) return Math.floor(Math.random() * 15) + 35; // 35-49 –∑–≤—ë–∑–¥ (15%)
    if (rand <= 50) return Math.floor(Math.random() * 15) + 50; // 50-64 –∑–≤–µ–∑–¥—ã (15%)
    if (rand <= 70) return Math.floor(Math.random() * 20) + 65; // 65-84 –∑–≤–µ–∑–¥—ã (20%)
    if (rand <= 85) return Math.floor(Math.random() * 20) + 85; // 85-104 –∑–≤–µ–∑–¥—ã (15%)
    if (rand <= 95) return Math.floor(Math.random() * 30) + 105; // 105-134 –∑–≤–µ–∑–¥—ã (10%)
    if (rand <= 99) return Math.floor(Math.random() * 50) + 135; // 135-184 –∑–≤–µ–∑–¥—ã (4%)
    return Math.floor(Math.random() * 100) + 185; // 185-284 –∑–≤–µ–∑–¥—ã (1%)
  }
  
  return 1;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserDisplayName(user, userData = null) {
  return user.username || user.first_name || `User${user.id}`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª
async function handleFarmCooldownChange(ctx, text, userState) {
  const userId = ctx.from.id;
  
  try {
    const newCooldown = parseInt(text.trim());
    
    if (isNaN(newCooldown) || newCooldown < 0 || newCooldown > 3600) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 3600 —Å–µ–∫—É–Ω–¥.');
      return;
    }
    
    farmCooldownSeconds = newCooldown;
    userStates.delete(userId);
    
    await ctx.reply(`‚úÖ –ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newCooldown} —Å–µ–∫—É–Ω–¥!`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ñ–∞—Ä–º–∞
    const statusText = farmCooldownEnabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω';
    const farmText = `üåæ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞—Ä–º–∞** üåæ

‚è±Ô∏è **–ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞:** ${statusText}
üïê **–í—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞:** ${farmCooldownSeconds} —Å–µ–∫—É–Ω–¥

üéõÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**`;

    try {
      await sendMessageWithPhoto(ctx, farmText, Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫—É–ª–¥–∞—É–Ω', 'admin_farm_toggle')],
        [Markup.button.callback('‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', 'admin_farm_time')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]
      ]), false);
    } catch (sendError) {
      console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∞—Ä–º–∞:', sendError.message);
      // Fallback: –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(farmText, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫—É–ª–¥–∞—É–Ω', callback_data: 'admin_farm_toggle' }],
            [{ text: '‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data: 'admin_farm_time' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_panel' }]
          ]
        }
      });
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞ —Ñ–∞—Ä–º–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É–ª–¥–∞—É–Ω–∞!');
    userStates.delete(userId);
  }
}

async function handleCustomTitleRequest(ctx, text, userState) {
  const userId = ctx.from.id;
  
  try {
    console.log('üè∑Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª:', text);
    
    const customTitle = text.trim();
    
    if (!customTitle || customTitle.length > 20) {
      await ctx.reply('‚ùå –¢–∏—Ç—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Å–ª–æ–≤–∞
    const forbiddenWords = ['–∞–¥–º–∏–Ω', '–º–æ–¥–µ—Ä', '–±–æ—Ç', '–æ—Ñ–∏—Ü–∏–∞–ª', 'staff', 'admin', 'mod'];
    const lowerTitle = customTitle.toLowerCase();
    
    if (forbiddenWords.some(word => lowerTitle.includes(word))) {
      await ctx.reply('‚ùå –¢–∏—Ç—É–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞!');
      userStates.delete(userId);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã
    const user = await getUser(userId, ctx);
    const itemPrice = userState.price || 100; // –¶–µ–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞
    
    if (user.stars < itemPrice) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞! –ù—É–∂–Ω–æ: ${itemPrice}‚≠ê`);
      userStates.delete(userId);
      return;
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É
    const now = Math.floor(Date.now() / 1000);
    await users.updateOne(
      { id: userId },
      { 
        $inc: { stars: -itemPrice },
        $push: { purchases: { itemId: 'custom_title', price: itemPrice, timestamp: now } }
      }
    );
    invalidateUserCache(userId);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏)
    const ticketId = new Date().getTime().toString();
    
    const ticketData = {
      id: ticketId,
      userId: userId,
      username: user.username || '',
      firstName: user.first_name || '',
      type: 'custom_title',
      content: customTitle,
      status: 'pending',
      createdAt: now,
      price: itemPrice
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É
    await supportTickets.insertOne(ticketData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if (SUPPORT_CHANNEL) {
      const message = `üè∑Ô∏è **–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª** üè∑Ô∏è\n\n` +
                     `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${user.first_name || user.username || `ID: ${userId}`}\n` +
                     `üÜî **ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** ${userId}\n` +
                     `üìù **–ñ–µ–ª–∞–µ–º—ã–π —Ç–∏—Ç—É–ª:** "${customTitle}"\n` +
                     `‚è∞ **–í—Ä–µ–º—è:** ${new Date().toLocaleString('ru-RU')}\n\n` +
                     `üè∑Ô∏è **ID –∑–∞—è–≤–∫–∏:** \`${ticketId}\``;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_title_${ticketId}`)],
        [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_title_${ticketId}`)]
      ]);
      
      try {
        await bot.telegram.sendMessage(`@${SUPPORT_CHANNEL}`, message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç–∏—Ç—É–ª –≤ –∫–∞–Ω–∞–ª:', error);
      }
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(userId);
    
    await ctx.reply(`‚úÖ **–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n` +
                    `üè∑Ô∏è **–ñ–µ–ª–∞–µ–º—ã–π —Ç–∏—Ç—É–ª:** "${customTitle}"\n` +
                    `üè∑Ô∏è **ID –∑–∞—è–≤–∫–∏:** \`${ticketId}\`\n` +
                    `‚è∞ **–°—Ç–∞—Ç—É—Å:** ‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n` +
                    `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.`, 
                    { parse_mode: 'Markdown' });
    
    console.log('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª —Å–æ–∑–¥–∞–Ω–∞:', ticketId);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç–∏—Ç—É–ª:', error);
    userStates.delete(userId);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
async function handlePromoActivation(ctx, text, userState) {
  const userId = ctx.from.id;
  
  try {
    console.log('üé´ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', text);
    
    const code = text.trim().toUpperCase();
    const promo = await promocodes.findOne({ code });
    
    if (!promo) {
      await ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      userStates.delete(userId);
      return;
    }
    
    if (promo.used >= promo.max) {
      await ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω!');
      userStates.delete(userId);
      return;
    }
    
    const user = await getUser(userId, ctx);
    if (user.promoCodes && user.promoCodes.includes(code)) {
      await ctx.reply('‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!');
      userStates.delete(userId);
      return;
    }
    
    console.log('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –≤–∞–ª–∏–¥–µ–Ω, —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã:', promo.rewardType || 'legacy');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const rewardType = promo.rewardType || (promo.stars ? 'legacy' : 'unknown');
    
    let updateQuery = {
      $inc: { promoCount: 1 },
      $addToSet: { promoCodes: code }
    };
    
    let rewardText = '';
    let newBalanceText = '';
    
    if (rewardType === 'stars') {
      updateQuery.$inc.stars = promo.stars;
      rewardText = `[‚≠ê +${promo.stars}] –∑–≤—ë–∑–¥ –ø–æ–ª—É—á–µ–Ω–æ`;
      newBalanceText = `[üíé ${Math.round((user.stars + promo.stars) * 100) / 100}] –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥`;
      
    } else if (rewardType === 'magnum') {
      updateQuery.$inc.magnumCoins = promo.magnumCoins;
      updateQuery.$inc.totalEarnedMagnumCoins = promo.magnumCoins;
      rewardText = `[ü™ô +${promo.magnumCoins}] Magnum Coin –ø–æ–ª—É—á–µ–Ω–æ`;
      newBalanceText = `[üí∞ ${Math.round((user.magnumCoins + promo.magnumCoins) * 100) / 100}] –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å MC`;
      
    } else if (rewardType === 'title') {
      updateQuery.$addToSet.titles = promo.title;
      rewardText = `[üèÜ ${promo.title}] —Ç–∏—Ç—É–ª –ø–æ–ª—É—á–µ–Ω`;
      newBalanceText = `üé≠ –¢–∏—Ç—É–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é`;
      
    } else if (rewardType === 'status') {
      updateQuery.$set = updateQuery.$set || {};
      updateQuery.$set.userStatus = promo.status;
      rewardText = `[üí´ ${promo.status.toUpperCase()}] —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω`;
      newBalanceText = `üëë –í–∞—à –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`;
      
    } else if (rewardType === 'legacy') {
      // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
      updateQuery.$inc.magnumCoins = promo.stars;
      updateQuery.$inc.totalEarnedMagnumCoins = promo.stars;
      rewardText = `[ü™ô +${promo.stars}] Magnum Coin –ø–æ–ª—É—á–µ–Ω–æ`;
      newBalanceText = `[üí∞ ${Math.round((user.magnumCoins + promo.stars) * 100) / 100}] –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å MC`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await users.updateOne({ id: userId }, updateQuery);
    invalidateUserCache(userId);
    invalidateBotStatsCache();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    await promocodes.updateOne({ code }, { $inc: { used: 1 } });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await checkAndAwardAchievements(userId);
    await checkAndAwardTitles(userId);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const activatorName = ctx.from.first_name || ctx.from.username || `ID${userId}`;
    
    await ctx.reply(`‚úÖ **–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n` +
                    `[üé´ ${code}]\n` +
                    rewardText + `\n` +
                    newBalanceText + `\n\n` +
                    `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π!`, 
                    { parse_mode: 'Markdown' });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
    await notifyPromoActivationToChat(userId, activatorName, code, rewardText);
    
    console.log('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', userId);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    userStates.delete(userId);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
async function handlePromoCreation(ctx, text, userState) {
  const userId = ctx.from.id;
  
  try {
    console.log('üé´ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', text);
    
    const parts = text.trim().split(/\s+/);
    
    if (parts.length !== 3) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–ê–ó–í–ê–ù–ò–ï –ú–ê–ì–ù–£–ú_–ö–û–ò–ù–´ –õ–ò–ú–ò–¢\n\n–ü—Ä–∏–º–µ—Ä: NEWCODE 25 100');
      return;
    }
    
    const [code, magnumCoins, maxActivations] = parts;
    const magnumCoinsNum = Number(magnumCoins);
    const maxNum = Number(maxActivations);
    
    if (!code || isNaN(magnumCoinsNum) || isNaN(maxNum) || magnumCoinsNum <= 0 || maxNum <= 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n‚Ä¢ –ù–ê–ó–í–ê–ù–ò–ï - –ª—é–±–æ–π —Ç–µ–∫—Å—Ç\n‚Ä¢ MAGNUM_–ö–û–ò–ù–´ - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n‚Ä¢ –õ–ò–ú–ò–¢ - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n\n–ü—Ä–∏–º–µ—Ä: NEWCODE 25 100');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
    const existingPromo = await promocodes.findOne({ code: code.toUpperCase() });
    if (existingPromo) {
      await ctx.reply(`‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ ${code.toUpperCase()} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      userStates.delete(userId);
      return;
    }
    
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑—É:', { code: code.toUpperCase(), magnumCoins: magnumCoinsNum, max: maxNum });
    
    await promocodes.insertOne({
      code: code.toUpperCase(),
      magnumCoins: magnumCoinsNum,
      rewardType: 'magnum',
      max: maxNum,
      used: 0,
      created: now()
    });
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(userId);
    
    await ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
                    `üè∑Ô∏è **–ö–æ–¥:** \`${code.toUpperCase()}\`\n` +
                    `ü™ô **–ù–∞–≥—Ä–∞–¥–∞:** ${magnumCoinsNum} Magnum Coin\n` +
                    `üî¢ **–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π:** ${maxNum}\n` +
                    `üìÖ **–°–æ–∑–¥–∞–Ω:** ${new Date().toLocaleString('ru-RU')}\n\n` +
                    `üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–¥: \`${code.toUpperCase()}\``, 
                    { parse_mode: 'Markdown' });
    
    console.log('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', code.toUpperCase());
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    userStates.delete(userId);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞
async function handleWithdrawalState(ctx, text, userState) {
  const userId = ctx.from.id;
  
  try {
    if (userState.method === 'tg_stars' && userState.step === 'amount') {
      console.log('üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è Telegram Stars:', text);
      
      const amount = parseFloat(text);
      if (isNaN(amount) || amount < 100) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: 100‚≠ê');
        return;
      }
      
      const user = await getUser(userId, ctx);
      console.log('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.stars, '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç:', amount);
      
      if (user.stars < amount) {
        await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –£ –≤–∞—Å: ${Math.round(user.stars * 100) / 100}‚≠ê`);
        userStates.delete(userId);
        return;
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      userStates.set(userId, { 
        type: 'withdrawal', 
        method: 'tg_stars', 
        step: 'address',
        amount: amount
      });
      
      await adminForceReply(ctx, `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ${amount} Telegram Stars:`);
      console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É Telegram ID');
      
    } else if (userState.method === 'tg_stars' && userState.step === 'address') {
      console.log('üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ Telegram ID:', text);
      
      const telegramId = text.trim();
      const amount = userState.amount;
      
      console.log('üí≥ –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ —Å—É–º–º—É:', amount, '–¥–ª—è ID:', telegramId);
      const request = await createWithdrawalRequest(userId, 'tg_stars', amount, telegramId);
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', request.id);
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã
      await users.updateOne({ id: userId }, { $inc: { stars: -amount } });
      console.log('üí∏ –ó–≤—ë–∑–¥—ã —Å–ø–∏—Å–∞–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞');
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª...');
      await sendWithdrawalToChannel(request);
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª');
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      userStates.delete(userId);
      
      const confirmationMsg = await ctx.reply(`‚úÖ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n` +
                    `üè∑Ô∏è **ID –∑–∞—è–≤–∫–∏:** \`${request.id}\`\n` +
                    `üí∞ **–°—É–º–º–∞:** ${amount}‚≠ê\n` +
                    `üí∏ **–ö –ø–æ–ª—É—á–µ–Ω–∏—é:** ${request.netAmount}‚≠ê\n` +
                    `‚è∞ **–°—Ç–∞—Ç—É—Å:** ‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n` +
                    `–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24-48 —á–∞—Å–æ–≤.`, 
                    { parse_mode: 'Markdown' });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
      await withdrawalRequests.updateOne(
        { id: request.id },
        { $set: { confirmationMessageId: confirmationMsg.message_id } }
      );
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
    userStates.delete(userId);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏');
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—ã–≤–æ–¥
async function createWithdrawalRequest(userId, method, amount, address) {
  const user = await getUser(userId);
  const requestId = new Date().getTime().toString();
  
  const request = {
    id: requestId,
    userId: userId,
    username: user.username || '',
    firstName: user.first_name || '',
    method: method,
    amount: amount,
    address: address,
    status: 'pending',
    createdAt: Math.floor(Date.now() / 1000),
    updatedAt: Math.floor(Date.now() / 1000),
    fee: Math.round(amount * 0.05 * 100) / 100, // 5% –∫–æ–º–∏—Å—Å–∏—è
    netAmount: Math.round((amount - amount * 0.05) * 100) / 100
  };
  
  await withdrawalRequests.insertOne(request);
  return request;
}

async function updateWithdrawalStatus(requestId, status, adminId, reason = null) {
  const update = {
    status: status,
    updatedAt: Math.floor(Date.now() / 1000),
    processedBy: adminId
  };
  
  if (reason) {
    update.rejectionReason = reason;
  }
  
  await withdrawalRequests.updateOne(
    { id: requestId },
    { $set: update }
  );
}

async function sendWithdrawalToChannel(request) {
  console.log('sendWithdrawalToChannel –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏:', request.id);
  console.log('WITHDRAWAL_CHANNEL:', WITHDRAWAL_CHANNEL);
  
  if (!WITHDRAWAL_CHANNEL) {
    console.log('WITHDRAWAL_CHANNEL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –∫–∞–Ω–∞–ª');
    return;
  }
  
  const user = await getUser(request.userId);
  const methodNames = {
    'tg_stars': '‚≠ê Telegram Stars',
    'ton': 'üíé TON Coin', 
    'usdt': 'üíµ USDT TRC-20'
  };
  
  const message = `üí∏ **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥** üí∏\n\n` +
                  `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${request.firstName || request.username || `ID: ${request.userId}`}\n` +
                  `üÜî **ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** ${request.userId}\n` +
                  `üí∞ **–°—É–º–º–∞:** ${request.amount}‚≠ê\n` +
                  `üí∏ **–ö –≤—ã–≤–æ–¥—É:** ${request.netAmount}‚≠ê (–∫–æ–º–∏—Å—Å–∏—è: ${request.fee}‚≠ê)\n` +
                  `üîÑ **–ú–µ—Ç–æ–¥:** ${methodNames[request.method]}\n` +
                  `üìç **–ê–¥—Ä–µ—Å/–î–∞–Ω–Ω—ã–µ:** \`${request.address}\`\n` +
                  `‚è∞ **–í—Ä–µ–º—è:** ${new Date(request.createdAt * 1000).toLocaleString('ru-RU')}\n` +
                  `üìä **–°—Ç–∞—Ç—É—Å:** ${WITHDRAWAL_STATUSES[request.status].color} ${WITHDRAWAL_STATUSES[request.status].name}\n\n` +
                  `üè∑Ô∏è **ID –∑–∞—è–≤–∫–∏:** \`${request.id}\``;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_withdrawal_${request.id}`)],
    [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_withdrawal_${request.id}`)],
    [Markup.button.callback('üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫—É', `process_withdrawal_${request.id}`)]
  ]);
  
  console.log('–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª @' + WITHDRAWAL_CHANNEL);
  try {
    await bot.telegram.sendMessage(`@${WITHDRAWAL_CHANNEL}`, message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:', error);
  }
}

async function notifyUserWithdrawalUpdate(request, isApproved, reason = null) {
  const statusText = isApproved ? 
    `‚úÖ **–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n–í–∞—à –≤—ã–≤–æ–¥ ${request.netAmount}‚≠ê –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24-48 —á–∞—Å–æ–≤.` :
    `‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n–ü—Ä–∏—á–∏–Ω–∞: ${REJECTION_REASONS[reason]?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n${REJECTION_REASONS[reason]?.description || ''}`;
  
  const message = `üí∏ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥** üí∏\n\n` +
                  `üè∑Ô∏è **ID –∑–∞—è–≤–∫–∏:** \`${request.id}\`\n` +
                  `üí∞ **–°—É–º–º–∞:** ${request.amount}‚≠ê\n` +
                  `üîÑ **–ú–µ—Ç–æ–¥:** ${request.method}\n\n` +
                  statusText;
  
  try {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
    if (isApproved && request.confirmationMessageId) {
      try {
        await bot.telegram.deleteMessage(request.userId, request.confirmationMessageId);
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', request.confirmationMessageId);
      } catch (deleteError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', deleteError.message);
      }
    }
    
    await bot.telegram.sendMessage(request.userId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
function getUserStatus(user) {
  const userStatus = user.status || 'member';
  return USER_STATUSES[userStatus] ? USER_STATUSES[userStatus] : USER_STATUSES['member'];
}

function getStatusDisplayName(user) {
  const status = getUserStatus(user);
  return status.name;
}

function createProgressBar(current, total, length = 10) {
  if (total <= 0) return '‚ñë'.repeat(length); // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
  const filled = Math.floor((current / total) * length);
  const empty = Math.max(0, length - filled);
  return '‚ñì'.repeat(Math.max(0, filled)) + '‚ñë'.repeat(empty);
}

async function getDetailedProfile(userId, ctx) {
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø - –í–°–ï–ì–î–ê –ò–ó –ë–ê–ó–´!
  const user = await getUserDirectFromDB(userId, ctx);
  console.log(`üî• getDetailedProfile: –ü–†–Ø–ú–û –ò–ó –ë–î - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏–º–µ–µ—Ç ${user.stars} –∑–≤—ë–∑–¥`);
  const starsBalance = Math.round((user.stars || 0) * 100) / 100;
  const magnumCoinsBalance = Math.round((user.magnumCoins || 0) * 100) / 100;
  const friends = user.invited || 0;
  const title = getUserMainTitle(user);
  const rank = getUserRank(user);
  const nextRankInfo = getNextRankInfo(user);
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å —Å–∞–º—ã–º–∏ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  console.log(`üî• –ü–†–û–í–ï–†–ö–ê –†–ê–ù–ì–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏–º–µ–µ—Ç ${user.stars}‚≠ê`);
  console.log(`üî• –¢–ï–ö–£–©–ò–ô –†–ê–ù–ì: ${rank.name} (—Ç—Ä–µ–±—É–µ—Ç ${rank.requirement}‚≠ê)`);
  if (nextRankInfo.next) {
    console.log(`üî• –°–õ–ï–î–£–Æ–©–ò–ô –†–ê–ù–ì: ${nextRankInfo.next.name} (—Ç—Ä–µ–±—É–µ—Ç ${nextRankInfo.next.requirement}‚≠ê)`);
    console.log(`üî• –ü–†–û–ì–†–ï–°–°: ${nextRankInfo.progress}%, –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ: ${nextRankInfo.starsToNext}‚≠ê`);
  }
  const status = getUserStatus(user);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userName = ctx ? (ctx.from.first_name || ctx.from.username || '–ò–≥—Ä–æ–∫') : '–ò–≥—Ä–æ–∫';
  const userInfo = ctx ? `${userName} (ID: ${ctx.from.id})` : `ID: ${userId}`;
  
  let progressText = '';
  if (nextRankInfo.next && nextRankInfo.starsToNext > 0) {
    const progressBar = createProgressBar(nextRankInfo.progress, 100) + ` ${nextRankInfo.progress}%`;
    progressText = `üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è:**  
${progressBar}
–î–æ ${nextRankInfo.next.name}: ${nextRankInfo.starsToNext} ‚≠ê –∑–≤–µ–∑–¥`;
  } else {
    progressText = 'üèÜ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!**';
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞–π–Ω–µ—Ä–∞
  let minerText = '';
      if (user.miner && user.miner.active) {
      const now = Math.floor(Date.now() / 1000);
      const hoursWorking = Math.floor((now - user.miner.purchasedAt) / 3600);
      const hoursUntilReward = Math.ceil((3600 - (now - user.miner.lastReward)) / 3600);
      const currentReward = calculateMinerReward();
      minerText = `\n‚õèÔ∏è **–ú–∞–π–Ω–µ—Ä:** –ê–∫—Ç–∏–≤–µ–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç ${hoursWorking}—á, –¥–æ—Ö–æ–¥ ${currentReward.toFixed(4)}‚≠ê/—á–∞—Å)`;
    }
  
  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
  const botStats = await getBotStatistics();
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç –∏ –∫–∞–Ω–∞–ª
  const channelLink = REQUIRED_CHANNEL ? `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}` : 'https://t.me/magnumtap';
  const chatLink = process.env.PROMO_NOTIFICATIONS_CHAT && process.env.PROMO_NOTIFICATIONS_CHAT !== 'disabled' 
    ? `https://t.me/${process.env.PROMO_NOTIFICATIONS_CHAT.replace('@', '')}` 
    : 'https://t.me/magnumtapchat';
  
  return `üëë **–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ MagnumTap** üëë

üëã **–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${userInfo}!**

**–°—Ç–∞—Ç—É—Å:** [${status.color} ${status.name}]  
[ü™ô ${magnumCoinsBalance}] Magnum Coin  
[üíé ${starsBalance}] –∑–≤—ë–∑–¥  
[üë• ${friends}] –¥—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ  
**–£—Ä–æ–≤–µ–Ω—å:** [${rank.color} ${rank.name}]  
**–¢–∏—Ç—É–ª:** [${title}]${minerText}

${progressText}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MagnumTap:**
[üë• ${botStats.totalUsers}] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ  
[ü™ô ${botStats.totalMagnumCoins}] Magnum Coin –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ  
[üíé ${botStats.totalStars}] –∑–≤—ë–∑–¥ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ  
[üí∏ ${botStats.totalWithdrawn}] –∑–≤—ë–∑–¥ –≤—ã–≤–µ–¥–µ–Ω–æ  
[üõí ${botStats.totalStarsSpent}] –∑–≤—ë–∑–¥ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ  
[üí∞ ${botStats.totalMagnumCoinsSpent}] Magnum Coin –ø–æ—Ç—Ä–∞—á–µ–Ω–æ

üîó **–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**
[üí¨ –ù–∞—à —á–∞—Ç](${chatLink}) | [üì¢ –ù–∞—à –∫–∞–Ω–∞–ª](${channelLink})`;
}

function getWelcomeText(magnumCoins, stars, invited) {
  // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç –∏ –∫–∞–Ω–∞–ª
  const channelLink = REQUIRED_CHANNEL ? `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}` : 'https://t.me/magnumtap';
  const chatLink = process.env.PROMO_NOTIFICATIONS_CHAT && process.env.PROMO_NOTIFICATIONS_CHAT !== 'disabled' 
    ? `https://t.me/${process.env.PROMO_NOTIFICATIONS_CHAT.replace('@', '')}` 
    : 'https://t.me/magnumtapchat';
  
  return (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *MagnumTapBot*! üåü\n\n" +
    "–¢—ã –≤ –∏–≥—Ä–µ, –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Magnum Coin ü™ô, –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –∏ —Å–æ–±–∏—Ä–∞—è –±–æ–Ω—É—Å—ã! üöÄ\n\n" +
    "[ü™ô " + magnumCoins + "] Magnum Coin\n" +
    "[üíé " + stars + "] –∑–≤—ë–∑–¥\n" +
    "[üë• " + invited + "] –¥—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ\n\n" +
    "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞–Ω—å –∑–≤–µ–∑–¥–æ–π MagnumTapBot! üåü\n\n" +
    "üîó **–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n" +
    "[üí¨ –ù–∞—à —á–∞—Ç](" + chatLink + ") | [üì¢ –ù–∞—à –∫–∞–Ω–∞–ª](" + channelLink + ")"
  );
}

// –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
const SPONSOR_TASKS = [
  {
    id: 'music_channel',
    title: 'üì± –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @musice46',
    description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @musice46',
    reward: 8,
    instruction: '–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª',
    link: 'https://t.me/musice46'
  },
  {
    id: 'firestars_bot',
    title: 'üî• –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ FireStars',
    description: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å',
    reward: 10,
    instruction: '–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞',
    link: FIRESTARS_BOT_LINK
  },
  {
    id: 'farmik_bot',
    title: '‚≠ê –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ FarmikStars',
    description: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤',
    reward: 10,
    instruction: '–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞',
    link: FARMIK_BOT_LINK
  },
  {
    id: 'basket_game_bot',
    title: 'üèÄ –ò–≥—Ä–∞—Ç—å –≤ BasketGift –±–æ—Ç–∞',
    description: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ —Å—ã–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É 3 —Ä–∞–∑–∞',
    reward: 12,
    instruction: '–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ 3 –∏–≥—Ä',
    link: BASKET_BOT_LINK
  },
  {
    id: 'private_channel',
    title: 'üîí –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª',
    description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥—ã MagnumTap',
    reward: 15,
    instruction: '–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á—Ç–æ –≤—ã –≤ –∫–∞–Ω–∞–ª–µ (—Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)',
    link: process.env.PRIVATE_CHANNEL_LINK || 'https://t.me/+4BUF9S_rLZw3NDQ6'
  }
];

// –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π
const TASK_CHECK_STATUSES = {
  'pending': { name: '‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', emoji: '‚è≥' },
  'approved': { name: '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ', emoji: '‚úÖ' },
  'rejected': { name: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', emoji: '‚ùå' }
};

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
const dailyTasks = [
  { 
    id: 'login', 
    name: 'üëã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥', 
    reward: 5, 
    description: '–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã',
    type: 'auto',
    icon: 'üëã'
  },
  { 
    id: 'farm_10', 
    name: '‚ö° –ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞—Ä–º–µ—Ä', 
    reward: 8, 
    description: '–°–æ–±–µ—Ä–∏—Ç–µ –∑–≤—ë–∑–¥—ã 10 —Ä–∞–∑ –∑–∞ –¥–µ–Ω—å',
    type: 'farm',
    target: 10,
    icon: '‚ö°'
  },
  { 
    id: 'bonus', 
    name: 'üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 
    reward: 12, 
    description: '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –∑–≤—ë–∑–¥',
    type: 'bonus',
    icon: 'üéÅ'
  },
  { 
    id: 'shop_visit', 
    name: 'üõí –ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', 
    reward: 3, 
    description: '–û—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏ –∏–∑—É—á–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã',
    type: 'shop',
    icon: 'üõí'
  },
  { 
    id: 'top_check', 
    name: 'üèÜ –ò–∑—É—á–∏—Ç—å —Ç–æ–ø', 
    reward: 3, 
    description: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤',
    type: 'top',
    icon: 'üèÜ'
  },
  { 
    id: 'invite_friend', 
    name: 'ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', 
    reward: 25, 
    description: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ñ—Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–≥–æ–º',
    type: 'invite',
    icon: 'ü§ù'
  }
];

// –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞
const sponsorTasks = [
  { id: 'channel1', name: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @example', reward: 15, description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø–∞—Ä—Ç–Ω—ë—Ä–∞', url: 'https://t.me/example' },
  { id: 'website', name: '–ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç', reward: 25, description: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞', url: 'https://example.com' }
];

async function getUserTasks(userId, isDaily = true) {
  const today = new Date().toDateString();
  let userTasks = await tasks.findOne({ 
    userId, 
    date: isDaily ? today : 'sponsor',
    type: isDaily ? 'daily' : 'sponsor'
  });
  
  if (!userTasks) {
    const taskList = isDaily ? dailyTasks : sponsorTasks;
    userTasks = {
      userId,
      date: isDaily ? today : 'sponsor',
      type: isDaily ? 'daily' : 'sponsor',
      completed: {},
      claimed: {}
    };
    taskList.forEach(task => {
      userTasks.completed[task.id] = false;
      userTasks.claimed[task.id] = false;
    });
    await tasks.insertOne(userTasks);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Ñ–∞—Ä–º–æ–≤
    if (isDaily) {
      await users.updateOne({ id: userId }, { $set: { dailyFarms: 0 } });
    }
  }
  return userTasks;
}

async function markDailyTaskCompleted(userId, taskId) {
  const today = new Date().toDateString();
  await tasks.updateOne(
    { userId, date: today, type: 'daily' },
    { $set: { [`completed.${taskId}`]: true } },
    { upsert: true }
  );
}

async function updateMainMenuBalance(ctx) {
  try {
    console.log(`üî• –û–ë–ù–û–í–õ–Ø–ï–ú –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ - –ü–†–Ø–ú–û –ò–ó –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
    // –ü–û–õ–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –∏–∑ –∫–µ—à–∞
    invalidateUserCache(ctx.from.id);
    invalidateBotStatsCache();
    
    // –ü–†–Ø–ú–û–ï —á—Ç–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã - –ë–ï–ó –∫–µ—à–∞ –≤–æ–æ–±—â–µ!
    const freshUser = await getUserDirectFromDB(ctx.from.id, ctx);
    console.log(`üî• updateMainMenuBalance: –°–í–ï–ñ–ò–ï –î–ê–ù–ù–´–ï ${ctx.from.id} = ${freshUser.stars} –∑–≤—ë–∑–¥`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é —Å –ê–ë–°–û–õ–Æ–¢–ù–û —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const menu = await getMainMenu(ctx, ctx.from.id);
    await sendMainMenuWithPhoto(ctx, menu.text, menu.keyboard);
  } catch (error) {
    console.error('üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
async function updateProfileRealtime(ctx) {
  try {
    console.log(`üî• –û–ë–ù–û–í–õ–Ø–ï–ú –ü–†–û–§–ò–õ–¨ - –ü–†–Ø–ú–û –ò–ó –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
    // –ü–û–õ–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
    invalidateUserCache(ctx.from.id);
    invalidateBotStatsCache();
    
    // –ü–†–Ø–ú–û–ï —á—Ç–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã
    const freshUser = await getUserDirectFromDB(ctx.from.id, ctx);
    console.log(`üî• updateProfileRealtime: –°–í–ï–ñ–ò–ï –î–ê–ù–ù–´–ï ${ctx.from.id} = ${freshUser.stars} –∑–≤—ë–∑–¥`);
    
    const profileText = await getDetailedProfile(ctx.from.id, ctx);

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üèÜ –ú–æ–∏ —Ç–∏—Ç—É–ª—ã', 'my_titles'), Markup.button.callback('üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')],
      [Markup.button.callback('‚õèÔ∏è –ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã', 'my_miners'), Markup.button.callback('üí∏ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥', 'withdraw')],
      [Markup.button.callback('ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'invite'), Markup.button.callback('üõ†Ô∏è –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'support_menu')],
      [Markup.button.callback('‚ùì FAQ', 'faq'), Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);

    await sendMessageWithPhoto(ctx, profileText, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
  }
}

async function getMainMenu(ctx, userId) {
  console.log(`üî• getMainMenu: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  const adminRow = isAdmin(ctx.from.id) ? [[Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]] : [];
  const profileText = await getDetailedProfile(userId, ctx);
  console.log(`üî• getMainMenu: –ü–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é`);
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('ü™ô –§–∞—Ä–º–∏—Ç—å Magnum Coin', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
    [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üèÜ –¢–æ–ø', 'top'), Markup.button.callback('üõí –ú–∞–≥–∞–∑–∏–Ω', 'shop')],
    [Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'promo')],
    [Markup.button.callback('üìà –ë–∏—Ä–∂–∞', 'exchange'), Markup.button.callback('üéØ –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞', 'sponsor_tasks')],
    ...adminRow
  ]);
  
  return {
    text: profileText,
    keyboard: keyboard
  };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ Magnum Coin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥
bot.action('buy_tg_stars_input', async (ctx) => {
  console.log('üîò buy_tg_stars_input: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω');
  
  const user = await getUser(ctx.from.id, ctx);
  const magnumCoinsBalance = Math.round((user.magnumCoins || 0) * 100) / 100;
  
  if (magnumCoinsBalance < EXCHANGE_LIMITS.MIN_MAGNUM_COINS) {
    return ctx.answerCbQuery(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coin! –£ –≤–∞—Å: ${magnumCoinsBalance}ü™ô, –º–∏–Ω–∏–º—É–º: ${EXCHANGE_LIMITS.MIN_MAGNUM_COINS}ü™ô`, { show_alert: true });
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  userStates.set(ctx.from.id, { type: 'buy_tg_stars_amount' });
  
  const inputText = `‚≠ê **–ü–û–ö–£–ü–ö–ê TG STARS** ‚≠ê\n\n` +
                   `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${magnumCoinsBalance}ü™ô\n\n` +
                   `üìù **–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Magnum Coin –¥–ª—è –æ–±–º–µ–Ω–∞:**\n\n` +
                   `üìä **–õ–∏–º–∏—Ç—ã:**\n` +
                   `‚Ä¢ –ú–∏–Ω–∏–º—É–º: ${EXCHANGE_LIMITS.MIN_MAGNUM_COINS}ü™ô\n` +
                   `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: ${Math.min(EXCHANGE_LIMITS.MAX_MAGNUM_COINS, magnumCoinsBalance)}ü™ô\n\n` +
                   `üí° **–ü—Ä–∏–º–µ—Ä—ã:**\n` +
                   `‚Ä¢ 100 - –æ–±–º–µ–Ω—è—Ç—å 100ü™ô\n` +
                   `‚Ä¢ 500 - –æ–±–º–µ–Ω—è—Ç—å 500ü™ô\n` +
                   `‚Ä¢ 1000 - –æ–±–º–µ–Ω—è—Ç—å 1000ü™ô`;
  
  await adminForceReply(ctx, inputText);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
bot.action('sell_tg_stars_input', async (ctx) => {
  console.log('üîò sell_tg_stars_input: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω');
  
  const user = await getUser(ctx.from.id, ctx);
  const starsBalance = Math.round((user.stars || 0) * 100) / 100;
  
  if (starsBalance < EXCHANGE_LIMITS.MIN_STARS) {
    return ctx.answerCbQuery(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –£ –≤–∞—Å: ${starsBalance}‚≠ê, –º–∏–Ω–∏–º—É–º: ${EXCHANGE_LIMITS.MIN_STARS}‚≠ê`, { show_alert: true });
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  userStates.set(ctx.from.id, { type: 'sell_tg_stars_amount' });
  
  const inputText = `ü™ô **–ü–†–û–î–ê–ñ–ê TG STARS** ü™ô\n\n` +
                   `‚≠ê **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${starsBalance}‚≠ê\n\n` +
                   `üìù **–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –æ–±–º–µ–Ω–∞:**\n\n` +
                   `üìä **–õ–∏–º–∏—Ç—ã:**\n` +
                   `‚Ä¢ –ú–∏–Ω–∏–º—É–º: ${EXCHANGE_LIMITS.MIN_STARS}‚≠ê\n` +
                   `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: ${Math.min(EXCHANGE_LIMITS.MAX_STARS, starsBalance)}‚≠ê\n\n` +
                   `üí° **–ü—Ä–∏–º–µ—Ä—ã:**\n` +
                   `‚Ä¢ 10 - –ø—Ä–æ–¥–∞—Ç—å 10‚≠ê\n` +
                   `‚Ä¢ 50 - –ø—Ä–æ–¥–∞—Ç—å 50‚≠ê\n` +
                   `‚Ä¢ 100 - –ø—Ä–æ–¥–∞—Ç—å 100‚≠ê`;
  
  await adminForceReply(ctx, inputText);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–∫—É–ø–∫–∏ TG Stars (3 —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã)
bot.action('buy_tg_stars_100', async (ctx) => await handleQuickBuy(ctx, 100));
bot.action('buy_tg_stars_500', async (ctx) => await handleQuickBuy(ctx, 500));
bot.action('buy_tg_stars_1000', async (ctx) => await handleQuickBuy(ctx, 1000));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–¥–∞–∂–∏ TG Stars (3 —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã)
bot.action('sell_tg_stars_1', async (ctx) => await handleQuickSell(ctx, 1));
bot.action('sell_tg_stars_10', async (ctx) => await handleQuickSell(ctx, 10));
bot.action('sell_tg_stars_100', async (ctx) => await handleQuickSell(ctx, 100));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥
async function handleQuickBuy(ctx, amount) {
  console.log(`üîò handleQuickBuy: –ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ ${amount}ü™ô`);
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
  const user = await getUser(ctx.from.id, ctx);
  const now = Math.floor(Date.now() / 1000);
  const lastExchange = user.lastExchange || 0;
  const timeSinceLastExchange = now - lastExchange;
  
  if (timeSinceLastExchange < 5) {
    return ctx.answerCbQuery('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–º–µ–Ω–∞–º–∏', { show_alert: true });
  }
  
  const magnumCoinsBalance = Math.round((user.magnumCoins || 0) * 100) / 100;
  
  if (magnumCoinsBalance < amount) {
    return ctx.answerCbQuery(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coin! –£ –≤–∞—Å: ${magnumCoinsBalance}ü™ô, –Ω—É–∂–Ω–æ: ${amount}ü™ô`, { show_alert: true });
  }
  
  // –û–±–º–µ–Ω–∏–≤–∞–µ–º Magnum Coin –Ω–∞ –∑–≤—ë–∑–¥—ã
  const magnumToStarsRate = RESERVE_STARS / RESERVE_MAGNUM_COINS;
  const baseStarsToReceive = amount * magnumToStarsRate;
  const commission = calculateCommission(baseStarsToReceive);
  const starsToReceive = calculateAmountWithCommission(baseStarsToReceive);
  
  if (starsToReceive <= 0) {
    return ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
  const reserveUpdated = await updateReserve('magnumCoins', 'stars', amount, starsToReceive, commission);
  if (!reserveUpdated) {
    return ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–µ–∑–µ—Ä–≤–µ –±–∏—Ä–∂–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await users.updateOne(
    { id: ctx.from.id },
    { 
      $inc: { magnumCoins: -amount, stars: starsToReceive },
      $set: { lastExchange: now }
    }
  );
  invalidateUserCache(ctx.from.id);
  invalidateBotStatsCache();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const commissionText = EXCHANGE_COMMISSION > 0 ? `\nüí∞ –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(commission)}‚≠ê (${EXCHANGE_COMMISSION}%)` : '';
  const notificationText = `‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
                          `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${amount}ü™ô\n` +
                          `‚≠ê –ü–æ–ª—É—á–µ–Ω–æ: ${formatNumber(starsToReceive)}‚≠ê` +
                          `${commissionText}\n` +
                          `üìä –ö—É—Ä—Å: 1ü™ô = ${formatNumber(magnumToStarsRate)}‚≠ê`;
  await ctx.answerCbQuery(notificationText, { show_alert: true });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  setTimeout(async () => {
    await updateExchangeInterface(ctx, ctx.from.id);
  }, 1000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–¥–∞–∂–∏ –∑–≤—ë–∑–¥
async function handleQuickSell(ctx, amount) {
  console.log(`üîò handleQuickSell: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–¥–∞–∂–∞ ${amount}‚≠ê`);
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
  const user = await getUser(ctx.from.id, ctx);
  const now = Math.floor(Date.now() / 1000);
  const lastExchange = user.lastExchange || 0;
  const timeSinceLastExchange = now - lastExchange;
  
  if (timeSinceLastExchange < 5) {
    return ctx.answerCbQuery('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–º–µ–Ω–∞–º–∏', { show_alert: true });
  }
  
  const starsBalance = Math.round((user.stars || 0) * 100) / 100;
  
  if (starsBalance < amount) {
    return ctx.answerCbQuery(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –£ –≤–∞—Å: ${starsBalance}‚≠ê, –Ω—É–∂–Ω–æ: ${amount}‚≠ê`, { show_alert: true });
  }
  
  // –û–±–º–µ–Ω–∏–≤–∞–µ–º –∑–≤—ë–∑–¥—ã –Ω–∞ Magnum Coin
  const starsToMagnumRate = RESERVE_MAGNUM_COINS / RESERVE_STARS;
  const baseCoinsToReceive = amount * starsToMagnumRate;
  const commission = calculateCommission(baseCoinsToReceive);
  const coinsToReceive = calculateAmountWithCommission(baseCoinsToReceive);
  
  if (coinsToReceive <= 0) {
    return ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
  const reserveUpdated = await updateReserve('stars', 'magnumCoins', amount, coinsToReceive, commission);
  if (!reserveUpdated) {
    return ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–µ–∑–µ—Ä–≤–µ –±–∏—Ä–∂–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await users.updateOne(
    { id: ctx.from.id },
    { 
      $inc: { stars: -amount, magnumCoins: coinsToReceive },
      $set: { lastExchange: now }
    }
  );
  invalidateUserCache(ctx.from.id);
  invalidateBotStatsCache();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const commissionText = EXCHANGE_COMMISSION > 0 ? `\nüí∞ –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(commission)}ü™ô (${EXCHANGE_COMMISSION}%)` : '';
  const notificationText = `‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
                          `‚≠ê –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${amount}‚≠ê\n` +
                          `üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${formatNumber(coinsToReceive)}ü™ô` +
                          `${commissionText}\n` +
                          `üìä –ö—É—Ä—Å: 1‚≠ê = ${formatNumber(starsToMagnumRate)}ü™ô`;
  await ctx.answerCbQuery(notificationText, { show_alert: true });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  setTimeout(async () => {
    await updateExchangeInterface(ctx, ctx.from.id);
  }, 1000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ TG Stars (—Å—Ç–∞—Ä—ã–π, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
bot.action('buy_tg_stars', async (ctx) => {
  console.log('üîò buy_tg_stars: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω');
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞
  const user = await getUser(ctx.from.id, ctx);
  const now = Math.floor(Date.now() / 1000);
  const lastExchange = user.lastExchange || 0;
  const timeSinceLastExchange = now - lastExchange;
  
  if (timeSinceLastExchange < 5) { // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–º–µ–Ω–∞–º–∏
    return ctx.answerCbQuery('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–º–µ–Ω–∞–º–∏', { show_alert: true });
  }
  
  const magnumCoinsBalance = Math.round((user.magnumCoins || 0) * 100) / 100;
  
  console.log(`üîò buy_tg_stars: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${magnumCoinsBalance}ü™ô`);
  
  if (magnumCoinsBalance < 100) {
    console.log(`üîò buy_tg_stars: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤`);
    return ctx.answerCbQuery(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coin! –£ –≤–∞—Å: ${magnumCoinsBalance}ü™ô, –Ω—É–∂–Ω–æ: 100ü™ô`, { show_alert: true });
  }
  
  // –û–±–º–µ–Ω–∏–≤–∞–µ–º 100 Magnum Coin –Ω–∞ –∑–≤—ë–∑–¥—ã —Å —É—á–µ—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫—É—Ä—Å–∞ –∏ –∫–æ–º–∏—Å—Å–∏–∏
  const magnumToStarsRate = RESERVE_STARS / RESERVE_MAGNUM_COINS;
  const starsToReceive = 100 * magnumToStarsRate * (1 - EXCHANGE_COMMISSION / 100);
  console.log(`üîò buy_tg_stars: –û–±–º–µ–Ω–∏–≤–∞–µ–º 100ü™ô ‚Üí ${starsToReceive.toFixed(2)}‚≠ê (–∫—É—Ä—Å: ${magnumToStarsRate.toFixed(4)})`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–∞
  if (starsToReceive <= 0) {
    return ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  const reserveUpdated = updateReserve('magnumCoins', 'stars', 100, starsToReceive);
  if (!reserveUpdated) {
    return ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–µ–∑–µ—Ä–≤–µ –±–∏—Ä–∂–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
  }
  
  await users.updateOne(
    { id: ctx.from.id },
    { 
      $inc: { magnumCoins: -100, stars: starsToReceive },
      $set: { lastExchange: Math.floor(Date.now() / 1000) }
    }
  );
  invalidateUserCache(ctx.from.id);
  invalidateBotStatsCache();
  
  const commissionText = EXCHANGE_COMMISSION > 0 ? `\nüí∞ –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(100 * magnumToStarsRate * (EXCHANGE_COMMISSION / 100))}‚≠ê (${EXCHANGE_COMMISSION}%)` : '';
  const notificationText = `‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
                          `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: 100ü™ô\n` +
                          `‚≠ê –ü–æ–ª—É—á–µ–Ω–æ: ${formatNumber(starsToReceive)}‚≠ê` +
                          `${commissionText}\n` +
                          `üìä –ö—É—Ä—Å: 1ü™ô = ${formatNumber(magnumToStarsRate)}‚≠ê`;
  await ctx.answerCbQuery(notificationText, { show_alert: true });
  
  console.log(`üîò buy_tg_stars: –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç
  setTimeout(async () => {
    await updateExchangeInterface(ctx, ctx.from.id);
  }, 1000);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∞—Ç–µ
bot.command('updatechat', async (ctx) => {
  try {
    const promoChatId = process.env.PROMO_NOTIFICATIONS_CHAT;
    if (!promoChatId) {
      return ctx.reply('‚ùå –ß–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    let targetChatId = promoChatId;
    if (promoChatId.startsWith('@')) {
      targetChatId = promoChatId.substring(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ
    if (ctx.chat.id.toString() !== targetChatId && ctx.chat.username !== targetChatId) {
      return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
    
    const userId = ctx.from.id;
    const user = await users.findOne({ id: userId });
    
    if (!user) {
      return ctx.reply('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ');
    }
    
    const { statusText, titleText } = getUserChatInfo(user);
    
    let userInfo = `üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏**\n\n`;
    userInfo += `üë§ **–ò–≥—Ä–æ–∫:** ${ctx.from.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
    
    if (statusText) {
      userInfo += `üí´ **–°—Ç–∞—Ç—É—Å:** ${statusText}\n`;
    } else {
      userInfo += `üí´ **–°—Ç–∞—Ç—É—Å:** –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n`;
    }
    
    if (titleText) {
      userInfo += `üèÜ **–¢–∏—Ç—É–ª:** ${titleText}\n`;
    } else {
      userInfo += `üèÜ **–¢–∏—Ç—É–ª:** –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n`;
    }
    
    userInfo += `\nüí° –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!`;
    
    await ctx.reply(userInfo, { parse_mode: 'Markdown' });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —á–∞—Ç–µ:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
  }
});



bot.start(async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, –∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
  if (ctx.chat.type !== 'private') {
    console.log(`üö´ –ö–æ–º–∞–Ω–¥–∞ /start –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ ${ctx.chat.type}: ${ctx.chat.title || ctx.chat.username}`);
    return; // –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
  const startPayload = ctx.startPayload;
  let referrerId = null;
  
  if (startPayload && !isNaN(startPayload)) {
    referrerId = parseInt(startPayload);
    console.log(`üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç ${referrerId}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(ctx);
  if (!isSubscribed) {
    await showSubscriptionMessage(ctx);
    return;
  }
  
  const user = await getUser(ctx.from.id, ctx);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (referrerId && referrerId !== ctx.from.id && !user.invitedBy) {
    try {
      console.log(`üí´ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª: ${ctx.from.id} –ø—Ä–∏–≥–ª–∞—à–µ–Ω ${referrerId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
      const referrer = await users.findOne({ id: referrerId });
      if (referrer) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await users.updateOne(
          { id: ctx.from.id },
          { $set: { invitedBy: referrerId } }
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        await users.updateOne(
          { id: referrerId },
          { $inc: { invited: 1 } }
        );
        
        invalidateUserCache(ctx.from.id);
        invalidateUserCache(referrerId);
        
        console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—Å—á–∏—Ç–∞–Ω: ${referrerId} ‚Üí ${ctx.from.id}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        try {
          await bot.telegram.sendMessage(referrerId, 
            `üéâ **–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!**\n\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from.first_name || ctx.from.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n` +
            `üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!\n\n` +
            `üìä –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${(referrer.invited || 0) + 1}`,
            { parse_mode: 'Markdown' }
          );
          console.log(`üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä—É ${referrerId}`);
        } catch (notifyError) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${referrerId}:`, notifyError.message);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º —Ç–∏—Ç—É–ª—ã
        await checkAndAwardTitles(referrerId);
        await checkAndAwardTitles(ctx.from.id);
      } else {
        console.log(`‚ùå –†–µ—Ñ–µ—Ä–µ—Ä ${referrerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
    }
  }
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥"
  await markDailyTaskCompleted(ctx.from.id, 'login');
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  invalidateUserCache(ctx.from.id);
  invalidateBotStatsCache();
  
  const menu = await getMainMenu(ctx, ctx.from.id);
  await sendMainMenuWithPhoto(ctx, menu.text, menu.keyboard, false);
});

bot.action('check_subscription', async (ctx) => {
  const isSubscribed = await checkSubscription(ctx);
  if (!isSubscribed) {
    await ctx.answerCbQuery('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞.', { show_alert: true });
    return;
  }
  
  await ctx.answerCbQuery('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
  const user = await getUser(ctx.from.id, ctx);
  const menu = await getMainMenu(ctx, ctx.from.id);
  await sendMainMenuWithPhoto(ctx, menu.text, menu.keyboard);
});

bot.action('main_menu', async (ctx) => {
  console.log(`üî• –ö–ù–û–ü–ö–ê –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id}`);
  try { await ctx.deleteMessage(); } catch (e) {}
  
  // –ü–û–õ–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
  invalidateUserCache(ctx.from.id);
  invalidateBotStatsCache();
  
  // –ü–†–Ø–ú–û–ï —á—Ç–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  const freshUser = await getUserDirectFromDB(ctx.from.id, ctx);
  console.log(`üî• –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ: –°–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ ${ctx.from.id} = ${freshUser.stars} –∑–≤—ë–∑–¥`);
  
  const menu = await getMainMenu(ctx, ctx.from.id);
  await sendMainMenuWithPhoto(ctx, menu.text, menu.keyboard, false);
});

// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –∫–Ω–æ–ø–∫–æ–π —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
bot.action('profile', async (ctx) => {
  console.log(`üî• –ö–ù–û–ü–ö–ê –ü–†–û–§–ò–õ–¨ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è ${ctx.from.id}`);
  
  // –ü–û–õ–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  for (let i = 0; i < 10; i++) {
    invalidateUserCache(ctx.from.id);
    invalidateBotStatsCache();
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –ê–ë–°–û–õ–Æ–¢–ù–û —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
  const freshUser = await getUserDirectFromDB(ctx.from.id, ctx);
  console.log(`üî• –ü–†–û–§–ò–õ–¨: –°–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã - ${freshUser.stars} –∑–≤—ë–∑–¥`);
  
  await updateProfileRealtime(ctx);
});

bot.action('my_miners', async (ctx) => {
  const user = await getUserFresh(ctx.from.id);
  
  let minerText = '‚õèÔ∏è **–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã** ‚õèÔ∏è\n\n';
  
  if (user.miner && user.miner.active) {
    const now = Math.floor(Date.now() / 1000);
    const hoursWorking = Math.floor((now - user.miner.purchasedAt) / 3600);
    const daysWorking = Math.floor(hoursWorking / 24);
    const totalEarned = user.miner.totalEarned || 0;
    const invested = 1000; // Magnum Coin
    const remaining = Math.max(0, invested - totalEarned);
    const paybackProgress = Math.min(100, Math.round((totalEarned / invested) * 100));
    
    const currentReward = calculateMinerReward();
    const dailyReward = currentReward * 24;
    const currentRate = (RESERVE_STARS / RESERVE_MAGNUM_COINS).toFixed(4);
    
    minerText += `üü¢ **–ú–∞–π–Ω–µ—Ä #1** - –ê–∫—Ç–∏–≤–µ–Ω\n`;
    minerText += `üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: 1000 ü™ô Magnum Coin\n`;
    minerText += `üìä –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalEarned.toFixed(4)} ‚≠ê –∑–≤–µ–∑–¥\n`;
    minerText += `‚è∞ –†–∞–±–æ—Ç–∞–µ—Ç: ${daysWorking} –¥–Ω–µ–π (${hoursWorking}—á)\n`;
    minerText += `üìà –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: ${paybackProgress}%\n`;
    
    if (remaining > 0) {
      minerText += `üíé –î–æ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: ${remaining.toFixed(4)} ‚≠ê\n`;
    } else {
      minerText += `‚úÖ –ú–∞–π–Ω–µ—Ä –æ–∫—É–ø–∏–ª—Å—è! –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${(totalEarned - invested).toFixed(4)} ‚≠ê\n`;
    }
    
    minerText += `\n‚ö° –î–æ—Ö–æ–¥: ${currentReward.toFixed(4)} ‚≠ê –≤ —á–∞—Å (${dailyReward.toFixed(4)} ‚≠ê –≤ –¥–µ–Ω—å)\n`;
    minerText += `üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1ü™ô = ${currentRate}‚≠ê`;
  } else {
    const currentReward = calculateMinerReward();
    const dailyReward = currentReward * 24;
    const currentRate = (RESERVE_STARS / RESERVE_MAGNUM_COINS).toFixed(4);
    
    minerText += `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤\n\n`;
    minerText += `üí° –ö—É–ø–∏—Ç–µ –º–∞–π–Ω–µ—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∑–∞ 1000 ü™ô Magnum Coin\n`;
    minerText += `üìà –î–æ—Ö–æ–¥: ${currentReward.toFixed(4)} ‚≠ê –≤ —á–∞—Å (${dailyReward.toFixed(4)} ‚≠ê –≤ –¥–µ–Ω—å)\n`;
    minerText += `üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1ü™ô = ${currentRate}‚≠ê\n`;
    minerText += `‚è∞ –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: ~45 –¥–Ω–µ–π`;
  }

  await sendMessageWithPhoto(ctx, minerText, Markup.inlineKeyboard([
    [Markup.button.callback('üõí –ú–∞–≥–∞–∑–∏–Ω', 'shop')],
    [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')]
  ]));
});

bot.action('my_titles', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const userTitles = user.titles || [];
  
  let titlesText = 'üèÜ **–¢–≤–æ–∏ —Ç–∏—Ç—É–ª—ã** üèÜ\n\n';
  
  if (userTitles.length === 0 && !user.customTitle) {
    titlesText += 'üÜï –ü–æ–∫–∞ —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç —Ç–∏—Ç—É–ª–æ–≤.\n–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö!';
  } else {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (user.customTitle) {
      const isSelected = user.selectedTitle === 'custom';
      const indicator = isSelected ? '‚úÖ' : '‚ú®';
      titlesText += `${indicator} **${user.customTitle}** ${isSelected ? '(–∞–∫—Ç–∏–≤–µ–Ω)' : ''}\n`;
      titlesText += `üìù –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∏—Ç—É–ª\n\n`;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–∏—Ç—É–ª—ã
    userTitles.forEach(titleId => {
      if (TITLES[titleId]) {
        const title = TITLES[titleId];
        const isSelected = user.selectedTitle === titleId;
        const indicator = isSelected ? '‚úÖ' : title.icon;
        titlesText += `${indicator} **${title.name}** ${isSelected ? '(–∞–∫—Ç–∏–≤–µ–Ω)' : ''}\n`;
        titlesText += `üìù ${title.description}\n\n`;
      }
    });
  }

  const buttons = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ç–∏—Ç—É–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∏—Ç—É–ª—ã
  if (userTitles.length > 0 || user.customTitle) {
    buttons.push([Markup.button.callback('‚ú® –í—ã–±—Ä–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π —Ç–∏—Ç—É–ª', 'select_title')]);
  }
  
  buttons.push(
    [Markup.button.callback('üë§ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'profile')],
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  );

  await sendMessageWithPhoto(ctx, titlesText, Markup.inlineKeyboard(buttons));
});

// –í—ã–±–æ—Ä —Ç–∏—Ç—É–ª–∞
bot.action('select_title', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const userTitles = user.titles || [];
  
  let msg = '‚ú® **–í—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞** ‚ú®\n\n';
  msg += '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ç—É–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ —Ç–æ–ø–µ:\n\n';
  
  const buttons = [];
  
  // –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª
  if (user.customTitle) {
    const isSelected = user.selectedTitle === 'custom';
    const text = `${isSelected ? '‚úÖ' : '‚ú®'} ${user.customTitle} ${isSelected ? '(–∞–∫—Ç–∏–≤–µ–Ω)' : ''}`;
    buttons.push([Markup.button.callback(text, `set_title_custom`)]);
  }
  
  // –û–±—ã—á–Ω—ã–µ —Ç–∏—Ç—É–ª—ã
  userTitles.forEach(titleId => {
    if (TITLES[titleId]) {
      const title = TITLES[titleId];
      const isSelected = user.selectedTitle === titleId;
      const text = `${isSelected ? '‚úÖ' : title.icon} ${title.name} ${isSelected ? '(–∞–∫—Ç–∏–≤–µ–Ω)' : ''}`;
      buttons.push([Markup.button.callback(text, `set_title_${titleId}`)]);
    }
  });
  
  // –û–ø—Ü–∏—è "–ù–µ—Ç —Ç–∏—Ç—É–ª–∞"
  const noTitleSelected = !user.selectedTitle;
  buttons.push([Markup.button.callback(
    `${noTitleSelected ? '‚úÖ' : 'üö´'} –ù–µ—Ç —Ç–∏—Ç—É–ª–∞ ${noTitleSelected ? '(–∞–∫—Ç–∏–≤–µ–Ω)' : ''}`, 
    'set_title_none'
  )]);
  
  buttons.push([Markup.button.callback('üë§ –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', 'profile')]);
  
  if (userTitles.length === 0 && !user.customTitle) {
    msg += 'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤.\n\n–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∏—Ç—É–ª—ã!';
  }
  
  await sendMessageWithPhoto(ctx, msg, Markup.inlineKeyboard(buttons));
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏—Ç—É–ª–∞
bot.action(/^set_title_(.+)$/, async (ctx) => {
  const titleAction = ctx.match[1];
  const userId = ctx.from.id;
  
  let newSelectedTitle = null;
  let successMessage = '';
  
  if (titleAction === 'custom') {
    const user = await getUser(userId);
    if (user.customTitle) {
      newSelectedTitle = 'custom';
      successMessage = `‚ú® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª: "${user.customTitle}"`;
    } else {
      return ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞!');
    }
  } else if (titleAction === 'none') {
    newSelectedTitle = null;
    successMessage = 'üö´ –¢–∏—Ç—É–ª —Å–∫—Ä—ã—Ç';
  } else {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —ç—Ç–æ—Ç —Ç–∏—Ç—É–ª
    const user = await getUser(userId);
    const userTitles = user.titles || [];
    
    if (TITLES[titleAction] && userTitles.includes(titleAction)) {
      newSelectedTitle = titleAction;
      successMessage = `üèÜ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏—Ç—É–ª: ${TITLES[titleAction].name}`;
    } else {
      return ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ç–∏—Ç—É–ª–∞!');
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏—Ç—É–ª –≤ –±–∞–∑–µ
  await users.updateOne(
    { id: userId },
    { $set: { selectedTitle: newSelectedTitle } }
  );
  
  await ctx.answerCbQuery(successMessage);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏—Ç—É–ª–∞
  setTimeout(async () => {
    const updatedUser = await getUser(userId);
    const userTitles = updatedUser.titles || [];
    
    let msg = '‚ú® **–í—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞** ‚ú®\n\n';
    msg += '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ç—É–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ —Ç–æ–ø–µ:\n\n';
    
    const buttons = [];
    
    // –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª
    if (updatedUser.customTitle) {
      const isSelected = updatedUser.selectedTitle === 'custom';
      const text = `${isSelected ? '‚úÖ' : '‚ú®'} ${updatedUser.customTitle} ${isSelected ? '(–∞–∫—Ç–∏–≤–µ–Ω)' : ''}`;
      buttons.push([Markup.button.callback(text, `set_title_custom`)]);
    }
    
    // –û–±—ã—á–Ω—ã–µ —Ç–∏—Ç—É–ª—ã
    userTitles.forEach(titleId => {
      if (TITLES[titleId]) {
        const title = TITLES[titleId];
        const isSelected = updatedUser.selectedTitle === titleId;
        const text = `${isSelected ? '‚úÖ' : title.icon} ${title.name} ${isSelected ? '(–∞–∫—Ç–∏–≤–µ–Ω)' : ''}`;
        buttons.push([Markup.button.callback(text, `set_title_${titleId}`)]);
      }
    });
    
    // –û–ø—Ü–∏—è "–ù–µ—Ç —Ç–∏—Ç—É–ª–∞"
    const noTitleSelected = !updatedUser.selectedTitle;
    buttons.push([Markup.button.callback(
      `${noTitleSelected ? '‚úÖ' : 'üö´'} –ù–µ—Ç —Ç–∏—Ç—É–ª–∞ ${noTitleSelected ? '(–∞–∫—Ç–∏–≤–µ–Ω)' : ''}`, 
      'set_title_none'
    )]);
    
    buttons.push([Markup.button.callback('üë§ –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', 'profile')]);
    
    if (userTitles.length === 0 && !updatedUser.customTitle) {
      msg += 'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤.\n\n–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∏—Ç—É–ª—ã!';
    }
    
    await sendMessageWithPhoto(ctx, msg, Markup.inlineKeyboard(buttons));
  }, 500);
});

bot.action('top', async (ctx) => {
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  invalidateBotStatsCache();
  
  // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ "–∏–∑—É—á–∏—Ç—å —Ç–æ–ø"
  await markDailyTaskCompleted(ctx.from.id, 'top_check');
  
  const topUsers = await users.find({}).sort({ stars: -1 }).limit(10).toArray();
  let msg = 'üèÜ‚ú® **–¢–û–ü-10 –ò–ì–†–û–ö–û–í MAGNUMTAP** ‚ú®üèÜ\n';
  msg += '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n';
  
  for (let i = 0; i < topUsers.length; i++) {
    const user = topUsers[i];
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const displayName = getUserDisplayName({ 
      username: user.username, 
      first_name: user.first_name, 
      id: user.id 
    }, user);
    
    const stars = Math.round((user.stars || 0) * 100) / 100;
    const magnumCoins = Math.round((user.magnumCoins || 0) * 100) / 100;
    const status = getUserStatus(user);
    const title = getUserMainTitle(user);
    const rank = getUserRank(user);
    
    // –ú–µ–¥–∞–ª–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏
    let positionIcon = '';
    if (i === 0) {
      positionIcon = 'üëë';
    } else if (i === 1) {
      positionIcon = 'ü•à';
    } else if (i === 2) {
      positionIcon = 'ü•â';
    } else {
      positionIcon = `${i + 1}Ô∏è‚É£`;
    }
    
    msg += `${positionIcon} **${i + 1}. ${displayName}**\n`;
    msg += `   ‚≠ê ${stars} –∑–≤—ë–∑–¥\n`;
    msg += `   ü™ô ${magnumCoins} Magnum Coin\n`;
    msg += `   üìú –°—Ç–∞—Ç—É—Å: ${status.color} ${status.name}\n`;
    msg += `   üèÜ –£—Ä–æ–≤–µ–Ω—å: ${rank.color} ${rank.name}\n`;
    msg += `   üåü –¢–∏—Ç—É–ª: ${title}\n`;
    msg += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
  }
  
  if (topUsers.length === 0) {
    msg += 'üì≠ **–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.**\n\n';
    msg += 'üéØ *–°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º!*';
  } else {
    msg += '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n';
    msg += 'üí° **–°–æ–≤–µ—Ç:** –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ Magnum Coin –Ω–∞ –±–∏—Ä–∂–µ –∏ –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!';
  }
  
  const buttons = [
    [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'top')],
    [Markup.button.callback('üìà –ë–∏—Ä–∂–∞', 'exchange'), Markup.button.callback('ü™ô –§–∞—Ä–º–∏—Ç—å', 'farm')],
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ];
  
  await sendMessageWithPhoto(ctx, msg, Markup.inlineKeyboard(buttons));
});

bot.action('invite', async (ctx) => {
  // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"
  await markDailyTaskCompleted(ctx.from.id, 'invite_friend');
  
  const user = await getUser(ctx.from.id);
  const refLink = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
  ctx.editMessageText(
    `ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π\n\n` +
    `–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è!\n\n` +
    `üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: ${refLink}\n\n` +
    `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${user.invited || 0}`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üë§ –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', 'profile')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  );
});

// –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥
bot.action('withdraw', async (ctx) => {
  const user = await getUser(ctx.from.id, ctx);
  const balance = Math.round((user.stars || 0) * 100) / 100;
  
  const message = `üí∏ **–í—ã–≤–æ–¥ –∑–≤—ë–∑–¥** üí∏\n\n` +
                  `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${balance} ‚≠ê –∑–≤—ë–∑–¥\n\n` +
                  `üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–≤–æ–¥–∞:**\n` +
                  `‚Ä¢ Telegram Stars (–º–∏–Ω–∏–º—É–º: 100‚≠ê)\n` +
                  `‚Ä¢ TON Coin (–º–∏–Ω–∏–º—É–º: 500‚≠ê)\n` +
                  `‚Ä¢ USDT TRC-20 (–º–∏–Ω–∏–º—É–º: 1000‚≠ê)\n\n` +
                  `‚ö†Ô∏è **–ö–æ–º–∏—Å—Å–∏—è:** 5% —Å —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞\n` +
                  `‚è∞ **–û–±—Ä–∞–±–æ—Ç–∫–∞:** 24-48 —á–∞—Å–æ–≤\n\n` +
                  `üí° –î–ª—è –≤—ã–≤–æ–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∏–∂–µ:`;
  
  const keyboard = [];
  if (balance >= 100) {
    keyboard.push([Markup.button.callback('‚≠ê Telegram Stars (100‚≠ê)', 'withdraw_tg_stars')]);
  }
  if (balance >= 500) {
    keyboard.push([Markup.button.callback('üíé TON Coin (500‚≠ê)', 'withdraw_ton')]);
  }
  if (balance >= 1000) {
    keyboard.push([Markup.button.callback('üíµ USDT TRC-20 (1000‚≠ê)', 'withdraw_usdt')]);
  }
  
  if (keyboard.length === 0) {
    keyboard.push([Markup.button.callback('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥', 'withdraw_info')]);
  }
  
  keyboard.push([Markup.button.callback('üë§ –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', 'profile')]);
  
  ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard(keyboard)
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ—Ç–æ–¥–æ–≤ –≤—ã–≤–æ–¥–∞
bot.action('withdraw_tg_stars', async (ctx) => {
  console.log('üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É withdraw_tg_stars, ID:', ctx.from.id);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userStates.set(ctx.from.id, { 
    type: 'withdrawal', 
    method: 'tg_stars', 
    step: 'amount' 
  });
  console.log('üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', userStates.get(ctx.from.id));
  
  await adminForceReply(ctx, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram Stars (–º–∏–Ω–∏–º—É–º 100):');
  console.log('üí¨ Force reply –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è Telegram Stars');
});

bot.action('withdraw_ton', async (ctx) => {
  await adminForceReply(ctx, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à TON –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞:');
});

bot.action('withdraw_usdt', async (ctx) => {
  await adminForceReply(ctx, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à USDT TRC-20 –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞:');
});

bot.action('withdraw_info', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const balance = Math.round((user.stars || 0) * 100) / 100;
  
  ctx.answerCbQuery(
    `–£ –≤–∞—Å ${balance}‚≠ê. –ù—É–∂–Ω–æ: 100‚≠ê –¥–ª—è Telegram Stars, 500‚≠ê –¥–ª—è TON, 1000‚≠ê –¥–ª—è USDT`,
    { show_alert: true }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ –≤—ã–≤–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.action(/^approve_withdrawal_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    return ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!');
  }
  
  const requestId = ctx.match[1];
  console.log('‚úÖ –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É:', requestId);
  const request = await withdrawalRequests.findOne({ id: requestId });
  console.log('üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:', request?.status);
  
  if (!request) {
    return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  }
  
  if (request.status !== 'pending' && request.status !== 'processing') {
    return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!');
  }
  
  await updateWithdrawalStatus(requestId, 'approved', ctx.from.id);
  await notifyUserWithdrawalUpdate(request, true);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
  const originalMessageLines = ctx.callbackQuery.message.text.split('\n');
  const cutOffIndex = originalMessageLines.findIndex(line => 
    line.includes('**–û–î–û–ë–†–ï–ù–û**') || 
    line.includes('**–û–¢–ö–õ–û–ù–ï–ù–û**') || 
    line.includes('**–í –û–ë–†–ê–ë–û–¢–ö–ï**')
  );
  
  const originalMessage = cutOffIndex > -1 ? 
    originalMessageLines.slice(0, cutOffIndex).join('\n') : 
    ctx.callbackQuery.message.text;
  
  const updatedMessage = originalMessage + 
                        `\n\n‚úÖ **–û–î–û–ë–†–ï–ù–û** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${ctx.from.first_name || ctx.from.username || ctx.from.id}` +
                        `\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
  
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]);
  
  await ctx.editMessageText(updatedMessage, { parse_mode: 'Markdown', ...keyboard });
  await ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!');
});

bot.action(/^reject_withdrawal_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    return ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!');
  }
  
  const requestId = ctx.match[1];
  console.log('‚ùå –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É:', requestId);
  const request = await withdrawalRequests.findOne({ id: requestId });
  console.log('üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:', request?.status);
  
  if (!request) {
    return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  }
  
  if (request.status !== 'pending' && request.status !== 'processing') {
    return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!');
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
  const reasons = Object.entries(REJECTION_REASONS).map(([key, reason]) => 
    [Markup.button.callback(reason.name, `reject_reason_${requestId}_${key}`)]
  );
  
  const keyboard = Markup.inlineKeyboard([
    ...reasons,
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', `back_to_withdrawal_${requestId}`)]
  ]);
  
  await ctx.editMessageText(
    `‚ùå **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:**\n\n` + 
    `üè∑Ô∏è **ID:** \`${requestId}\`\n` +
    `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${request.firstName || request.username || request.userId}\n` +
    `üí∞ **–°—É–º–º–∞:** ${request.amount}‚≠ê`,
    { parse_mode: 'Markdown', ...keyboard }
  );
});

bot.action(/^reject_reason_(.+)_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    return ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!');
  }
  
  const requestId = ctx.match[1];
  const reason = ctx.match[2];
  
  const request = await withdrawalRequests.findOne({ id: requestId });
  if (!request) {
    return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–≤—ë–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await users.updateOne({ id: request.userId }, { $inc: { stars: request.amount } });
  
  await updateWithdrawalStatus(requestId, 'rejected', ctx.from.id, reason);
  await notifyUserWithdrawalUpdate(request, false, reason);
  
  const reasonInfo = REJECTION_REASONS[reason];
  
  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
  const originalMessageLines = ctx.callbackQuery.message.text.split('\n');
  const cutOffIndex = originalMessageLines.findIndex(line => 
    line.includes('**–û–î–û–ë–†–ï–ù–û**') || 
    line.includes('**–û–¢–ö–õ–û–ù–ï–ù–û**') || 
    line.includes('**–í –û–ë–†–ê–ë–û–¢–ö–ï**') ||
    line.includes('**–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è**')
  );
  
  const originalMessage = cutOffIndex > -1 ? 
    originalMessageLines.slice(0, cutOffIndex).join('\n') : 
    ctx.callbackQuery.message.text.split('\n\n‚ùå')[0];
  
  const updatedMessage = originalMessage + 
                        `\n\n‚ùå **–û–¢–ö–õ–û–ù–ï–ù–û** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${ctx.from.first_name || ctx.from.username || ctx.from.id}` +
                        `\nüìã **–ü—Ä–∏—á–∏–Ω–∞:** ${reasonInfo.name}` +
                        `\nüí∞ **–ó–≤—ë–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**` +
                        `\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
  
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]);
  
  await ctx.editMessageText(updatedMessage, { parse_mode: 'Markdown', ...keyboard });
  await ctx.answerCbQuery(`‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: ${reasonInfo.name}`);
});

bot.action(/^process_withdrawal_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    return ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!');
  }
  
  const requestId = ctx.match[1];
  console.log('üîÑ –ê–¥–º–∏–Ω –±–µ—Ä–µ—Ç –∑–∞—è–≤–∫—É –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É:', requestId);
  const request = await withdrawalRequests.findOne({ id: requestId });
  console.log('üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', request?.status);
  
  if (!request) {
    return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  }
  
  await updateWithdrawalStatus(requestId, 'processing', ctx.from.id);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
  const originalMessageLines = ctx.callbackQuery.message.text.split('\n');
  const cutOffIndex = originalMessageLines.findIndex(line => 
    line.includes('**–û–î–û–ë–†–ï–ù–û**') || 
    line.includes('**–û–¢–ö–õ–û–ù–ï–ù–û**') || 
    line.includes('**–í –û–ë–†–ê–ë–û–¢–ö–ï**')
  );
  
  const originalMessage = cutOffIndex > -1 ? 
    originalMessageLines.slice(0, cutOffIndex).join('\n') : 
    ctx.callbackQuery.message.text;
  
  const updatedMessage = originalMessage + 
                        `\n\nüîÑ **–í –û–ë–†–ê–ë–û–¢–ö–ï** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${ctx.from.first_name || ctx.from.username || ctx.from.id}` +
                        `\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
  
  // –û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_withdrawal_${request.id}`)],
    [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_withdrawal_${request.id}`)],
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]);
  
  await ctx.editMessageText(updatedMessage, { parse_mode: 'Markdown', ...keyboard });
  await ctx.answerCbQuery('üîÑ –ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!');
});

bot.action(/^back_to_withdrawal_(.+)$/, async (ctx) => {
  const requestId = ctx.match[1];
  const request = await withdrawalRequests.findOne({ id: requestId });
  
  if (!request) {
    return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  const methodNames = {
    'tg_stars': '‚≠ê Telegram Stars',
    'ton': 'üíé TON Coin', 
    'usdt': 'üíµ USDT TRC-20'
  };
  
  const message = `üí∏ **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥** üí∏\n\n` +
                  `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${request.firstName || request.username || `ID: ${request.userId}`}\n` +
                  `üÜî **ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** ${request.userId}\n` +
                  `üí∞ **–°—É–º–º–∞:** ${request.amount}‚≠ê\n` +
                  `üí∏ **–ö –≤—ã–≤–æ–¥—É:** ${request.netAmount}‚≠ê (–∫–æ–º–∏—Å—Å–∏—è: ${request.fee}‚≠ê)\n` +
                  `üîÑ **–ú–µ—Ç–æ–¥:** ${methodNames[request.method]}\n` +
                  `üìç **–ê–¥—Ä–µ—Å/–î–∞–Ω–Ω—ã–µ:** \`${request.address}\`\n` +
                  `‚è∞ **–í—Ä–µ–º—è:** ${new Date(request.createdAt * 1000).toLocaleString('ru-RU')}\n` +
                  `üìä **–°—Ç–∞—Ç—É—Å:** ${WITHDRAWAL_STATUSES[request.status].color} ${WITHDRAWAL_STATUSES[request.status].name}\n\n` +
                  `üè∑Ô∏è **ID –∑–∞—è–≤–∫–∏:** \`${request.id}\``;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_withdrawal_${request.id}`)],
    [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_withdrawal_${request.id}`)],
    [Markup.button.callback('üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫—É', `process_withdrawal_${request.id}`)]
  ]);
  
  await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤
bot.action(/^approve_title_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    return ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!');
  }
  
  const ticketId = ctx.match[1];
  const ticket = await supportTickets.findOne({ id: ticketId });
  
  if (!ticket) {
    return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  }
  
  // –í—ã–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await users.updateOne(
    { id: ticket.userId },
    { $set: { customTitle: ticket.content } }
  );
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
  await supportTickets.updateOne(
    { id: ticketId },
    { $set: { status: 'approved', processedBy: ctx.from.id, processedAt: Math.floor(Date.now() / 1000) } }
  );
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    await bot.telegram.sendMessage(ticket.userId, 
      `‚úÖ **–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª –æ–¥–æ–±—Ä–µ–Ω!**\n\n` +
      `üè∑Ô∏è **–í–∞—à –Ω–æ–≤—ã–π —Ç–∏—Ç—É–ª:** "${ticket.content}"\n` +
      `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–∏—Ç—É–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.`, 
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏—Ç—É–ª–µ:', error);
  }
  
  const updatedMessage = ctx.callbackQuery.message.text + 
    `\n\n‚úÖ **–û–î–û–ë–†–ï–ù–û** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${ctx.from.first_name || ctx.from.username || ctx.from.id}` +
    `\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
  
  await ctx.editMessageText(updatedMessage, { parse_mode: 'Markdown' });
  await ctx.answerCbQuery('‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª –æ–¥–æ–±—Ä–µ–Ω!');
});

bot.action(/^reject_title_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    return ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!');
  }
  
  const ticketId = ctx.match[1];
  const ticket = await supportTickets.findOne({ id: ticketId });
  
  if (!ticket) {
    return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
  await supportTickets.updateOne(
    { id: ticketId },
    { $set: { status: 'rejected', processedBy: ctx.from.id, processedAt: Math.floor(Date.now() / 1000) } }
  );
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–≤—ë–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞)
  await users.updateOne(
    { id: ticket.userId },
    { $inc: { stars: 500 } } // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª —Å—Ç–æ–∏—Ç 500 –∑–≤—ë–∑–¥
  );
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    await bot.telegram.sendMessage(ticket.userId, 
      `‚ùå **–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n` +
      `üè∑Ô∏è **–¢–∏—Ç—É–ª:** "${ticket.content}"\n` +
      `üìã **–ü—Ä–∏—á–∏–Ω–∞:** –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n` +
      `üí∞ **–í–æ–∑–≤—Ä–∞—Ç:** 500‚≠ê –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å`, 
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç–∏—Ç—É–ª–∞:', error);
  }
  
  const updatedMessage = ctx.callbackQuery.message.text + 
    `\n\n‚ùå **–û–¢–ö–õ–û–ù–ï–ù–û** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${ctx.from.first_name || ctx.from.username || ctx.from.id}` +
    `\nüí∞ **–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**` +
    `\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
  
  await ctx.editMessageText(updatedMessage, { parse_mode: 'Markdown' });
  await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–∏—Ç—É–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
bot.action('admin_cancel', async (ctx) => {
  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userStates.delete(ctx.from.id);
  console.log('üóëÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–æ:', ctx.from.id);
  
  await ctx.deleteMessage();
  await ctx.answerCbQuery('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
});



// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
async function notifyPromoActivationToChat(activatorId, activatorName, code, rewardText) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —á–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    let promoChatId = process.env.PROMO_NOTIFICATIONS_CHAT;
    if (!promoChatId) {
      console.log('üì¢ –ß–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (PROMO_NOTIFICATIONS_CHAT)');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (promoChatId === 'disabled' || promoChatId === 'off') {
      console.log('üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —á–∞—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @ (–ø—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç)
    if (!promoChatId.startsWith('@')) {
      console.log(`‚ùå PROMO_NOTIFICATIONS_CHAT –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞`);
      console.log(`   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${promoChatId}`);
      console.log(`   –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: @magnumtapchat`);
      return;
    }

    console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${code} –≤ —á–∞—Ç ${promoChatId}`);
    
    const notificationText = `üé´ **–ü–†–û–ú–û–ö–û–î –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!** üé´\n\n` +
                           `üë§ **–ò–≥—Ä–æ–∫:** ${activatorName} (ID: ${activatorId})\n` +
                           `üè∑Ô∏è **–ü—Ä–æ–º–æ–∫–æ–¥:** \`${code}\`\n` +
                           `üéÅ **–ù–∞–≥—Ä–∞–¥–∞:** ${rewardText}\n` +
                           `‚è∞ **–í—Ä–µ–º—è:** ${new Date().toLocaleString('ru-RU')}\n\n` +
                           `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π!`;

    await bot.telegram.sendMessage(promoChatId, notificationText, { 
      parse_mode: 'Markdown'
    });

    console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${promoChatId}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ –≤ —á–∞—Ç:', error);
    console.error('üìã –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    console.error(`   –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PROMO_NOTIFICATIONS_CHAT: "${process.env.PROMO_NOTIFICATIONS_CHAT}"`);
    
    console.error(`   ID —á–∞—Ç–∞: "${process.env.PROMO_NOTIFICATIONS_CHAT}"`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    if (error.message.includes('chat not found')) {
      console.error('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ —Ä–µ—à–µ–Ω–∏—è:');
      console.error('   1. –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç - –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
      console.error('   2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —á–∞—Ç–∞ - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —á–∞—Ç –ø—É–±–ª–∏—á–Ω—ã–π —Å username');
      console.error('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å PROMO_NOTIFICATIONS_CHAT (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å @username)');
      console.error('   4. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ');
    } else if (error.message.includes('CHAT_ID_INVALID')) {
      console.error('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å PROMO_NOTIFICATIONS_CHAT:');
      console.error('   - –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: @username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @magnumtapchat)');
      console.error('   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —á–∞—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∏ –∏–º–µ–µ—Ç username');
    } else if (error.message.includes('Forbidden')) {
      console.error('üí° –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç');
      console.error('   - –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞');
      console.error('   - –ò–ª–∏ –¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π');
    } else if (error.message.includes('bot was kicked')) {
      console.error('üí° –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞!');
      console.error('   - –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç @magnumtapchat');
      console.error('   - –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π');
      console.error('   - –ò–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞');
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞
async function handlePostCreation(ctx, text, userState) {
  try {
    const { postType } = userState;
    const channelChatId = REQUIRED_CHANNEL ? `@${REQUIRED_CHANNEL}` : '@magnumtap';
    
    console.log(`üìù –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç —Ç–∏–ø–∞ ${postType} –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelChatId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –±–æ—Ç–∞
    const botPhotoUrl = process.env.BOT_PHOTO_URL;
    if (!botPhotoUrl) {
      await ctx.reply('‚ùå –§–æ—Ç–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_PHOTO_URL');
      userStates.delete(ctx.from.id);
      return;
    }
    
    console.log(`üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ –±–æ—Ç–∞: ${botPhotoUrl}`);
    
    // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
    if (postType === 'normal') {
      console.log(`üìù –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
      console.log(`üìù –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: ${text.substring(0, 100)}...`);
      
      userStates.set(ctx.from.id, { 
        type: 'admin_post_add_button', 
        postType: 'normal',
        postText: text 
      });
      
      console.log(`üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${JSON.stringify(userStates.get(ctx.from.id))}`);
      
      const previewText = `üìù **–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≥–æ—Ç–æ–≤!**\n\n${text.substring(0, 200)}${text.length > 200 ? '...' : ''}\n\nüí° –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫ –ø–æ—Å—Ç—É?`;
      
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏...`);
      
      await ctx.reply(previewText, { 
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîò –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É', 'post_add_button')],
          [Markup.button.callback('üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏', 'post_publish_now')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'admin_panel')]
        ]).reply_markup
      });
      
      console.log(`‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      
      return;
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤ - —Å—Ä–∞–∑—É –ø—É–±–ª–∏–∫—É–µ–º
    let keyboard = null;
    
    if (postType === 'game') {
      keyboard = Markup.inlineKeyboard([
        [Markup.button.url('üéÆ –ò–≥—Ä–∞—Ç—å', `https://t.me/${ctx.botInfo.username}?start=game`)]
      ]);
    } else if (postType === 'chat') {
      keyboard = Markup.inlineKeyboard([
        [Markup.button.url('üí¨ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É', 'https://t.me/+Poy0ZtUoux1hMTMy')]
      ]);
    } else if (postType === 'promo') {
      keyboard = Markup.inlineKeyboard([
        [Markup.button.url('üé´ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', `https://t.me/${ctx.botInfo.username}?start=promo`)]
      ]);
    }
    
    // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
    await publishPostToChannel(ctx, text, keyboard, postType, channelChatId, botPhotoUrl);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    userStates.delete(ctx.from.id);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
async function publishPostToChannel(ctx, postText, keyboard, postType, channelChatId, botPhotoUrl) {
  try {
    const messageOptions = {
      caption: postText,
      parse_mode: 'Markdown'
    };
    
    if (keyboard) {
      messageOptions.reply_markup = keyboard.reply_markup;
    }
    
    await bot.telegram.sendPhoto(channelChatId, botPhotoUrl, messageOptions);
    
    console.log(`‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª ${channelChatId}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    let confirmText = `‚úÖ **–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n`;
    confirmText += `üì¢ **–¢–∏–ø:** ${postType === 'normal' ? '–û–±—ã—á–Ω—ã–π' : postType === 'game' ? '–ò–≥—Ä–æ–≤–æ–π' : postType === 'chat' ? '–ß–∞—Ç' : '–ü—Ä–æ–º–æ–∫–æ–¥'}\n`;
    confirmText += `üìù **–¢–µ–∫—Å—Ç:** ${postText.substring(0, 100)}${postText.length > 100 ? '...' : ''}\n`;
    confirmText += `üì∏ **–§–æ—Ç–æ:** ${botPhotoUrl.substring(0, 50)}...\n`;
    
    if (keyboard) {
      confirmText += `üîò **–ö–Ω–æ–ø–∫–∞:** –î–æ–±–∞–≤–ª–µ–Ω–∞\n`;
    }
    
    confirmText += `\nüì¢ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!`;
    
    await ctx.reply(confirmText, { parse_mode: 'Markdown' });
    
  } catch (channelError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:', channelError);
    
    if (channelError.message.includes('chat not found')) {
      await ctx.reply('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é REQUIRED_CHANNEL');
    } else if (channelError.message.includes('Forbidden')) {
      await ctx.reply('‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª! –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    } else if (channelError.message.includes('wrong file identifier')) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å —Ñ–æ—Ç–æ –±–æ—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_PHOTO_URL - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    } else {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: ${channelError.message}`);
    }
  }
  
  userStates.delete(ctx.from.id);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞
async function handlePostButtonInput(ctx, text, userState) {
  try {
    const { postText } = userState;
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    const buttonMatch = text.match(/^(.+?):(.+)$/);
    if (!buttonMatch) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¢–ï–ö–°–¢_–ö–ù–û–ü–ö–ò:–°–°–´–õ–ö–ê\n\n‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ —Å—Å—ã–ª–∫–æ–π!\n\n–ü—Ä–∏–º–µ—Ä: üéÆ –ò–≥—Ä–∞—Ç—å:https://t.me/bot?start=game');
      return;
    }
    
    const [, buttonText, buttonUrl] = buttonMatch;
    
    // –û—á–∏—â–∞–µ–º URL –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    const cleanButtonUrl = buttonUrl.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
    if (!cleanButtonUrl.startsWith('http://') && !cleanButtonUrl.startsWith('https://') && !cleanButtonUrl.startsWith('tg://')) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏! –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http://, https:// –∏–ª–∏ tg://\n\n–ü—Ä–∏–º–µ—Ä: https://t.me/+Poy0ZtUoux1hMTMy');
      return;
    }
    
    console.log(`üîò –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É: "${buttonText}" ‚Üí ${cleanButtonUrl}`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url(buttonText, cleanButtonUrl)]
    ]);
    
    const channelChatId = REQUIRED_CHANNEL ? `@${REQUIRED_CHANNEL}` : '@magnumtap';
    const botPhotoUrl = process.env.BOT_PHOTO_URL;
    
    if (!botPhotoUrl) {
      await ctx.reply('‚ùå –§–æ—Ç–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_PHOTO_URL');
      userStates.delete(ctx.from.id);
      return;
    }
    
    // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
    await publishPostToChannel(ctx, postText, keyboard, 'normal', channelChatId, botPhotoUrl);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å—Ç—É:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    userStates.delete(ctx.from.id);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
async function handlePromoCodeCreation(ctx, text, userState) {
  try {
    const { rewardType } = userState;
    
    if (rewardType === 'title') {
      // –î–ª—è —Ç–∏—Ç—É–ª–æ–≤ –ø–∞—Ä—Å–∏–º —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
      const match = text.trim().match(/^(\S+)\s+"([^"]+)"\s+(\d+)$/);
      if (!match) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–ê–ó–í–ê–ù–ò–ï "–¢–ò–¢–£–õ" –õ–ò–ú–ò–¢\n\n–ü—Ä–∏–º–µ—Ä: HERO "–ì–µ—Ä–æ–π –¥–Ω—è" 20');
      }
      
      const [, code, title, maxActivations] = match;
      const maxNum = Number(maxActivations);
      
      if (!code || !title || isNaN(maxNum) || maxNum <= 0) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.');
      }
      
      const existingPromo = await promocodes.findOne({ code: code.toUpperCase() });
      if (existingPromo) {
        return ctx.reply(`‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ ${code.toUpperCase()} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      }
      
      await promocodes.insertOne({
        code: code.toUpperCase(),
        rewardType: 'title',
        title: title,
        max: maxNum,
        used: 0,
        created: now()
      });
      
      ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
                `üè∑Ô∏è **–ö–æ–¥:** ${code.toUpperCase()}\n` +
                `üèÜ **–ù–∞–≥—Ä–∞–¥–∞:** –¢–∏—Ç—É–ª "${title}"\n` +
                `üî¢ **–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π:** ${maxNum}\n` +
                `üìÖ **–°–æ–∑–¥–∞–Ω:** ${new Date().toLocaleString('ru-RU')}`, 
                { parse_mode: 'Markdown' });
                
    } else {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
      const parts = text.trim().split(/\s+/);
      
      if (parts.length !== 3) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–ê–ó–í–ê–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–û/–°–¢–ê–¢–£–° –õ–ò–ú–ò–¢');
      }
      
      const [code, reward, maxActivations] = parts;
      const maxNum = Number(maxActivations);
      
      if (!code || isNaN(maxNum) || maxNum <= 0) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.');
      }
      
      const existingPromo = await promocodes.findOne({ code: code.toUpperCase() });
      if (existingPromo) {
        return ctx.reply(`‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ ${code.toUpperCase()} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      }
      
      let promoData = {
        code: code.toUpperCase(),
        rewardType: rewardType,
        max: maxNum,
        used: 0,
        created: now()
      };
      
      let rewardText = '';
      
      if (rewardType === 'stars') {
        const starsNum = Number(reward);
        if (isNaN(starsNum) || starsNum <= 0) {
          return ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!');
        }
        promoData.stars = starsNum;
        rewardText = `‚≠ê **–ù–∞–≥—Ä–∞–¥–∞:** ${starsNum} –∑–≤—ë–∑–¥`;
        
      } else if (rewardType === 'magnum') {
        const magnumNum = Number(reward);
        if (isNaN(magnumNum) || magnumNum <= 0) {
          return ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Magnum Coin –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!');
        }
        promoData.magnumCoins = magnumNum;
        rewardText = `ü™ô **–ù–∞–≥—Ä–∞–¥–∞:** ${magnumNum} Magnum Coin`;
        
      } else if (rewardType === 'status') {
        const validStatuses = ['vip', 'moderator', 'elite'];
        if (!validStatuses.includes(reward.toLowerCase())) {
          return ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å! –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${validStatuses.join(', ')}`);
        }
        promoData.status = reward.toLowerCase();
        rewardText = `üí´ **–ù–∞–≥—Ä–∞–¥–∞:** –°—Ç–∞—Ç—É—Å "${reward.toUpperCase()}"`;
      }
      
      await promocodes.insertOne(promoData);
      
      ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
                `üè∑Ô∏è **–ö–æ–¥:** ${code.toUpperCase()}\n` +
                rewardText + `\n` +
                `üî¢ **–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π:** ${maxNum}\n` +
                `üìÖ **–°–æ–∑–¥–∞–Ω:** ${new Date().toLocaleString('ru-RU')}`, 
                { parse_mode: 'Markdown' });
    }
    
    userStates.delete(ctx.from.id);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    userStates.delete(ctx.from.id);
  }
}

// –ú–∞–≥–∞–∑–∏–Ω
bot.action('shop', async (ctx) => {
  const user = await getUserDirectFromDB(ctx.from.id);
  
  // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ "–ø–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω"
  await markDailyTaskCompleted(ctx.from.id, 'shop_visit');
  
  const activeBoosts = getActiveBoosts(user);
  const categories = getShopCategories();
  
  let boostInfo = '';
  if (Object.keys(activeBoosts).length > 0) {
    boostInfo = '\nüî• **–ê–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç—ã:**\n';
    Object.entries(activeBoosts).forEach(([type, data]) => {
      const item = SHOP_ITEMS[type];
      if (item) {
        const timeLeft = data.expiresAt - Math.floor(Date.now() / 1000);
        const hours = Math.floor(timeLeft / 3600);
        const minutes = Math.floor((timeLeft % 3600) / 60);
        boostInfo += `${item.icon} ${item.name} ‚Äî `;
        if (hours > 0) boostInfo += `${hours}—á `;
        boostInfo += `${minutes}–º–∏–Ω\n`;
      }
    });
    boostInfo += '\n';
  }
  
  const message = `üõí **–ú–∞–≥–∞–∑–∏–Ω MagnumTap** üõí\n\n` +
                  `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${Math.round((user.stars || 0) * 100) / 100} ‚≠ê –∑–≤—ë–∑–¥\n` +
                  boostInfo +
                  `üè™ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:**`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚ö° –ë—É—Å—Ç—ã –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–∏', 'shop_boosts')],
    [Markup.button.callback('üé≤ –ö–æ—Ä–æ–±–∫–∏ —É–¥–∞—á–∏', 'shop_boxes')],
    [Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä—ã', 'shop_miner')],
    [Markup.button.callback('üåà –ö–æ—Å–º–µ—Ç–∏–∫–∞', 'shop_cosmetic')],
    [Markup.button.callback('üëë –ü—Ä–µ–º–∏—É–º', 'shop_premium')],
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]);
  
  await sendMessageWithPhoto(ctx, message, keyboard);
});

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞
bot.action(/^shop_(.+)$/, async (ctx) => {
  const category = ctx.match[1];
  const user = await getUserDirectFromDB(ctx.from.id);
  
  const categoryNames = {
    'boosts': '‚ö° –ë—É—Å—Ç—ã –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–∏',
    'boxes': 'üé≤ –ö–æ—Ä–æ–±–∫–∏ —É–¥–∞—á–∏', 
    'miner': '‚õèÔ∏è –ú–∞–π–Ω–µ—Ä—ã',
    'cosmetic': 'üåà –ö–æ—Å–º–µ—Ç–∏–∫–∞',
    'premium': 'üëë –ü—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä—ã'
  };
  
  let items = [];
  Object.entries(SHOP_ITEMS).forEach(([id, item]) => {
    if ((category === 'boosts' && ['boosts', 'multipliers'].includes(item.category)) ||
        (category === 'boxes' && item.category === 'boxes') ||
        (category === 'miner' && item.category === 'miner') ||
        (category === 'cosmetic' && item.category === 'cosmetic') ||
        (category === 'premium' && item.category === 'premium')) {
      items.push({ id, ...item });
    }
  });
  
  let message = `${categoryNames[category]} üõí\n\n`;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (category === 'miner') {
    message += `üí∞ **–ë–∞–ª–∞–Ω—Å:** ${Math.round((user.magnumCoins || 0) * 100) / 100} ü™ô Magnum Coin\n\n`;
  } else {
    message += `üí∞ **–ë–∞–ª–∞–Ω—Å:** ${Math.round((user.stars || 0) * 100) / 100} ‚≠ê –∑–≤—ë–∑–¥\n\n`;
  }
  
  items.forEach(item => {
    let canAfford, priceText;
    
    if (item.currency === 'magnumCoins') {
      canAfford = (user.magnumCoins || 0) >= item.price ? '‚úÖ' : '‚ùå';
      priceText = `${item.price} ü™ô Magnum Coin`;
    } else {
      canAfford = user.stars >= item.price ? '‚úÖ' : '‚ùå';
      priceText = `${item.price} ‚≠ê –∑–≤—ë–∑–¥`;
    }
    
    message += `${canAfford} **${item.name}**\n`;
    message += `   ${item.description}\n`;
    message += `   üí∞ –¶–µ–Ω–∞: ${priceText}\n\n`;
  });
  
  const keyboard = [];
  items.forEach(item => {
    const priceIcon = item.currency === 'magnumCoins' ? 'ü™ô' : '‚≠ê';
    keyboard.push([Markup.button.callback(
      `${item.icon} ${item.name} ‚Äî ${item.price}${priceIcon}`, 
      `buy_${item.id}`
    )]);
  });
  keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', 'shop')]);
  
  await sendMessageWithPhoto(ctx, message, Markup.inlineKeyboard(keyboard));
});

// –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
bot.action(/^buy_(.+)$/, async (ctx) => {
  const itemId = ctx.match[1];
  const item = SHOP_ITEMS[itemId];
  
  if (!item) {
    await ctx.answerCbQuery('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  const user = await getUserDirectFromDB(ctx.from.id);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏
  if (item.currency === 'magnumCoins') {
    if ((user.magnumCoins || 0) < item.price) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coin –¥–ª—è –ø–æ–∫—É–ø–∫–∏!', { show_alert: true });
      return;
    }
  } else {
    if (user.stars < item.price) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!', { show_alert: true });
      return;
    }
  }
  
  const result = await purchaseItem(ctx.from.id, itemId);
  
  if (result.success) {
    await ctx.answerCbQuery(`‚úÖ ${result.message}`, { show_alert: true });
    
    if (result.needInput) {
      // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥
      await adminForceReply(ctx, `üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–∏—Ç—É–ª (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤):`);
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    setTimeout(async () => {
      await sendMessageWithPhoto(ctx, 'üõí –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω...', 
        Markup.inlineKeyboard([[Markup.button.callback('üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', 'shop')]]));
    }, 1000);
  } else {
    await ctx.answerCbQuery(`‚ùå ${result.message}`, { show_alert: true });
  }
});

// –ü—Ä–æ–º–æ–∫–æ–¥—ã (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã ‚Äî —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫)
const promoCodes = { 'MAGNUM10': 10, 'STAR50': 50 };
const userPromoUsed = {};
bot.action('promo', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(ctx);
  if (!isSubscribed) {
    await showSubscriptionMessage(ctx);
    return;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  userStates.set(ctx.from.id, { 
    type: 'activate_promo' 
  });
  
  await adminForceReply(ctx, 'üé´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
bot.on('photo', async (ctx) => {
  try {
    const replyToMessage = ctx.message.reply_to_message;
    if (!replyToMessage) return;
    
    const replyText = replyToMessage.text || '';
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è
    if (replyText.includes('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è')) {
             console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', replyText);
       
       // –ò—â–µ–º ID –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
       const taskIdMatch = replyText.match(/üÜî ID –∑–∞–¥–∞–Ω–∏—è: (\w+)/);
       
       console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–π ID –∑–∞–¥–∞–Ω–∏—è:', taskIdMatch);
       
       if (!taskIdMatch) {
         console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ:', replyText);
         return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
       }
       
       const taskId = taskIdMatch[1];
       console.log('–ò—â–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å ID:', taskId);
       
       const task = SPONSOR_TASKS.find(t => {
         console.log('–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å ID:', t.id);
         return t.id === taskId;
       });
      
      if (!task) {
        return ctx.reply('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
      const photo = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞–Ω–∏—è
      const taskCheck = await createTaskCheck(
        ctx.from.id,
        ctx.from.username,
        task.id,
        task.title,
        photo
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      await sendTaskCheckToChannel(taskCheck);
      
      ctx.reply(
        `‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!*\n\n` +
        `üìã *–ó–∞–¥–∞–Ω–∏–µ:* ${task.title}\n` +
        `üé´ *ID –ø—Ä–æ–≤–µ—Ä–∫–∏:* \`${taskCheck._id.toString().slice(-6)}\`\n` +
        `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n` +
        `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.`,
        { 
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤', 'sponsor_tasks')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ])
        }
      );
      return;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
bot.on('new_chat_members', async (ctx) => {
  try {
    const chatId = ctx.chat.id;
    const promoChatId = process.env.PROMO_NOTIFICATIONS_CHAT;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω—ã–π —á–∞—Ç
    if (!promoChatId) return;
    
    let targetChatId = promoChatId;
    if (promoChatId.startsWith('@')) {
      targetChatId = promoChatId.substring(1);
    }
    
    if (chatId.toString() !== targetChatId && ctx.chat.username !== targetChatId) {
      return;
    }
    
    console.log(`üë• –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —á–∞—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${ctx.message.new_chat_members.length} —á–µ–ª–æ–≤–µ–∫`);
    
    for (const newMember of ctx.message.new_chat_members) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
      if (newMember.is_bot) continue;
      
      const userId = newMember.id;
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${newMember.first_name})`);
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const user = await users.findOne({ id: userId });
      
      if (user) {
        const { statusText, titleText } = getUserChatInfo(user);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        let userInfo = `üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!**\n\n`;
        userInfo += `üë§ **–ò–≥—Ä–æ–∫:** ${newMember.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
        
        if (statusText) {
          userInfo += `üí´ **–°—Ç–∞—Ç—É—Å:** ${statusText}\n`;
        }
        
        if (titleText) {
          userInfo += `üèÜ **–¢–∏—Ç—É–ª:** ${titleText}\n`;
        }
        
        userInfo += `\nüéÆ –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã –≤ MagnumTap!`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.reply(userInfo, { parse_mode: 'Markdown' });
        
        console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
      } else {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞:', error);
  }
});

bot.on('text', async (ctx) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:', ctx.from.id, ctx.from.first_name);
  console.log('üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', ctx.message.text);
  console.log('üîó –ï—Å—Ç—å –ª–∏ reply_to_message:', !!ctx.message.reply_to_message);
  
  if (ctx.message.reply_to_message) {
    console.log('üí¨ Reply to text:', ctx.message.reply_to_message.text);
  }

  const text = ctx.message.text;
  const userId = ctx.from.id;
  
  console.log('‚úÖ Text handler triggered:');
  console.log('üìù Text:', text);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userState = userStates.get(userId);
  console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userState);
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–≥–æ
  if (userState && userState.type === 'withdrawal') {
    console.log('üí≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    await handleWithdrawalState(ctx, text, userState);
    return;
  }
  
  if (userState && userState.type === 'admin_create_promo') {
    console.log('üé´ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    await handlePromoCodeCreation(ctx, text, userState);
    return;
  }
  
  if (userState && userState.type === 'activate_promo') {
    console.log('üé´ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞ —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    await handlePromoActivation(ctx, text, userState);
    return;
  }
  
  if (userState && userState.type === 'custom_title_request') {
    console.log('üè∑Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏—Ç—É–ª —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    await handleCustomTitleRequest(ctx, text, userState);
    return;
  }
  
  if (userState && userState.type === 'admin_farm_cooldown') {
    console.log('üåæ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞ —Ñ–∞—Ä–º–∞');
    await handleFarmCooldownChange(ctx, text, userState);
    return;
  }
  
  if (userState && userState.type === 'admin_create_post') {
    console.log('üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    await handlePostCreation(ctx, text, userState);
    return;
  }
  
  if (userState && userState.type === 'admin_post_button_input') {
    console.log('üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    await handlePostButtonInput(ctx, text, userState);
    return;
  }
  
  if (userState && userState.type === 'admin_view_referrals') {
    console.log('üë• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const userId = text.trim();
    
    if (!userId || isNaN(userId)) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.');
    }
    
    try {
      const refs = await users.find({ invitedBy: userId }).toArray();
      if (!refs.length) {
        await ctx.reply(`üë• –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.`);
      } else {
        let msg = `üë• **–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:**\n\n`;
        refs.forEach((u, i) => { 
          msg += `${i + 1}. ID: ${u.id}\n`;
          if (u.username) msg += `   @${u.username}\n`;
          msg += `   –ó–≤—ë–∑–¥: ${u.stars || 0}\n`;
          msg += `   Magnum Coin: ${u.magnumCoins || 0}\n\n`;
        });
        msg += `üìä **–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:** ${refs.length}`;
        await ctx.reply(msg);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.');
    }
    
    userStates.delete(ctx.from.id);
    return;
  }
  
  if (userState && userState.type === 'admin_change_commission') {
    console.log('üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏');
    const newCommission = parseFloat(text);
    if (isNaN(newCommission) || newCommission < 0 || newCommission > 50) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 50');
    }
    
    EXCHANGE_COMMISSION = newCommission;
    await saveCommissionToDB(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ –ë–î
    await ctx.reply(`‚úÖ –ö–æ–º–∏—Å—Å–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newCommission}%`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏ –∫–æ–º–∏—Å—Å–∏–∏
    setTimeout(async () => {
      const commissionText = `üí∞ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ò–°–°–ò–ï–ô** üí∞\n\n` +
                            `üìä **–¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è:** ${EXCHANGE_COMMISSION}%\n\n` +
                            `üîÑ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—è:**\n` +
                            `‚Ä¢ –ü—Ä–∏ –æ–±–º–µ–Ω–µ 100ü™ô ‚Üí 10‚≠ê (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)\n` +
                            `‚Ä¢ –ü—Ä–∏ –æ–±–º–µ–Ω–µ 10‚≠ê ‚Üí 100ü™ô (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)\n` +
                            `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –≤–∑–∏–º–∞–µ—Ç—Å—è —Å –ø–æ–ª—É—á–∞–µ–º–æ–π –≤–∞–ª—é—Ç—ã\n\n` +
                            `üí° **–ü—Ä–∏–º–µ—Ä —Å –∫–æ–º–∏—Å—Å–∏–µ–π 5%:**\n` +
                            `‚Ä¢ 100ü™ô ‚Üí 9.5‚≠ê (–≤–º–µ—Å—Ç–æ 10‚≠ê)\n` +
                            `‚Ä¢ 10‚≠ê ‚Üí 95ü™ô (–≤–º–µ—Å—Ç–æ 100ü™ô)\n\n` +
                            `‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –æ–±–º–µ–Ω—ã!`;

      await sendMessageWithPhoto(ctx, commissionText, Markup.inlineKeyboard([
        [Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é', 'admin_change_commission')],
        [Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é (0%)', 'admin_reset_commission')],
        [Markup.button.callback('üìä –¢–µ—Å—Ç–æ–≤—ã–π –æ–±–º–µ–Ω', 'admin_test_exchange')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
      ]));
    }, 1000);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º
  if (userState && userState.type === 'admin_add_magnum_reserve') {
    console.log('üè¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ Magnum Coin –≤ —Ä–µ–∑–µ—Ä–≤');
    const amount = parseFloat(text);
    if (isNaN(amount) || amount <= 0) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
    }
    
    RESERVE_MAGNUM_COINS += amount;
    await saveReserveToDB();
    await ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount.toFixed(2)} Magnum Coin –≤ —Ä–µ–∑–µ—Ä–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${RESERVE_MAGNUM_COINS.toFixed(2)}ü™ô`);
    
    setTimeout(async () => {
      const reserveText = `üè¶ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ó–ï–†–í–û–ú** üè¶\n\n` +
                         `üìä **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–µ–∑–µ—Ä–≤–∞:**\n` +
                         `ü™ô ${RESERVE_MAGNUM_COINS.toFixed(2)} Magnum Coin\n` +
                         `‚≠ê ${RESERVE_STARS.toFixed(2)} –∑–≤—ë–∑–¥\n\n` +
                         `üìà **–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞:**\n` +
                         `‚Ä¢ 100ü™ô = ${(100 * (RESERVE_STARS / RESERVE_MAGNUM_COINS)).toFixed(2)}‚≠ê\n` +
                         `‚Ä¢ 10‚≠ê = ${(10 * (RESERVE_MAGNUM_COINS / RESERVE_STARS)).toFixed(2)}ü™ô\n\n` +
                         `üí° **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤:**\n` +
                         `‚Ä¢ –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ —Ä–µ–∑–µ—Ä–≤–∞\n` +
                         `‚Ä¢ –ü—Ä–∏ –æ–±–º–µ–Ω–µ —Ä–µ–∑–µ—Ä–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è\n` +
                         `‚Ä¢ –ë–æ–ª—å—à–µ —Ä–µ–∑–µ—Ä–≤–∞ = –ª—É—á—à–µ –∫—É—Ä—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;

      await sendMessageWithPhoto(ctx, reserveText, Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Magnum Coin', 'admin_add_magnum_reserve')],
        [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Magnum Coin', 'admin_remove_magnum_reserve')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_add_stars_reserve')],
        [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_remove_stars_reserve')],
        [Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑–µ—Ä–≤', 'admin_reset_reserve')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
      ]));
    }, 1000);
    userStates.delete(ctx.from.id);
    return;
  }
  
  if (userState && userState.type === 'admin_remove_magnum_reserve') {
    console.log('üè¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ Magnum Coin –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞');
    const amount = parseFloat(text);
    if (isNaN(amount) || amount <= 0) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
    }
    
    if (amount > RESERVE_MAGNUM_COINS) {
      return ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coin –≤ —Ä–µ–∑–µ—Ä–≤–µ! –î–æ—Å—Ç—É–ø–Ω–æ: ${RESERVE_MAGNUM_COINS.toFixed(2)}ü™ô`);
    }
    
    RESERVE_MAGNUM_COINS -= amount;
    await saveReserveToDB();
    await ctx.reply(`‚úÖ –£–±—Ä–∞–Ω–æ ${amount.toFixed(2)} Magnum Coin –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${RESERVE_MAGNUM_COINS.toFixed(2)}ü™ô`);
    
    setTimeout(async () => {
      const reserveText = `üè¶ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ó–ï–†–í–û–ú** üè¶\n\n` +
                         `üìä **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–µ–∑–µ—Ä–≤–∞:**\n` +
                         `ü™ô ${RESERVE_MAGNUM_COINS.toFixed(2)} Magnum Coin\n` +
                         `‚≠ê ${RESERVE_STARS.toFixed(2)} –∑–≤—ë–∑–¥\n\n` +
                         `üìà **–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞:**\n` +
                         `‚Ä¢ 100ü™ô = ${(100 * (RESERVE_STARS / RESERVE_MAGNUM_COINS)).toFixed(2)}‚≠ê\n` +
                         `‚Ä¢ 10‚≠ê = ${(10 * (RESERVE_MAGNUM_COINS / RESERVE_STARS)).toFixed(2)}ü™ô\n\n` +
                         `üí° **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤:**\n` +
                         `‚Ä¢ –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ —Ä–µ–∑–µ—Ä–≤–∞\n` +
                         `‚Ä¢ –ü—Ä–∏ –æ–±–º–µ–Ω–µ —Ä–µ–∑–µ—Ä–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è\n` +
                         `‚Ä¢ –ë–æ–ª—å—à–µ —Ä–µ–∑–µ—Ä–≤–∞ = –ª—É—á—à–µ –∫—É—Ä—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;

      await sendMessageWithPhoto(ctx, reserveText, Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Magnum Coin', 'admin_add_magnum_reserve')],
        [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Magnum Coin', 'admin_remove_magnum_reserve')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_add_stars_reserve')],
        [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_remove_stars_reserve')],
        [Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑–µ—Ä–≤', 'admin_reset_reserve')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
      ]));
    }, 1000);
    userStates.delete(ctx.from.id);
    return;
  }
  
  if (userState && userState.type === 'admin_add_stars_reserve') {
    console.log('üè¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥ –≤ —Ä–µ–∑–µ—Ä–≤');
    const amount = parseFloat(text);
    if (isNaN(amount) || amount <= 0) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
    }
    
    RESERVE_STARS += amount;
    await saveReserveToDB();
    await ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount.toFixed(2)} –∑–≤—ë–∑–¥ –≤ —Ä–µ–∑–µ—Ä–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${RESERVE_STARS.toFixed(2)}‚≠ê`);
    
    setTimeout(async () => {
      const reserveText = `üè¶ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ó–ï–†–í–û–ú** üè¶\n\n` +
                         `üìä **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–µ–∑–µ—Ä–≤–∞:**\n` +
                         `ü™ô ${RESERVE_MAGNUM_COINS.toFixed(2)} Magnum Coin\n` +
                         `‚≠ê ${RESERVE_STARS.toFixed(2)} –∑–≤—ë–∑–¥\n\n` +
                         `üìà **–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞:**\n` +
                         `‚Ä¢ 100ü™ô = ${(100 * (RESERVE_STARS / RESERVE_MAGNUM_COINS)).toFixed(2)}‚≠ê\n` +
                         `‚Ä¢ 10‚≠ê = ${(10 * (RESERVE_MAGNUM_COINS / RESERVE_STARS)).toFixed(2)}ü™ô\n\n` +
                         `üí° **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤:**\n` +
                         `‚Ä¢ –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ —Ä–µ–∑–µ—Ä–≤–∞\n` +
                         `‚Ä¢ –ü—Ä–∏ –æ–±–º–µ–Ω–µ —Ä–µ–∑–µ—Ä–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è\n` +
                         `‚Ä¢ –ë–æ–ª—å—à–µ —Ä–µ–∑–µ—Ä–≤–∞ = –ª—É—á—à–µ –∫—É—Ä—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;

      await sendMessageWithPhoto(ctx, reserveText, Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Magnum Coin', 'admin_add_magnum_reserve')],
        [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Magnum Coin', 'admin_remove_magnum_reserve')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_add_stars_reserve')],
        [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_remove_stars_reserve')],
        [Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑–µ—Ä–≤', 'admin_reset_reserve')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
      ]));
    }, 1000);
    userStates.delete(ctx.from.id);
    return;
  }
  
  if (userState && userState.type === 'admin_remove_stars_reserve') {
    console.log('üè¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞');
    const amount = parseFloat(text);
    if (isNaN(amount) || amount <= 0) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
    }
    
    if (amount > RESERVE_STARS) {
      return ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –≤ —Ä–µ–∑–µ—Ä–≤–µ! –î–æ—Å—Ç—É–ø–Ω–æ: ${RESERVE_STARS.toFixed(2)}‚≠ê`);
    }
    
    RESERVE_STARS -= amount;
    await saveReserveToDB();
    await ctx.reply(`‚úÖ –£–±—Ä–∞–Ω–æ ${amount.toFixed(2)} –∑–≤—ë–∑–¥ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${RESERVE_STARS.toFixed(2)}‚≠ê`);
    
    setTimeout(async () => {
      const reserveText = getReserveManagementText();

      await sendMessageWithPhoto(ctx, reserveText, Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Magnum Coin', 'admin_add_magnum_reserve')],
        [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Magnum Coin', 'admin_remove_magnum_reserve')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_add_stars_reserve')],
        [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_remove_stars_reserve')],
        [Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑–µ—Ä–≤', 'admin_reset_reserve')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
      ]));
    }, 1000);
    userStates.delete(ctx.from.id);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥
  if (userState && userState.type === 'buy_tg_stars_amount') {
    console.log('üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥');
    const amount = parseFloat(text);
    
    if (isNaN(amount) || amount < EXCHANGE_LIMITS.MIN_MAGNUM_COINS) {
      return ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –ú–∏–Ω–∏–º—É–º: ${EXCHANGE_LIMITS.MIN_MAGNUM_COINS}ü™ô`);
    }
    
    if (amount > EXCHANGE_LIMITS.MAX_MAGNUM_COINS) {
      return ctx.reply(`‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞! –ú–∞–∫—Å–∏–º—É–º: ${EXCHANGE_LIMITS.MAX_MAGNUM_COINS}ü™ô`);
    }
    
    const user = await getUser(ctx.from.id, ctx);
    const magnumCoinsBalance = Math.round((user.magnumCoins || 0) * 100) / 100;
    
    if (amount > magnumCoinsBalance) {
      return ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coin! –£ –≤–∞—Å: ${magnumCoinsBalance}ü™ô, –Ω—É–∂–Ω–æ: ${amount}ü™ô`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞
    const now = Math.floor(Date.now() / 1000);
    const lastExchange = user.lastExchange || 0;
    const timeSinceLastExchange = now - lastExchange;
    
    if (timeSinceLastExchange < 5) {
      return ctx.reply('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–º–µ–Ω–∞–º–∏');
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥
    const magnumToStarsRate = RESERVE_STARS / RESERVE_MAGNUM_COINS;
    const baseStarsToReceive = amount * magnumToStarsRate;
    const commission = calculateCommission(baseStarsToReceive);
    const starsToReceive = calculateAmountWithCommission(baseStarsToReceive);
    
    if (starsToReceive <= 0) {
      return ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π (–∫–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ)
    const reserveUpdated = await updateReserve('magnumCoins', 'stars', amount, starsToReceive, commission);
    if (!reserveUpdated) {
      return ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–µ–∑–µ—Ä–≤–µ –±–∏—Ä–∂–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await users.updateOne(
      { id: ctx.from.id },
      { 
        $inc: { magnumCoins: -amount, stars: starsToReceive },
        $set: { lastExchange: now }
      }
    );
    invalidateUserCache(ctx.from.id);
    invalidateBotStatsCache();
    
    const commissionText = EXCHANGE_COMMISSION > 0 ? `\nüí∞ –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(commission)}‚≠ê (${EXCHANGE_COMMISSION}%)` : '';
    const notificationText = `‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
                            `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${amount}ü™ô\n` +
                            `‚≠ê –ü–æ–ª—É—á–µ–Ω–æ: ${formatNumber(starsToReceive)}‚≠ê` +
                            `${commissionText}\n` +
                            `üìä –ö—É—Ä—Å: 1ü™ô = ${formatNumber(magnumToStarsRate)}‚≠ê`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback query
    try {
      await ctx.telegram.answerCbQuery(ctx.from.id, notificationText, { show_alert: true });
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(notificationText);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–º–µ–Ω–∞
    setTimeout(async () => {
      await updateExchangeInterface(ctx, ctx.from.id);
    }, 1000);
    
    userStates.delete(ctx.from.id);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∑–≤—ë–∑–¥
  if (userState && userState.type === 'sell_tg_stars_amount') {
    console.log('üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∑–≤—ë–∑–¥');
    const amount = parseFloat(text);
    
    if (isNaN(amount) || amount < EXCHANGE_LIMITS.MIN_STARS) {
      return ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –ú–∏–Ω–∏–º—É–º: ${EXCHANGE_LIMITS.MIN_STARS}‚≠ê`);
    }
    
    if (amount > EXCHANGE_LIMITS.MAX_STARS) {
      return ctx.reply(`‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞! –ú–∞–∫—Å–∏–º—É–º: ${EXCHANGE_LIMITS.MAX_STARS}‚≠ê`);
    }
    
    const user = await getUser(ctx.from.id, ctx);
    const starsBalance = Math.round((user.stars || 0) * 100) / 100;
    
    if (amount > starsBalance) {
      return ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –£ –≤–∞—Å: ${starsBalance}‚≠ê, –Ω—É–∂–Ω–æ: ${amount}‚≠ê`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞
    const now = Math.floor(Date.now() / 1000);
    const lastExchange = user.lastExchange || 0;
    const timeSinceLastExchange = now - lastExchange;
    
    if (timeSinceLastExchange < 5) {
      return ctx.reply('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–º–µ–Ω–∞–º–∏');
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Magnum Coin
    const starsToMagnumRate = RESERVE_MAGNUM_COINS / RESERVE_STARS;
    const baseCoinsToReceive = amount * starsToMagnumRate;
    const commission = calculateCommission(baseCoinsToReceive);
    const coinsToReceive = calculateAmountWithCommission(baseCoinsToReceive);
    
    if (coinsToReceive <= 0) {
      return ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π (–∫–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ)
    const reserveUpdated = await updateReserve('stars', 'magnumCoins', amount, coinsToReceive, commission);
    if (!reserveUpdated) {
      return ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–µ–∑–µ—Ä–≤–µ –±–∏—Ä–∂–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await users.updateOne(
      { id: ctx.from.id },
      { 
        $inc: { stars: -amount, magnumCoins: coinsToReceive },
        $set: { lastExchange: now }
      }
    );
    invalidateUserCache(ctx.from.id);
    invalidateBotStatsCache();
    
    const commissionText = EXCHANGE_COMMISSION > 0 ? `\nüí∞ –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(commission)}ü™ô (${EXCHANGE_COMMISSION}%)` : '';
    const notificationText = `‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
                            `‚≠ê –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${amount}‚≠ê\n` +
                            `üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${formatNumber(coinsToReceive)}ü™ô` +
                            `${commissionText}\n` +
                            `üìä –ö—É—Ä—Å: 1‚≠ê = ${formatNumber(starsToMagnumRate)}ü™ô`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback query
    try {
      await ctx.telegram.answerCbQuery(ctx.from.id, notificationText, { show_alert: true });
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(notificationText);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–º–µ–Ω–∞
    setTimeout(async () => {
      await updateExchangeInterface(ctx, ctx.from.id);
    }, 1000);
    
    userStates.delete(ctx.from.id);
    return;
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º reply_to_message (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
  const replyMsg = ctx.message.reply_to_message;
  if (!replyMsg) {
    console.log('‚ùå –ù–µ—Ç reply_to_message –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É');
    return;
  }

  const replyText = replyMsg.text;
  console.log('üí¨ Reply text:', replyText);

  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
    if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram Stars (–º–∏–Ω–∏–º—É–º 100)')) {
      console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è Telegram Stars:', text);
      const amount = parseFloat(text);
      if (isNaN(amount) || amount < 100) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: 100‚≠ê');
      }
      
      const user = await getUser(ctx.from.id, ctx);
      console.log('–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.stars, '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç:', amount);
      if (user.stars < amount) {
        return ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –£ –≤–∞—Å: ${Math.round(user.stars * 100) / 100}‚≠ê`);
      }
      
      await adminForceReply(ctx, `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ${amount} Telegram Stars:`);
      return;
    }
    
    if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è') && replyText.includes('Telegram Stars')) {
      console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ Telegram ID:', text);
      console.log('Reply text:', replyText);
      const telegramId = text.trim();
      const amountMatch = replyText.match(/(\d+(?:\.\d+)?)/);
      if (!amountMatch) return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã!');
      
      const amount = parseFloat(amountMatch[1]);
      console.log('–°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ —Å—É–º–º—É:', amount, '–¥–ª—è ID:', telegramId);
      const request = await createWithdrawalRequest(ctx.from.id, 'tg_stars', amount, telegramId);
      console.log('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', request.id);
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã
      await users.updateOne({ id: ctx.from.id }, { $inc: { stars: -amount } });
      console.log('–ó–≤—ë–∑–¥—ã —Å–ø–∏—Å–∞–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞');
      
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª...');
      await sendWithdrawalToChannel(request);
      console.log('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª');
      
      ctx.reply(`‚úÖ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n` +
                `üè∑Ô∏è **ID –∑–∞—è–≤–∫–∏:** \`${request.id}\`\n` +
                `üí∞ **–°—É–º–º–∞:** ${amount}‚≠ê\n` +
                `üí∏ **–ö –ø–æ–ª—É—á–µ–Ω–∏—é:** ${request.netAmount}‚≠ê\n` +
                `‚è∞ **–°—Ç–∞—Ç—É—Å:** ‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n` +
                `–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24-48 —á–∞—Å–æ–≤.`, 
                { parse_mode: 'Markdown' });
      return;
    }
    
         if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à TON –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞:')) {
      const address = text.trim();
      if (address.length < 10) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π TON –∞–¥—Ä–µ—Å!');
      }
      
             await adminForceReply(ctx, `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ TON (–º–∏–Ω–∏–º—É–º 500):`);
      return;
    }
    
         if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ TON (–º–∏–Ω–∏–º—É–º 500)')) {
      const amount = parseFloat(text);
      if (isNaN(amount) || amount < 500) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ TON: 500‚≠ê');
      }
      
      const user = await getUser(ctx.from.id, ctx);
      if (user.stars < amount) {
        return ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –£ –≤–∞—Å: ${Math.round(user.stars * 100) / 100}‚≠ê`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messages = await ctx.telegram.getUpdates();
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –∑–∞–Ω–æ–≤–æ
             await adminForceReply(ctx, `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ TON –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ ${amount}‚≠ê:`);
      return;
    }
    
    if (replyText.includes('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ TON –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞')) {
      const address = text.trim();
      const amountMatch = replyText.match(/(\d+(?:\.\d+)?)/);
      if (!amountMatch) return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã!');
      
      const amount = parseFloat(amountMatch[1]);
      const request = await createWithdrawalRequest(ctx.from.id, 'ton', amount, address);
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã
      await users.updateOne({ id: ctx.from.id }, { $inc: { stars: -amount } });
      
      await sendWithdrawalToChannel(request);
      
      ctx.reply(`‚úÖ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n` +
                `üè∑Ô∏è **ID –∑–∞—è–≤–∫–∏:** \`${request.id}\`\n` +
                `üí∞ **–°—É–º–º–∞:** ${amount}‚≠ê\n` +
                `üí∏ **–ö –ø–æ–ª—É—á–µ–Ω–∏—é:** ${request.netAmount}‚≠ê\n` +
                `‚è∞ **–°—Ç–∞—Ç—É—Å:** ‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n` +
                `–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24-48 —á–∞—Å–æ–≤.`, 
                { parse_mode: 'Markdown' });
      return;
    }
    
         if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à USDT TRC-20 –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞:')) {
      const address = text.trim();
      if (address.length < 10) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π USDT –∞–¥—Ä–µ—Å!');
      }
      
             await adminForceReply(ctx, `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ USDT (–º–∏–Ω–∏–º—É–º 1000):`);
      return;
    }
    
         if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ USDT (–º–∏–Ω–∏–º—É–º 1000)')) {
      const amount = parseFloat(text);
      if (isNaN(amount) || amount < 1000) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ USDT: 1000‚≠ê');
      }
      
      const user = await getUser(ctx.from.id, ctx);
      if (user.stars < amount) {
        return ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –£ –≤–∞—Å: ${Math.round(user.stars * 100) / 100}‚≠ê`);
      }
      
             await adminForceReply(ctx, `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ USDT TRC-20 –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ ${amount}‚≠ê:`);
      return;
    }
    
    if (replyText.includes('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ USDT TRC-20 –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞')) {
      const address = text.trim();
      const amountMatch = replyText.match(/(\d+(?:\.\d+)?)/);
      if (!amountMatch) return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã!');
      
      const amount = parseFloat(amountMatch[1]);
      const request = await createWithdrawalRequest(ctx.from.id, 'usdt', amount, address);
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã
      await users.updateOne({ id: ctx.from.id }, { $inc: { stars: -amount } });
      
      await sendWithdrawalToChannel(request);
      
      ctx.reply(`‚úÖ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n` +
                `üè∑Ô∏è **ID –∑–∞—è–≤–∫–∏:** \`${request.id}\`\n` +
                `üí∞ **–°—É–º–º–∞:** ${amount}‚≠ê\n` +
                `üí∏ **–ö –ø–æ–ª—É—á–µ–Ω–∏—é:** ${request.netAmount}‚≠ê\n` +
                `‚è∞ **–°—Ç–∞—Ç—É—Å:** ‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n` +
                `–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24-48 —á–∞—Å–æ–≤.`, 
                { parse_mode: 'Markdown' });
      return;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
    if (replyText.includes('–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê') && replyText.includes('–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É')) {
      const ticket = await createSupportTicket(
        ctx.from.id,
        ctx.from.username,
        text
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      await sendTicketToChannel(ticket);
      
      ctx.reply(
        `‚úÖ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n` +
        `üé´ **ID –∑–∞—è–≤–∫–∏:** \`${ticket._id.toString().slice(-6)}\`\n` +
        `üìÖ **–î–∞—Ç–∞:** ${new Date().toLocaleString('ru-RU')}\n\n` +
        `üí¨ **–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n${text}\n\n` +
        `‚ö° –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –∏ —É–≤–µ–¥–æ–º–∏–º –æ —Å—Ç–∞—Ç—É—Å–µ.`,
        { 
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', 'my_tickets')],
            [Markup.button.callback('üõ†Ô∏è –ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏', 'support_menu')]
          ])
        }
      );
      return;
    }



    // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if (isAdmin(ctx.from.id)) {
      if (replyText.includes('–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∑–∞—è–≤–∫–µ')) {
        const ticketIdMatch = replyText.match(/#([a-f0-9]{6})/);
        if (!ticketIdMatch) {
          return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∑–∞—è–≤–∫–∏!');
        }
        
        const shortTicketId = ticketIdMatch[1];
        
        // –ò—â–µ–º –∑–∞—è–≤–∫—É –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ ObjectId)
        const tickets = await supportTickets.find({}).toArray();
        const ticket = tickets.find(t => t._id.toString().slice(-6) === shortTicketId);
        
        if (!ticket) {
          return ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º –∞–¥–º–∏–Ω–∞
        await updateTicketStatus(ticket._id, 'in_progress', text);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
          await bot.telegram.sendMessage(ticket.userId,
            `üí¨ *–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n` +
            `üé´ *–ü–æ –∑–∞—è–≤–∫–µ #${shortTicketId}:*\n` +
            `${text}\n\n` +
            `üìù *–í–∞—à–∞ –∏—Å—Ö–æ–¥–Ω–∞—è –∑–∞—è–≤–∫–∞:* ${ticket.message}\n\n` +
            `‚ö° –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å.`,
            { parse_mode: 'Markdown' }
          );
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
          await updateTicketInChannel(ticket._id);
          
          ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.username || ticket.userId}`);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
          ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        }
        return;
      }

      if (replyText.includes('–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏')) {
        // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        return ctx.reply('‚ùå –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      }

      if (replyText.includes('–û—Ç–≤–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è')) {
        const checkIdMatch = replyText.match(/#([a-f0-9]{6})/);
        if (!checkIdMatch) {
          return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø—Ä–æ–≤–µ—Ä–∫–∏!');
        }
        
        const shortCheckId = checkIdMatch[1];
        
        // –ò—â–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID
        const taskChecks_list = await taskChecks.find({}).toArray();
        const taskCheck = taskChecks_list.find(tc => tc._id.toString().slice(-6) === shortCheckId);
        
        if (!taskCheck) {
          return ctx.reply('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º –∞–¥–º–∏–Ω–∞
        await updateTaskCheckStatus(taskCheck._id, taskCheck.status, text);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
          await bot.telegram.sendMessage(taskCheck.userId,
            `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è*\n\n` +
            `üé´ *–ü–æ –ø—Ä–æ–≤–µ—Ä–∫–µ #${shortCheckId}:*\n` +
            `üìã *–ó–∞–¥–∞–Ω–∏–µ:* ${taskCheck.taskTitle}\n\n` +
            `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n${text}`,
            { parse_mode: 'Markdown' }
          );
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
          await updateTaskCheckInChannel(taskCheck._id);
          
          ctx.reply(`‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${taskCheck.username || taskCheck.userId}`);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
          ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        }
        return;
      }
      
      // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–∞
      if (text === '/reset_bonus' && isAdmin(ctx.from.id)) {
        await users.updateOne({ id: ctx.from.id }, { $set: { lastBonus: 0 } });
        return ctx.reply('‚úÖ –ë–æ–Ω—É—Å —Å–±—Ä–æ—à–µ–Ω, –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å');
      }

      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã...
      if (replyText.includes('–í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞')) {
        const parts = text.split(' ');
        if (parts.length < 2) {
          return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç–∏—Ç—É–ª–∞');
        }
        
        const userId = parts[0];
        const titleName = parts.slice(1).join(' '); // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞
        
        // –ò—â–µ–º —Ç–∏—Ç—É–ª –ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        let titleId = null;
        for (const [id, title] of Object.entries(TITLES)) {
          if (id === titleName || title.name.toLowerCase() === titleName.toLowerCase()) {
            titleId = id;
            break;
          }
        }
        
        if (!titleId) {
          const availableTitles = Object.entries(TITLES).map(([id, title]) => `${title.name} (${id})`).join('\n');
          return ctx.reply(`‚ùå –¢–∏—Ç—É–ª "${titleName}" –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã:\n${availableTitles}`);
        }

        await users.updateOne(
          { id: parseInt(userId) },
          { $addToSet: { titles: titleId } }
        );
        
        ctx.reply(`‚úÖ –¢–∏—Ç—É–ª "${TITLES[titleId].name}" –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}!`);
      }
      
      else if (replyText.includes('–ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª')) {
        const parts = text.split(' ');
        if (parts.length < 2) {
          return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç–∏—Ç—É–ª–∞');
        }
        
        const userId = parts[0];
        const titleName = parts.slice(1).join(' '); // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞
        
        // –ò—â–µ–º —Ç–∏—Ç—É–ª –ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        let titleId = null;
        for (const [id, title] of Object.entries(TITLES)) {
          if (id === titleName || title.name.toLowerCase() === titleName.toLowerCase()) {
            titleId = id;
            break;
          }
        }
        
        if (!titleId) {
          const availableTitles = Object.entries(TITLES).map(([id, title]) => `${title.name} (${id})`).join('\n');
          return ctx.reply(`‚ùå –¢–∏—Ç—É–ª "${titleName}" –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã:\n${availableTitles}`);
        }

        await users.updateOne(
          { id: parseInt(userId) },
          { $pull: { titles: titleId } }
        );
        
        ctx.reply(`‚úÖ –¢–∏—Ç—É–ª "${TITLES[titleId].name}" –∑–∞–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}!`);
      }
      
      else if (replyText.includes('–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')) {
        const userId = parseInt(text);
        const user = await users.findOne({ id: userId });
        
        if (!user) {
          return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }

        const userTitles = user.titles || [];
        let titlesList = `üë§ **–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:**\n\n`;
        
        if (userTitles.length === 0) {
          titlesList += 'üö´ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∏—Ç—É–ª–æ–≤';
        } else {
          userTitles.forEach(titleId => {
            if (TITLES[titleId]) {
              titlesList += `${TITLES[titleId].name}\n`;
            }
          });
        }

        ctx.reply(titlesList, { parse_mode: 'Markdown' });
      }

      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏
      else if (replyText.includes('–í—ã–¥–∞—á–∞ —Å—Ç–∞—Ç—É—Å–∞') && replyText.includes('ID –°–¢–ê–¢–£–°')) {
        const [userId, statusKey] = text.split(' ');
        if (!userId || !statusKey || !USER_STATUSES[statusKey]) {
          return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: owner, admin, moderator, vip_gold, vip, verified, member');
        }

        await users.updateOne(
          { id: parseInt(userId) },
          { $set: { status: statusKey } }
        );
        
        ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å "${USER_STATUSES[statusKey].name}" –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}!`);
      }
      
      else if (replyText.includes('–°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞') && replyText.includes('–æ–±—ã—á–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É')) {
        const userId = parseInt(text);
        if (!userId) {
          return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
        }

        await users.updateOne(
          { id: userId },
          { $set: { status: 'member' } }
        );
        
        ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–±—Ä–æ—à–µ–Ω –∫ –æ–±—ã—á–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É!`);
      }
      
      else if (replyText.includes('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞') && replyText.includes('–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞')) {
        const userId = parseInt(text);
        const user = await users.findOne({ id: userId });
        
        if (!user) {
          return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }

        const currentStatus = getUserStatus(user);
        ctx.reply(
          `üë§ **–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:**\n\n` +
          `${currentStatus.color} **${currentStatus.name}**\n` +
          `‚îî ${currentStatus.description}\n\n` +
          `üìä **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** ${currentStatus.priority}`,
          { parse_mode: 'Markdown' }
        );
      }

      // –†–∞—Å—Å—ã–ª–∫–∞
      else if (replyText.includes('—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')) {
        const allUsers = await users.find().toArray();
        let sent = 0;
        for (const u of allUsers) {
          try { 
            await ctx.telegram.sendMessage(u.id, `üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n${text}`); 
            sent++; 
          } catch {}
        }
        ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`);
      }

      // –ü—Ä–æ–º–æ–∫–æ–¥
      else if (userState.type === 'admin_create_promo') {
        await handlePromoCodeCreation(ctx, text, userState);
        return;
      }
      


      // –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã
      else if (replyText.includes('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥')) {
        const [id, stars] = text.trim().split(/\s+/);
        if (!id || isNaN(Number(stars))) {
          return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: ID 10');
        }
        await users.updateOne({ id: Number(id) }, { $inc: { stars: Number(stars) } });
        ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${id} –≤—ã–¥–∞–Ω–æ/–∑–∞–±—Ä–∞–Ω–æ ${stars} –∑–≤—ë–∑–¥.`);
      }

      // –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      else if (replyText.includes('–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')) {
        const id = text.trim();
        const refs = await users.find({ invitedBy: id }).toArray();
        if (!refs.length) {
          return ctx.reply('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.');
        }
        let msg = `üë• –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:\n\n`;
        refs.forEach((u, i) => { msg += `${i + 1}. ${u.id}\n`; });
        ctx.reply(msg);
      }
    }

    // –ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    else if (replyText.includes('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:')) {
      const code = text.trim().toUpperCase();
      const promo = await promocodes.findOne({ code });
      
      if (!promo) {
        return ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      }
      
      if (promo.used >= promo.max) {
        return ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω!');
      }

      const user = await getUser(ctx.from.id);
      const userPromos = user.usedPromos || [];
      
      if (userPromos.includes(code)) {
        return ctx.reply('‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!');
      }

      await users.updateOne(
        { id: ctx.from.id },
        { 
          $inc: { stars: promo.stars, promoCount: 1 },
          $addToSet: { usedPromos: code }
        }
      );
      await promocodes.updateOne({ code }, { $inc: { used: 1 } });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const newTitles = await checkAndAwardTitles(ctx.from.id);
      const newAchievements = await checkAndAwardAchievements(ctx.from.id);
      
      if (newTitles.length > 0 && newAchievements.length > 0) {
        ctx.reply(`üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${promo.stars} –∑–≤—ë–∑–¥! üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª! üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!`);
      } else if (newTitles.length > 0) {
        ctx.reply(`üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${promo.stars} –∑–≤—ë–∑–¥! üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª –ø–æ–ª—É—á–µ–Ω!`);
      } else if (newAchievements.length > 0) {
        ctx.reply(`üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${promo.stars} –∑–≤—ë–∑–¥! üéñÔ∏è ${newAchievements[0].name}!`);
      } else {
        ctx.reply(`üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${promo.stars} –∑–≤—ë–∑–¥!`);
      }
    }

  } catch (error) {
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!');
  }
});

bot.action('admin_panel', async (ctx) => {
  const adminText = '‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å* ‚öôÔ∏è\n\nüéõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

  await sendMessageWithPhoto(ctx, adminText, Markup.inlineKeyboard([
    [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast'), Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'admin_addpromo')],
    [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', 'admin_create_post'), Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
    [Markup.button.callback('‚≠ê –ó–≤—ë–∑–¥—ã', 'admin_stars'), Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'admin_refs')],
    [Markup.button.callback('üèÜ –¢–∏—Ç—É–ª—ã', 'admin_titles'), Markup.button.callback('üí´ –°—Ç–∞—Ç—É—Å—ã', 'admin_statuses')],
    [Markup.button.callback('üåæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞—Ä–º–∞', 'admin_farm'), Markup.button.callback('üí∞ –ö–æ–º–∏—Å—Å–∏—è', 'admin_commission')],
    [Markup.button.callback('üè¶ –†–µ–∑–µ—Ä–≤', 'admin_reserve'), Markup.button.callback('üóÑÔ∏è –°–±—Ä–æ—Å –ë–î', 'admin_reset_db')],
    [Markup.button.callback('‚ùì FAQ –ê–¥–º–∏–Ω–∞', 'admin_faq'), Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]));
});

bot.action('admin_cancel', async (ctx) => {
  try { await ctx.deleteMessage(); } catch (e) {}
  ctx.answerCbQuery();
      await sendMessageWithPhoto(ctx, 
    '‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å* ‚öôÔ∏è\n\nüéõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.inlineKeyboard([
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast'), Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'admin_addpromo')],
      [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', 'admin_create_post'), Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
      [Markup.button.callback('‚≠ê –ó–≤—ë–∑–¥—ã', 'admin_stars'), Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'admin_refs')],
      [Markup.button.callback('üèÜ –¢–∏—Ç—É–ª—ã', 'admin_titles'), Markup.button.callback('üí´ –°—Ç–∞—Ç—É—Å—ã', 'admin_statuses')],
      [Markup.button.callback('üåæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞—Ä–º–∞', 'admin_farm'), Markup.button.callback('üí∞ –ö–æ–º–∏—Å—Å–∏—è', 'admin_commission')],
      [Markup.button.callback('üè¶ –†–µ–∑–µ—Ä–≤', 'admin_reserve'), Markup.button.callback('üóÑÔ∏è –°–±—Ä–æ—Å –ë–î', 'admin_reset_db')],
      [Markup.button.callback('‚ùì FAQ –ê–¥–º–∏–Ω–∞', 'admin_faq'), Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]),
    false
  );
});

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞
bot.action('admin_create_post', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const postText = `üìù **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞** üìù\n\n` +
                   `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞:\n\n` +
                   `üì¢ **–û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç** - —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É)\n` +
                   `üéÆ **–ò–≥—Ä–æ–≤–æ–π –ø–æ—Å—Ç** - —Å –∫–Ω–æ–ø–∫–æ–π "–ò–≥—Ä–∞—Ç—å"\n` +
                   `üí¨ **–ß–∞—Ç –ø–æ—Å—Ç** - —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É"\n` +
                   `üé´ **–ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ—Å—Ç** - —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"`;

  await sendMessageWithPhoto(ctx, postText, Markup.inlineKeyboard([
    [Markup.button.callback('üì¢ –û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç', 'post_type_normal')],
    [Markup.button.callback('üéÆ –ò–≥—Ä–æ–≤–æ–π –ø–æ—Å—Ç', 'post_type_game')],
    [Markup.button.callback('üí¨ –ß–∞—Ç –ø–æ—Å—Ç', 'post_type_chat')],
    [Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ—Å—Ç', 'post_type_promo')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_panel')]
  ]));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤
bot.action('post_type_normal', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  userStates.set(ctx.from.id, { type: 'admin_create_post', postType: 'normal' });
  await adminForceReply(ctx, 'üì¢ **–û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ magnumtap:\n\nüí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ä–∞–∑–º–µ—Ç–∫–∞');
});

bot.action('post_type_game', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  userStates.set(ctx.from.id, { type: 'admin_create_post', postType: 'game' });
  await adminForceReply(ctx, 'üéÆ **–ò–≥—Ä–æ–≤–æ–π –ø–æ—Å—Ç**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ magnumtap:\n\nüí° –ö –ø–æ—Å—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "üéÆ –ò–≥—Ä–∞—Ç—å"');
});

bot.action('post_type_chat', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  userStates.set(ctx.from.id, { type: 'admin_create_post', postType: 'chat' });
  await adminForceReply(ctx, 'üí¨ **–ß–∞—Ç –ø–æ—Å—Ç**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ magnumtap:\n\nüí° –ö –ø–æ—Å—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "üí¨ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É"');
});

bot.action('post_type_promo', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  userStates.set(ctx.from.id, { type: 'admin_create_post', postType: 'promo' });
  await adminForceReply(ctx, 'üé´ **–ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ—Å—Ç**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ magnumtap:\n\nüí° –ö –ø–æ—Å—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "üé´ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
bot.action('post_add_button', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  console.log(`üîò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–∞–∂–∞–ª "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É"`);
  
  const currentState = userStates.get(ctx.from.id);
  console.log(`üìã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${JSON.stringify(currentState)}`);
  
  userStates.set(ctx.from.id, { 
    type: 'admin_post_button_input',
    postType: 'normal',
    postText: currentState?.postText || ''
  });
  
  console.log(`üíæ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${JSON.stringify(userStates.get(ctx.from.id))}`);
  
  await adminForceReply(ctx, 'üîò **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–¢–ï–ö–°–¢_–ö–ù–û–ü–ö–ò:–°–°–´–õ–ö–ê\n\n‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ —Å—Å—ã–ª–∫–æ–π!\n\n–ü—Ä–∏–º–µ—Ä—ã:\nüéÆ –ò–≥—Ä–∞—Ç—å:https://t.me/bot?start=game\nüí¨ –ß–∞—Ç:https://t.me/+Poy0ZtUoux1hMTMy\nüåê –°–∞–π—Ç:https://magnumtap.com');
  
  console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
});

bot.action('post_publish_now', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const userState = userStates.get(ctx.from.id);
  if (!userState || !userState.postText) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    userStates.delete(ctx.from.id);
    return;
  }
  
  const channelChatId = REQUIRED_CHANNEL ? `@${REQUIRED_CHANNEL}` : '@magnumtap';
  const botPhotoUrl = process.env.BOT_PHOTO_URL;
  
  if (!botPhotoUrl) {
    await ctx.reply('‚ùå –§–æ—Ç–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_PHOTO_URL');
    userStates.delete(ctx.from.id);
    return;
  }
  
  // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏
  await publishPostToChannel(ctx, userState.postText, null, 'normal', channelChatId, botPhotoUrl);
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏
bot.action('admin_statuses', async (ctx) => {
  let statusText = 'üí´ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏* üí´\n\n';
  statusText += 'üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:*\n\n';
  
  Object.entries(USER_STATUSES).forEach(([key, status]) => {
    statusText += `${status.color} *${status.name}*\n`;
    statusText += `‚îî ${status.description}\n\n`;
  });

  await sendMessageWithPhoto(ctx, statusText, Markup.inlineKeyboard([
    [Markup.button.callback('‚ûï –í—ã–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å', 'admin_give_status')],
    [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å', 'admin_remove_status')],
    [Markup.button.callback('üë§ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_user_status')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
  ]));
});

bot.action('admin_give_status', async (ctx) => {
  ctx.reply(
    '‚ûï *–í—ã–¥–∞—á–∞ —Å—Ç–∞—Ç—É—Å–∞*\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\nüìù –§–æ—Ä–º–∞—Ç: ID –°–¢–ê–¢–£–°\n\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n‚Ä¢ owner\n‚Ä¢ admin\n‚Ä¢ moderator\n‚Ä¢ vip\\_gold\n‚Ä¢ vip\n‚Ä¢ verified\n‚Ä¢ member',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true,
        input_field_placeholder: '–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789 vip'
      }
    }
  );
});

bot.action('admin_remove_status', async (ctx) => {
  ctx.reply(
    '‚ûñ *–°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞*\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫ –æ–±—ã—á–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É:',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true,
        input_field_placeholder: '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      }
    }
  );
});

bot.action('admin_user_status', async (ctx) => {
  ctx.reply(
    'üë§ *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞*\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true,
        input_field_placeholder: '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      }
    }
  );
});

// FAQ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
bot.action('admin_commission', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const commissionText = `üí∞ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ò–°–°–ò–ï–ô** üí∞\n\n` +
                        `üìä **–¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è:** ${EXCHANGE_COMMISSION}%\n\n` +
                        `üîÑ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—è:**\n` +
                        `‚Ä¢ –ü—Ä–∏ –æ–±–º–µ–Ω–µ 100ü™ô ‚Üí 10‚≠ê (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)\n` +
                        `‚Ä¢ –ü—Ä–∏ –æ–±–º–µ–Ω–µ 10‚≠ê ‚Üí 100ü™ô (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)\n` +
                        `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –≤–∑–∏–º–∞–µ—Ç—Å—è —Å –ø–æ–ª—É—á–∞–µ–º–æ–π –≤–∞–ª—é—Ç—ã\n\n` +
                        `üí° **–ü—Ä–∏–º–µ—Ä —Å –∫–æ–º–∏—Å—Å–∏–µ–π 5%:**\n` +
                        `‚Ä¢ 100ü™ô ‚Üí 9.5‚≠ê (–≤–º–µ—Å—Ç–æ 10‚≠ê)\n` +
                        `‚Ä¢ 10‚≠ê ‚Üí 95ü™ô (–≤–º–µ—Å—Ç–æ 100ü™ô)\n\n` +
                        `‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –æ–±–º–µ–Ω—ã!`;

  await sendMessageWithPhoto(ctx, commissionText, Markup.inlineKeyboard([
    [Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é', 'admin_change_commission')],
    [Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é (0%)', 'admin_reset_commission')],
    [Markup.button.callback('üìä –¢–µ—Å—Ç–æ–≤—ã–π –æ–±–º–µ–Ω', 'admin_test_exchange')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
  ]));
});

bot.action('admin_change_commission', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  userStates.set(ctx.from.id, { type: 'admin_change_commission' });
  await adminForceReply(ctx, 'üìù **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-50):\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 0 - –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏\n‚Ä¢ 5 - –∫–æ–º–∏—Å—Å–∏—è 5%\n‚Ä¢ 10 - –∫–æ–º–∏—Å—Å–∏—è 10%\n\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 20%');
});

bot.action('admin_reset_commission', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  EXCHANGE_COMMISSION = 0;
  await saveCommissionToDB(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ –ë–î
  await ctx.answerCbQuery('‚úÖ –ö–æ–º–∏—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –¥–æ 0%', { show_alert: true });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏ –∫–æ–º–∏—Å—Å–∏–∏
  setTimeout(async () => {
    const commissionText = `üí∞ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ò–°–°–ò–ï–ô** üí∞\n\n` +
                          `üìä **–¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è:** ${EXCHANGE_COMMISSION}%\n\n` +
                          `üîÑ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—è:**\n` +
                          `‚Ä¢ –ü—Ä–∏ –æ–±–º–µ–Ω–µ 100ü™ô ‚Üí 10‚≠ê (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)\n` +
                          `‚Ä¢ –ü—Ä–∏ –æ–±–º–µ–Ω–µ 10‚≠ê ‚Üí 100ü™ô (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)\n` +
                          `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –≤–∑–∏–º–∞–µ—Ç—Å—è —Å –ø–æ–ª—É—á–∞–µ–º–æ–π –≤–∞–ª—é—Ç—ã\n\n` +
                          `üí° **–ü—Ä–∏–º–µ—Ä —Å –∫–æ–º–∏—Å—Å–∏–µ–π 5%:**\n` +
                          `‚Ä¢ 100ü™ô ‚Üí 9.5‚≠ê (–≤–º–µ—Å—Ç–æ 10‚≠ê)\n` +
                          `‚Ä¢ 10‚≠ê ‚Üí 95ü™ô (–≤–º–µ—Å—Ç–æ 100ü™ô)\n\n` +
                          `‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –æ–±–º–µ–Ω—ã!`;

    await sendMessageWithPhoto(ctx, commissionText, Markup.inlineKeyboard([
      [Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é', 'admin_change_commission')],
      [Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é (0%)', 'admin_reset_commission')],
      [Markup.button.callback('üìä –¢–µ—Å—Ç–æ–≤—ã–π –æ–±–º–µ–Ω', 'admin_test_exchange')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
    ]));
  }, 1000);
});

bot.action('admin_test_exchange', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const testText = `üìä **–¢–ï–°–¢–û–í–´–ô –û–ë–ú–ï–ù** üìä\n\n` +
                  `üìà **–¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è:** ${EXCHANGE_COMMISSION}%\n\n` +
                  `üîÑ **–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞:**\n\n` +
                  `**–ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥:**\n` +
                  `‚Ä¢ 100ü™ô ‚Üí ${(10 * (1 - EXCHANGE_COMMISSION / 100)).toFixed(2)}‚≠ê\n` +
                  `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: ${EXCHANGE_COMMISSION}%\n\n` +
                  `**–ü—Ä–æ–¥–∞–∂–∞ –∑–≤—ë–∑–¥:**\n` +
                  `‚Ä¢ 10‚≠ê ‚Üí ${(100 * (1 - EXCHANGE_COMMISSION / 100)).toFixed(2)}ü™ô\n` +
                  `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: ${EXCHANGE_COMMISSION}%\n\n` +
                  `üí° **–§–æ—Ä–º—É–ª–∞:** –°—É–º–º–∞ √ó (1 - –∫–æ–º–∏—Å—Å–∏—è/100)`;

  await sendMessageWithPhoto(ctx, testText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–æ–º–∏—Å—Å–∏–∏', 'admin_commission')]
  ]));
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º
bot.action('admin_reserve', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');

  const reserveText = getReserveManagementText();

  await sendMessageWithPhoto(ctx, reserveText, Markup.inlineKeyboard([
    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Magnum Coin', 'admin_add_magnum_reserve')],
    [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Magnum Coin', 'admin_remove_magnum_reserve')],
    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_add_stars_reserve')],
    [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_remove_stars_reserve')],
    [Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑–µ—Ä–≤', 'admin_reset_reserve')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
  ]));
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Magnum Coin –≤ —Ä–µ–∑–µ—Ä–≤
bot.action('admin_add_magnum_reserve', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');

  userStates.set(ctx.from.id, { type: 'admin_add_magnum_reserve' });
  await adminForceReply(ctx, '‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Magnum Coin –≤ —Ä–µ–∑–µ—Ä–≤**\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Magnum Coin –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤:\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 1000 - –¥–æ–±–∞–≤–∏—Ç—å 1000 Magnum Coin\n‚Ä¢ 5000 - –¥–æ–±–∞–≤–∏—Ç—å 5000 Magnum Coin\n\n‚ö†Ô∏è –≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞!');
});

// –£–¥–∞–ª–µ–Ω–∏–µ Magnum Coin –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
bot.action('admin_remove_magnum_reserve', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');

  userStates.set(ctx.from.id, { type: 'admin_remove_magnum_reserve' });
  await adminForceReply(ctx, '‚ûñ **–£–¥–∞–ª–µ–Ω–∏–µ Magnum Coin –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Magnum Coin –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞:\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 1000 - —É–±—Ä–∞—Ç—å 1000 Magnum Coin\n‚Ä¢ 5000 - —É–±—Ä–∞—Ç—å 5000 Magnum Coin\n\n‚ö†Ô∏è –≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞!');
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥ –≤ —Ä–µ–∑–µ—Ä–≤
bot.action('admin_add_stars_reserve', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');

  userStates.set(ctx.from.id, { type: 'admin_add_stars_reserve' });
  await adminForceReply(ctx, '‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥ –≤ —Ä–µ–∑–µ—Ä–≤**\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤:\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 100 - –¥–æ–±–∞–≤–∏—Ç—å 100 –∑–≤—ë–∑–¥\n‚Ä¢ 500 - –¥–æ–±–∞–≤–∏—Ç—å 500 –∑–≤—ë–∑–¥\n\n‚ö†Ô∏è –≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞!');
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
bot.action('admin_remove_stars_reserve', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');

  userStates.set(ctx.from.id, { type: 'admin_remove_stars_reserve' });
  await adminForceReply(ctx, '‚ûñ **–£–¥–∞–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞:\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 100 - —É–±—Ä–∞—Ç—å 100 –∑–≤—ë–∑–¥\n‚Ä¢ 500 - —É–±—Ä–∞—Ç—å 500 –∑–≤—ë–∑–¥\n\n‚ö†Ô∏è –≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞!');
});

// –°–±—Ä–æ—Å —Ä–µ–∑–µ—Ä–≤–∞
bot.action('admin_reset_reserve', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');

  RESERVE_MAGNUM_COINS = 1000000000;
  RESERVE_STARS = 10000;
  await saveReserveToDB();
  await ctx.answerCbQuery('‚úÖ –†–µ–∑–µ—Ä–≤ —Å–±—Ä–æ—à–µ–Ω –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º (–∫—É—Ä—Å: 100ü™ô = 0.001‚≠ê)', { show_alert: true });

  setTimeout(async () => {
    const reserveText = getReserveManagementText();

    await sendMessageWithPhoto(ctx, reserveText, Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Magnum Coin', 'admin_add_magnum_reserve')],
      [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Magnum Coin', 'admin_remove_magnum_reserve')],
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_add_stars_reserve')],
      [Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã', 'admin_remove_stars_reserve')],
      [Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑–µ—Ä–≤', 'admin_reset_reserve')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
    ]));
  }, 1000);
});

// –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot.action('admin_reset_db', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  await ctx.answerCbQuery('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.', { show_alert: true });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  userStates.set(ctx.from.id, { type: 'admin_confirm_reset_db' });

  setTimeout(async () => {
    await sendMessageWithPhoto(ctx, 
      'üóÑÔ∏è **–°–ë–†–û–° –ë–ê–ó–´ –î–ê–ù–ù–´–•** üóÑÔ∏è\n\n' +
      '‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n' +
      '‚Ä¢ –£–¥–∞–ª–∏—Ç –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' +
      '‚Ä¢ –£–¥–∞–ª–∏—Ç –í–°–ï –ø—Ä–æ–º–æ–∫–æ–¥—ã\n' +
      '‚Ä¢ –£–¥–∞–ª–∏—Ç –í–°–ï –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥\n' +
      '‚Ä¢ –£–¥–∞–ª–∏—Ç –í–°–ï —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n' +
      '‚Ä¢ –£–¥–∞–ª–∏—Ç –í–°–ï –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π\n' +
      '‚Ä¢ –£–¥–∞–ª–∏—Ç –í–°–ï –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n' +
      '‚Ä¢ –°–±—Ä–æ—Å–∏—Ç —Ä–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏\n\n' +
      'üîí **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π –æ—Å—Ç–∞–Ω–µ—Ç—Å—è!**\n\n' +
      '‚ùì **–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?**',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–ê, —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', 'admin_confirm_reset_db')],
        [Markup.button.callback('‚ùå –ù–ï–¢, –æ—Ç–º–µ–Ω–∏—Ç—å', 'admin_panel')]
      ])
    );
  }, 1000);
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot.action('admin_confirm_reset_db', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');

  await ctx.answerCbQuery('üóÑÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', { show_alert: true });

  try {
    const result = await resetDatabase();
    
    if (result.success) {
      await ctx.answerCbQuery(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!\n\n–£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –∑–∞–ø–∏—Å–µ–π`, { show_alert: true });
      
      setTimeout(async () => {
        await sendMessageWithPhoto(ctx, 
          'üóÑÔ∏è **–°–ë–†–û–° –ë–ê–ó–´ –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù** üóÑÔ∏è\n\n' +
          `‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: **${result.deletedCount}** –∑–∞–ø–∏—Å–µ–π\n\n` +
          'üìã **–ß—Ç–æ –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ:**\n' +
          '‚Ä¢ üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n' +
          '‚Ä¢ üé´ –í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã\n' +
          '‚Ä¢ üí∏ –í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥\n' +
          '‚Ä¢ üé´ –í—Å–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n' +
          '‚Ä¢ üìã –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π\n' +
          '‚Ä¢ üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n' +
          '‚Ä¢ üè¶ –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)\n\n' +
          'üîÑ **–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —á–∏—Å—Ç–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!**',
          Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
          ])
        );
      }, 1000);
    } else {
      await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${result.error}`, { show_alert: true });
      
      setTimeout(async () => {
        await sendMessageWithPhoto(ctx, 
          '‚ùå **–û–®–ò–ë–ö–ê –°–ë–†–û–°–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•** ‚ùå\n\n' +
          `üîç **–ü—Ä–∏—á–∏–Ω–∞:** ${result.error}\n\n` +
          'üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n' +
          '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB\n' +
          '‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞\n' +
          '‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
          Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
          ])
        );
      }, 1000);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–±—Ä–æ—Å–∞ –ë–î:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', { show_alert: true });
  }

  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  userStates.delete(ctx.from.id);
});

bot.action('admin_faq', async (ctx) => {
  const adminFaqText = `‚ùì *FAQ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏* ‚ùì

üéõÔ∏è *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*

üì¢ *–†–∞—Å—Å—ã–ª–∫–∞* - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚îú –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
‚îî –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

üé´ **–ü—Ä–æ–º–æ–∫–æ–¥** - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚îú –§–æ—Ä–º–∞—Ç: –ù–ê–ó–í–ê–ù–ò–ï –ú–ê–ì–ù–£–ú_–ö–û–ò–ù–´ –õ–ò–ú–ò–¢
‚îú –ü—Ä–∏–º–µ—Ä: NEWCODE 25 100
‚îî –°–æ–∑–¥–∞—Å—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 25 Magnum Coin —Å –ª–∏–º–∏—Ç–æ–º 100 –∞–∫—Ç–∏–≤–∞—Ü–∏–π

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚îú –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚îú –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é
‚îî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º –∏ –∑–∞–¥–∞–Ω–∏—è–º

‚≠ê **–ó–≤—ë–∑–¥—ã** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚îú –§–æ—Ä–º–∞—Ç: ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ö–û–õ–ò–ß–ï–°–¢–í–û
‚îú –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ - –¥–æ–±–∞–≤–∏—Ç—å
‚îî –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ - –æ—Ç–Ω—è—Ç—å

üë• **–†–µ—Ñ–µ—Ä–∞–ª—ã** - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚îú –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚îî –ü–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –∏–º –ª—é–¥–µ–π

üèÜ **–¢–∏—Ç—É–ª—ã** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏
‚îú –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç–∏—Ç—É–ª–æ–≤
‚îú –í—ã–¥–∞—á–∞/—É–¥–∞–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–æ–≤
‚îî –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏—Ç—É–ª–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üí´ **–°—Ç–∞—Ç—É—Å—ã** - –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
‚îú üëë –í–ª–∞–¥–µ–ª–µ—Ü - –≤—ã—Å—à–∏–π —Å—Ç–∞—Ç—É—Å
‚îú ‚ö° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
‚îú üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä - –º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚îú üíé VIP Gold - –ø—Ä–µ–º–∏—É–º –≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è
‚îú üí´ VIP - –æ–±—ã—á–Ω—ã–π –ø—Ä–µ–º–∏—É–º
‚îú ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
‚îî üéÆ –£—á–∞—Å—Ç–Ω–∏–∫ - –±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å

üîß **–ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–æ–≤:**
‚Ä¢ –í—ã–¥–∞—Ç—å: ID –°–¢–ê–¢–£–° (123456789 vip)
‚Ä¢ –£–±—Ä–∞—Ç—å: —Å–±—Ä–æ—Å–∏—Ç—å –¥–æ –æ–±—ã—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
- –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
- –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –º–∞—Å—Å–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫—É`;

  await sendMessageWithPhoto(ctx, adminFaqText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_panel')]
  ]));
});

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
function adminForceReply(ctx, text) {
  return ctx.reply(text + '\n\nüëÜ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ', {
    reply_markup: {
      force_reply: true,
      selective: true,
      input_field_placeholder: '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç...',
      inline_keyboard: [[
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_cancel' }
      ]]
    }
  });
}

// –†–∞—Å—Å—ã–ª–∫–∞
bot.action('admin_broadcast', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  await adminForceReply(ctx, 'üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
});

// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
bot.action('admin_addpromo', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const promoText = `üé´ **–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞** üé´\n\n` +
                   `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n\n` +
                   `‚≠ê **–ó–≤—ë–∑–¥—ã** - –≤–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–æ–∫\n` +
                   `ü™ô **Magnum Coin** - –≤–∞–ª—é—Ç–∞ —Ñ–∞—Ä–º–∞ –∏ —É—Ä–æ–≤–Ω–µ–π\n` +
                   `üèÜ **–¢–∏—Ç—É–ª** - –æ—Å–æ–±–æ–µ –∑–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞\n` +
                   `üí´ **–°—Ç–∞—Ç—É—Å** - —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`;

  await sendMessageWithPhoto(ctx, promoText, Markup.inlineKeyboard([
    [Markup.button.callback('‚≠ê –ó–≤—ë–∑–¥—ã', 'promo_type_stars')],
    [Markup.button.callback('ü™ô Magnum Coin', 'promo_type_magnum')],
    [Markup.button.callback('üèÜ –¢–∏—Ç—É–ª', 'promo_type_title')],
    [Markup.button.callback('üí´ –°—Ç–∞—Ç—É—Å', 'promo_type_status')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_panel')]
  ]));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∏–ø–æ–≤ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
bot.action('promo_type_stars', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  userStates.set(ctx.from.id, { type: 'admin_create_promo', rewardType: 'stars' });
  await adminForceReply(ctx, '‚≠ê **–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –∑–≤—ë–∑–¥—ã**\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–ê–ó–í–ê–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –õ–ò–ú–ò–¢\n\n–ü—Ä–∏–º–µ—Ä: STARS100 100 50\n(–∫–æ–¥ STARS100 –Ω–∞ 100 –∑–≤—ë–∑–¥ —Å –ª–∏–º–∏—Ç–æ–º 50 –∞–∫—Ç–∏–≤–∞—Ü–∏–π)');
});

bot.action('promo_type_magnum', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  userStates.set(ctx.from.id, { type: 'admin_create_promo', rewardType: 'magnum' });
  await adminForceReply(ctx, 'ü™ô **–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ Magnum Coin**\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–ê–ó–í–ê–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –õ–ò–ú–ò–¢\n\n–ü—Ä–∏–º–µ—Ä: COIN50 50 100\n(–∫–æ–¥ COIN50 –Ω–∞ 50 Magnum Coin —Å –ª–∏–º–∏—Ç–æ–º 100 –∞–∫—Ç–∏–≤–∞—Ü–∏–π)');
});

bot.action('promo_type_title', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  userStates.set(ctx.from.id, { type: 'admin_create_promo', rewardType: 'title' });
  await adminForceReply(ctx, 'üèÜ **–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Ç–∏—Ç—É–ª**\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–ê–ó–í–ê–ù–ò–ï –¢–ò–¢–£–õ –õ–ò–ú–ò–¢\n\n–ü—Ä–∏–º–µ—Ä: HERO "–ì–µ—Ä–æ–π –¥–Ω—è" 20\n(–∫–æ–¥ HERO –¥–∞—é—â–∏–π —Ç–∏—Ç—É–ª "–ì–µ—Ä–æ–π –¥–Ω—è" —Å –ª–∏–º–∏—Ç–æ–º 20 –∞–∫—Ç–∏–≤–∞—Ü–∏–π)');
});

bot.action('promo_type_status', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  userStates.set(ctx.from.id, { type: 'admin_create_promo', rewardType: 'status' });
  await adminForceReply(ctx, 'üí´ **–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å—Ç–∞—Ç—É—Å**\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–ê–ó–í–ê–ù–ò–ï –°–¢–ê–¢–£–° –õ–ò–ú–ò–¢\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: vip, moderator, elite\n\n–ü—Ä–∏–º–µ—Ä: VIP30 vip 30\n(–∫–æ–¥ VIP30 –¥–∞—é—â–∏–π —Å—Ç–∞—Ç—É—Å VIP —Å –ª–∏–º–∏—Ç–æ–º 30 –∞–∫—Ç–∏–≤–∞—Ü–∏–π)');
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.action('admin_stats', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  const totalUsers = await users.countDocuments();
  const totalStars = await users.aggregate([{ $group: { _id: null, total: { $sum: '$stars' } } }]).toArray();
  const totalInvited = await users.aggregate([{ $group: { _id: null, total: { $sum: '$invited' } } }]).toArray();
  
  await sendMessageWithPhoto(ctx,
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n` +
    `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
    `‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars[0]?.total || 0}\n` +
    `ü§ù –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${totalInvited[0]?.total || 0}`,
    Markup.inlineKeyboard([[Markup.button.callback('‚öôÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]])
  );
});

// –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã
bot.action('admin_stars', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  await adminForceReply(ctx, '‚≠ê –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 50):');
});

// –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('admin_refs', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  userStates.set(ctx.from.id, { type: 'admin_view_referrals' });
  await adminForceReply(ctx, 'üë• **–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n\nüí° –ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 123456789 - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 123456789\n‚Ä¢ 987654321 - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 987654321\n\n‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
});

// –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
bot.action('admin_titles', async (ctx) => {
  let titlesList = 'üèÜ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏—Ç—É–ª–∞—Ö** üèÜ\n\n';
  titlesList += '**–û–ë–´–ß–ù–´–ï –¢–ò–¢–£–õ–´:**\n';
  
  Object.entries(TITLES).forEach(([id, title]) => {
    if (title.condition !== 'secret') {
      titlesList += `${title.icon} ${title.name}\n${title.description}\n\n`;
    }
  });
  
  titlesList += '**–°–ï–ö–†–ï–¢–ù–´–ï –¢–ò–¢–£–õ–´:**\n';
  Object.entries(TITLES).forEach(([id, title]) => {
    if (title.condition === 'secret') {
      titlesList += `${title.icon} ${title.name}\n${title.description}\n\n`;
    }
  });

  await sendMessageWithPhoto(ctx, titlesList, Markup.inlineKeyboard([
    [Markup.button.callback('‚ûï –í—ã–¥–∞—Ç—å —Ç–∏—Ç—É–ª', 'admin_give_title')],
    [Markup.button.callback('‚ûñ –ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª', 'admin_remove_title')],
    [Markup.button.callback('üìã –¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_user_titles')],
    [Markup.button.callback('‚öôÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]
  ]));
});

bot.action('admin_give_title', async (ctx) => {
  ctx.reply(
    '‚ûï **–í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID —Ç–∏—Ç—É–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n`123456789 vip_elite`',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true
      }
    }
  );
});

bot.action('admin_remove_title', async (ctx) => {
  ctx.reply(
    '‚ûñ **–ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID —Ç–∏—Ç—É–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n`123456789 vip_elite`',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true
      }
    }
  );
});

bot.action('admin_user_titles', async (ctx) => {
  ctx.reply(
    'üìã **–¢–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true
      }
    }
  );
});



// –ë–∏—Ä–∂–∞
bot.action('exchange', async (ctx) => {
  const user = await getUser(ctx.from.id, ctx);
  const starsBalance = Math.round((user.stars || 0) * 100) / 100;
  const magnumCoinsBalance = Math.round((user.magnumCoins || 0) * 100) / 100;
  
  const exchangeText = `üìà **–ë–ò–†–ñ–ê MAGNUMTAP** üìà\n\n` +
                      `üí∞ **–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:**\n` +
                      `[ü™ô ${magnumCoinsBalance}] Magnum Coin\n` +
                      `[‚≠ê ${starsBalance}] –∑–≤—ë–∑–¥\n\n` +
                      `üîÑ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**\n\n` +
                      `üíé **–û–±–º–µ–Ω –≤–∞–ª—é—Ç:**\n` +
                      `‚Ä¢ [ü™ô 100] ‚Üí [‚≠ê 10] Telegram Stars\n` +
                      `‚Ä¢ –î—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã (—Å–∫–æ—Ä–æ)\n\n` +
                      `üìä **P2P —Ç–æ—Ä–≥–æ–≤–ª—è:**\n` +
                      `‚Ä¢ –û–±–º–µ–Ω —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n` +
                      `‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ —ç—Å–∫—Ä–æ—É\n` +
                      `‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n\n` +
                      `üíπ **–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:**\n` +
                      `‚Ä¢ –°—Ç–µ–π–∫–∏–Ω–≥ Magnum Coin (5% –≤ –º–µ—Å—è—Ü)\n` +
                      `‚Ä¢ –ü—É–ª—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n` +
                      `‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–µ –±–æ—Ç—ã\n\n` +
                      `‚ö†Ô∏è **P2P –∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:** –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üíé –û–±–º–µ–Ω –≤–∞–ª—é—Ç', 'exchange_currency')],
    [Markup.button.callback('üë• P2P –¢–æ—Ä–≥–æ–≤–ª—è', 'exchange_p2p')],
    [Markup.button.callback('üíπ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'exchange_invest')],
    [Markup.button.callback('üìä –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞', 'exchange_orders')],
    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]);
  
  await sendMessageWithPhoto(ctx, exchangeText, keyboard);
});

// –û–±–º–µ–Ω –≤–∞–ª—é—Ç
bot.action('exchange_currency', async (ctx) => {
  console.log(`üîò exchange_currency: –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
  await updateExchangeInterface(ctx, ctx.from.id);
});

// P2P —Ç–æ—Ä–≥–æ–≤–ª—è
bot.action('exchange_p2p', async (ctx) => {
  const p2pText = `üë• **P2P –¢–û–†–ì–û–í–õ–Ø** üë•\n\n` +
                  `ü§ù **–ß—Ç–æ —Ç–∞–∫–æ–µ P2P:**\n` +
                  `–ü—Ä—è–º–æ–π –æ–±–º–µ–Ω –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —ç—Å–∫—Ä–æ—É.\n\n` +
                  `üìã **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n` +
                  `1Ô∏è‚É£ –°–æ–∑–¥–∞–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n` +
                  `2Ô∏è‚É£ –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è\n` +
                  `3Ô∏è‚É£ –°—Ä–µ–¥—Å—Ç–≤–∞ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –≤ —ç—Å–∫—Ä–æ—É\n` +
                  `4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ\n` +
                  `5Ô∏è‚É£ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n` +
                  `üí∞ **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã:**\n` +
                  `‚Ä¢ ‚≠ê/USDT TRC-20\n` +
                  `‚Ä¢ ‚≠ê/TON\n` +
                  `‚Ä¢ ‚≠ê/Telegram Stars\n\n` +
                  `‚ö†Ô∏è **–°–∫–æ—Ä–æ:** P2P —Ç–æ—Ä–≥–æ–≤–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üí∞ –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', 'create_p2p_offer')],
    [Markup.button.callback('üìã –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', 'view_p2p_offers')],
    [Markup.button.callback('üìä –ú–æ–∏ —Å–¥–µ–ª–∫–∏', 'my_p2p_deals')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –Ω–∞ –±–∏—Ä–∂—É', 'exchange')]
  ]);
  
  await sendMessageWithPhoto(ctx, p2pText, keyboard);
});

// –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
bot.action('exchange_invest', async (ctx) => {
  const investText = `üíπ **–ò–ù–í–ï–°–¢–ò–¶–ò–ò** üíπ\n\n` +
                    `üìà **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n` +
                    `üè¶ **–°—Ç–µ–π–∫–∏–Ω–≥ –∑–≤—ë–∑–¥:**\n` +
                    `‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 5% –≤ –º–µ—Å—è—Ü\n` +
                    `‚Ä¢ –ú–∏–Ω–∏–º—É–º: 1000‚≠ê\n` +
                    `‚Ä¢ –°—Ä–æ–∫: –æ—Ç 30 –¥–Ω–µ–π\n\n` +
                    `üíß **–ü—É–ª—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:**\n` +
                    `‚Ä¢ –ü–∞—Ä–∞: ‚≠ê/USDT\n` +
                    `‚Ä¢ APY: –¥–æ 12%\n` +
                    `‚Ä¢ –†–∏—Å–∫: —Å—Ä–µ–¥–Ω–∏–π\n\n` +
                    `ü§ñ **–¢–æ—Ä–≥–æ–≤—ã–µ –±–æ—Ç—ã:**\n` +
                    `‚Ä¢ Grid-–±–æ—Ç: 2-8% –≤ –º–µ—Å—è—Ü\n` +
                    `‚Ä¢ DCA-–±–æ—Ç: —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç\n` +
                    `‚Ä¢ –ö–æ–ø–∏-—Ç—Ä–µ–π–¥–∏–Ω–≥: —Å–ª–µ–¥—É–π—Ç–µ –∑–∞ –ø—Ä–æ—Ñ–∏\n\n` +
                    `‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Å–≤—è–∑–∞–Ω—ã —Å —Ä–∏—Å–∫–∞–º–∏!`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üè¶ –°—Ç–µ–π–∫–∏–Ω–≥', 'staking'), Markup.button.callback('üíß –ü—É–ª—ã', 'liquidity_pools')],
    [Markup.button.callback('ü§ñ –¢–æ—Ä–≥–æ–≤—ã–µ –±–æ—Ç—ã', 'trading_bots')],
    [Markup.button.callback('üìä –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'my_investments')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –Ω–∞ –±–∏—Ä–∂—É', 'exchange')]
  ]);
  
  await sendMessageWithPhoto(ctx, investText, keyboard);
});

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
bot.action('exchange_orders', async (ctx) => {
  ctx.answerCbQuery('üìä –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!', { show_alert: true });
});

bot.action('buy_usdt', async (ctx) => {
  ctx.answerCbQuery('üíµ –ü–æ–∫—É–ø–∫–∞ USDT - —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!', { show_alert: true });
});

bot.action('buy_ton', async (ctx) => {
  ctx.answerCbQuery('üíé –ü–æ–∫—É–ø–∫–∞ TON - —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!', { show_alert: true });
});



bot.action('insufficient_funds', async (ctx) => {
  const user = await getUser(ctx.from.id, ctx);
  const magnumCoinsBalance = Math.round((user.magnumCoins || 0) * 100) / 100;
  
  ctx.answerCbQuery(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –£ –≤–∞—Å: ${magnumCoinsBalance}ü™ô, –Ω—É–∂–Ω–æ: 100ü™ô\n\n–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ Magnum Coin —á–µ—Ä–µ–∑ —Ñ–∞—Ä–º –∏ –±–æ–Ω—É—Å—ã!`, { show_alert: true });
});

bot.action('sell_tg_stars', async (ctx) => {
  console.log('üîò sell_tg_stars: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω');
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞
  const user = await getUser(ctx.from.id, ctx);
  const now = Math.floor(Date.now() / 1000);
  const lastExchange = user.lastExchange || 0;
  const timeSinceLastExchange = now - lastExchange;
  
  if (timeSinceLastExchange < 5) { // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–º–µ–Ω–∞–º–∏
    return ctx.answerCbQuery('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–º–µ–Ω–∞–º–∏', { show_alert: true });
  }
  
  const starsBalance = Math.round((user.stars || 0) * 100) / 100;
  
  console.log(`üîò sell_tg_stars: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${starsBalance}‚≠ê`);
  
  if (starsBalance < 10) {
    console.log(`üîò sell_tg_stars: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥`);
    return ctx.answerCbQuery(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –£ –≤–∞—Å: ${starsBalance}‚≠ê, –Ω—É–∂–Ω–æ: 10‚≠ê`, { show_alert: true });
  }
  
  // –û–±–º–µ–Ω–∏–≤–∞–µ–º 10 –∑–≤—ë–∑–¥ –Ω–∞ Magnum Coin —Å —É—á–µ—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫—É—Ä—Å–∞ –∏ –∫–æ–º–∏—Å—Å–∏–∏
  const starsToMagnumRate = RESERVE_MAGNUM_COINS / RESERVE_STARS;
  const coinsToReceive = 10 * starsToMagnumRate * (1 - EXCHANGE_COMMISSION / 100);
  console.log(`üîò sell_tg_stars: –û–±–º–µ–Ω–∏–≤–∞–µ–º 10‚≠ê ‚Üí ${coinsToReceive.toFixed(2)}ü™ô (–∫—É—Ä—Å: ${starsToMagnumRate.toFixed(4)})`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–∞
  if (coinsToReceive <= 0) {
    return ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  const reserveUpdated = updateReserve('stars', 'magnumCoins', 10, coinsToReceive);
  if (!reserveUpdated) {
    return ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–µ–∑–µ—Ä–≤–µ –±–∏—Ä–∂–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
  }
  
  await users.updateOne(
    { id: ctx.from.id },
    { 
      $inc: { stars: -10, magnumCoins: coinsToReceive },
      $set: { lastExchange: Math.floor(Date.now() / 1000) }
    }
  );
  invalidateUserCache(ctx.from.id);
  invalidateBotStatsCache();
  
  const commissionText = EXCHANGE_COMMISSION > 0 ? `\nüí∞ –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(10 * starsToMagnumRate * (EXCHANGE_COMMISSION / 100))}ü™ô (${EXCHANGE_COMMISSION}%)` : '';
  const notificationText = `‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
                          `‚≠ê –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: 10‚≠ê\n` +
                          `üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${formatNumber(coinsToReceive)}ü™ô` +
                          `${commissionText}\n` +
                          `üìä –ö—É—Ä—Å: 1‚≠ê = ${formatNumber(starsToMagnumRate)}ü™ô`;
  await ctx.answerCbQuery(notificationText, { show_alert: true });
  
  console.log(`üîò sell_tg_stars: –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç
  setTimeout(async () => {
    await updateExchangeInterface(ctx, ctx.from.id);
  }, 1000);
});

bot.action('insufficient_stars', async (ctx) => {
  const user = await getUser(ctx.from.id, ctx);
  const starsBalance = Math.round((user.stars || 0) * 100) / 100;
  
  ctx.answerCbQuery(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –£ –≤–∞—Å: ${starsBalance}‚≠ê, –Ω—É–∂–Ω–æ: 10‚≠ê\n\n–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–∏—è –∏ –º–∞–π–Ω–µ—Ä!`, { show_alert: true });
});

bot.action('create_p2p_offer', async (ctx) => {
  ctx.answerCbQuery('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ P2P –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!', { show_alert: true });
});

bot.action('view_p2p_offers', async (ctx) => {
  ctx.answerCbQuery('üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!', { show_alert: true });
});

bot.action('my_p2p_deals', async (ctx) => {
  ctx.answerCbQuery('üìä –ú–æ–∏ P2P —Å–¥–µ–ª–∫–∏ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!', { show_alert: true });
});

bot.action('staking', async (ctx) => {
  ctx.answerCbQuery('üè¶ –°—Ç–µ–π–∫–∏–Ω–≥ - —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!', { show_alert: true });
});

bot.action('liquidity_pools', async (ctx) => {
  ctx.answerCbQuery('üíß –ü—É–ª—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!', { show_alert: true });
});

bot.action('trading_bots', async (ctx) => {
  ctx.answerCbQuery('ü§ñ –¢–æ—Ä–≥–æ–≤—ã–µ –±–æ—Ç—ã - —Å–∫–æ—Ä–æ!', { show_alert: true });
});

bot.action('my_investments', async (ctx) => {
  ctx.answerCbQuery('üìä –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!', { show_alert: true });
});

bot.action('sponsor_tasks', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(ctx);
  if (!isSubscribed) {
    await showSubscriptionMessage(ctx);
    return;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
  showSponsorTask(ctx, 0);
});

async function showSponsorTask(ctx, taskIndex) {
  if (taskIndex >= SPONSOR_TASKS.length) {
    return await sendMessageWithPhoto(ctx, 
      'üéâ *–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!*\n\n–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!',
      Markup.inlineKeyboard([
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
      ])
    );
  }

  const task = SPONSOR_TASKS[taskIndex];
  const user = await getUser(ctx.from.id);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  const pendingCheck = await taskChecks.findOne({
    userId: ctx.from.id,
    taskId: task.id,
    status: 'pending'
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
  const completedTask = await taskChecks.findOne({
    userId: ctx.from.id,
    taskId: task.id,
    status: 'approved'
  });

  let taskText = `üìã *–ó–∞–¥–∞–Ω–∏–µ ${taskIndex + 1}/${SPONSOR_TASKS.length}*\n\n`;
  taskText += `*${task.title}*\n\n`;
  taskText += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.description}\n`;
  taskText += `üéÅ *–ù–∞–≥—Ä–∞–¥–∞:* ${task.reward} ü™ô Magnum Coin\n\n`;
  
  if (completedTask) {
    taskText += `‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!*\n\n`;
  } else if (pendingCheck) {
    taskText += `‚è≥ *–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ*\n–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\\.\n\n`;
  } else {
    taskText += `üìã *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:* ${task.instruction}\n\n`;
  }

  const buttons = [];
  
  if (completedTask) {
    // –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    if (taskIndex < SPONSOR_TASKS.length - 1) {
      buttons.push([Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', `sponsor_task_${taskIndex + 1}`)]);
    }
  } else if (pendingCheck) {
    // –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ - —Ç–æ–ª—å–∫–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if (taskIndex > 0) {
      buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ', `sponsor_task_${taskIndex - 1}`)]);
    }
    if (taskIndex < SPONSOR_TASKS.length - 1) {
      buttons.push([Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ', `sponsor_task_${taskIndex + 1}`)]);
    }
  } else {
    // –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å
    buttons.push([
      Markup.button.url('üîó –ü–µ—Ä–µ–π—Ç–∏', task.link),
      Markup.button.callback('‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª', `task_complete_${task.id}`)
    ]);
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    if (taskIndex > 0) {
      buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ', `sponsor_task_${taskIndex - 1}`)]);
    }
    if (taskIndex < SPONSOR_TASKS.length - 1) {
      buttons.push([Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ', `sponsor_task_${taskIndex + 1}`)]);
    }
  }
  
  buttons.push([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]);

  await sendMessageWithPhoto(ctx, taskText, Markup.inlineKeyboard(buttons));
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–∞—Ä–º–∞
bot.action('admin_farm', async (ctx) => {
  const statusText = farmCooldownEnabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω';
  const farmText = `üåæ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞—Ä–º–∞** üåæ

‚è±Ô∏è **–ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞:** ${statusText}
üïê **–í—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞:** ${farmCooldownSeconds} —Å–µ–∫—É–Ω–¥

üéõÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**`;

  await sendMessageWithPhoto(ctx, farmText, Markup.inlineKeyboard([
    [Markup.button.callback('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫—É–ª–¥–∞—É–Ω', 'admin_farm_toggle')],
    [Markup.button.callback('‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', 'admin_farm_time')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]
  ]));
});

bot.action('admin_farm_toggle', async (ctx) => {
  try {
    farmCooldownEnabled = !farmCooldownEnabled;
    const statusText = farmCooldownEnabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω';
    
    await ctx.answerCbQuery(`‚úÖ –ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞ ${farmCooldownEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}!`);
    
    const farmText = `üåæ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞—Ä–º–∞** üåæ

‚è±Ô∏è **–ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞:** ${statusText}
üïê **–í—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞:** ${farmCooldownSeconds} —Å–µ–∫—É–Ω–¥

üéõÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**`;

    await sendMessageWithPhoto(ctx, farmText, Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫—É–ª–¥–∞—É–Ω', 'admin_farm_toggle')],
      [Markup.button.callback('‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', 'admin_farm_time')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]
    ]));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞ —Ñ–∞—Ä–º–∞:', error);
    await ctx.answerCbQuery('‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.', { show_alert: true });
  }
});

bot.action('admin_farm_time', async (ctx) => {
  userStates.set(ctx.from.id, { 
    type: 'admin_farm_cooldown' 
  });
  
  await adminForceReply(ctx, `‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞ —Ñ–∞—Ä–º–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—Ç–µ–∫—É—â–µ–µ: ${farmCooldownSeconds} —Å–µ–∫):`);
});

bot.action('faq', async (ctx) => {
  const faqText = `‚ùì **–°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å** ‚ùì

üéØ **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**`;

  await sendMessageWithPhoto(ctx, faqText, Markup.inlineKeyboard([
    [Markup.button.callback('üåü –ö–∞–∫ —Ñ–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'faq_farming'), Markup.button.callback('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 'faq_bonus')],
    [Markup.button.callback('üéØ –ó–∞–¥–∞–Ω–∏—è', 'faq_tasks'), Markup.button.callback('üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π', 'faq_referrals')],
    [Markup.button.callback('üèÜ –¢–∏—Ç—É–ª—ã –∏ —É—Ä–æ–≤–Ω–∏', 'faq_titles'), Markup.button.callback('üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'faq_achievements')],
    [Markup.button.callback('üìä –£—Ä–æ–≤–Ω–∏ –∏–≥—Ä–æ–∫–∞', 'faq_levels'), Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã', 'faq_promocodes')],
    [Markup.button.callback('üí´ –°—Ç–∞—Ç—É—Å—ã', 'faq_statuses'), Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä', 'faq_miner')],
    [Markup.button.callback('üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'faq_support'), Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]));
});

// –î–µ—Ç–∞–ª—å–Ω—ã–µ FAQ —Ä–∞–∑–¥–µ–ª—ã
bot.action('faq_farming', async (ctx) => {
  const farmingText = `üåü **–ö–∞–∫ —Ñ–∞—Ä–º–∏—Ç—å Magnum Coin** üåü

üí° **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ:**
–§–∞—Ä–º - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Magnum Coin –≤ –±–æ—Ç–µ. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 0.01 Magnum Coin –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É!

üî• **–ö–∞–∫ —Ñ–∞—Ä–º–∏—Ç—å:**
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üåü –§–∞—Ä–º–∏—Ç—å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
2Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ (60 —Å–µ–∫—É–Ω–¥)
3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–∞–≥—Ä–∞–¥—É

‚è∞ **–í–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:**
‚Ä¢ ‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60 —Å–µ–∫—É–Ω–¥)
‚Ä¢ üí∞ –ù–∞–≥—Ä–∞–¥–∞: 0.01 Magnum Coin –∑–∞ –∫–ª–∏–∫
‚Ä¢ üîÑ –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ: –º–æ–∂–µ—Ç–µ —Ñ–∞—Ä–º–∏—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ
‚Ä¢ üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ø–æ–ª—É—á–∞–π—Ç–µ pop-up —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º

üéØ **–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ñ–∞—Ä–º–∞:**
‚Ä¢ üïê –§–∞—Ä–º–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
‚Ä¢ üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
‚Ä¢ üéñÔ∏è 100 —Ñ–∞—Ä–º–æ–≤ = –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ç–∏—Ç—É–ª—É "–§–∞—Ä–º–µ—Ä"
‚Ä¢ üèÜ 1000 —Ñ–∞—Ä–º–æ–≤ = –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ú–∞—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞" (+10 –∑–≤—ë–∑–¥)

üíé **–°–æ–≤–µ—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞:**
‚Ä¢ –§–∞—Ä–º–∏—Ç–µ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
‚Ä¢ –°–æ–≤–º–µ—â–∞–π—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –¥–µ–ª–∞–º–∏
‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–≤—ë–∑–¥
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É—Å—Ç–µ—Ä—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥`;

  await sendMessageWithPhoto(ctx, farmingText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
  ]));
});

bot.action('faq_bonus', async (ctx) => {
  const bonusText = `üéÅ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å** üéÅ

üåÖ **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ:**
–ë–æ–ª—å—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! –ù–∞–º–Ω–æ–≥–æ –≤—ã–≥–æ–¥–Ω–µ–µ –æ–±—ã—á–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞.

üí∞ **–ù–∞–≥—Ä–∞–¥–∞ –∏ —É—Å–ª–æ–≤–∏—è:**
‚Ä¢ üíé **3 –∑–≤–µ–∑–¥—ã** –∑–∞ –∫–∞–∂–¥—ã–π –∑–∞—Ö–æ–¥
‚Ä¢ ‚è∞ **–†–∞–∑ –≤ –¥–µ–Ω—å** (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00)
‚Ä¢ üîÑ **–ï–∂–µ–¥–Ω–µ–≤–Ω–æ** - –∑–∞—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!

üìã **–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ (–Ω–∞–∂–º–∏—Ç–µ /start)
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üéÅ –ë–æ–Ω—É—Å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ 3 –∑–≤–µ–∑–¥—ã!
4Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã

üìä **–°–∏—Å—Ç–µ–º–∞ —Å–µ—Ä–∏–π:**
‚Ä¢ üî• –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞—Ö–æ–¥—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤–∞—à—É —Å–µ—Ä–∏—é
‚Ä¢ üìÖ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = —Ç–∏—Ç—É–ª "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å"
‚Ä¢ ‚ö° 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ù–µ–¥–µ–ª—å–Ω—ã–π –≤–æ–∏–Ω" (+12 –∑–≤—ë–∑–¥)
‚Ä¢ üéØ 15 –±–æ–Ω—É—Å–æ–≤ = —Ç–∏—Ç—É–ª "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–æ–Ω—É—Å–∞–º–∏"

‚è∞ **–ö–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è:**
‚Ä¢ üåô –í –ø–æ–ª–Ω–æ—á—å (00:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
‚Ä¢ üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
‚Ä¢ ‚è≥ –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è - –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å

üéñÔ∏è **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞:**
‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –ö–ê–ñ–î–´–ô –¥–µ–Ω—å –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
‚Ä¢ –°–æ–≤–º–µ—â–∞–π—Ç–µ —Å —Ñ–∞—Ä–º–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ—Å—Ç–∞
‚Ä¢ 3 –∑–≤–µ–∑–¥—ã –≤ –¥–µ–Ω—å = 90 –∑–≤—ë–∑–¥ –≤ –º–µ—Å—è—Ü!`;

  await sendMessageWithPhoto(ctx, bonusText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
  ]));
});

bot.action('faq_tasks', async (ctx) => {
  const tasksText = `üéØ **–°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π** üéØ

üìã **–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:**

üîπ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:**
‚Ä¢ üìÖ –û–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ üéÅ –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è

üî∏ **–ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:**
‚Ä¢ üéØ –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üíé –õ—É—á—à–∏–µ –Ω–∞–≥—Ä–∞–¥—ã (–ø–æ 3 –∑–≤–µ–∑–¥—ã)
‚Ä¢ üì∏ –¢—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º

üéØ **–ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è:**

**–®–∞–≥ 1:** –û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è
‚îî –ù–∞–∂–º–∏—Ç–µ "üéØ –ó–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞" –≤ –º–µ–Ω—é

**–®–∞–≥ 2:** –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ  
‚îî –õ–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏ "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ" / "‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ"

**–®–∞–≥ 3:** –ò–∑—É—á–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
‚îî –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ

**–®–∞–≥ 4:** –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ
‚îî –ù–∞–∂–º–∏—Ç–µ "üîó –ü–µ—Ä–µ–π—Ç–∏" –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

**–®–∞–≥ 5:** –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚îî –ù–∞–∂–º–∏—Ç–µ "‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª"

**–®–∞–≥ 6:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç
‚îî –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ

**–®–∞–≥ 7:** –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏
‚îî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

üì∏ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º:**
‚Ä¢ üì± –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
‚Ä¢ ‚úÖ –í–∏–¥–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ üìù –°–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

üéÅ **–ù–∞–≥—Ä–∞–¥—ã:**
‚Ä¢ üéØ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ: 3 –∑–≤–µ–∑–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
‚Ä¢ üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ: —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
‚Ä¢ üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ç–∏—Ç—É–ª—É "–í–æ–∏–Ω –∑–∞–¥–∞–Ω–∏–π"

‚ùå **–ü–æ—á–µ–º—É –º–æ–≥—É—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å:**
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã`;

  await sendMessageWithPhoto(ctx, tasksText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
  ]));
});

bot.action('faq_referrals', async (ctx) => {
  const referralsText = `üë• **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π** üë•

üéØ **–ó–∞—á–µ–º –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π:**
‚Ä¢ üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤—ë–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ç–∏—Ç—É–ª–∞–º –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
‚Ä¢ üìà –ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
‚Ä¢ üéñÔ∏è –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

üîó **–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞:**

**–®–∞–≥ 1:** –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É
‚îî –ù–∞–∂–º–∏—Ç–µ "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π" –≤ –º–µ–Ω—é

**–®–∞–≥ 2:** –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É
‚îî –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

**–®–∞–≥ 3:** –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏
‚îî –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –ª—é–±–æ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ/—Å–æ—Ü—Å–µ—Ç–∏

**–®–∞–≥ 4:** –î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ
‚îî –î—Ä—É–≥ –Ω–∞–∂–∏–º–∞–µ—Ç /start –≤ –±–æ—Ç–µ

**–®–∞–≥ 5:** –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!
‚îî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è –≤ –≤–∞—à –±–∞–ª–∞–Ω—Å

üíé **–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç–µ:**
‚Ä¢ ‚≠ê –ó–≤—ë–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
‚Ä¢ üìä –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ "–î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ"
‚Ä¢ üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ç–∏—Ç—É–ª–∞–º:
  ‚îî 3 –¥—Ä—É–≥–∞ = "–ê–º–±–∞—Å—Å–∞–¥–æ—Ä"  
  ‚îî 10 –¥—Ä—É–∑–µ–π = "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞" (+10 –∑–≤—ë–∑–¥)

üî• **–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:**
‚Ä¢ üí¨ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–∞—Ö/—á–∞—Ç–∞—Ö
‚Ä¢ üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–ª–∏–∑–∫–∏–º –¥—Ä—É–∑—å—è–º
‚Ä¢ üåê –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
‚Ä¢ üéÆ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ª—é–±–∏—Ç–µ–ª–µ–π –∏–≥—Ä

üìã **–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ üö´ –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Ñ–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
‚Ä¢ ‚úÖ –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
‚Ä¢ üîÑ –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
‚Ä¢ üéØ –ö–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

üìä **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:**
‚Ä¢ üë§ –í –ø—Ä–æ—Ñ–∏–ª–µ –≤–∏–¥–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π
‚Ä¢ üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
‚Ä¢ üèÜ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–∏—Ç—É–ª–∞—Ö`;

  await sendMessageWithPhoto(ctx, referralsText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
  ]));
});

bot.action('faq_titles', async (ctx) => {
  const titlesText = `üèÜ **–£—Ä–æ–≤–Ω–∏ –∏ —Ç–∏—Ç—É–ª—ã** üèÜ

üìä **15 —É—Ä–æ–≤–Ω–µ–π (–ø–æ –∑–≤—ë–∑–¥–∞–º):**
üÜï –ù–æ–≤–∏—á–æ–∫ (0) ‚Üí üìö –£—á–µ–Ω–∏–∫ (25) ‚Üí üéì –°—Ç–∞–∂—ë—Ä (75) ‚Üí ‚öôÔ∏è –†–∞–±–æ—Ç–Ω–∏–∫ (150) ‚Üí
üîß –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç (300) ‚Üí üíº –≠–∫—Å–ø–µ—Ä—Ç (500) ‚Üí üèÖ –ú–∞—Å—Ç–µ—Ä (800) ‚Üí
ü•â –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª (1200) ‚Üí ü•à –í–∏—Ä—Ç—É–æ–∑ (1800) ‚Üí ü•á –≠–ª–∏—Ç–∞ (2500) ‚Üí
üèÜ –ß–µ–º–ø–∏–æ–Ω (3500) ‚Üí üíé –¢–∏—Ç–∞–Ω (5000) ‚Üí üëë –ë–æ–∂–µ—Å—Ç–≤–æ (7500) ‚Üí
‚≠ê –õ–µ–≥–µ–Ω–¥–∞ (12000) ‚Üí üåü –ò–º–ø–µ—Ä–∞—Ç–æ—Ä (20000)

üéñÔ∏è **–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏—Ç—É–ª—ã:**
‚Ä¢ üå± –ù–æ–≤–∏—á–æ–∫ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ ‚ö° –§–∞—Ä–º–µ—Ä - 30 —Ñ–∞—Ä–º–æ–≤
‚Ä¢ üíé –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä - 50 –∑–≤—ë–∑–¥
‚Ä¢ ü§ù –ê–º–±–∞—Å—Å–∞–¥–æ—Ä - 3 –¥—Ä—É–≥–∞
‚Ä¢ üìÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å - 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
‚Ä¢ üéÅ –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–æ–Ω—É—Å–∞–º–∏ - 15 –±–æ–Ω—É—Å–æ–≤
‚Ä¢ üé´ –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ - 5 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚Ä¢ ‚öîÔ∏è –í–æ–∏–Ω –∑–∞–¥–∞–Ω–∏–π - 20 –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ üåü –ó–≤—ë–∑–¥–Ω—ã–π –ª–æ—Ä–¥ - 200 –∑–≤—ë–∑–¥
‚Ä¢ üëë –õ–µ–≥–µ–Ω–¥–∞ - 500 –∑–≤—ë–∑–¥ + 10 –¥—Ä—É–∑–µ–π

üî¥ **–°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏—Ç—É–ª—ã:**
üåÖ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ | ü¶â –ù–æ—á–Ω–∞—è —Å–æ–≤–∞ | üí´ VIP –≠–ª–∏—Ç–∞

üìä **–ü—Ä–æ—Å–º–æ—Ç—Ä:** –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ú–æ–∏ —Ç–∏—Ç—É–ª—ã`;

  await sendMessageWithPhoto(ctx, titlesText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
  ]));
});

bot.action('faq_achievements', async (ctx) => {
  const achievementsText = `üéñÔ∏è **–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π** üéñÔ∏è

üéØ **–í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**

üí∞ "–°–æ—Ç–∫–∞" (5‚≠ê) - 100 –∑–≤—ë–∑–¥
ü§ù "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞" (10‚≠ê) - 10 –¥—Ä—É–∑–µ–π
‚ö° "–ù–µ–¥–µ–ª—å–Ω—ã–π –≤–æ–∏–Ω" (12‚≠ê) - 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
üåæ "–ú–∞—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞" (10‚≠ê) - 1000 —Ñ–∞—Ä–º–æ–≤
üé´ "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –ø—Ä–æ–º–æ" (15‚≠ê) - 15 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

üí° **–ë—ã—Å—Ç—Ä—ã–µ —Å–æ–≤–µ—Ç—ã:**
‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞ –±–æ–Ω—É—Å–æ–º
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥—Ä—É–∑–µ–π
‚Ä¢ –§–∞—Ä–º–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö

üìä **–ü—Ä–æ—Å–º–æ—Ç—Ä:** –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è`;

  await sendMessageWithPhoto(ctx, achievementsText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
  ]));
});

bot.action('faq_levels', async (ctx) => {
  const levelsText = `üìä **–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π** üìä

ü™ô **15 —É—Ä–æ–≤–Ω–µ–π (–ø–æ Magnum Coin):**
üÜï –ù–æ–≤–∏—á–æ–∫ - 0 | üìö –£—á–µ–Ω–∏–∫ - 25 | üéì –°—Ç–∞–∂—ë—Ä - 75
‚öôÔ∏è –†–∞–±–æ—Ç–Ω–∏–∫ - 150 | üîß –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç - 300 | üíº –≠–∫—Å–ø–µ—Ä—Ç - 500
üèÖ –ú–∞—Å—Ç–µ—Ä - 800 | ü•â –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª - 1200 | ü•à –í–∏—Ä—Ç—É–æ–∑ - 1800
ü•á –≠–ª–∏—Ç–∞ - 2500 | üèÜ –ß–µ–º–ø–∏–æ–Ω - 3500 | üíé –¢–∏—Ç–∞–Ω - 5000
üëë –ë–æ–∂–µ—Å—Ç–≤–æ - 7500 | ‚≠ê –õ–µ–≥–µ–Ω–¥–∞ - 12000 | üåü –ò–º–ø–µ—Ä–∞—Ç–æ—Ä - 20000

üìä **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:**
‚Ä¢ –®–∫–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üí° **–ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç:**
‚Ä¢ üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (3 Magnum Coin)
‚Ä¢ üéØ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è (3 Magnum Coin)
‚Ä¢ ‚õèÔ∏è –ú–∞–π–Ω–µ—Ä (–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ 1 –∑–≤–µ–∑–¥–∞/—á–∞—Å)
‚Ä¢ üõí –ú–∞–≥–∞–∑–∏–Ω (–±—É—Å—Ç–µ—Ä—ã –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–∏)
‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π (–∑–≤—ë–∑–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)`;

  await sendMessageWithPhoto(ctx, levelsText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
  ]));
});

bot.action('faq_promocodes', async (ctx) => {
  const promocodesText = `üé´ **–ü—Ä–æ–º–æ–∫–æ–¥—ã** üé´

üîë **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ "üé´ –ü—Ä–æ–º–æ–∫–æ–¥" –≤ –º–µ–Ω—é
2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¢–û–ß–ù–û –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ
3. –ü–æ–ª—É—á–∏—Ç–µ Magnum Coin –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üéØ **–ì–¥–µ –Ω–∞–π—Ç–∏:**
‚Ä¢ üì¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
‚Ä¢ üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –∞–∫—Ü–∏–∏  
‚Ä¢ üèÜ –ö–æ–Ω–∫—É—Ä—Å—ã –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
‚Ä¢ üë• –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã

‚ö†Ô∏è **–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –ö–∞–∂–¥—ã–π –∫–æ–¥ —Ç–æ–ª—å–∫–æ –û–î–ò–ù —Ä–∞–∑
‚Ä¢ –ö–æ–¥—ã –º–æ–≥—É—Ç –∏—Å—Ç–µ–∫–∞—Ç—å
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π

üèÜ **–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ 5 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ = —Ç–∏—Ç—É–ª "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"
‚Ä¢ 15 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ = –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (+15 Magnum Coin)`;

  await sendMessageWithPhoto(ctx, promocodesText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
  ]));
});

bot.action('faq_statuses', async (ctx) => {
  const statusesText = `üí´ **–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤** üí´

üéñÔ∏è **–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã:**
üëë –í–ª–∞–¥–µ–ª–µ—Ü | ‚ö° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä | üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä
üéñÔ∏è –í–µ—Ç–µ—Ä–∞–Ω | ü§ù –í–æ–ª–æ–Ω—Ç–µ—Ä | ‚≠ê –≠–ª–∏—Ç–∞ | üõ°Ô∏è –•—Ä–∞–Ω–∏—Ç–µ–ª—å
üíé VIP Gold | üí´ VIP | ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π | üéÆ –£—á–∞—Å—Ç–Ω–∏–∫

üéØ **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:**
‚Ä¢ üéÆ –£—á–∞—Å—Ç–Ω–∏–∫ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ
‚Ä¢ üí´ VIP - –∑–∞ –æ—Å–æ–±—ã–µ –∑–∞—Å–ª—É–≥–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ üíé VIP Gold - –∑–∞ –≤—ã—Å–æ–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä - –∑–∞ –ø–æ–º–æ—â—å –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚Ä¢ ‚ö° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é —Ä–∞–±–æ—Ç—É
‚Ä¢ üéñÔ∏è –í–µ—Ç–µ—Ä–∞–Ω - –∑–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ ü§ù –í–æ–ª–æ–Ω—Ç–µ—Ä - –∑–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ ‚≠ê –≠–ª–∏—Ç–∞ - —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
‚Ä¢ üõ°Ô∏è –•—Ä–∞–Ω–∏—Ç–µ–ª—å - –∑–∞ –∑–∞—â–∏—Ç—É –∏ –ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

üìä **–ì–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è:**
‚Ä¢ –í –ø—Ä–æ—Ñ–∏–ª–µ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
‚Ä¢ –ü—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏
‚Ä¢ –í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–æ—Ç–∞

üéÅ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚Ä¢ üåü –ü—Ä–µ—Å—Ç–∏–∂ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
‚Ä¢ üéØ –û—Å–æ–±–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
‚Ä¢ üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
‚Ä¢ üèÜ –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –∑–∞—Å–ª—É–≥`;

  await sendMessageWithPhoto(ctx, statusesText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
  ]));
});

bot.action('faq_support', async (ctx) => {
  const supportText = `üõ†Ô∏è **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞** üõ†Ô∏è

üéØ **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É:**
–ü—Ä–æ—Ñ–∏–ª—å ‚Üí –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Üí –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É

üìã **–° —á–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è:**
‚Ä¢ üêõ –ë–∞–≥–∏ –∏ –æ—à–∏–±–∫–∏ ‚Ä¢ ‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É
‚Ä¢ üí∞ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º ‚Ä¢ üéØ –ó–∞–¥–∞–Ω–∏—è
‚Ä¢ üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã ‚Ä¢ üë• –†–µ—Ñ–µ—Ä–∞–ª—ã ‚Ä¢ üèÜ –¢–∏—Ç—É–ª—ã

üé´ **–°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫:**
üÜï –ù–æ–≤–∞—è ‚Üí ‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ ‚Üí ‚úÖ –†–µ—à–µ–Ω–∞

‚ö° **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

üí° **–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è:**
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–±–ª–µ–º—É
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ`;

  await sendMessageWithPhoto(ctx, supportText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
  ]));
});

bot.action('faq_miner', async (ctx) => {
  const currentReward = calculateMinerReward();
  const dailyReward = currentReward * 24;
  const currentRate = (RESERVE_STARS / RESERVE_MAGNUM_COINS).toFixed(4);
  
  const minerText = `‚õèÔ∏è **–°–∏—Å—Ç–µ–º–∞ –º–∞–π–Ω–µ—Ä–∞** ‚õèÔ∏è

üí° **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ:**
–ú–∞–π–Ω–µ—Ä - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞. –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –∑–≤—ë–∑–¥—ã –±–µ–∑ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è!

üí∞ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚Ä¢ ‚õèÔ∏è –ü–æ–∫—É–ø–∞–µ—Ç—Å—è –∑–∞ 1000 Magnum Coin
‚Ä¢ ‚è∞ –†–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 24/7
‚Ä¢ üíé –ü—Ä–∏–Ω–æ—Å–∏—Ç ${currentReward.toFixed(4)} –∑–≤–µ–∑–¥—ã –∫–∞–∂–¥—ã–π —á–∞—Å
‚Ä¢ üîÑ –û–∫—É–ø–∞–µ—Ç—Å—è –∑–∞ ~45 –¥–Ω–µ–π
‚Ä¢ üí± –î–æ—Ö–æ–¥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞

üõí **–ö–∞–∫ –∫—É–ø–∏—Ç—å:**
1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ "üõí –ú–∞–≥–∞–∑–∏–Ω" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "‚õèÔ∏è –ú–∞–π–Ω–µ—Ä—ã"
3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å" –∑–∞ 1000 Magnum Coin
4Ô∏è‚É£ –ú–∞–π–Ω–µ—Ä –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
‚Ä¢ üí∞ –î–æ—Ö–æ–¥: ${currentReward.toFixed(4)} –∑–≤–µ–∑–¥—ã/—á–∞—Å = ${dailyReward.toFixed(4)} –∑–≤–µ–∑–¥—ã/–¥–µ–Ω—å
‚Ä¢ üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1ü™ô = ${currentRate}‚≠ê
‚Ä¢ üìà –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: ~45 –¥–Ω–µ–π

üéØ **–°—Ç—Ä–∞—Ç–µ–≥–∏—è:**
‚Ä¢ üéÅ –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ Magnum Coin —Ñ–∞—Ä–º–æ–º
‚Ä¢ ‚õèÔ∏è –ö—É–ø–∏—Ç–µ –º–∞–π–Ω–µ—Ä –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
‚Ä¢ üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Ö–æ–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±—É—Å—Ç–µ—Ä–æ–≤
‚Ä¢ üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ –¥–æ—Ö–æ–¥—ã

üíé **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚Ä¢ üïê –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –±–µ–∑ —É—Å–∏–ª–∏–π
‚Ä¢ üìà –°—Ç–∞–±–∏–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–≤–µ–∑–¥
‚Ä¢ üéØ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è
‚Ä¢ üèÜ –ü–æ–º–æ–≥–∞–µ—Ç –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π
‚Ä¢ üí± –î–æ—Ö–æ–¥ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –∫—É—Ä—Å—É –æ–±–º–µ–Ω–∞`;

  await sendMessageWithPhoto(ctx, minerText, Markup.inlineKeyboard([
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ FAQ', 'faq')]
  ]));
});

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
bot.action('achievements', async (ctx) => {
  const user = await getUser(ctx.from.id);
  const userAchievements = user.achievements || [];
  
  let achievementsText = `üéñÔ∏è *–î–û–°–¢–ò–ñ–ï–ù–ò–Ø* üéñÔ∏è\n\n`;
  
  for (const [achievementId, achievement] of Object.entries(ACHIEVEMENTS)) {
    const isEarned = userAchievements.includes(achievementId);
    const progress = getUserProgress(user, achievement);
    const progressPercent = Math.min(100, Math.floor((progress / achievement.requirement) * 100));
    
    if (isEarned) {
      achievementsText += `‚úÖ ${achievement.icon} *${achievement.name}*\n`;
      achievementsText += `üìù ${achievement.description}\n`;
      achievementsText += `üéÅ –ù–∞–≥—Ä–∞–¥–∞: +${achievement.reward} –∑–≤—ë–∑–¥ *(–ø–æ–ª—É—á–µ–Ω–æ)*\n\n`;
    } else {
      achievementsText += `‚¨ú ${achievement.icon} *${achievement.name}*\n`;
      achievementsText += `üìù ${achievement.description}\n`;
      achievementsText += `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}/${achievement.requirement} (${progressPercent}%)\n`;
      achievementsText += `üéÅ –ù–∞–≥—Ä–∞–¥–∞: +${achievement.reward} –∑–≤—ë–∑–¥\n\n`;
    }
  }
  
  const earnedCount = userAchievements.length;
  const totalCount = Object.keys(ACHIEVEMENTS).length;
  achievementsText += `üìà *–ü–æ–ª—É—á–µ–Ω–æ: ${earnedCount}/${totalCount} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π*`;
  
  await sendMessageWithPhoto(ctx, achievementsText, Markup.inlineKeyboard([
    [Markup.button.callback('üë§ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'profile')]
  ]));
});

function getUserProgress(user, achievement) {
  switch (achievement.condition) {
    case 'stars':
      return user.stars || 0;
    case 'invited':
      return user.invited || 0;
    case 'daily_streak':
      return user.dailyStreak || 0;
    case 'farm_count':
      return user.farmCount || 0;
    case 'promo_count':
      return user.promoCount || 0;
    default:
      return 0;
  }
}

// –ú–µ–Ω—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
bot.action('support_menu', async (ctx) => {
  const supportText = `üõ†Ô∏è *–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê* üõ†Ô∏è

üí¨ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*

üÜï *–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É* ‚Äî –æ–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É
üìã *–ú–æ–∏ –∑–∞—è–≤–∫–∏* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫

‚ö° –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!`;

  ctx.editMessageText(supportText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'support_create')],
      [Markup.button.callback('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', 'my_tickets')],
      [Markup.button.callback('üë§ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'profile')]
    ])
  });
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
bot.action('support_create', async (ctx) => {
  const supportText = `üõ†Ô∏è **–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê** üõ†Ô∏è

üí¨ **–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:**

–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:
‚Ä¢ –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?
‚Ä¢ –ö–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?
‚Ä¢ –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏?

‚ö° –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!`;

  // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å force_reply
  await ctx.deleteMessage();
  
  ctx.reply(supportText, {
    parse_mode: 'Markdown',
    reply_markup: {
      force_reply: true,
      input_field_placeholder: '–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É...'
    }
  });
});

// –ú–æ–∏ –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
bot.action('my_tickets', async (ctx) => {
  const userTickets = await supportTickets.find({ userId: ctx.from.id }).sort({ createdAt: -1 }).limit(10).toArray();
  
  let ticketsText = `üé´ *–ú–û–ò –ó–ê–Ø–í–ö–ò –í –ü–û–î–î–ï–†–ñ–ö–£* üé´\n\n`;

  if (userTickets.length === 0) {
    ticketsText += 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.';
  } else {
      userTickets.forEach(ticket => {
    const statusInfo = TICKET_STATUSES[ticket.status];
    const date = ticket.createdAt ? ticket.createdAt.toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const shortId = ticket._id.toString().slice(-6);
    
    ticketsText += `${statusInfo.emoji} *#${shortId}* ‚Äî ${statusInfo.name}\n`;
    ticketsText += `üìÖ ${date} | üí¨ ${ticket.message.substring(0, 50)}${ticket.message.length > 50 ? '...' : ''}\n`;
    
    if (ticket.adminResponse) {
      ticketsText += `üí¨ *–û—Ç–≤–µ—Ç:* ${ticket.adminResponse.substring(0, 50)}${ticket.adminResponse.length > 50 ? '...' : ''}\n`;
    }
    
    ticketsText += `\n`;
  });
  }

  ctx.editMessageText(ticketsText, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'support_create')],
      [Markup.button.callback('üõ†Ô∏è –ù–∞–∑–∞–¥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'support_menu')]
    ])
  });
});

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∞ –∏ –±–æ–Ω—É—Å–∞
bot.action('farm', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(ctx);
  if (!isSubscribed) {
    await showSubscriptionMessage(ctx);
    return;
  }
  
  const user = await getUserDirectFromDB(ctx.from.id, ctx);
  console.log(`üî• –§–ê–†–ú: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} —Å ${user.stars} –∑–≤—ë–∑–¥–∞–º–∏`);
  const canFarm = !farmCooldownEnabled || !user.lastFarm || (now() - user.lastFarm) >= farmCooldownSeconds;
  
  if (canFarm) {
    const baseReward = calculateFarmReward(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –Ω–∞–≥—Ä–∞–¥—É
    const boostedReward = applyBoostMultiplier(baseReward, user, 'farm');
    
    await users.updateOne({ id: ctx.from.id }, { 
      $inc: { magnumCoins: boostedReward, farmCount: 1, dailyFarms: 1, totalEarnedMagnumCoins: boostedReward }, 
      $set: { lastFarm: now() } 
    });
    invalidateUserCache(ctx.from.id);
    invalidateBotStatsCache();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞—Ä–º–µ—Ä–∞
    const updatedUser = await getUserDirectFromDB(ctx.from.id);
    console.log(`üî• –§–ê–†–ú: –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î - —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} —Ç–µ–ø–µ—Ä—å ${updatedUser.stars} –∑–≤—ë–∑–¥`);
    if ((updatedUser.dailyFarms || 0) >= 10) {
      await markDailyTaskCompleted(ctx.from.id, 'farm_10');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const newTitles = await checkAndAwardTitles(ctx.from.id);
    const newAchievements = await checkAndAwardAchievements(ctx.from.id);
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ —Ñ–∞—Ä–º–∞
    console.log(`üî• –§–ê–†–ú –ó–ê–í–ï–†–®–ï–ù: –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è ${ctx.from.id}`);
    await updateMainMenuBalance(ctx);
    console.log(`üî• –ò–ù–¢–ï–†–§–ï–ô–° –û–ë–ù–û–í–õ–ï–ù –ø–æ—Å–ª–µ —Ñ–∞—Ä–º–∞`);
    
    const rewardText = boostedReward > baseReward ? `+${boostedReward} Magnum Coin (üî• –ë–£–°–¢!)` : `+${boostedReward} Magnum Coin`;
    
    if (newTitles.length > 0 && newAchievements.length > 0) {
      ctx.answerCbQuery(`[ü™ô ${rewardText}] [üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª!] [üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!]`);
    } else if (newTitles.length > 0) {
      ctx.answerCbQuery(`[ü™ô ${rewardText}] [üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª –ø–æ–ª—É—á–µ–Ω!]`);
    } else if (newAchievements.length > 0) {
      ctx.answerCbQuery(`[ü™ô ${rewardText}] [üéñÔ∏è ${newAchievements[0].name}!]`);
    } else {
      ctx.answerCbQuery(`[ü™ô ${rewardText}]`);
    }
  } else {
    const timeLeft = farmCooldownSeconds - (now() - user.lastFarm);
    ctx.answerCbQuery(`‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞: ${timeLeft} —Å–µ–∫.`);
  }
});

bot.action('bonus', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(ctx);
  if (!isSubscribed) {
    await showSubscriptionMessage(ctx);
    return;
  }
  
  const user = await getUserDirectFromDB(ctx.from.id, ctx);
  console.log(`üî• –ë–û–ù–£–°: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} —Å ${user.stars} –∑–≤—ë–∑–¥–∞–º–∏`);
  const today = Math.floor(Date.now() / (1000 * 60 * 60 * 24));
  const canBonus = !user.lastBonus || user.lastBonus < today;
  
  console.log(`–ë–æ–Ω—É—Å - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from.id}, lastBonus: ${user.lastBonus}, today: ${today}, canBonus: ${canBonus}`);
  
  if (canBonus) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞—Ö–æ–¥–æ–≤
    const yesterday = today - 1;
    let dailyStreak = 1;
    if (user.lastBonus === yesterday) {
      dailyStreak = (user.dailyStreak || 0) + 1;
    }
    
    const baseReward = calculateFarmReward() * 3; // –ë–æ–Ω—É—Å –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Ñ–∞—Ä–º–∞
    const boostedReward = applyBoostMultiplier(baseReward, user, 'bonus');
    
    await users.updateOne({ id: ctx.from.id }, { 
      $inc: { magnumCoins: boostedReward, bonusCount: 1, totalEarnedMagnumCoins: boostedReward }, 
      $set: { lastBonus: today, dailyStreak: dailyStreak } 
    });
    invalidateUserCache(ctx.from.id);
    invalidateBotStatsCache();
    
    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"
    await markDailyTaskCompleted(ctx.from.id, 'bonus');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const newTitles = await checkAndAwardTitles(ctx.from.id);
    const newAchievements = await checkAndAwardAchievements(ctx.from.id);
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ –±–æ–Ω—É—Å–∞
    console.log(`üî• –ë–û–ù–£–° –ó–ê–í–ï–†–®–ï–ù: –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è ${ctx.from.id}`);
    await updateMainMenuBalance(ctx);
    console.log(`üî• –ò–ù–¢–ï–†–§–ï–ô–° –û–ë–ù–û–í–õ–ï–ù –ø–æ—Å–ª–µ –±–æ–Ω—É—Å–∞`);
    
    const rewardText = boostedReward > baseReward ? `+${boostedReward} Magnum Coin (üî• –ë–£–°–¢!)` : `+${boostedReward} Magnum Coin`;
    
    if (newTitles.length > 0 && newAchievements.length > 0) {
      ctx.answerCbQuery(`[üéÅ ${rewardText}] [üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª!] [üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!]`);
    } else if (newTitles.length > 0) {
      ctx.answerCbQuery(`[üéÅ ${rewardText}] [üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª!]`);
    } else if (newAchievements.length > 0) {
      ctx.answerCbQuery(`[üéÅ ${rewardText}] [üéñÔ∏è ${newAchievements[0].name}!]`);
    } else {
      ctx.answerCbQuery(`[üéÅ ${rewardText}] –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!`);
    }
  } else {
    // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (00:00)
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);
    
    const timeLeft = tomorrow.getTime() - now.getTime();
    const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
    const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    
    console.log(`–ë–æ–Ω—É—Å - timeLeft: ${timeLeft}, hoursLeft: ${hoursLeft}, minutesLeft: ${minutesLeft}`);
    
    if (hoursLeft > 0) {
      ctx.answerCbQuery(`üïê –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${hoursLeft}—á ${minutesLeft}–º–∏–Ω`);
    } else {
      ctx.answerCbQuery(`üïê –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${minutesLeft} –º–∏–Ω—É—Ç`);
    }
  }
});

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
bot.action(/^claim_daily_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const task = dailyTasks.find(t => t.id === taskId);
  if (!task) return;
  
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'daily' },
    { $set: { [`claimed.${taskId}`]: true } }
  );
  await users.updateOne({ id: ctx.from.id }, { $inc: { magnumCoins: task.reward, totalEarnedMagnumCoins: task.reward } });
  invalidateUserCache(ctx.from.id);
  invalidateBotStatsCache();
  
  ctx.answerCbQuery(`[üéÅ +${task.reward}] Magnum Coin –ø–æ–ª—É—á–µ–Ω–æ!`);
  ctx.action('daily_tasks')(ctx);
});

bot.action(/^claim_sponsor_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const task = sponsorTasks.find(t => t.id === taskId);
  if (!task) return;
  
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'sponsor' },
    { $set: { [`claimed.${taskId}`]: true } }
  );
  await users.updateOne({ id: ctx.from.id }, { $inc: { magnumCoins: task.reward, totalEarnedMagnumCoins: task.reward } });
  invalidateUserCache(ctx.from.id);
  invalidateBotStatsCache();
  
  ctx.answerCbQuery(`[üéÅ +${task.reward}] Magnum Coin –ø–æ–ª—É—á–µ–Ω–æ!`);
  ctx.action('sponsor_tasks')(ctx);
});

bot.action(/^check_sponsor_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  await tasks.updateOne(
    { userId: ctx.from.id, type: 'sponsor' },
    { $set: { [`completed.${taskId}`]: true } }
  );
  
  ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
  ctx.action('sponsor_tasks')(ctx);
});

connectDB().then(() => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
  bot.use(async (ctx, next) => {
    console.log('üîÑ –°–æ–±—ã—Ç–∏–µ:', ctx.updateType, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from?.id, ctx.from?.first_name);
    if (ctx.message) {
      console.log('üì® –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', ctx.message.text ? 'text' : 'other');
    }
    if (ctx.callbackQuery) {
      console.log('üîò Callback data:', ctx.callbackQuery.data);
    }
    return next();
  });
  
  bot.launch();
  console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  console.log('üì± –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
  process.exit(1);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
bot.action(/^ticket_accept_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const ticketId = ctx.match[1];
  const objectId = new ObjectId(ticketId);
  await updateTicketStatus(objectId, 'in_progress');
  await notifyUserStatusChange(objectId, '–ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É ‚öôÔ∏è');
  await updateTicketInChannel(objectId);
  
  ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É');
});

bot.action(/^ticket_reject_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const ticketId = ctx.match[1];
  const objectId = new ObjectId(ticketId);
  await updateTicketStatus(objectId, 'rejected');
  await notifyUserStatusChange(objectId, '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå');
  await updateTicketInChannel(objectId);
  
  ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
});

bot.action(/^ticket_resolve_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const ticketId = ctx.match[1];
  const objectId = new ObjectId(ticketId);
  await updateTicketStatus(objectId, 'resolved');
  await notifyUserStatusChange(objectId, '—Ä–µ—à–µ–Ω–∞ ‚úÖ');
  await updateTicketInChannel(objectId);
  
  ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ —Ä–µ—à–µ–Ω–∞');
});

bot.action(/^ticket_close_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const ticketId = ctx.match[1];
  const objectId = new ObjectId(ticketId);
  await updateTicketStatus(objectId, 'closed');
  await notifyUserStatusChange(objectId, '–∑–∞–∫—Ä—ã—Ç–∞ üîí');
  await updateTicketInChannel(objectId);
  
  ctx.answerCbQuery('üîí –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞');
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—è–º —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
bot.action(/^sponsor_task_(\d+)$/, async (ctx) => {
  const taskIndex = parseInt(ctx.match[1]);
  showSponsorTask(ctx, taskIndex);
});

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
bot.action(/^task_complete_(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const task = SPONSOR_TASKS.find(t => t.id === taskId);
  
  if (!task) {
    return ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }

  await ctx.deleteMessage();
  
  ctx.reply(
    `üì∑ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è\n\n` +
    `üìã –ó–∞–¥–∞–Ω–∏–µ: ${task.title}\n` +
    `üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${task.instruction}\n\n` +
    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n` +
    `üÜî ID –∑–∞–¥–∞–Ω–∏—è: ${task.id}`,
    {
      reply_markup: {
        force_reply: true,
        input_field_placeholder: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç...'
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
bot.action(/^task_approve_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const checkId = ctx.match[1];
  const objectId = new ObjectId(checkId);
  
  const taskCheck = await taskChecks.findOne({ _id: objectId });
  if (!taskCheck) {
    return ctx.answerCbQuery('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  const task = SPONSOR_TASKS.find(t => t.id === taskCheck.taskId);
  if (!task) {
    return ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  await updateTaskCheckStatus(objectId, 'approved');
  
  // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
  await users.updateOne(
    { id: taskCheck.userId },
    { $inc: { stars: task.reward } }
  );
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    await bot.telegram.sendMessage(
      taskCheck.userId,
      `‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!*\n\n` +
      `üìã *–ó–∞–¥–∞–Ω–∏–µ:* ${task.title}\n` +
      `üéÅ *–ü–æ–ª—É—á–µ–Ω–æ:* +${task.reward} –∑–≤—ë–∑–¥\n\n` +
      `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º!`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
  
  await updateTaskCheckInChannel(objectId);
  ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ');
});

bot.action(/^task_reject_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const checkId = ctx.match[1];
  const objectId = new ObjectId(checkId);
  
  const taskCheck = await taskChecks.findOne({ _id: objectId });
  if (!taskCheck) {
    return ctx.answerCbQuery('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  const task = SPONSOR_TASKS.find(t => t.id === taskCheck.taskId);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  await updateTaskCheckStatus(objectId, 'rejected');
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    await bot.telegram.sendMessage(
      taskCheck.userId,
      `‚ùå *–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ*\n\n` +
      `üìã *–ó–∞–¥–∞–Ω–∏–µ:* ${task ? task.title : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å–Ω–æ–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
  
  await updateTaskCheckInChannel(objectId);
  ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
});

bot.action(/^task_reply_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const checkId = ctx.match[1];
  
  try {
    await bot.telegram.sendMessage(
      ctx.from.id,
      `üí¨ *–û—Ç–≤–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è #${checkId.slice(-6)}*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          force_reply: true,
          input_field_placeholder: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...'
        }
      }
    );
    
    ctx.answerCbQuery('üí¨ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:', error);
    ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});

bot.action(/^ticket_reply_(.+)$/, async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  const ticketId = ctx.match[1];
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    await bot.telegram.sendMessage(
      ctx.from.id,
      `üí¨ *–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∑–∞—è–≤–∫–µ #${ticketId.slice(-6)}*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          force_reply: true,
          input_field_placeholder: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...'
        }
      }
    );
    
    ctx.answerCbQuery('üí¨ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:', error);
    ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});
// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã –º–∞–π–Ω–µ—Ä–∞
async function processMinerRewards() {
  try {
    const now = Math.floor(Date.now() / 1000);
    const oneHour = 3600; // 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –º–∞–π–Ω–µ—Ä–∞–º–∏
    const usersWithMiners = await users.find({
      'miner.active': true,
      'miner.lastReward': { $lt: now - oneHour }
    }).toArray();
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${usersWithMiners.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –º–∞–π–Ω–µ—Ä–∞–º–∏ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã`);
    
    for (const user of usersWithMiners) {
      const timeSinceLastReward = now - (user.miner.lastReward || 0);
      const hoursElapsed = Math.floor(timeSinceLastReward / oneHour);
      
      if (hoursElapsed > 0) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –∑–≤—ë–∑–¥
        const rewardPerHour = calculateMinerReward();
        const totalReward = hoursElapsed * rewardPerHour;
        
        console.log(`‚õèÔ∏è –ú–∞–π–Ω–µ—Ä ${user.id}: ${rewardPerHour}‚≠ê/—á–∞—Å, ${hoursElapsed}—á = ${totalReward}‚≠ê`);
        
        // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
        await users.updateOne(
          { id: user.id },
          {
            $inc: { 
              stars: totalReward,
              'miner.totalEarned': totalReward
            },
            $set: { 'miner.lastReward': now }
          }
        );
        
        invalidateUserCache(user.id);
        console.log(`‚õèÔ∏è –ú–∞–π–Ω–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –≤—ã–¥–∞–ª ${totalReward} –∑–≤–µ–∑–¥ –∑–∞ ${hoursElapsed} —á–∞—Å–æ–≤`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try {
          const currentRate = (RESERVE_STARS / RESERVE_MAGNUM_COINS).toFixed(4);
          await bot.telegram.sendMessage(user.id, 
            `‚õèÔ∏è **–ú–∞–π–Ω–µ—Ä –ø—Ä–∏–Ω–µ—Å –¥–æ—Ö–æ–¥!**\n\n` +
            `üíé –ü–æ–ª—É—á–µ–Ω–æ: ${totalReward.toFixed(4)} ‚≠ê –∑–≤–µ–∑–¥\n` +
            `‚è∞ –ó–∞ –ø–µ—Ä–∏–æ–¥: ${hoursElapsed} —á–∞—Å(–æ–≤)\n` +
            `üìà –î–æ—Ö–æ–¥ –≤ —á–∞—Å: ${rewardPerHour.toFixed(4)} ‚≠ê\n` +
            `üìä –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${((user.miner.totalEarned || 0) + totalReward).toFixed(4)} ‚≠ê\n` +
            `üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1ü™ô = ${currentRate}‚≠ê\n\n` +
            `–ú–∞–π–Ω–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`,
            { parse_mode: 'Markdown' }
          );
        } catch (notifyError) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –æ –¥–æ—Ö–æ–¥–µ –º–∞–π–Ω–µ—Ä–∞`);
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–π–Ω–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(processMinerRewards, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∞—Ö–∞ –±–æ—Ç–∞
bot.catch(async (err, ctx) => {
  console.error('üö® –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  console.error('üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', {
    updateType: ctx.updateType,
    userId: ctx.from?.id,
    chatId: ctx.chat?.id,
    messageText: ctx.message?.text,
    callbackData: ctx.callbackQuery?.data
  });
  
  // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  try {
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery('‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.', { show_alert: true });
    } else if (ctx.message) {
      await ctx.reply('‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.', {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]]
        }
      });
    }
  } catch (notifyError) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ:', notifyError);
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', (reason, promise) => {
  console.error('üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –ø—Ä–æ–º–∏—Å–∞:', reason);
  console.error('üìç Promise:', promise);
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  console.error('üìç Stack trace:', error.stack);
  
  // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
  console.log('ÔøΩÔøΩ –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞...');
});
