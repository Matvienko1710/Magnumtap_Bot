// Magnum Stars WebApp - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞

class MagnumWebApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.userId = null;
        this.userData = null;
        this.isLoading = false;
        
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async init() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
            this.tg.ready();
            this.tg.expand();
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.userId = this.tg.initDataUnsafe?.user?.id;
            
            if (!this.userId) {
                this.showNotification('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.loadUserData();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateUI();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this.startAutoUpdate();
            
            console.log('Magnum WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async loadUserData() {
        try {
            this.setLoading(true);
            
            const response = await fetch(`/api/webapp/user-data?userId=${this.userId}`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            this.userData = await response.json();
            
            // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            localStorage.setItem('userData', JSON.stringify(this.userData));
            localStorage.setItem('userDataTimestamp', Date.now());
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            
            // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
            const cached = localStorage.getItem('userData');
            const timestamp = localStorage.getItem('userDataTimestamp');
            
            if (cached && timestamp && (Date.now() - timestamp < 60000)) {
                this.userData = JSON.parse(cached);
                this.showNotification('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
            } else {
                this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
            }
        } finally {
            this.setLoading(false);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI() {
        if (!this.userData) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        document.getElementById('magnumCoins').textContent = this.formatNumber(this.userData.magnumCoins || 0);
        document.getElementById('stars').textContent = this.formatNumber(this.userData.stars || 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        document.getElementById('userLevel').textContent = this.userData.level || 1;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞
        const miningSpeed = this.calculateMiningSpeed();
        document.getElementById('miningSpeed').textContent = miningSpeed.toFixed(2);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é –¥–æ–±—ã—á—É
        const totalMined = (this.userData.miningStats?.totalMinedMC || 0) + 
                          (this.userData.miningStats?.totalMinedStars || 0);
        document.getElementById('totalMined').textContent = this.formatNumber(totalMined);
    }

    // –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞
    calculateMiningSpeed() {
        if (!this.userData?.miners) return 0;
        
        let totalSpeed = 0;
        
        this.userData.miners.forEach(miner => {
            if (miner.active) {
                const baseSpeed = miner.type === 'magnumCoins' ? 1 : 0.5;
                totalSpeed += baseSpeed * miner.speed * (miner.level || 1);
            }
        });
        
        return totalSpeed;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    formatNumber(num) {
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toFixed(0);
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    setLoading(loading) {
        this.isLoading = loading;
        const earnButton = document.querySelector('.earn-button');
        
        if (loading) {
            earnButton.classList.add('loading');
            earnButton.disabled = true;
        } else {
            earnButton.classList.remove('loading');
            earnButton.disabled = false;
        }
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message, type = 'info') {
        const notifications = document.getElementById('notifications');
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        notifications.appendChild(notification);
        
        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 5000);
    }

    // API –∑–∞–ø—Ä–æ—Å—ã
    async apiRequest(endpoint, data = {}) {
        try {
            const response = await fetch(`/api/webapp/${endpoint}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    userId: this.userId,
                    ...data
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            return await response.json();
            
        } catch (error) {
            console.error(`API –æ—à–∏–±–∫–∞ (${endpoint}):`, error);
            throw error;
        }
    }

    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    startAutoUpdate() {
        setInterval(async () => {
            if (!this.isLoading) {
                await this.loadUserData();
                this.updateUI();
            }
        }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    async handleEarnClick() {
        if (this.isLoading) return;
        
        try {
            this.setLoading(true);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞
            this.showEarnMenu();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è', 'error');
        } finally {
            this.setLoading(false);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞
    showEarnMenu() {
        const menuItems = [
            { icon: '‚ö°', text: '–ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–∫', action: 'mining_click' },
            { icon: 'üåæ', text: '–§–∞—Ä–º', action: 'farm' },
            { icon: 'üìã', text: '–ó–∞–¥–∞–Ω–∏—è', action: 'tasks' },
            { icon: 'üë•', text: '–†–µ—Ñ–µ—Ä–∞–ª—ã', action: 'referrals' },
            { icon: 'üèÜ', text: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', action: 'achievements' }
        ];

        const menuText = menuItems.map(item => 
            `${item.icon} ${item.text}`
        ).join('\n');

        this.tg.showPopup({
            title: 'üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞',
            message: menuText,
            buttons: menuItems.map(item => ({
                text: `${item.icon} ${item.text}`,
                callback_data: item.action
            }))
        });
    }

    async handleMiningClick() {
        try {
            this.setLoading(true);
            
            const result = await this.apiRequest('mining-click');
            
            if (result.success) {
                this.showNotification(`+${result.reward} MC –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–∫!`, 'success');
                await this.loadUserData();
                this.updateUI();
            } else {
                this.showNotification(result.message || '–û—à–∏–±–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞', 'error');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è', 'error');
        } finally {
            this.setLoading(false);
        }
    }

    async handleFarmClick() {
        try {
            this.setLoading(true);
            
            const result = await this.apiRequest('farm');
            
            if (result.success) {
                this.showNotification(`+${result.reward} MC –∑–∞ —Ñ–∞—Ä–º!`, 'success');
                await this.loadUserData();
                this.updateUI();
            } else {
                this.showNotification(result.message || '–û—à–∏–±–∫–∞ —Ñ–∞—Ä–º–∞', 'error');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–∞—Ä–º–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è', 'error');
        } finally {
            this.setLoading(false);
        }
    }

    async handleExchangeClick() {
        try {
            this.setLoading(true);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–±–º–µ–Ω–∞
            this.showExchangeMenu();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–±–º–µ–Ω–∞', 'error');
        } finally {
            this.setLoading(false);
        }
    }

    async showExchangeMenu() {
        const currentRate = await this.calculateExchangeRate();
        
        const commission = 2.5;
        this.tg.showPopup({
            title: 'üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç',
            message: `–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 Magnum Coins = ${currentRate.toFixed(4)} Stars\n–ö–æ–º–∏—Å—Å–∏—è: ${commission}%\n\n–í–∞—à –±–∞–ª–∞–Ω—Å:\nüí∞ ${this.userData.magnumCoins.toFixed(2)} Magnum Coins\n‚≠ê ${this.userData.stars.toFixed(2)} Stars\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 100 MC ‚Üí ${(100 * currentRate * (1 - commission/100)).toFixed(4)} Stars\n‚Ä¢ 100 Stars ‚Üí ${((100 / currentRate) * (1 - commission/100)).toFixed(2)} MC`,
            buttons: [
                { text: 'üí∞ Magnum Coins ‚Üí Stars', callback_data: 'exchange_mc_to_stars' },
                { text: '‚≠ê Stars ‚Üí Magnum Coins', callback_data: 'exchange_stars_to_mc' },
                { text: 'üìä –ò—Å—Ç–æ—Ä–∏—è', callback_data: 'exchange_history' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }
            ]
        });
    }

    async calculateExchangeRate() {
        try {
            const response = await fetch('/api/webapp/exchange-rate');
            const data = await response.json();
            return data.rate || 0.001;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞:', error);
            // Fallback –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π –∫—É—Ä—Å
            return 0.001 * (1 + Math.random() * 0.1);
        }
    }

    async showExchangeHistory() {
        try {
            this.setLoading(true);

            const response = await fetch(`/api/webapp/exchange-history?userId=${this.userId}`);
            const data = await response.json();

            if (data.success && data.history && data.history.length > 0) {
                const historyText = data.history.slice(0, 10).map(item => {
                    const date = new Date(item.timestamp).toLocaleDateString('ru-RU');
                    const type = item.direction === 'Stars' ? 'Magnum Coins ‚Üí Stars' : 'Stars ‚Üí Magnum Coins';
                    return `${date}: ${type} ${item.amount} ‚Üí ${item.received.toFixed(4)}`;
                }).join('\n');

                this.tg.showPopup({
                    title: 'üìä –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤',
                    message: historyText,
                    buttons: [
                        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'exchange_history' },
                        { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close' }
                    ]
                });
            } else {
                this.showNotification('–ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤ –ø—É—Å—Ç–∞', 'info');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤', 'error');
        } finally {
            this.setLoading(false);
        }
    }

    async showExchangeInput(exchangeType) {
        const currentRate = await this.calculateExchangeRate();
        const commission = 2.5; // 2.5% –∫–æ–º–∏—Å—Å–∏—è

        let title, message, maxAmount, fromCurrency, toCurrency, fromParam;

        if (exchangeType === 'mc_to_stars') {
            title = 'üí∞ Magnum Coins ‚Üí Stars';
            fromCurrency = 'Magnum Coins';
            toCurrency = 'Stars';
            fromParam = 'Stars'; // –î–ª—è API
            maxAmount = this.userData.magnumCoins;
            message = `–û–±–º–µ–Ω Magnum Coins –Ω–∞ Stars\n–ö—É—Ä—Å: 1 MC = ${currentRate.toFixed(4)} Stars\n–ö–æ–º–∏—Å—Å–∏—è: ${commission}%\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${this.userData.magnumCoins} MC\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É Magnum Coins –¥–ª—è –æ–±–º–µ–Ω–∞:`;
        } else {
            title = '‚≠ê Stars ‚Üí Magnum Coins';
            fromCurrency = 'Stars';
            toCurrency = 'Magnum Coins';
            fromParam = 'stars'; // –î–ª—è API
            maxAmount = this.userData.stars;
            message = `–û–±–º–µ–Ω Stars –Ω–∞ Magnum Coins\n–ö—É—Ä—Å: 1 Stars = ${(1/currentRate).toFixed(2)} MC\n–ö–æ–º–∏—Å—Å–∏—è: ${commission}%\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${this.userData.stars} Stars\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É Stars –¥–ª—è –æ–±–º–µ–Ω–∞:`;
        }

        const amount = prompt(message);

        if (amount && !isNaN(amount) && amount > 0) {
            const numAmount = parseFloat(amount);
            if (numAmount <= maxAmount) {
                this.performExchange(fromParam, numAmount, currentRate, commission);
            } else {
                this.showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${fromCurrency} –Ω–∞ –±–∞–ª–∞–Ω—Å–µ`, 'error');
            }
        }
    }

    async performExchange(fromParam, amount, rate, commission) {
        try {
            this.setLoading(true);
            this.showNotification('–í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω...', 'info');

            const exchangeData = {
                userId: this.userId,
                from: fromParam, // 'Stars' –∏–ª–∏ 'stars'
                amount: amount
            };

            const response = await fetch('/api/webapp/exchange', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(exchangeData)
            });

            const result = await response.json();

            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                this.userData.magnumCoins = result.magnumCoins;
                this.userData.stars = result.stars;
                this.updateUI();

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ
                let receivedAmount, receivedCurrency;
                if (fromParam === 'Stars') {
                    receivedAmount = result.stars;
                    receivedCurrency = 'Stars';
                } else {
                    receivedAmount = result.magnumCoins;
                    receivedCurrency = 'MC';
                }

                const commissionAmount = amount * (commission / 100);

                this.showNotification(`‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–ü–æ–ª—É—á–µ–Ω–æ: ${receivedAmount.toFixed(4)} ${receivedCurrency}\n–ö–æ–º–∏—Å—Å–∏—è: ${commissionAmount.toFixed(4)}`, 'success');
            } else {
                this.showNotification(result.error || '–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞', 'error');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞', 'error');
        } finally {
            this.setLoading(false);
        }
    }

    async handleTasksClick() {
        try {
            this.setLoading(true);
            
            const result = await this.apiRequest('tasks');
            
            if (result.success) {
                this.showTasksMenu(result.tasks);
            } else {
                this.showNotification(result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π', 'error');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–¥–∞–Ω–∏–π:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π', 'error');
        } finally {
            this.setLoading(false);
        }
    }

    showTasksMenu(tasks) {
        const tasksText = tasks.length > 0 
            ? tasks.map(task => `${task.icon} ${task.name} (+${task.reward} MC)`)
                .join('\n')
            : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π';

        this.tg.showPopup({
            title: 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è',
            message: tasksText,
            buttons: tasks.map(task => ({
                text: `${task.icon} ${task.name}`,
                callback_data: `task_${task.id}`
            })).concat([
                { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close' }
            ])
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
let webApp;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    webApp = new MagnumWebApp();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
function handleEarnClick() {
    if (webApp) webApp.handleEarnClick();
}

function handleMiningClick() {
    if (webApp) webApp.handleMiningClick();
}

function handleFarmClick() {
    if (webApp) webApp.handleFarmClick();
}

function handleExchangeClick() {
    if (webApp) webApp.handleExchangeClick();
}

function handleTasksClick() {
    if (webApp) webApp.handleTasksClick();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –æ—Ç Telegram
window.handleTelegramCallback = function(callbackData) {
    if (!webApp) return;
    
    console.log('Telegram callback:', callbackData);
    
    switch (callbackData) {
        case 'mining_click':
            webApp.handleMiningClick();
            break;
        case 'farm':
            webApp.handleFarmClick();
            break;
        case 'tasks':
            webApp.handleTasksClick();
            break;
        case 'exchange_mc_to_stars':
            webApp.showExchangeInput('mc_to_stars');
            break;
        case 'exchange_stars_to_mc':
            webApp.showExchangeInput('stars_to_mc');
            break;
        case 'exchange_history':
            webApp.showExchangeHistory();
            break;
        case 'close':
        case 'cancel':
            // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
            break;
        default:
            if (callbackData.startsWith('task_')) {
                const taskId = callbackData.replace('task_', '');
                webApp.handleTaskComplete(taskId);
            }
            break;
    }
};
