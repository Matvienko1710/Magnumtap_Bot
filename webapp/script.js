// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
let tg = null;
try {
    tg = window.Telegram?.WebApp;
    if (tg) {
        tg.expand();
        tg.ready();
        console.log('‚úÖ Telegram WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
        console.log('‚ö†Ô∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
    }
} catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    magnumCoins: 1000, // –ù–∞—á–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
    stars: 100, // –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–≤–µ–∑–¥—ã
    clickCount: 0,
    cps: 1, // Coins per second
    upgrades: {
        autoClicker: { level: 0, cost: 10, baseCost: 10, multiplier: 1.5 },
        clickPower: { level: 0, cost: 25, baseCost: 25, multiplier: 2 },
        starGenerator: { level: 0, cost: 50, baseCost: 50, multiplier: 2.5 }
    }
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    magnumCoins: document.getElementById('magnumCoins'),
    stars: document.getElementById('stars'),
    clickCount: document.getElementById('clickCount'),
    cps: document.getElementById('cps'),
    clickerBtn: document.getElementById('clickerBtn'),
    upgradeList: document.getElementById('upgradeList'),
    connectionStatus: document.getElementById('connectionStatus')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéÆ WebApp –∑–∞–≥—Ä—É–∂–µ–Ω');
    initGame();
    setupEventListeners();
    loadUserData();
    startAutoClicker();
    renderUpgrades();
    updateConnectionStatus('WebApp –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 'connected');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp –∫–ª–∏–∫–µ—Ä–∞...');
    updateConnectionStatus('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...', 'connecting');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–ª–∏–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ
    elements.clickerBtn.addEventListener('click', handleClick);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä–∞
    document.addEventListener('visibilitychange', handleVisibilityChange);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
function handleClick() {
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    elements.clickerBtn.style.transform = 'scale(0.95)';
    setTimeout(() => {
        elements.clickerBtn.style.transform = 'scale(1)';
    }, 100);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
    gameState.magnumCoins += gameState.cps;
    gameState.clickCount++;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    updateUI();
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    saveUserData();
    
    // Haptic feedback (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if (tg?.HapticFeedback) {
        try {
            tg.HapticFeedback.impactOccurred('light');
        } catch (error) {
            console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }
}

// –ê–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä
let autoClickerInterval;

function startAutoClicker() {
    autoClickerInterval = setInterval(() => {
        if (!document.hidden) {
            const autoClickerBonus = gameState.upgrades.autoClicker.level * 0.1;
            if (autoClickerBonus > 0) {
                gameState.magnumCoins += autoClickerBonus;
                updateUI();
            }
        }
    }, 1000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function handleVisibilityChange() {
    if (document.hidden) {
        console.log('üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞, –∞–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } else {
        console.log('üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–Ω–∞, –∞–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
    elements.magnumCoins.textContent = formatNumber(gameState.magnumCoins);
    elements.stars.textContent = formatNumber(gameState.stars);
    elements.clickCount.textContent = formatNumber(gameState.clickCount);
    elements.cps.textContent = formatNumber(gameState.cps);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
function formatNumber(num) {
    if (num >= 1000000) {
        return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
        return (num / 1000).toFixed(1) + 'K';
    }
    return Math.floor(num).toString();
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —É–ª—É—á—à–µ–Ω–∏–π
function renderUpgrades() {
    const upgradeList = elements.upgradeList;
    upgradeList.innerHTML = '';
    
    Object.entries(gameState.upgrades).forEach(([id, upgrade]) => {
        const upgradeElement = document.createElement('div');
        upgradeElement.className = 'upgrade-item';
        upgradeElement.innerHTML = `
            <div class="upgrade-info">
                <div class="upgrade-name">${getUpgradeName(id)}</div>
                <div class="upgrade-level">–£—Ä–æ–≤–µ–Ω—å: ${upgrade.level}</div>
                <div class="upgrade-cost">–°—Ç–æ–∏–º–æ—Å—Ç—å: ${formatNumber(upgrade.cost)} MC</div>
            </div>
            <button class="upgrade-btn" onclick="buyUpgrade('${id}')" ${gameState.magnumCoins < upgrade.cost ? 'disabled' : ''}>
                –ö—É–ø–∏—Ç—å
            </button>
        `;
        upgradeList.appendChild(upgradeElement);
    });
}

// –ù–∞–∑–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
function getUpgradeName(id) {
    const names = {
        autoClicker: 'ü§ñ –ê–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä',
        clickPower: '‚ö° –°–∏–ª–∞ –∫–ª–∏–∫–∞',
        starGenerator: '‚≠ê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤–µ–∑–¥'
    };
    return names[id] || id;
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(upgradeId) {
    const upgrade = gameState.upgrades[upgradeId];
    
    if (gameState.magnumCoins >= upgrade.cost) {
        gameState.magnumCoins -= upgrade.cost;
        upgrade.level++;
        
        // –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        upgrade.cost = Math.floor(upgrade.baseCost * Math.pow(upgrade.multiplier, upgrade.level));
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CPS –¥–ª—è clickPower
        if (upgradeId === 'clickPower') {
            gameState.cps = 1 + upgrade.level;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        updateUI();
        renderUpgrades();
        saveUserData();
        
        console.log(`‚úÖ –ö—É–ø–ª–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ: ${getUpgradeName(upgradeId)} (—É—Ä–æ–≤–µ–Ω—å ${upgrade.level})`);
        
        // Haptic feedback
        if (tg?.HapticFeedback) {
            try {
                tg.HapticFeedback.impactOccurred('medium');
            } catch (error) {
                console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    try {
        const savedData = localStorage.getItem('magnumStarsWebApp');
        if (savedData) {
            const data = JSON.parse(savedData);
            gameState = { ...gameState, ...data };
            console.log('üì• –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserData() {
    try {
        localStorage.setItem('magnumStarsWebApp', JSON.stringify(gameState));
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function updateConnectionStatus(message, status) {
    const statusElement = elements.connectionStatus;
    const indicator = statusElement.querySelector('.status-indicator');
    const text = statusElement.querySelector('span');
    
    text.textContent = message;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã
    indicator.className = 'status-indicator';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å
    if (status === 'connected') {
        indicator.classList.add('connected');
    } else if (status === 'connecting') {
        indicator.classList.add('connecting');
    } else if (status === 'error') {
        indicator.classList.add('error');
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
function sendDataToServer() {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    console.log('üì§ –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
}