// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    magnumCoins: 0,
    stars: 0,
    clickCount: 0,
    cps: 1, // Coins per second
    upgrades: {
        autoClicker: { level: 0, cost: 10, baseCost: 10, multiplier: 1.5 },
        clickPower: { level: 0, cost: 25, baseCost: 25, multiplier: 2 },
        starGenerator: { level: 0, cost: 50, baseCost: 50, multiplier: 2.5 }
    }
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    magnumCoins: document.getElementById('magnumCoins'),
    stars: document.getElementById('stars'),
    clickCount: document.getElementById('clickCount'),
    cps: document.getElementById('cps'),
    clickerBtn: document.getElementById('clickerBtn'),
    upgradeList: document.getElementById('upgradeList'),
    connectionStatus: document.getElementById('connectionStatus')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initGame();
    setupEventListeners();
    loadUserData();
    startAutoClicker();
    renderUpgrades();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp –∫–ª–∏–∫–µ—Ä–∞...');
    updateConnectionStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É...', 'connecting');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–ª–∏–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ
    elements.clickerBtn.addEventListener('click', handleClick);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä–∞
    document.addEventListener('visibilitychange', handleVisibilityChange);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
function handleClick() {
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    elements.clickerBtn.style.transform = 'scale(0.95)';
    setTimeout(() => {
        elements.clickerBtn.style.transform = 'scale(1)';
    }, 100);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
    gameState.magnumCoins += gameState.cps;
    gameState.clickCount++;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    updateUI();
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω)
    saveUserData();
    
    // Haptic feedback
    if (tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }
}

// –ê–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä
let autoClickerInterval;

function startAutoClicker() {
    autoClickerInterval = setInterval(() => {
        if (!document.hidden) {
            const autoClickerBonus = gameState.upgrades.autoClicker.level * 0.1;
            if (autoClickerBonus > 0) {
                gameState.magnumCoins += autoClickerBonus;
                updateUI();
            }
        }
    }, 1000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function handleVisibilityChange() {
    if (document.hidden) {
        console.log('üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞, –∞–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } else {
        console.log('üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–Ω–∞, –∞–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
    elements.magnumCoins.textContent = formatNumber(gameState.magnumCoins);
    elements.stars.textContent = formatNumber(gameState.stars);
    elements.clickCount.textContent = formatNumber(gameState.clickCount);
    elements.cps.textContent = formatNumber(gameState.cps);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
function formatNumber(num) {
    if (num >= 1000000) {
        return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
        return (num / 1000).toFixed(1) + 'K';
    }
    return Math.floor(num).toString();
}

// –†–µ–Ω–¥–µ—Ä —É–ª—É—á—à–µ–Ω–∏–π
function renderUpgrades() {
    elements.upgradeList.innerHTML = '';
    
    const upgrades = [
        {
            id: 'autoClicker',
            name: 'ü§ñ –ê–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä',
            description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–Ω–µ—Ç—ã',
            icon: '‚ö°'
        },
        {
            id: 'clickPower',
            name: 'üí™ –°–∏–ª–∞ –∫–ª–∏–∫–∞',
            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–æ–Ω–µ—Ç—ã –∑–∞ –∫–ª–∏–∫',
            icon: 'üí™'
        },
        {
            id: 'starGenerator',
            name: '‚≠ê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤–µ–∑–¥',
            description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–≤–µ–∑–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
            icon: '‚≠ê'
        }
    ];
    
    upgrades.forEach(upgrade => {
        const upgradeData = gameState.upgrades[upgrade.id];
        const canAfford = gameState.magnumCoins >= upgradeData.cost;
        
        const upgradeElement = document.createElement('div');
        upgradeElement.className = 'upgrade-item';
        upgradeElement.innerHTML = `
            <div class="upgrade-info">
                <div class="upgrade-name">${upgrade.icon} ${upgrade.name}</div>
                <div class="upgrade-description">${upgrade.description} (–£—Ä–æ–≤–µ–Ω—å: ${upgradeData.level})</div>
            </div>
            <div class="upgrade-cost">
                <div class="upgrade-price">${formatNumber(upgradeData.cost)} MC</div>
                <button class="upgrade-btn" ${!canAfford ? 'disabled' : ''} onclick="buyUpgrade('${upgrade.id}')">
                    –ö—É–ø–∏—Ç—å
                </button>
            </div>
        `;
        
        elements.upgradeList.appendChild(upgradeElement);
    });
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(upgradeId) {
    const upgrade = gameState.upgrades[upgradeId];
    
    if (gameState.magnumCoins >= upgrade.cost) {
        gameState.magnumCoins -= upgrade.cost;
        upgrade.level++;
        upgrade.cost = Math.floor(upgrade.baseCost * Math.pow(upgrade.multiplier, upgrade.level));
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CPS
        if (upgradeId === 'clickPower') {
            gameState.cps = 1 + (upgrade.level * 0.5);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        updateUI();
        renderUpgrades();
        saveUserData();
        
        // Haptic feedback
        if (tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('medium');
        }
        
        console.log(`‚úÖ –ö—É–ø–ª–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ: ${upgradeId} (—É—Ä–æ–≤–µ–Ω—å ${upgrade.level})`);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData() {
    try {
        const user = tg.initDataUnsafe?.user;
        if (!user) {
            console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            updateConnectionStatus('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'error');
            return;
        }
        
        console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –±–æ—Ç–∞
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const savedData = localStorage.getItem('magnumClickerData');
        if (savedData) {
            const data = JSON.parse(savedData);
            gameState = { ...gameState, ...data };
            updateUI();
        }
        
        updateConnectionStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–æ—Ç—É', 'connected');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        updateConnectionStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'error');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserData() {
    try {
        const user = tg.initDataUnsafe?.user;
        if (!user) return;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        localStorage.setItem('magnumClickerData', JSON.stringify({
            magnumCoins: gameState.magnumCoins,
            stars: gameState.stars,
            clickCount: gameState.clickCount,
            cps: gameState.cps,
            upgrades: gameState.upgrades
        }));
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        // await sendDataToServer(user.id, gameState);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function updateConnectionStatus(message, status) {
    const statusElement = elements.connectionStatus;
    const indicator = statusElement.querySelector('.status-indicator');
    const text = statusElement.querySelector('span');
    
    text.textContent = message;
    indicator.className = `status-indicator ${status}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ)
async function sendDataToServer(userId, data) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º
    console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', { userId, data });
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.gameState = gameState;
window.buyUpgrade = buyUpgrade;