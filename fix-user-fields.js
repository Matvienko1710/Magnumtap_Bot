// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const { MongoClient } = require('mongodb');
require('dotenv').config();

async function fixUserFields() {
    const client = new MongoClient(process.env.MONGODB_URI);

    try {
        await client.connect();
        const db = client.db();

        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        const usersWithIssues = await db.collection('users').find({
            $or: [
                { magnumCoins: { $exists: false } },
                { magnumCoins: null },
                { magnumCoins: { $type: 'null' } },
                { stars: { $exists: false } },
                { stars: null },
                { stars: { $type: 'null' } },
                { magnumCoins: { $type: 'string' } },
                { stars: { $type: 'string' } }
            ]
        }).toArray();

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏: ${usersWithIssues.length}`);

        const initialMagnumCoins = 1000; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const initialStars = 0; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        for (const user of usersWithIssues) {
            const updateData = {};

            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º magnumCoins
            if (user.magnumCoins === undefined || user.magnumCoins === null ||
                typeof user.magnumCoins === 'string' || isNaN(user.magnumCoins)) {
                updateData.magnumCoins = initialMagnumCoins;
                updateData.totalEarnedMagnumCoins = initialMagnumCoins;
            }

            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º stars
            if (user.stars === undefined || user.stars === null ||
                typeof user.stars === 'string' || isNaN(user.stars)) {
                updateData.stars = initialStars;
                updateData.totalEarnedStars = initialStars;
            }

            if (Object.keys(updateData).length > 0) {
                await db.collection('users').updateOne(
                    { _id: user._id },
                    { $set: updateData }
                );
                console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id || user._id}`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const fixedUsers = await db.collection('users').countDocuments({
            magnumCoins: { $exists: true, $ne: null, $type: 'number' },
            stars: { $exists: true, $ne: null, $type: 'number' }
        });

        const totalUsers = await db.collection('users').countDocuments();

        console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
        console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
        console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏: ${fixedUsers}`);
        console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: ${((fixedUsers / totalUsers) * 100).toFixed(1)}%`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const exampleUser = await db.collection('users').findOne({}, {
            projection: { id: 1, magnumCoins: 1, stars: 1, username: 1 }
        });

        if (exampleUser) {
            console.log(`\nüë§ –ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
            console.log(`   ID: ${exampleUser.id}`);
            console.log(`   Username: ${exampleUser.username || 'N/A'}`);
            console.log(`   Magnum Coins: ${exampleUser.magnumCoins}`);
            console.log(`   Stars: ${exampleUser.stars}`);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
    } finally {
        await client.close();
    }
}

fixUserFields();
