const database = require('../database');
const cache = require('../cache');
const utils = require('../utils');
const config = require('../config');

class UserService {
  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  async getUser(userId, ctx = null) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      const cached = cache.getUser(userId);
      if (cached) {
        return cached;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
      let user = await database.getUserById(userId);
      
      if (!user) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = {
          id: userId,
          username: ctx?.from?.username || null,
          stars: config.INITIAL_STARS,
          magnumCoins: config.INITIAL_MAGNUM_COINS,
          lastFarm: 0,
          lastBonus: 0,
          created: utils.now(),
          invited: 0,
          invitedBy: null,
          titles: [],
          farmCount: 0,
          bonusCount: 0,
          promoCount: 0,
          taskCount: 0,
          dailyStreak: 0,
          usedPromos: [],
          miner: {
            active: false,
            totalEarned: 0,
            lastReward: 0
          }
        };
        
        await database.createUser(user);
        console.log(`üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      cache.setUser(userId, user);
      return user;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  async getUserFresh(userId) {
    try {
      return await database.getUserById(userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (fresh):', error);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUser(userId, updates) {
    try {
      await database.updateUser(userId, updates);
      cache.invalidateUser(userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async incrementUserField(userId, field, amount) {
    try {
      await database.incrementUserField(userId, field, amount);
      cache.invalidateUser(userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –ø–æ–ª—è:', error);
      throw error;
    }
  }

  // –§–∞—Ä–º –∑–≤–µ–∑–¥
  async farmStars(userId, ctx) {
    try {
      const user = await this.getUser(userId);
      const now = utils.now();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
      const cooldown = config.FARM_COOLDOWN_DEFAULT;
      if (!utils.checkCooldown(user.lastFarm, cooldown)) {
        const timeLeft = cooldown - (now - user.lastFarm);
        return {
          success: false,
          error: `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${Math.ceil(timeLeft / 1000)} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞`
        };
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
      const baseReward = 0.01;
      const reward = utils.calculateFarmReward(user, baseReward);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.updateUser(userId, {
        stars: user.stars + reward,
        lastFarm: now,
        farmCount: (user.farmCount || 0) + 1
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await this.checkAndAwardAchievements(userId);

      return {
        success: true,
        reward: reward,
        newBalance: user.stars + reward
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ñ–∞—Ä–º–∞:', error);
      return {
        success: false,
        error: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∞—Ä–º–µ'
      };
    }
  }

  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
  async claimDailyBonus(userId, ctx) {
    try {
      const user = await this.getUser(userId);
      const now = utils.now();
      const today = Math.floor(now / (24 * 60 * 60 * 1000));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ —É–∂–µ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è
      if (user.lastBonus === today) {
        const nextBonus = (today + 1) * 24 * 60 * 60 * 1000;
        const timeLeft = nextBonus - now;
        const hoursLeft = Math.ceil(timeLeft / (60 * 60 * 1000));
        
        return {
          success: false,
          error: `‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ ${hoursLeft} —á–∞—Å–æ–≤`
        };
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∏ —Å–µ—Ä–∏—é
      const baseReward = 3;
      const streak = user.lastBonus === today - 1 ? (user.dailyStreak || 0) + 1 : 1;
      const reward = baseReward + Math.floor(streak / 7) * 2; // –ë–æ–Ω—É—Å –∑–∞ –Ω–µ–¥–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.updateUser(userId, {
        stars: user.stars + reward,
        lastBonus: today,
        dailyStreak: streak,
        bonusCount: (user.bonusCount || 0) + 1
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await this.checkAndAwardAchievements(userId);

      return {
        success: true,
        reward: reward,
        newBalance: user.stars + reward,
        streak: streak
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:', error);
      return {
        success: false,
        error: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞'
      };
    }
  }

  // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
  async activatePromocode(userId, code, ctx) {
    try {
      const user = await this.getUser(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
      if (user.usedPromos && user.usedPromos.includes(code)) {
        return {
          success: false,
          error: '‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –ë–î
      const promocode = await database.getPromocode(code);
      if (!promocode) {
        return {
          success: false,
          error: '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      if (promocode.used >= promocode.max) {
        return {
          success: false,
          error: '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'
        };
      }

      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
      await database.activatePromocode(code);
      
      // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.updateUser(userId, {
        stars: user.stars + promocode.stars,
        promoCount: (user.promoCount || 0) + 1,
        usedPromos: [...(user.usedPromos || []), code]
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await this.checkAndAwardAchievements(userId);

      return {
        success: true,
        reward: promocode.stars,
        newBalance: user.stars + promocode.stars
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
      return {
        success: false,
        error: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞'
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getProfile(userId, ctx) {
    try {
      const user = await this.getUser(userId);
      const stats = await database.getBotStatistics();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const rank = this.calculateRank(user.stars);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π —Ç–∏—Ç—É–ª
      const mainTitle = user.titles && user.titles.length > 0 ? 
        user.titles[user.titles.length - 1] : null;

      return {
        user,
        stats,
        rank,
        mainTitle
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
  async getDailyTasks(userId) {
    try {
      const user = await this.getUser(userId);
      const today = new Date().toISOString().split('T')[0];
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let userTasks = await database.getUserTasks(userId, today);
      
      if (!userTasks) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
        userTasks = {
          userId: userId,
          date: today,
          type: 'daily',
          completed: {
            farm: false,
            bonus: false,
            referral: false,
            promo: false
          },
          claimed: {
            farm: false,
            bonus: false,
            referral: false,
            promo: false
          }
        };
        await database.createUserTasks(userTasks);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
      const tasks = [
        {
          id: 'farm',
          title: '–§–∞—Ä–º 10 —Ä–∞–∑',
          description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞—Ä–º –∑–≤–µ–∑–¥ 10 —Ä–∞–∑',
          reward: '5‚≠ê',
          completed: userTasks.completed.farm,
          claimed: userTasks.claimed.farm
        },
        {
          id: 'bonus',
          title: '–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
          description: '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
          reward: '3‚≠ê',
          completed: userTasks.completed.bonus,
          claimed: userTasks.claimed.bonus
        },
        {
          id: 'referral',
          title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞',
          description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ',
          reward: '10‚≠ê',
          completed: userTasks.completed.referral,
          claimed: userTasks.claimed.referral
        },
        {
          id: 'promo',
          title: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥',
          description: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ª—é–±–æ–π –ø—Ä–æ–º–æ–∫–æ–¥',
          reward: '2‚≠ê',
          completed: userTasks.completed.promo,
          claimed: userTasks.claimed.promo
        }
      ];

      return tasks;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:', error);
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  async checkAndAwardAchievements(userId) {
    try {
      const user = await this.getUser(userId);
      const newTitles = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∑–≤–µ–∑–¥–∞–º
      if (user.stars >= 100 && !user.titles.includes('collector')) {
        newTitles.push({
          id: 'collector',
          name: 'üíé –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
          description: '–°–æ–±—Ä–∞–ª 100 –∑–≤–µ–∑–¥',
          earned: utils.now()
        });
      }

      if (user.stars >= 500 && !user.titles.includes('starlord')) {
        newTitles.push({
          id: 'starlord',
          name: 'üåü –ó–≤—ë–∑–¥–Ω—ã–π –ª–æ—Ä–¥',
          description: '–°–æ–±—Ä–∞–ª 500 –∑–≤–µ–∑–¥',
          earned: utils.now()
        });
      }

      if (user.stars >= 1000 && !user.titles.includes('legend')) {
        newTitles.push({
          id: 'legend',
          name: 'üëë –õ–µ–≥–µ–Ω–¥–∞',
          description: '–°–æ–±—Ä–∞–ª 1000 –∑–≤–µ–∑–¥',
          earned: utils.now()
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ñ–∞—Ä–º—É
      if (user.farmCount >= 50 && !user.titles.includes('farmer')) {
        newTitles.push({
          id: 'farmer',
          name: '‚ö° –§–∞—Ä–º–µ—Ä',
          description: '–í—ã–ø–æ–ª–Ω–∏–ª 50 –¥–µ–π—Å—Ç–≤–∏–π —Ñ–∞—Ä–º–∏–Ω–≥–∞',
          earned: utils.now()
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
      if (user.invited >= 5 && !user.titles.includes('ambassador')) {
        newTitles.push({
          id: 'ambassador',
          name: 'ü§ù –ê–º–±–∞—Å—Å–∞–¥–æ—Ä',
          description: '–ü—Ä–∏–≥–ª–∞—Å–∏–ª 5 –¥—Ä—É–∑–µ–π',
          earned: utils.now()
        });
      }

      if (user.invited >= 20 && !user.titles.includes('legend')) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏—Ç—É–ª –õ–µ–≥–µ–Ω–¥—ã
        const legendTitle = newTitles.find(t => t.id === 'legend');
        if (legendTitle) {
          legendTitle.description = '–°–æ–±—Ä–∞–ª 1000 –∑–≤–µ–∑–¥ –∏ –ø—Ä–∏–≥–ª–∞—Å–∏–ª 20 –¥—Ä—É–∑–µ–π';
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º
      if (user.promoCount >= 10 && !user.titles.includes('promomaster')) {
        newTitles.push({
          id: 'promomaster',
          name: 'üé´ –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
          description: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª 10 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
          earned: utils.now()
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –±–æ–Ω—É—Å–∞–º
      if (user.bonusCount >= 30 && !user.titles.includes('bonushunter')) {
        newTitles.push({
          id: 'bonushunter',
          name: 'üéÅ –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–æ–Ω—É—Å–∞–º–∏',
          description: '–°–æ–±—Ä–∞–ª 30 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤',
          earned: utils.now()
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π
      if (user.dailyStreak >= 7 && !user.titles.includes('regular')) {
        newTitles.push({
          id: 'regular',
          name: 'üìÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å',
          description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∑–∞—Ö–æ–¥–∏–ª –≤ –±–æ—Ç–∞',
          earned: utils.now()
        });
      }

      // –í—ã–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã
      if (newTitles.length > 0) {
        const updatedTitles = [...(user.titles || []), ...newTitles];
        await this.updateUser(userId, { titles: updatedTitles });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          const titlesText = newTitles.map(t => t.name).join(', ');
          await bot.telegram.sendMessage(userId,
            `üèÜ **–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!**\n\n` +
            `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã:\n` +
            `${titlesText}\n\n` +
            `–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥!`,
            { parse_mode: 'Markdown' }
          );
        } catch (notifyError) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ –Ω–æ–≤—ã—Ö —Ç–∏—Ç—É–ª–∞—Ö`);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    }
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  calculateRank(stars) {
    if (stars >= 1000) return { id: 'legend', name: 'üëë –õ–µ–≥–µ–Ω–¥–∞', color: '#FFD700' };
    if (stars >= 500) return { id: 'master', name: 'üåü –ú–∞—Å—Ç–µ—Ä', color: '#C0C0C0' };
    if (stars >= 100) return { id: 'expert', name: 'üíé –≠–∫—Å–ø–µ—Ä—Ç', color: '#CD7F32' };
    if (stars >= 50) return { id: 'advanced', name: '‚≠ê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', color: '#4CAF50' };
    if (stars >= 10) return { id: 'beginner', name: 'üå± –ù–æ–≤–∏—á–æ–∫', color: '#2196F3' };
    return { id: 'newbie', name: 'üÜï –ù–æ–≤–∏—á–æ–∫', color: '#9E9E9E' };
  }

  // –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
  async createWithdrawal(userId, amount, wallet) {
    try {
      const user = await this.getUser(userId);
      
      if (user.magnumCoins < amount) {
        return {
          success: false,
          error: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞'
        };
      }

      if (amount < 100) {
        return {
          success: false,
          error: '‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 100ü™ô'
        };
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
      const withdrawal = {
        userId: userId,
        username: user.username,
        amount: amount,
        wallet: wallet,
        status: 'pending',
        created: utils.now()
      };

      await database.createWithdrawal(withdrawal);
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      await this.updateUser(userId, {
        magnumCoins: user.magnumCoins - amount
      });

      return {
        success: true,
        withdrawalId: withdrawal.id
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:', error);
      return {
        success: false,
        error: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏'
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserWithdrawals(userId) {
    try {
      return await database.getUserWithdrawals(userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:', error);
      return [];
    }
  }

  // –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  async createSupportTicket(userId, message) {
    try {
      const user = await this.getUser(userId);
      
      const ticket = {
        userId: userId,
        username: user.username,
        message: message,
        status: 'new',
        created: utils.now(),
        updated: utils.now()
      };

      await database.createSupportTicket(ticket);
      
      return {
        success: true,
        ticketId: ticket.id
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
      return {
        success: false,
        error: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞'
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserTickets(userId) {
    try {
      return await database.getUserTickets(userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤:', error);
      return [];
    }
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä
  async startMiner(userId) {
    try {
      const user = await this.getUser(userId);
      
      if (user.miner && user.miner.active) {
        return {
          success: false,
          error: '‚õèÔ∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω'
        };
      }

      await this.updateUser(userId, {
        'miner.active': true,
        'miner.lastReward': utils.now()
      });

      return {
        success: true,
        message: '‚õèÔ∏è –ú–∞–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω! –û–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç.'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞:', error);
      return {
        success: false,
        error: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∞–π–Ω–µ—Ä–∞'
      };
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä
  async stopMiner(userId) {
    try {
      const user = await this.getUser(userId);
      
      if (!user.miner || !user.miner.active) {
        return {
          success: false,
          error: '‚õèÔ∏è –ú–∞–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω'
        };
      }

      await this.updateUser(userId, {
        'miner.active': false
      });

      return {
        success: true,
        message: '‚õèÔ∏è –ú–∞–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–π–Ω–µ—Ä–∞:', error);
      return {
        success: false,
        error: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∞–π–Ω–µ—Ä–∞'
      };
    }
  }

  // –û–±–º–µ–Ω –≤–∞–ª—é—Ç
  async exchangeCurrency(userId, fromCurrency, toCurrency, amount) {
    try {
      const user = await this.getUser(userId);
      const reserve = await database.getReserve();
      
      if (fromCurrency === 'magnumCoins' && toCurrency === 'stars') {
        // –ü–æ–∫—É–ø–∞–µ–º –∑–≤–µ–∑–¥—ã –∑–∞ Magnum Coins
        if (user.magnumCoins < amount) {
          return {
            success: false,
            error: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins'
          };
        }

        const rate = reserve.stars / reserve.magnumCoins;
        const commission = utils.calculateCommission(amount);
        const starsToReceive = (amount - commission) * rate;

        await this.updateUser(userId, {
          magnumCoins: user.magnumCoins - amount,
          stars: user.stars + starsToReceive
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
        await database.updateReserve({
          magnumCoins: reserve.magnumCoins + amount,
          stars: reserve.stars - starsToReceive
        });

        return {
          success: true,
          received: starsToReceive,
          commission: commission
        };
      } else if (fromCurrency === 'stars' && toCurrency === 'magnumCoins') {
        // –ü—Ä–æ–¥–∞–µ–º –∑–≤–µ–∑–¥—ã –∑–∞ Magnum Coins
        if (user.stars < amount) {
          return {
            success: false,
            error: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥'
          };
        }

        const rate = reserve.magnumCoins / reserve.stars;
        const commission = utils.calculateCommission(amount);
        const coinsToReceive = (amount - commission) * rate;

        await this.updateUser(userId, {
          stars: user.stars - amount,
          magnumCoins: user.magnumCoins + coinsToReceive
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
        await database.updateReserve({
          magnumCoins: reserve.magnumCoins - coinsToReceive,
          stars: reserve.stars + amount
        });

        return {
          success: true,
          received: coinsToReceive,
          commission: commission
        };
      } else {
        return {
          success: false,
          error: '‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ–±–º–µ–Ω–∞'
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç:', error);
      return {
        success: false,
        error: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ'
      };
    }
  }
}

module.exports = new UserService();