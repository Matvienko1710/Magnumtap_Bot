const config = require('../config/constants');
const logger = require('../utils/logger');
const cache = require('../utils/cache');

class MiningService {
  constructor(db) {
    this.db = db;
    this.miningInterval = null;
    this.isRunning = false;
  }

  // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–∞–π–Ω–∏–Ω–≥–∞
  startMining() {
    if (this.isRunning) {
      logger.warn('–°–∏—Å—Ç–µ–º–∞ –º–∞–π–Ω–∏–Ω–≥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
      return;
    }

    this.isRunning = true;
    this.miningInterval = setInterval(() => {
      this.processMiningRewards();
    }, config.MINING_REWARD_INTERVAL * 1000);

    logger.info('–°–∏—Å—Ç–µ–º–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞', {
      interval: config.MINING_REWARD_INTERVAL
    });
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–∞–π–Ω–∏–Ω–≥–∞
  stopMining() {
    if (this.miningInterval) {
      clearInterval(this.miningInterval);
      this.miningInterval = null;
    }
    this.isRunning = false;
    logger.info('–°–∏—Å—Ç–µ–º–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getMiningStats(userId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedStats = cache.getMiningStats(userId);
    if (cachedStats) {
      return cachedStats;
    }

    try {
      const user = await this.db.collection('users').findOne({ userId: parseInt(userId) });
      if (!user) {
        return { magnumCoins: 0, stars: 0, totalSpeed: { magnumCoins: 0, stars: 0 } };
      }

      const stats = {
        magnumCoins: user.magnumCoins || 0,
        stars: user.stars || 0,
        totalSpeed: this.calculateTotalSpeed(user)
      };

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      cache.setMiningStats(userId, stats);
      return stats;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–∏–Ω–≥–∞', { userId, error: error.message });
      return { magnumCoins: 0, stars: 0, totalSpeed: { magnumCoins: 0, stars: 0 } };
    }
  }

  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞
  calculateTotalSpeed(user) {
    const totalSpeed = { magnumCoins: 0, stars: 0 };

    if (user.miners && Array.isArray(user.miners)) {
      user.miners.forEach(miner => {
        if (miner.type === 'magnumCoins') {
          totalSpeed.magnumCoins += miner.speed || 0;
        } else if (miner.type === 'stars') {
          totalSpeed.stars += miner.speed || 0;
        }
      });
    }

    return totalSpeed;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–∏–Ω–≥–∞
  async processMiningRewards() {
    try {
      logger.debug('–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–∏–Ω–≥–∞');

      const users = await this.db.collection('users').find({}).toArray();
      let processedCount = 0;
      let totalRewardsMC = 0;
      let totalRewardsStars = 0;

      for (const user of users) {
        try {
          const totalSpeed = this.calculateTotalSpeed(user);
          const totalSpeedSum = totalSpeed.magnumCoins + totalSpeed.stars;

          if (totalSpeedSum > 0) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω
            const currentSeason = await this.getCurrentSeason();
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
            const rewardMC = totalSpeed.magnumCoins * config.MINING_REWARD_INTERVAL * currentSeason.multiplier;
            const rewardStars = totalSpeed.stars * config.MINING_REWARD_INTERVAL * currentSeason.multiplier;

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updateResult = await this.db.collection('users').updateOne(
              { userId: user.userId },
              {
                $inc: {
                  magnumCoins: rewardMC,
                  stars: rewardStars,
                  'miningStats.totalMinedMC': rewardMC,
                  'miningStats.totalMinedStars': rewardStars,
                  'miningStats.seasonMinedMC': rewardMC,
                  'miningStats.seasonMinedStars': rewardStars,
                  'miningStats.passiveRewards': rewardMC + rewardStars
                }
              }
            );

            if (updateResult.modifiedCount > 0) {
              processedCount++;
              totalRewardsMC += rewardMC;
              totalRewardsStars += rewardStars;

              // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—É
              logger.miningReward(user.userId, rewardMC, rewardStars, totalSpeed);

              // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              cache.delete(`mining_${user.userId}`);
              cache.delete(`user_${user.userId}`);
            }
          }
        } catch (error) {
          logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
            userId: user.userId,
            error: error.message
          });
        }
      }

      logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        processedUsers: processedCount,
        totalRewardsMC,
        totalRewardsStars
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–∏–Ω–≥–∞', { error: error.message });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
  async getCurrentSeason() {
    try {
      const season = await this.db.collection('seasons').findOne({ isActive: true });
      return season || { multiplier: 1.0, name: 'Default Season' };
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞', { error: error.message });
      return { multiplier: 1.0, name: 'Default Season' };
    }
  }

  // –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–∫ –º–∞–π–Ω–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async processActiveMiningClick(userId) {
    try {
      if (!config.ADMIN_IDS.includes(userId)) {
        logger.warn('–ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–µ –∞–¥–º–∏–Ω–æ–º', { userId });
        return { success: false, message: 'üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' };
      }

      const user = await this.db.collection('users').findOne({ userId: parseInt(userId) });
      if (!user) {
        return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      const totalSpeed = this.calculateTotalSpeed(user);
      const totalSpeedSum = totalSpeed.magnumCoins + totalSpeed.stars;

      if (totalSpeedSum === 0) {
        return { success: false, message: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤' };
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–∫
      const currentSeason = await this.getCurrentSeason();
      const rewardMC = totalSpeed.magnumCoins * 0.1 * currentSeason.multiplier;
      const rewardStars = totalSpeed.stars * 0.1 * currentSeason.multiplier;

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      await this.db.collection('users').updateOne(
        { userId: parseInt(userId) },
        {
          $inc: {
            magnumCoins: rewardMC,
            stars: rewardStars,
            'miningStats.activeClicks': 1,
            'miningStats.activeRewards': rewardMC + rewardStars
          }
        }
      );

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      cache.delete(`mining_${userId}`);
      cache.delete(`user_${userId}`);

      logger.userAction(userId, 'active_mining_click', {
        rewardMC,
        rewardStars,
        totalSpeed
      });

      return {
        success: true,
        message: '‚úÖ –ö–ª–∏–∫!',
        rewardMC,
        rewardStars
      };

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞', { userId, error: error.message });
      return { success: false, message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞' };
    }
  }

  // –ê–ø–≥—Ä–µ–π–¥ –º–∞–π–Ω–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async upgradeMiner(userId, minerType) {
    try {
      if (!config.ADMIN_IDS.includes(userId)) {
        logger.warn('–ü–æ–ø—ã—Ç–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞ –Ω–µ –∞–¥–º–∏–Ω–æ–º', { userId, minerType });
        return { success: false, message: 'üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' };
      }

      const user = await this.db.collection('users').findOne({ userId: parseInt(userId) });
      if (!user) {
        return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      // –õ–æ–≥–∏–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞
      const upgradeResult = await this.performMinerUpgrade(user, minerType);
      
      if (upgradeResult.success) {
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        cache.delete(`mining_${userId}`);
        cache.delete(`user_${userId}`);
        
        logger.userAction(userId, 'miner_upgrade', {
          minerType,
          newLevel: upgradeResult.newLevel
        });
      }

      return upgradeResult;

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞', { userId, minerType, error: error.message });
      return { success: false, message: '–û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞' };
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞
  async performMinerUpgrade(user, minerType) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return {
      success: true,
      message: '–ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∞–ø–≥—Ä–µ–π–¥–µ–Ω',
      newLevel: 1
    };
  }
}

module.exports = MiningService;

