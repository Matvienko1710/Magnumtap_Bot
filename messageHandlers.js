// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Magnum Stars Bot

class MessageHandlers {
  constructor(bot, modules) {
    this.bot = bot;
    this.modules = modules;
    this.setupMessageHandlers();
  }

  setupMessageHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      try {
        await this.handleTextMessage(ctx);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });
  }

  async handleTextMessage(ctx) {
    const text = ctx.message.text;
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (ctx.session && ctx.session.waitingFor) {
      await this.handleUserInput(ctx, text);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text.startsWith('/')) {
      await this.handleCommands(ctx, text);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥)
    if (this.isPromocodeFormat(text)) {
      await this.handlePromocode(ctx, text);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await this.handleRegularMessage(ctx, text);
  }

  async handleUserInput(ctx, text) {
    const waitingFor = ctx.session.waitingFor;
    const userId = ctx.from.id;

    try {
      switch (waitingFor) {
        case 'magnum_to_stars_amount':
          await this.handleMagnumToStarsAmount(ctx, text);
          break;
        
        case 'stars_to_magnum_amount':
          await this.handleStarsToMagnumAmount(ctx, text);
          break;
        
        case 'withdrawal_amount':
          await this.handleWithdrawalAmount(ctx, text);
          break;
        
        case 'withdrawal_wallet':
          await this.handleWithdrawalWallet(ctx, text);
          break;
        
        case 'promocode':
          await this.handlePromocodeInput(ctx, text);
          break;
        
        case 'ticket_subject':
          await this.handleTicketSubject(ctx, text);
          break;
        
        case 'ticket_message':
          await this.handleTicketMessage(ctx, text);
          break;
        
        case 'broadcast_message':
          await this.handleBroadcastMessage(ctx, text);
          break;
        
        default:
          await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞');
          break;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  async handleMagnumToStarsAmount(ctx, text) {
    const amount = parseFloat(text);
    const userId = ctx.from.id;

    if (isNaN(amount) || amount < 1) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.');
      return;
    }

    const user = await this.modules.userModule.getUser(userId);
    
    if (user.magnumCoins < amount) {
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins –¥–ª—è –æ–±–º–µ–Ω–∞.');
      return;
    }

    const result = await this.modules.exchangeModule.exchangeMagnumToStars(userId, amount, ctx);
    
    if (result.success) {
      const message = `‚úÖ **–û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!**\n\n` +
                     `ü™ô –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${amount} Magnum Coins\n` +
                     `‚≠ê –ü–æ–ª—É—á–µ–Ω–æ: ${result.received} –∑–≤–µ–∑–¥\n` +
                     `üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${result.commission} Magnum Coins\n\n` +
                     `üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:\n` +
                     `ü™ô Magnum Coins: ${result.newMagnumBalance}\n` +
                     `‚≠ê –ó–≤–µ–∑–¥—ã: ${result.newStarsBalance}`;
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: this.modules.interfaceModule.getMainMenu(user).reply_markup
      });
    } else {
      await ctx.reply(result.message);
    }

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session = {};
  }

  async handleStarsToMagnumAmount(ctx, text) {
    const amount = parseFloat(text);
    const userId = ctx.from.id;

    if (isNaN(amount) || amount < 1) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.');
      return;
    }

    const user = await this.modules.userModule.getUser(userId);
    
    if (user.stars < amount) {
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –æ–±–º–µ–Ω–∞.');
      return;
    }

    const result = await this.modules.exchangeModule.exchangeStarsToMagnum(userId, amount, ctx);
    
    if (result.success) {
      const message = `‚úÖ **–û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!**\n\n` +
                     `‚≠ê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${amount} –∑–≤–µ–∑–¥\n` +
                     `ü™ô –ü–æ–ª—É—á–µ–Ω–æ: ${result.received} Magnum Coins\n` +
                     `üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${result.commission} –∑–≤–µ–∑–¥\n\n` +
                     `üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:\n` +
                     `‚≠ê –ó–≤–µ–∑–¥—ã: ${result.newStarsBalance}\n` +
                     `ü™ô Magnum Coins: ${result.newMagnumBalance}`;
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: this.modules.interfaceModule.getMainMenu(user).reply_markup
      });
    } else {
      await ctx.reply(result.message);
    }

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session = {};
  }

  async handleWithdrawalAmount(ctx, text) {
    const amount = parseFloat(text);
    const userId = ctx.from.id;
    const method = ctx.session.withdrawalMethod;

    if (isNaN(amount) || amount < 100 || amount > 10000) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ú–∏–Ω–∏–º—É–º: 100ü™ô, –º–∞–∫—Å–∏–º—É–º: 10,000ü™ô');
      return;
    }

    const user = await this.modules.userModule.getUser(userId);
    
    if (user.magnumCoins < amount) {
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins –¥–ª—è –≤—ã–≤–æ–¥–∞.');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫
    ctx.session.withdrawalAmount = amount;
    ctx.session.waitingFor = 'withdrawal_wallet';

    const methodNames = {
      'usdt_trc20': 'USDT (TRC20)',
      'btc': 'Bitcoin',
      'eth': 'Ethereum',
      'card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'
    };

    const message = `üí≥ **–í–≤–æ–¥ –∫–æ—à–µ–ª—å–∫–∞**\n\n` +
                   `üí∞ –°—É–º–º–∞: ${amount}ü™ô\n` +
                   `üí≥ –ú–µ—Ç–æ–¥: ${methodNames[method]}\n\n` +
                   `üí° –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:`;

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: this.modules.interfaceModule.getWithdrawalMenu().reply_markup
    });
  }

  async handleWithdrawalWallet(ctx, text) {
    const wallet = text.trim();
    const userId = ctx.from.id;
    const method = ctx.session.withdrawalMethod;
    const amount = ctx.session.withdrawalAmount;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
    if (!this.modules.withdrawalModule.validateWallet(wallet, method)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.');
      return;
    }

    const result = await this.modules.withdrawalModule.createWithdrawal(
      userId, 
      amount, 
      method, 
      wallet, 
      ctx
    );

    if (result.success) {
      const message = `‚úÖ **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!**\n\n` +
                     `üí∞ –°—É–º–º–∞: ${amount}ü™ô\n` +
                     `üí≥ –ú–µ—Ç–æ–¥: ${this.modules.withdrawalModule.getMethodName(method)}\n` +
                     `üìã –ö–æ—à–µ–ª–µ–∫: \`${wallet}\`\n\n` +
                     `üìä –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n` +
                     `‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 1-24 —á–∞—Å–∞`;
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: this.modules.interfaceModule.getWithdrawalMenu().reply_markup
      });
    } else {
      await ctx.reply(result.message);
    }

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session = {};
  }

  async handlePromocodeInput(ctx, text) {
    const code = text.trim().toUpperCase();
    const userId = ctx.from.id;

    if (!this.modules.interfaceModule.validatePromocode(code)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.');
      return;
    }

    const result = await this.modules.userModule.activatePromocode(userId, code, ctx);
    
    if (result.success) {
      const message = `‚úÖ **–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n` +
                     `üé´ –ö–æ–¥: ${code}\n` +
                     `üéÅ –ù–∞–≥—Ä–∞–¥–∞: ${result.reward}\n` +
                     `üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.newBalance}`;
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: this.modules.interfaceModule.getPromocodesMenu().reply_markup
      });
    } else {
      await ctx.reply(result.message);
    }

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session = {};
  }

  async handleTicketSubject(ctx, text) {
    const subject = text.trim();
    const userId = ctx.from.id;

    if (subject.length < 5) {
      await ctx.reply('‚ùå –¢–µ–º–∞ —Ç–∏–∫–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    if (subject.length > 100) {
      await ctx.reply('‚ùå –¢–µ–º–∞ —Ç–∏–∫–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    ctx.session.ticketSubject = subject;
    ctx.session.waitingFor = 'ticket_message';

    const message = `üìù **–í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n` +
                   `üìã –¢–µ–º–∞: ${subject}\n\n` +
                   `üí° –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:`;

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: this.modules.interfaceModule.getSupportMenu().reply_markup
    });
  }

  async handleTicketMessage(ctx, text) {
    const message = text.trim();
    const userId = ctx.from.id;
    const subject = ctx.session.ticketSubject;

    if (message.length < 10) {
      await ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    if (message.length > 1000) {
      await ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    const result = await this.modules.supportModule.createTicket(userId, subject, message, ctx);
    
    if (result.success) {
      await ctx.reply(result.message, {
        parse_mode: 'Markdown',
        reply_markup: this.modules.interfaceModule.getSupportMenu().reply_markup
      });
    } else {
      await ctx.reply(result.message);
    }

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session = {};
  }

  async handleBroadcastMessage(ctx, text) {
    const message = text.trim();
    const adminId = ctx.from.id;

    if (!this.modules.interfaceModule.isAdmin(adminId)) {
      await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    if (message.length < 5) {
      await ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    const result = await this.modules.adminModule.broadcastMessage(message, adminId);
    
    if (result.success) {
      await ctx.reply(`‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**\n\n` +
                     `üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n` +
                     `‚ùå –û—à–∏–±–æ–∫: ${result.errorCount}`);
    } else {
      await ctx.reply(result.message);
    }

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session = {};
  }

  async handleCommands(ctx, text) {
    const command = text.toLowerCase();
    const userId = ctx.from.id;

    switch (command) {
      case '/start':
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ
        break;
      
      case '/help':
        await this.showHelp(ctx);
        break;
      
      case '/balance':
        await this.showBalance(ctx);
        break;
      
      case '/profile':
        await this.showProfile(ctx);
        break;
      
      case '/stats':
        await this.showStats(ctx);
        break;
      
      case '/support':
        await this.showSupport(ctx);
        break;
      
      default:
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
        break;
    }
  }

  async handlePromocode(ctx, text) {
    const code = text.trim().toUpperCase();
    const userId = ctx.from.id;

    if (!this.modules.interfaceModule.validatePromocode(code)) {
      return; // –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    }

    const result = await this.modules.userModule.activatePromocode(userId, code, ctx);
    
    if (result.success) {
      const message = `‚úÖ **–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n` +
                     `üé´ –ö–æ–¥: ${code}\n` +
                     `üéÅ –ù–∞–≥—Ä–∞–¥–∞: ${result.reward}\n` +
                     `üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.newBalance}`;
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: this.modules.interfaceModule.getMainMenu(
          await this.modules.userModule.getUser(userId)
        ).reply_markup
      });
    } else {
      await ctx.reply(result.message);
    }
  }

  async handleRegularMessage(ctx, text) {
    const userId = ctx.from.id;
    const user = await this.modules.userModule.getUser(userId);

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–º–µ–Ω
    if (!isNaN(parseFloat(text)) && parseFloat(text) > 0) {
      const amount = parseFloat(text);
      
      if (amount <= user.magnumCoins) {
        const message = `üí° **–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É–º–º–∞: ${amount}**\n\n` +
                       `–•–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å ${amount}ü™ô –Ω–∞ –∑–≤–µ–∑–¥—ã?\n\n` +
                       `üí± –ö—É—Ä—Å: 1ü™ô = ~1‚≠ê (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏)`;
        
        const keyboard = {
          inline_keyboard: [
            [
              { text: '‚úÖ –û–±–º–µ–Ω—è—Ç—å', callback_data: `quick_exchange_magnum_${amount}` },
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }
            ]
          ]
        };
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
        return;
      }
    }

    // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const welcomeMessage = `üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!**\n\n` +
                          `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n` +
                          `‚≠ê –ó–≤–µ–∑–¥—ã: ${user.stars}\n` +
                          `ü™ô Magnum Coins: ${user.magnumCoins}\n\n` +
                          `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.reply(welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: this.modules.interfaceModule.getMainMenu(user).reply_markup
    });
  }

  async showHelp(ctx) {
    const helpMessage = `üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**\n\n` +
                       `üîπ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n` +
                       `üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
                       `üîπ /balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n` +
                       `üîπ /profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n` +
                       `üîπ /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n` +
                       `üîπ /support - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n` +
                       `üí° **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è**\n` +
                       `‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–º–µ–Ω–∞\n` +
                       `‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n` +
                       `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏`;
    
    await ctx.reply(helpMessage, {
      parse_mode: 'Markdown',
      reply_markup: this.modules.interfaceModule.getMainMenu(
        await this.modules.userModule.getUser(ctx.from.id)
      ).reply_markup
    });
  }

  async showBalance(ctx) {
    const userId = ctx.from.id;
    const user = await this.modules.userModule.getUser(userId);
    
    const balanceMessage = `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å**\n\n` +
                          `‚≠ê –ó–≤–µ–∑–¥—ã: ${user.stars}\n` +
                          `ü™ô Magnum Coins: ${user.magnumCoins}\n\n` +
                          `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n` +
                          `üåæ –§–∞—Ä–º–æ–≤: ${user.farmCount || 0}\n` +
                          `üéÅ –ë–æ–Ω—É—Å–æ–≤: ${user.bonusCount || 0}\n` +
                          `üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.invited || 0}`;
    
    await ctx.reply(balanceMessage, {
      parse_mode: 'Markdown',
      reply_markup: this.modules.interfaceModule.getMainMenu(user).reply_markup
    });
  }

  async showProfile(ctx) {
    const userId = ctx.from.id;
    const result = await this.modules.userModule.getProfile(userId, ctx);
    
    if (result) {
      const message = this.modules.interfaceModule.formatProfile(
        result.user,
        result.rank,
        result.mainTitle,
        result.botStats
      );
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: this.modules.interfaceModule.getMainMenu(result.user).reply_markup
      });
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }

  async showStats(ctx) {
    const userId = ctx.from.id;
    const user = await this.modules.userModule.getUser(userId);
    
    const statsMessage = `üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n` +
                        `üåæ **–§–∞—Ä–º**\n` +
                        `üìà –í—Å–µ–≥–æ —Ñ–∞—Ä–º–æ–≤: ${user.farmCount || 0}\n` +
                        `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞—Ä–º–æ–º: ${user.totalEarnedStars || 0}‚≠ê\n\n` +
                        `üéÅ **–ë–æ–Ω—É—Å—ã**\n` +
                        `üìÖ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${user.bonusCount || 0}\n` +
                        `üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: ${user.dailyStreak || 0}\n\n` +
                        `üë• **–†–µ—Ñ–µ—Ä–∞–ª—ã**\n` +
                        `üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.invited || 0}\n` +
                        `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${(user.invited || 0) * 50}‚≠ê\n\n` +
                        `üé´ **–ü—Ä–æ–º–æ–∫–æ–¥—ã**\n` +
                        `üìù –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: ${user.promoCount || 0}`;
    
    await ctx.reply(statsMessage, {
      parse_mode: 'Markdown',
      reply_markup: this.modules.interfaceModule.getMainMenu(user).reply_markup
    });
  }

  async showSupport(ctx) {
    const supportMessage = `‚ùì **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n` +
                          `üìû –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ú—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n\n` +
                          `üìù **–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç** - –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º\n` +
                          `‚ùì **FAQ** - —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n` +
                          `üìû **–°–≤—è–∑–∞—Ç—å—Å—è** - –ø—Ä—è–º–∞—è —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n` +
                          `‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 1-24 —á–∞—Å–∞`;
    
    await ctx.reply(supportMessage, {
      parse_mode: 'Markdown',
      reply_markup: this.modules.interfaceModule.getSupportMenu().reply_markup
    });
  }

  isPromocodeFormat(text) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥
    const code = text.trim().toUpperCase();
    return /^[A-Z0-9]{4,12}$/.test(code);
  }
}

module.exports = MessageHandlers;