const config = require('./config');

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
function formatNumber(num) {
  if (num === null || num === undefined) return '0';
  
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  } else {
    return num.toFixed(2);
  }
}

function formatLargeNumber(num) {
  if (num === null || num === undefined) return '0';
  
  if (num >= 1000000000) {
    return (num / 1000000000).toFixed(2) + 'B';
  } else if (num >= 1000000) {
    return (num / 1000000).toFixed(2) + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(2) + 'K';
  } else {
    return num.toFixed(2);
  }
}

// –†–∞—Å—á–µ—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏
function calculateCommission(amount) {
  return amount * (config.EXCHANGE_COMMISSION / 100);
}

function calculateAmountWithCommission(amount) {
  return amount * (1 - config.EXCHANGE_COMMISSION / 100);
}

// –†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
function calculateExchangeRate(fromCurrency, toCurrency, reserve) {
  if (fromCurrency === 'magnumCoins' && toCurrency === 'stars') {
    return reserve.stars / reserve.magnumCoins;
  } else if (fromCurrency === 'stars' && toCurrency === 'magnumCoins') {
    return reserve.magnumCoins / reserve.stars;
  }
  return 1;
}

// –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥
function calculateMinerReward() {
  return config.MINER_REWARD_PER_HOUR;
}

function calculateFarmReward(user, baseReward = 1) {
  let reward = baseReward;
  
  // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –æ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  if (user.achievements) {
    const farmBoost = user.achievements.find(a => a.type === 'farm_boost');
    if (farmBoost) {
      reward *= (1 + farmBoost.level * 0.1); // +10% –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
    }
  }
  
  // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –æ—Ç —Ç–∏—Ç—É–ª–æ–≤
  if (user.titles && user.titles.length > 0) {
    const farmTitle = user.titles.find(t => t.type === 'farm_boost');
    if (farmTitle) {
      reward *= (1 + farmTitle.boost);
    }
  }
  
  return Math.max(reward, 0.1); // –ú–∏–Ω–∏–º—É–º 0.1 –∑–≤–µ–∑–¥—ã
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
function createProgressBar(current, total, length = 10) {
  const progress = Math.min(current / total, 1);
  const filled = Math.round(progress * length);
  const empty = length - filled;
  
  return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
function checkCooldown(lastAction, cooldownSeconds) {
  const now = Math.floor(Date.now() / 1000);
  const timeSinceLastAction = now - lastAction;
  return {
    canAct: timeSinceLastAction >= cooldownSeconds,
    remaining: Math.max(0, cooldownSeconds - timeSinceLastAction)
  };
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
function validatePromocode(code) {
  if (!code || typeof code !== 'string') return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (3-20 —Å–∏–º–≤–æ–ª–æ–≤)
  if (code.length < 3 || code.length > 20) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã)
  if (!/^[A-Z0-9-]+$/i.test(code)) return false;
  
  return true;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
function validateAmount(amount, min = 0, max = Infinity) {
  const num = parseFloat(amount);
  return !isNaN(num) && num >= min && num <= max;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
function generateId() {
  return Math.random().toString(36).substr(2, 9);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(seconds) {
  if (seconds < 60) {
    return `${seconds}—Å`;
  } else if (seconds < 3600) {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes}–º ${secs}—Å`;
  } else {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}—á ${minutes}–º`;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
function isAdmin(userId) {
  return config.ADMIN_IDS.includes(String(userId));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function now() {
  return Math.floor(Date.now() / 1000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
function handleError(error, context = '') {
  console.error(`‚ùå –û—à–∏–±–∫–∞ ${context}:`, error);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
  if (error.stack) {
    console.error('üìç Stack trace:', error.stack);
  }
  
  return {
    success: false,
    error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    context
  };
}

// –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
function success(data = null) {
  return {
    success: true,
    data
  };
}

module.exports = {
  formatNumber,
  formatLargeNumber,
  calculateCommission,
  calculateAmountWithCommission,
  calculateExchangeRate,
  calculateMinerReward,
  calculateFarmReward,
  createProgressBar,
  checkCooldown,
  validatePromocode,
  validateAmount,
  generateId,
  formatTime,
  isAdmin,
  now,
  handleError,
  success
};