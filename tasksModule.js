class TasksModule {
  constructor(database, cache) {
    this.db = database;
    this.cache = cache;
  }

  async getDailyTasks(userId, ctx) {
    try {
      const user = await this.getUser(userId);
      const today = new Date().toISOString().split('T')[0];
      
      let dailyTasks = await this.db.collections.dailyTasks.findOne({
        userId: parseInt(userId),
        date: today
      });

      if (!dailyTasks) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        dailyTasks = await this.createDailyTasks(userId, today);
      }

      return {
        success: true,
        tasks: dailyTasks.tasks,
        completed: dailyTasks.completed,
        rewards: dailyTasks.rewards
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async createDailyTasks(userId, date) {
    const tasks = [
      {
        id: 'farm_10',
        name: '–§–∞—Ä–º 10 —Ä–∞–∑',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞—Ä–º 10 —Ä–∞–∑',
        type: 'farm',
        target: 10,
        reward: 5,
        completed: false,
        progress: 0
      },
      {
        id: 'bonus_1',
        name: '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
        type: 'bonus',
        target: 1,
        reward: 3,
        completed: false,
        progress: 0
      },
      {
        id: 'promo_1',
        name: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥',
        description: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ª—é–±–æ–π –ø—Ä–æ–º–æ–∫–æ–¥',
        type: 'promo',
        target: 1,
        reward: 10,
        completed: false,
        progress: 0
      },
      {
        id: 'exchange_1',
        name: '–û–±–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—É',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã',
        type: 'exchange',
        target: 1,
        reward: 8,
        completed: false,
        progress: 0
      },
      {
        id: 'miner_1h',
        name: '–ú–∞–π–Ω–µ—Ä 1 —á–∞—Å',
        description: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞–π–Ω–µ—Ä –Ω–∞ 1 —á–∞—Å',
        type: 'miner',
        target: 3600, // 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        reward: 15,
        completed: false,
        progress: 0
      }
    ];

    const dailyTasks = {
      userId: parseInt(userId),
      date: date,
      tasks: tasks,
      completed: 0,
      rewards: 0,
      createdAt: new Date()
    };

    await this.db.collections.dailyTasks.insertOne(dailyTasks);
    return dailyTasks;
  }

  async updateTaskProgress(userId, taskType, amount = 1) {
    try {
      const today = new Date().toISOString().split('T')[0];
      
      const dailyTasks = await this.db.collections.dailyTasks.findOne({
        userId: parseInt(userId),
        date: today
      });

      if (!dailyTasks) return;

      let updated = false;
      const updatedTasks = dailyTasks.tasks.map(task => {
        if (task.type === taskType && !task.completed) {
          const newProgress = task.progress + amount;
          if (newProgress >= task.target) {
            task.completed = true;
            task.progress = task.target;
            updated = true;
          } else {
            task.progress = newProgress;
          }
        }
        return task;
      });

      if (updated) {
        const completedCount = updatedTasks.filter(t => t.completed).length;
        const totalReward = updatedTasks
          .filter(t => t.completed)
          .reduce((sum, t) => sum + t.reward, 0);

        await this.db.collections.dailyTasks.updateOne(
          { _id: dailyTasks._id },
          {
            $set: {
              tasks: updatedTasks,
              completed: completedCount,
              rewards: totalReward
            }
          }
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        if (completedCount === updatedTasks.length) {
          await this.giveDailyTasksReward(userId, totalReward);
        }
      } else {
        await this.db.collections.dailyTasks.updateOne(
          { _id: dailyTasks._id },
          { $set: { tasks: updatedTasks } }
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', error);
    }
  }

  async giveDailyTasksReward(userId, reward) {
    try {
      await this.db.collections.users.updateOne(
        { id: parseInt(userId) },
        {
          $inc: { 
            stars: reward,
            totalEarnedStars: reward
          }
        }
      );

      this.cache.userCache.delete(userId.toString());

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const message = `üéâ **–í—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!**\n\n` +
                     `üéÅ –ù–∞–≥—Ä–∞–¥–∞: ${reward}‚≠ê\n` +
                     `üìä –ó–∞–¥–∞–Ω–∏—è: 5/5 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n` +
                     `–ó–∞–≤—Ç—Ä–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è!`;

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${message}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è:', error);
    }
  }

  async getSponsorTasks(userId, ctx) {
    try {
      const user = await this.getUser(userId);
      
      const sponsorTasks = [
        {
          id: 'join_channel',
          name: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
          description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª',
          type: 'subscription',
          reward: 50,
          link: 'https://t.me/example_channel',
          completed: false
        },
        {
          id: 'join_bot',
          name: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ—Ç–∞',
          description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞',
          type: 'subscription',
          reward: 30,
          link: 'https://t.me/example_bot',
          completed: false
        },
        {
          id: 'invite_5',
          name: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5 –¥—Ä—É–∑–µ–π',
          description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ',
          type: 'referral',
          target: 5,
          reward: 100,
          completed: false,
          progress: user.invited || 0
        }
      ];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
      const completedTasks = await this.db.collections.sponsorTasks
        .find({ userId: parseInt(userId) })
        .toArray();

      const completedTaskIds = completedTasks.map(t => t.taskId);

      const updatedTasks = sponsorTasks.map(task => ({
        ...task,
        completed: completedTaskIds.includes(task.id)
      }));

      return {
        success: true,
        tasks: updatedTasks
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async completeSponsorTask(userId, taskId, ctx) {
    try {
      const user = await this.getUser(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω–∏–µ
      const existing = await this.db.collections.sponsorTasks.findOne({
        userId: parseInt(userId),
        taskId: taskId
      });

      if (existing) {
        return {
          success: false,
          message: '‚ùå –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
        };
      }

      let taskReward = 0;
      let taskName = '';

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
      switch (taskId) {
        case 'join_channel':
          taskReward = 50;
          taskName = '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª';
          break;
        case 'join_bot':
          taskReward = 30;
          taskName = '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞';
          break;
        case 'invite_5':
          if ((user.invited || 0) < 5) {
            return {
              success: false,
              message: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π (–Ω—É–∂–Ω–æ 5)'
            };
          }
          taskReward = 100;
          taskName = '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ 5 –¥—Ä—É–∑–µ–π';
          break;
        default:
          return {
            success: false,
            message: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'
          };
      }

      // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
      await this.db.collections.sponsorTasks.insertOne({
        userId: parseInt(userId),
        taskId: taskId,
        completedAt: new Date()
      });

      // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
      await this.db.collections.users.updateOne(
        { id: parseInt(userId) },
        {
          $inc: { 
            stars: taskReward,
            totalEarnedStars: taskReward
          }
        }
      );

      this.cache.userCache.delete(userId.toString());

      return {
        success: true,
        reward: taskReward,
        message: `‚úÖ –ó–∞–¥–∞–Ω–∏–µ "${taskName}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n` +
                `üéÅ –ù–∞–≥—Ä–∞–¥–∞: ${taskReward}‚≠ê`
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async getAchievements(userId, ctx) {
    try {
      const user = await this.getUser(userId);
      const achievements = await this.getAvailableAchievements();
      
      // –û—Ç–º–µ—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const userAchievements = user.achievements || [];
      const userAchievementIds = userAchievements.map(a => a.id);

      const updatedAchievements = achievements.map(achievement => ({
        ...achievement,
        completed: userAchievementIds.includes(achievement.id),
        userProgress: this.getUserProgressForAchievement(user, achievement)
      }));

      return {
        success: true,
        achievements: updatedAchievements,
        userAchievements: userAchievements
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async getAvailableAchievements() {
    return [
      {
        id: 'first_farm',
        name: '–ü–µ—Ä–≤—ã–π —Ñ–∞—Ä–º',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∞—Ä–º',
        type: 'farm',
        target: 1,
        reward: 10,
        icon: 'üå±'
      },
      {
        id: 'farm_10',
        name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π —Ñ–µ—Ä–º–µ—Ä',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞—Ä–º 10 —Ä–∞–∑',
        type: 'farm',
        target: 10,
        reward: 25,
        icon: 'üåæ'
      },
      {
        id: 'farm_100',
        name: '–û–ø—ã—Ç–Ω—ã–π —Ñ–µ—Ä–º–µ—Ä',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞—Ä–º 100 —Ä–∞–∑',
        type: 'farm',
        target: 100,
        reward: 100,
        icon: 'üöú'
      },
      {
        id: 'farm_1000',
        name: '–ú–∞—Å—Ç–µ—Ä —Ñ–µ—Ä–º–µ—Ä',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞—Ä–º 1000 —Ä–∞–∑',
        type: 'farm',
        target: 1000,
        reward: 500,
        icon: 'üë®‚Äçüåæ'
      },
      {
        id: 'first_bonus',
        name: '–ü–µ—Ä–≤—ã–π –±–æ–Ω—É—Å',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
        type: 'bonus',
        target: 1,
        reward: 15,
        icon: 'üéÅ'
      },
      {
        id: 'bonus_7',
        name: '–ù–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        type: 'bonus_streak',
        target: 7,
        reward: 50,
        icon: 'üìÖ'
      },
      {
        id: 'bonus_30',
        name: '–ú–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        type: 'bonus_streak',
        target: 30,
        reward: 200,
        icon: 'üìÜ'
      },
      {
        id: 'first_promo',
        name: '–ü–µ—Ä–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥',
        description: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥',
        type: 'promo',
        target: 1,
        reward: 20,
        icon: 'üé´'
      },
      {
        id: 'promo_10',
        name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
        description: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ 10 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
        type: 'promo',
        target: 10,
        reward: 100,
        icon: 'üìö'
      },
      {
        id: 'promo_50',
        name: '–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
        description: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ 50 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
        type: 'promo',
        target: 50,
        reward: 500,
        icon: 'üèÜ'
      },
      {
        id: 'first_exchange',
        name: '–ü–µ—Ä–≤—ã–π –æ–±–º–µ–Ω',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤—ã–π –æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã',
        type: 'exchange',
        target: 1,
        reward: 30,
        icon: 'üí±'
      },
      {
        id: 'exchange_10',
        name: '–¢—Ä–µ–π–¥–µ—Ä',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 –æ–±–º–µ–Ω–æ–≤',
        type: 'exchange',
        target: 10,
        reward: 150,
        icon: 'üìà'
      },
      {
        id: 'first_invite',
        name: '–ü–µ—Ä–≤—ã–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π',
        description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞',
        type: 'referral',
        target: 1,
        reward: 50,
        icon: 'üë•'
      },
      {
        id: 'invite_10',
        name: '–ö–æ–º–∞–Ω–¥–∞',
        description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 10 –¥—Ä—É–∑–µ–π',
        type: 'referral',
        target: 10,
        reward: 300,
        icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶'
      },
      {
        id: 'invite_50',
        name: '–õ–∏–¥–µ—Ä',
        description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 50 –¥—Ä—É–∑–µ–π',
        type: 'referral',
        target: 50,
        reward: 1000,
        icon: 'üëë'
      },
      {
        id: 'miner_1h',
        name: '–ü–µ—Ä–≤—ã–π —á–∞—Å –º–∞–π–Ω–∏–Ω–≥–∞',
        description: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞–π–Ω–µ—Ä –Ω–∞ 1 —á–∞—Å',
        type: 'miner_time',
        target: 3600,
        reward: 25,
        icon: '‚õèÔ∏è'
      },
      {
        id: 'miner_24h',
        name: '–î–µ–Ω—å –º–∞–π–Ω–∏–Ω–≥–∞',
        description: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞–π–Ω–µ—Ä –Ω–∞ 24 —á–∞—Å–∞',
        type: 'miner_time',
        target: 86400,
        reward: 200,
        icon: '‚õèÔ∏è‚è∞'
      },
      {
        id: 'stars_1000',
        name: '–¢—ã—Å—è—á–∞ –∑–≤–µ–∑–¥',
        description: '–ù–∞–∫–æ–ø–∏—Ç–µ 1000 –∑–≤–µ–∑–¥',
        type: 'stars_balance',
        target: 1000,
        reward: 100,
        icon: '‚≠ê'
      },
      {
        id: 'stars_10000',
        name: '–î–µ—Å—è—Ç—å —Ç—ã—Å—è—á –∑–≤–µ–∑–¥',
        description: '–ù–∞–∫–æ–ø–∏—Ç–µ 10000 –∑–≤–µ–∑–¥',
        type: 'stars_balance',
        target: 10000,
        reward: 500,
        icon: '‚≠ê‚≠ê'
      },
      {
        id: 'magnum_100',
        name: '–°–æ—Ç–Ω—è –º–æ–Ω–µ—Ç',
        description: '–ù–∞–∫–æ–ø–∏—Ç–µ 100 Magnum Coins',
        type: 'magnum_balance',
        target: 100,
        reward: 50,
        icon: 'ü™ô'
      },
      {
        id: 'magnum_1000',
        name: '–¢—ã—Å—è—á–∞ –º–æ–Ω–µ—Ç',
        description: '–ù–∞–∫–æ–ø–∏—Ç–µ 1000 Magnum Coins',
        type: 'magnum_balance',
        target: 1000,
        reward: 200,
        icon: 'ü™ôü™ô'
      }
    ];
  }

  getUserProgressForAchievement(user, achievement) {
    switch (achievement.type) {
      case 'farm':
        return user.farmCount || 0;
      case 'bonus':
        return user.bonusCount || 0;
      case 'bonus_streak':
        return user.dailyStreak || 0;
      case 'promo':
        return user.promoCount || 0;
      case 'exchange':
        return user.statistics?.totalExchanges || 0;
      case 'referral':
        return user.invited || 0;
      case 'miner_time':
        return user.miner?.totalEarned || 0;
      case 'stars_balance':
        return user.stars || 0;
      case 'magnum_balance':
        return user.magnumCoins || 0;
      default:
        return 0;
    }
  }

  async checkAndAwardAchievements(userId) {
    try {
      const user = await this.getUser(userId);
      const achievements = await this.getAvailableAchievements();
      const userAchievements = user.achievements || [];
      const userAchievementIds = userAchievements.map(a => a.id);

      const newAchievements = [];

      for (const achievement of achievements) {
        if (!userAchievementIds.includes(achievement.id)) {
          const progress = this.getUserProgressForAchievement(user, achievement);
          
          if (progress >= achievement.target) {
            newAchievements.push(achievement);
          }
        }
      }

      if (newAchievements.length > 0) {
        const updatedAchievements = [...userAchievements, ...newAchievements];
        let totalReward = 0;

        for (const achievement of newAchievements) {
          totalReward += achievement.reward;
        }

        await this.db.collections.users.updateOne(
          { id: parseInt(userId) },
          {
            $set: { achievements: updatedAchievements },
            $inc: { 
              stars: totalReward,
              totalEarnedStars: totalReward
            }
          }
        );

        this.cache.userCache.delete(userId.toString());

        return {
          success: true,
          newAchievements: newAchievements,
          totalReward: totalReward
        };
      }

      return {
        success: true,
        newAchievements: [],
        totalReward: 0
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async getUser(userId) {
    try {
      const cached = this.cache.getUser(userId);
      if (cached) return cached;

      const user = await this.db.collections.users.findOne({ id: parseInt(userId) });
      if (user) {
        this.cache.setUser(userId, user);
      }
      return user;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }
}

module.exports = TasksModule;