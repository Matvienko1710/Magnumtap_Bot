class ExchangeModule {
  constructor(database, cache) {
    this.db = database;
    this.cache = cache;
  }

  async getExchangeRates() {
    try {
      const reserve = await this.db.collections.reserve.findOne({});
      if (!reserve) {
        return {
          success: false,
          message: '‚ùå –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        };
      }

      const magnumToStars = reserve.stars / reserve.magnumCoins;
      const starsToMagnum = reserve.magnumCoins / reserve.stars;

      return {
        success: true,
        magnumToStars: magnumToStars,
        starsToMagnum: starsToMagnum,
        reserve: {
          magnumCoins: reserve.magnumCoins,
          stars: reserve.stars,
          totalExchanges: reserve.totalExchanges,
          totalVolume: reserve.totalVolume
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –æ–±–º–µ–Ω–∞:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async exchangeMagnumToStars(userId, amount, ctx) {
    try {
      const user = await this.getUser(userId);
      
      if (user.magnumCoins < amount) {
        return {
          success: false,
          message: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins –¥–ª—è –æ–±–º–µ–Ω–∞'
        };
      }

      if (amount < 1) {
        return {
          success: false,
          message: '‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: 1ü™ô'
        };
      }

      const reserve = await this.db.collections.reserve.findOne({});
      if (!reserve) {
        return {
          success: false,
          message: '‚ùå –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        };
      }

      const commission = amount * (2.5 / 100); // 2.5% –∫–æ–º–∏—Å—Å–∏—è
      const exchangeAmount = amount - commission;
      const starsReceived = exchangeAmount * (reserve.stars / reserve.magnumCoins);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∑–≤–µ–∑–¥ –≤ —Ä–µ–∑–µ—Ä–≤–µ
      if (reserve.stars < starsReceived) {
        return {
          success: false,
          message: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –≤ —Ä–µ–∑–µ—Ä–≤–µ –±–∏—Ä–∂–∏'
        };
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
      await this.db.collections.users.updateOne(
        { id: parseInt(userId) },
        {
          $inc: { 
            magnumCoins: -amount,
            stars: starsReceived,
            totalEarnedStars: starsReceived,
            'statistics.totalExchanges': 1
          },
          $set: { lastSeen: Math.floor(Date.now() / 1000) }
        }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
      await this.db.collections.reserve.updateOne(
        {},
        {
          $inc: { 
            magnumCoins: amount,
            stars: -starsReceived,
            totalExchanges: 1,
            totalVolume: amount
          },
          $set: { lastUpdated: new Date() }
        }
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await this.logExchange(userId, 'magnum_to_stars', amount, starsReceived, commission);

      this.cache.userCache.delete(userId.toString());
      
      return {
        success: true,
        amount: amount,
        starsReceived: starsReceived,
        commission: commission,
        rate: reserve.stars / reserve.magnumCoins,
        message: `‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n` +
                `üí± –û–±–º–µ–Ω–µ–Ω–æ: ${amount}ü™ô\n` +
                `‚≠ê –ü–æ–ª—É—á–µ–Ω–æ: ${starsReceived.toFixed(4)}‚≠ê\n` +
                `üí∞ –ö–æ–º–∏—Å—Å–∏—è: ${commission.toFixed(4)}ü™ô\n` +
                `üìä –ö—É—Ä—Å: 1ü™ô = ${(reserve.stars / reserve.magnumCoins).toFixed(4)}‚≠ê`
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ Magnum –Ω–∞ –∑–≤–µ–∑–¥—ã:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async exchangeStarsToMagnum(userId, amount, ctx) {
    try {
      const user = await this.getUser(userId);
      
      if (user.stars < amount) {
        return {
          success: false,
          message: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –æ–±–º–µ–Ω–∞'
        };
      }

      if (amount < 1) {
        return {
          success: false,
          message: '‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: 1‚≠ê'
        };
      }

      const reserve = await this.db.collections.reserve.findOne({});
      if (!reserve) {
        return {
          success: false,
          message: '‚ùå –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        };
      }

      const commission = amount * (2.5 / 100); // 2.5% –∫–æ–º–∏—Å—Å–∏—è
      const exchangeAmount = amount - commission;
      const magnumReceived = exchangeAmount * (reserve.magnumCoins / reserve.stars);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ Magnum Coins –≤ —Ä–µ–∑–µ—Ä–≤–µ
      if (reserve.magnumCoins < magnumReceived) {
        return {
          success: false,
          message: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins –≤ —Ä–µ–∑–µ—Ä–≤–µ –±–∏—Ä–∂–∏'
        };
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
      await this.db.collections.users.updateOne(
        { id: parseInt(userId) },
        {
          $inc: { 
            stars: -amount,
            magnumCoins: magnumReceived,
            totalEarnedMagnumCoins: magnumReceived,
            'statistics.totalExchanges': 1
          },
          $set: { lastSeen: Math.floor(Date.now() / 1000) }
        }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
      await this.db.collections.reserve.updateOne(
        {},
        {
          $inc: { 
            stars: amount,
            magnumCoins: -magnumReceived,
            totalExchanges: 1,
            totalVolume: amount
          },
          $set: { lastUpdated: new Date() }
        }
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await this.logExchange(userId, 'stars_to_magnum', amount, magnumReceived, commission);

      this.cache.userCache.delete(userId.toString());
      
      return {
        success: true,
        amount: amount,
        magnumReceived: magnumReceived,
        commission: commission,
        rate: reserve.magnumCoins / reserve.stars,
        message: `‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n` +
                `üí± –û–±–º–µ–Ω–µ–Ω–æ: ${amount}‚≠ê\n` +
                `ü™ô –ü–æ–ª—É—á–µ–Ω–æ: ${magnumReceived.toFixed(4)}ü™ô\n` +
                `üí∞ –ö–æ–º–∏—Å—Å–∏—è: ${commission.toFixed(4)}‚≠ê\n` +
                `üìä –ö—É—Ä—Å: 1‚≠ê = ${(reserve.magnumCoins / reserve.stars).toFixed(4)}ü™ô`
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∑–≤–µ–∑–¥ –Ω–∞ Magnum:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async logExchange(userId, type, amount, received, commission) {
    try {
      const exchange = {
        userId: parseInt(userId),
        type: type,
        amount: amount,
        received: received,
        commission: commission,
        createdAt: new Date()
      };

      await this.db.collections.exchangeHistory.insertOne(exchange);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–º–µ–Ω–∞:', error);
    }
  }

  async getExchangeHistory(userId, limit = 10) {
    try {
      const history = await this.db.collections.exchangeHistory
        .find({ userId: parseInt(userId) })
        .sort({ createdAt: -1 })
        .limit(limit)
        .toArray();
      
      return history;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤:', error);
      return [];
    }
  }

  async getExchangeStats() {
    try {
      const stats = await this.db.collections.exchangeHistory.aggregate([
        {
          $group: {
            _id: null,
            totalExchanges: { $sum: 1 },
            totalVolume: { $sum: '$amount' },
            totalCommission: { $sum: '$commission' },
            avgExchangeAmount: { $avg: '$amount' }
          }
        }
      ]).toArray();
      
      return stats[0] || {
        totalExchanges: 0,
        totalVolume: 0,
        totalCommission: 0,
        avgExchangeAmount: 0
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–º–µ–Ω–æ–≤:', error);
      return {
        totalExchanges: 0,
        totalVolume: 0,
        totalCommission: 0,
        avgExchangeAmount: 0
      };
    }
  }

  async getTopExchangers(limit = 10) {
    try {
      const topExchangers = await this.db.collections.exchangeHistory.aggregate([
        {
          $group: {
            _id: '$userId',
            totalExchanges: { $sum: 1 },
            totalVolume: { $sum: '$amount' },
            totalReceived: { $sum: '$received' }
          }
        },
        { $sort: { totalVolume: -1 } },
        { $limit: limit }
      ]).toArray();
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      const userIds = topExchangers.map(item => item._id);
      const users = await this.db.collections.users.find({ id: { $in: userIds } }).toArray();
      const userMap = {};
      users.forEach(user => userMap[user.id] = user);
      
      return topExchangers.map(item => ({
        userId: item._id,
        username: userMap[item._id]?.username || 'Unknown',
        totalExchanges: item.totalExchanges,
        totalVolume: item.totalVolume,
        totalReceived: item.totalReceived
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤:', error);
      return [];
    }
  }

  async getReserveInfo() {
    try {
      const reserve = await this.db.collections.reserve.findOne({});
      if (!reserve) {
        return {
          success: false,
          message: '‚ùå –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        };
      }

      const magnumToStars = reserve.stars / reserve.magnumCoins;
      const starsToMagnum = reserve.magnumCoins / reserve.stars;

      return {
        success: true,
        magnumCoins: reserve.magnumCoins,
        stars: reserve.stars,
        totalExchanges: reserve.totalExchanges,
        totalVolume: reserve.totalVolume,
        lastUpdated: reserve.lastUpdated,
        rates: {
          magnumToStars: magnumToStars,
          starsToMagnum: starsToMagnum
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑–µ—Ä–≤–µ:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async calculateExchangeAmount(fromCurrency, toCurrency, amount) {
    try {
      const reserve = await this.db.collections.reserve.findOne({});
      if (!reserve) {
        return {
          success: false,
          message: '‚ùå –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        };
      }

      let rate, received, commission;
      
      if (fromCurrency === 'magnumCoins' && toCurrency === 'stars') {
        rate = reserve.stars / reserve.magnumCoins;
        commission = amount * (2.5 / 100);
        received = (amount - commission) * rate;
      } else if (fromCurrency === 'stars' && toCurrency === 'magnumCoins') {
        rate = reserve.magnumCoins / reserve.stars;
        commission = amount * (2.5 / 100);
        received = (amount - commission) * rate;
      } else {
        return {
          success: false,
          message: '‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–∞—Ä–∞ –≤–∞–ª—é—Ç'
        };
      }

      return {
        success: true,
        amount: amount,
        received: received,
        commission: commission,
        rate: rate,
        netAmount: amount - commission
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±–º–µ–Ω–∞:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async getUser(userId) {
    try {
      const cached = this.cache.getUser(userId);
      if (cached) return cached;

      const user = await this.db.collections.users.findOne({ id: parseInt(userId) });
      if (user) {
        this.cache.setUser(userId, user);
      }
      return user;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }
}

module.exports = ExchangeModule;