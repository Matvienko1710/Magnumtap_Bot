// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å miningStats: null –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const { MongoClient } = require('mongodb');
require('dotenv').config();

async function fixMiningStats() {
    const client = new MongoClient(process.env.MONGODB_URI);

    try {
        await client.connect();
        const db = client.db();

        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å miningStats...\n');

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å miningStats: null
        const usersWithNullMiningStats = await db.collection('users').find({
            miningStats: null
        }).toArray();

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å miningStats: null: ${usersWithNullMiningStats.length}`);

        for (const user of usersWithNullMiningStats) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º miningStats
            const miningStats = {
                totalMinedMagnumCoins: 0,
                totalMinedStars: 0,
                seasonMinedMagnumCoins: 0,
                seasonMinedStars: 0,
                lastReward: new Date(),
                activeClickCount: 0,
                passiveRewards: 0
            };

            await db.collection('users').updateOne(
                { _id: user._id },
                { $set: { miningStats } }
            );

            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id || user._id}`);
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–ª—è miningStats –≤–æ–æ–±—â–µ
        const usersWithoutMiningStats = await db.collection('users').find({
            miningStats: { $exists: false }
        }).toArray();

        console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–ª—è miningStats: ${usersWithoutMiningStats.length}`);

        for (const user of usersWithoutMiningStats) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º miningStats
            const miningStats = {
                totalMinedMagnumCoins: 0,
                totalMinedStars: 0,
                seasonMinedMagnumCoins: 0,
                seasonMinedStars: 0,
                lastReward: user.miner?.lastReward || new Date(),
                activeClickCount: 0,
                passiveRewards: 0
            };

            await db.collection('users').updateOne(
                { _id: user._id },
                { $set: { miningStats } }
            );

            console.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id || user._id}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const fixedUsers = await db.collection('users').countDocuments({
            miningStats: { $ne: null },
            'miningStats.totalMinedMagnumCoins': { $exists: true }
        });

        console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
        console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ miningStats: ${fixedUsers}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ miningStats:', error.message);
    } finally {
        await client.close();
    }
}

fixMiningStats();
