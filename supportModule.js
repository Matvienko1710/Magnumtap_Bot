class SupportModule {
  constructor(database, cache) {
    this.db = database;
    this.cache = cache;
  }

  async createTicket(userId, subject, message, ctx) {
    try {
      const user = await this.getUser(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
      const openTicket = await this.db.collections.support.findOne({
        userId: parseInt(userId),
        status: 'open'
      });

      if (openTicket) {
        return {
          success: false,
          message: '‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.'
        };
      }

      const ticket = {
        userId: parseInt(userId),
        subject: subject,
        message: message,
        status: 'open',
        priority: 'normal',
        createdAt: new Date(),
        updatedAt: new Date(),
        adminNotes: '',
        assignedTo: null,
        messages: [
          {
            from: 'user',
            message: message,
            timestamp: new Date()
          }
        ]
      };

      const result = await this.db.collections.support.insertOne(ticket);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ
      await this.notifyAdminsNewTicket(ticket, user);

      return {
        success: true,
        ticketId: result.insertedId,
        message: `‚úÖ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω!\n\n` +
                `üìã –¢–µ–º–∞: ${subject}\n` +
                `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}\n` +
                `üìä –°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç\n\n` +
                `‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 1-24 —á–∞—Å–∞`
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async addMessage(ticketId, userId, message, isAdmin = false) {
    try {
      const ticket = await this.db.collections.support.findOne({ _id: ticketId });
      if (!ticket) {
        return {
          success: false,
          message: '‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      if (ticket.status === 'closed') {
        return {
          success: false,
          message: '‚ùå –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç'
        };
      }

      const newMessage = {
        from: isAdmin ? 'admin' : 'user',
        message: message,
        timestamp: new Date()
      };

      await this.db.collections.support.updateOne(
        { _id: ticketId },
        {
          $push: { messages: newMessage },
          $set: { 
            updatedAt: new Date(),
            status: isAdmin ? 'answered' : 'waiting'
          }
        }
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (isAdmin) {
        await this.notifyUserNewMessage(ticket.userId, ticket.subject);
      } else {
        await this.notifyAdminsNewMessage(ticket, message);
      }

      return {
        success: true,
        message: '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async closeTicket(ticketId, adminId, notes = '') {
    try {
      const ticket = await this.db.collections.support.findOne({ _id: ticketId });
      if (!ticket) {
        return {
          success: false,
          message: '‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      await this.db.collections.support.updateOne(
        { _id: ticketId },
        {
          $set: {
            status: 'closed',
            adminNotes: notes,
            closedBy: adminId,
            closedAt: new Date(),
            updatedAt: new Date()
          }
        }
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
      await this.notifyUserTicketClosed(ticket.userId, ticket.subject, notes);

      return {
        success: true,
        message: '‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async getUserTickets(userId, limit = 10) {
    try {
      const tickets = await this.db.collections.support
        .find({ userId: parseInt(userId) })
        .sort({ createdAt: -1 })
        .limit(limit)
        .toArray();
      
      return tickets;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return [];
    }
  }

  async getOpenTickets(limit = 50) {
    try {
      const tickets = await this.db.collections.support
        .find({ status: { $in: ['open', 'waiting'] } })
        .sort({ createdAt: 1 })
        .limit(limit)
        .toArray();
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      const userIds = tickets.map(t => t.userId);
      const users = await this.db.collections.users.find({ id: { $in: userIds } }).toArray();
      const userMap = {};
      users.forEach(user => userMap[user.id] = user);
      
      return tickets.map(ticket => ({
        ...ticket,
        user: userMap[ticket.userId]
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤:', error);
      return [];
    }
  }

  async getTicketDetails(ticketId) {
    try {
      const ticket = await this.db.collections.support.findOne({ _id: ticketId });
      if (!ticket) {
        return {
          success: false,
          message: '‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      const user = await this.getUser(ticket.userId);

      return {
        success: true,
        ticket: ticket,
        user: user
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç–∏–∫–µ—Ç–∞:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async getSupportStats() {
    try {
      const stats = await this.db.collections.support.aggregate([
        {
          $group: {
            _id: null,
            totalTickets: { $sum: 1 },
            openTickets: { $sum: { $cond: [{ $eq: ['$status', 'open'] }, 1, 0] } },
            waitingTickets: { $sum: { $cond: [{ $eq: ['$status', 'waiting'] }, 1, 0] } },
            answeredTickets: { $sum: { $cond: [{ $eq: ['$status', 'answered'] }, 1, 0] } },
            closedTickets: { $sum: { $cond: [{ $eq: ['$status', 'closed'] }, 1, 0] } }
          }
        }
      ]).toArray();
      
      return stats[0] || {
        totalTickets: 0,
        openTickets: 0,
        waitingTickets: 0,
        answeredTickets: 0,
        closedTickets: 0
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
      return {
        totalTickets: 0,
        openTickets: 0,
        waitingTickets: 0,
        answeredTickets: 0,
        closedTickets: 0
      };
    }
  }

  async assignTicket(ticketId, adminId) {
    try {
      const result = await this.db.collections.support.updateOne(
        { _id: ticketId },
        {
          $set: {
            assignedTo: adminId,
            updatedAt: new Date()
          }
        }
      );

      if (result.matchedCount === 0) {
        return {
          success: false,
          message: '‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      return {
        success: true,
        message: '‚úÖ –¢–∏–∫–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async changePriority(ticketId, priority, adminId) {
    try {
      const validPriorities = ['low', 'normal', 'high', 'urgent'];
      if (!validPriorities.includes(priority)) {
        return {
          success: false,
          message: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'
        };
      }

      const result = await this.db.collections.support.updateOne(
        { _id: ticketId },
        {
          $set: {
            priority: priority,
            updatedAt: new Date()
          }
        }
      );

      if (result.matchedCount === 0) {
        return {
          success: false,
          message: '‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      return {
        success: true,
        message: `‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${priority}`
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async notifyAdminsNewTicket(ticket, user) {
    try {
      const message = `üÜï **–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n` +
                     `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${user.username || 'Unknown'} (${user.id})\n` +
                     `üìã –¢–µ–º–∞: ${ticket.subject}\n` +
                     `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${ticket.message.substring(0, 100)}${ticket.message.length > 100 ? '...' : ''}\n` +
                     `‚è∞ –í—Ä–µ–º—è: ${ticket.createdAt.toLocaleString('ru-RU')}\n\n` +
                     `üÜî ID: \`${ticket._id}\``;
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
      console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ: ${message}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ:', error);
    }
  }

  async notifyAdminsNewMessage(ticket, message) {
    try {
      const user = await this.getUser(ticket.userId);
      const adminMessage = `üí¨ **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ**\n\n` +
                          `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${user.username || 'Unknown'} (${user.id})\n` +
                          `üìã –¢–µ–º–∞: ${ticket.subject}\n` +
                          `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message.substring(0, 100)}${message.length > 100 ? '...' : ''}\n` +
                          `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
                          `üÜî ID: \`${ticket._id}\``;
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
      console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: ${adminMessage}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:', error);
    }
  }

  async notifyUserNewMessage(userId, subject) {
    try {
      const message = `üí¨ **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ**\n\n` +
                     `üìã –¢–µ–º–∞: ${subject}\n` +
                     `üìù –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –≤–∞—à —Ç–∏–∫–µ—Ç\n\n` +
                     `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"`;
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${message}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:', error);
    }
  }

  async notifyUserTicketClosed(userId, subject, notes) {
    try {
      const message = `üîí **–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç**\n\n` +
                     `üìã –¢–µ–º–∞: ${subject}\n` +
                     `üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${notes || '–ù–µ—Ç'}\n\n` +
                     `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!`;
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${message}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞:', error);
    }
  }

  async getFaq() {
    return [
      {
        question: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞—Ä–º?',
        answer: '–§–∞—Ä–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–≤–µ–∑–¥—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üåæ –§–∞—Ä–º" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.'
      },
      {
        question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å?',
        answer: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å. –ß–µ–º –¥–æ–ª—å—à–µ —Å–µ—Ä–∏—è, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞.'
      },
      {
        question: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–π–Ω–µ—Ä?',
        answer: '–ú–∞–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "‚õèÔ∏è –ú–∞–π–Ω–µ—Ä".'
      },
      {
        question: '–ö–∞–∫ –æ–±–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—É?',
        answer: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª "üí± –û–±–º–µ–Ω" –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–≤–µ–∑–¥ –≤ Magnum Coins –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.'
      },
      {
        question: '–ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞?',
        answer: '–î–ª—è –≤—ã–≤–æ–¥–∞ Magnum Coins –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª "üí≥ –í—ã–≤–æ–¥". –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100ü™ô.'
      },
      {
        question: '–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π?',
        answer: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã" –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ.'
      },
      {
        question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã?',
        answer: '–ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ "üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã".'
      },
      {
        question: '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?',
        answer: '–í—ã–ø–æ–ª–Ω—è–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è".'
      }
    ];
  }

  async getUser(userId) {
    try {
      const cached = this.cache.getUser(userId);
      if (cached) return cached;

      const user = await this.db.collections.users.findOne({ id: parseInt(userId) });
      if (user) {
        this.cache.setUser(userId, user);
      }
      return user;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }
}

module.exports = SupportModule;