const config = require('../config/constants');
const logger = require('../utils/logger');

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function adminCheck(ctx, next) {
  const userId = ctx.from?.id || ctx.message?.from?.id;
  
  if (!userId) {
    logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ adminCheck');
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  }

  if (!config.ADMIN_IDS.includes(userId)) {
    logger.warn('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', { userId });
    
    // –î–ª—è callback query –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ answerCbQuery
    if (ctx.callbackQuery) {
      return ctx.answerCbQuery('üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }
    
    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ reply
    return ctx.reply('üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }

  logger.debug('–ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω', { userId });
  return next();
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function userActionLogger(ctx, next) {
  const userId = ctx.from?.id || ctx.message?.from?.id;
  const action = ctx.callbackQuery?.data || ctx.message?.text || 'unknown';
  
  if (userId) {
    logger.userAction(userId, action, {
      isAdmin: config.ADMIN_IDS.includes(userId),
      chatType: ctx.chat?.type,
      messageType: ctx.message ? 'message' : 'callback'
    });
  }

  return next();
}

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
function errorHandler(error, ctx) {
  const userId = ctx.from?.id || ctx.message?.from?.id;
  
  logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ', {
    userId,
    error: error.message,
    stack: error.stack,
    action: ctx.callbackQuery?.data || ctx.message?.text
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  const errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  
  if (ctx.callbackQuery) {
    return ctx.answerCbQuery(errorMessage);
  }
  
  return ctx.reply(errorMessage);
}

module.exports = {
  adminCheck,
  userActionLogger,
  errorHandler
};

