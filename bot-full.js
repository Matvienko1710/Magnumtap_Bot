require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { MongoClient, ObjectId } = require('mongodb');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGODB_URI = process.env.MONGODB_URI;
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => id.trim()) : [];
const SUPPORT_CHANNEL = process.env.SUPPORT_CHANNEL;
const WITHDRAWAL_CHANNEL = process.env.WITHDRAWAL_CHANNEL;
const REQUIRED_CHANNEL = process.env.REQUIRED_CHANNEL;
const REQUIRED_BOT_LINK = process.env.REQUIRED_BOT_LINK || 'https://t.me/ReferalStarsRobot?start=6587897295';
const FIRESTARS_BOT_LINK = process.env.FIRESTARS_BOT_LINK || 'https://t.me/firestars_rbot?start=6587897295';
const FARMIK_BOT_LINK = process.env.FARMIK_BOT_LINK || 'https://t.me/farmikstars_bot?start=6587897295';
const BASKET_BOT_LINK = process.env.BASKET_BOT_LINK || 'https://t.me/basket_gift_bot?start=6587897295';
const PRIVATE_CHANNEL_LINK = process.env.PRIVATE_CHANNEL_LINK || 'https://t.me/+4BUF9S_rLZw3NDQ6';
const PROMO_NOTIFICATIONS_CHAT = process.env.PROMO_NOTIFICATIONS_CHAT;
const BOT_PHOTO_URL = process.env.BOT_PHOTO_URL;

// –ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ 30 —Å–µ–∫—É–Ω–¥)
const userCache = new Map();
const USER_CACHE_TTL = 30000; // 30 seconds

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function getBotStatistics() {
  try {
    const stats = await db.collection('users').aggregate([
      {
        $group: {
          _id: null,
          totalUsers: { $sum: 1 },
          totalMagnumCoins: { $sum: { $ifNull: ['$totalEarnedMagnumCoins', '$magnumCoins'] } },
          totalStars: { $sum: { $ifNull: ['$stars', 0] } },
          activeMiners: { $sum: { $cond: [{ $eq: ['$miner.active', true] }, 1, 0] } }
        }
      }
    ]).toArray();
    
    return stats[0] || {
      totalUsers: 0,
      totalMagnumCoins: 0,
      totalStars: 0,
      activeMiners: 0
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return {
      totalUsers: 0,
      totalMagnumCoins: 0,
      totalStars: 0,
      activeMiners: 0
    };
  }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
let db;
async function connectDB() {
  try {
    const client = new MongoClient(MONGODB_URI);
    await client.connect();
    db = client.db();
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    await db.collection('users').createIndex({ id: 1 }, { unique: true });
    await db.collection('users').createIndex({ username: 1 });
    await db.collection('users').createIndex({ 'miner.active': 1 });
    await db.collection('users').createIndex({ lastSeen: -1 });
    
    await db.collection('promocodes').createIndex({ code: 1 }, { unique: true });
    await db.collection('promocodes').createIndex({ isActive: 1 });
    await db.collection('promocodes').createIndex({ expiresAt: 1 });
    
    await db.collection('withdrawalRequests').createIndex({ userId: 1 });
    await db.collection('withdrawalRequests').createIndex({ status: 1 });
    await db.collection('withdrawalRequests').createIndex({ createdAt: -1 });
    
    await db.collection('supportTickets').createIndex({ userId: 1 });
    await db.collection('supportTickets').createIndex({ status: 1 });
    await db.collection('supportTickets').createIndex({ createdAt: -1 });
    
    await db.collection('taskChecks').createIndex({ userId: 1 });
    await db.collection('taskChecks').createIndex({ status: 1 });
    await db.collection('taskChecks').createIndex({ createdAt: -1 });
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function getUser(id, ctx = null) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cacheKey = id.toString();
    const cached = userCache.get(cacheKey);
    if (cached && (Date.now() - cached.timestamp) < USER_CACHE_TTL) {
      return cached.user;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    let user = await db.collection('users').findOne({ id: parseInt(id) });
    
    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await db.collection('users').insertOne({
        id: parseInt(id),
        username: ctx?.from?.username || '',
        first_name: ctx?.from?.first_name || '',
        stars: 100,
        magnumCoins: 0,
        totalEarnedMagnumCoins: 0,
        lastFarm: 0,
        lastBonus: 0,
        lastExchange: 0,
        created: Math.floor(Date.now() / 1000),
        invited: 0,
        invitedBy: null,
        titles: [],
        achievements: [],
        farmCount: 0,
        bonusCount: 0,
        promoCount: 0,
        taskCount: 0,
        dailyStreak: 0,
        lastSeen: Math.floor(Date.now() / 1000),
        status: 'member',
        dailyTasks: {},
        dailyFarms: 0,
        miner: { active: false, totalEarned: 0, lastReward: 0 }
      });
      user = await db.collection('users').findOne({ id: parseInt(id) });
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (ctx) {
        const updates = {};
        if (ctx.from.username && ctx.from.username !== user.username) {
          updates.username = ctx.from.username;
        }
        if (ctx.from.first_name && ctx.from.first_name !== user.first_name) {
          updates.first_name = ctx.from.first_name;
        }
        
        if (Object.keys(updates).length > 0) {
          await db.collection('users').updateOne(
            { id: parseInt(id) },
            { $set: { ...updates, lastSeen: Math.floor(Date.now() / 1000) } }
          );
          Object.assign(user, updates);
        }
      }
    }

    // –ö–µ—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.set(cacheKey, {
      user: user,
      timestamp: Date.now()
    });

    return user;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  if (ctx.chat.type !== 'private') return;
  
  try {
    const userId = ctx.from.id;
    const user = await getUser(userId, ctx);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if (REQUIRED_CHANNEL) {
      const isSubscribed = await checkSubscription(ctx);
      if (!isSubscribed) {
        return showSubscriptionMessage(ctx);
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    const startParam = ctx.startPayload;
    if (startParam && startParam !== userId.toString()) {
      await handleReferral(userId, startParam);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await showMainMenu(ctx, user);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function checkSubscription(ctx) {
  if (!REQUIRED_CHANNEL) return true;
  
  try {
    const channelId = REQUIRED_CHANNEL.startsWith('@') ? 
      REQUIRED_CHANNEL : `@${REQUIRED_CHANNEL}`;
    const member = await ctx.telegram.getChatMember(channelId, ctx.from.id);
    return ['member', 'administrator', 'creator'].includes(member.status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    return false;
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
async function showSubscriptionMessage(ctx) {
  const message = `üîî **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n\n` +
                  `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n` +
                  `1Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª\n` +
                  `2Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ\n\n` +
                  `–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"`;
  
  const channelName = REQUIRED_CHANNEL.replace('@', '');
  const channelLink = `https://t.me/${channelName}`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', channelLink)],
    [Markup.button.url('ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', REQUIRED_BOT_LINK)],
    [Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', 'check_subscription')]
  ]);
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
async function handleReferral(userId, referrerId) {
  try {
    const referrer = await getUser(referrerId);
    if (referrer) {
      await db.collection('users').updateOne(
        { id: parseInt(referrerId) },
        { 
          $inc: { invited: 1, stars: 50 },
          $set: { lastSeen: Math.floor(Date.now() / 1000) }
        }
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db.collection('users').updateOne(
        { id: parseInt(userId) },
        { 
          $set: { invitedBy: referrerId, lastSeen: Math.floor(Date.now() / 1000) }
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(ctx, user) {
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('‚≠ê –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'farm'),
      Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')
    ],
    [
      Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'tasks'),
      Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'promocode')
    ],
    [
      Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'),
      Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')
    ],
    [
      Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä', 'miner'),
      Markup.button.callback('üí± –û–±–º–µ–Ω', 'exchange')
    ],
    [
      Markup.button.callback('üí≥ –í—ã–≤–æ–¥', 'withdrawal'),
      Markup.button.callback('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')
    ]
  ]);
  
  const text = `üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Tap!**\n\n` +
               `üí∞ –ë–∞–ª–∞–Ω—Å: ${formatNumber(user.magnumCoins || 0)}ü™ô\n` +
               `‚≠ê –ó–≤–µ–∑–¥—ã: ${formatNumber(user.stars || 0)}‚≠ê\n` +
               `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.invited || 0} —á–µ–ª–æ–≤–µ–∫\n\n` +
               `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.reply(text, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞—Ä–º–∞
bot.action('farm', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await getUser(userId);
    const now = Math.floor(Date.now() / 1000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω (10 —Å–µ–∫—É–Ω–¥)
    if (now - user.lastFarm < 10) {
      const timeLeft = 10 - (now - user.lastFarm);
      await ctx.answerCbQuery(`‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${timeLeft} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞`, { show_alert: true });
      return;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    const baseReward = 0.01;
    let reward = baseReward;
    
    // –ë–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (user.achievements) {
      const farmBoost = user.achievements.find(a => a.type === 'farm_boost');
      if (farmBoost) {
        reward *= (1 + farmBoost.level * 0.1); // +10% –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
      }
    }
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –æ—Ç —Ç–∏—Ç—É–ª–æ–≤
    if (user.titles && user.titles.length > 0) {
      const farmTitle = user.titles.find(t => t.type === 'farm_boost');
      if (farmTitle) {
        reward *= (1 + farmTitle.boost);
      }
    }
    
    reward = Math.max(reward, 0.1); // –ú–∏–Ω–∏–º—É–º 0.1 –∑–≤–µ–∑–¥—ã
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: parseInt(userId) },
      {
        $inc: { 
          stars: reward,
          farmCount: 1,
          dailyFarms: 1
        },
        $set: { 
          lastFarm: now,
          lastSeen: now
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(userId.toString());
    
    await ctx.answerCbQuery(
      `‚úÖ +${formatNumber(reward)}‚≠ê\n` +
      `üí∞ –ë–∞–ª–∞–Ω—Å: ${formatNumber((user.stars || 0) + reward)}‚≠ê`,
      { show_alert: true }
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await checkAchievements(userId);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ñ–∞—Ä–º–∞:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ–Ω—É—Å–∞
bot.action('bonus', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await getUser(userId);
    const now = Math.floor(Date.now() / 1000);
    const today = Math.floor(now / (24 * 60 * 60));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ —É–∂–µ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è
    if (user.lastBonus === today) {
      const nextBonus = (today + 1) * 24 * 60 * 60;
      const timeLeft = nextBonus - now;
      const hoursLeft = Math.ceil(timeLeft / (60 * 60));
      
      await ctx.answerCbQuery(
        `‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ ${hoursLeft} —á–∞—Å–æ–≤`,
        { show_alert: true }
      );
      return;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∏ —Å–µ—Ä–∏—é
    const baseReward = 3;
    const streak = user.lastBonus === today - 1 ? (user.dailyStreak || 0) + 1 : 1;
    const reward = baseReward + Math.floor(streak / 7) * 2; // –ë–æ–Ω—É—Å –∑–∞ –Ω–µ–¥–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: parseInt(userId) },
      {
        $inc: { 
          stars: reward,
          bonusCount: 1
        },
        $set: { 
          lastBonus: today,
          dailyStreak: streak,
          lastSeen: now
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(userId.toString());
    
    await ctx.answerCbQuery(
      `üéÅ +${formatNumber(reward)}‚≠ê\n` +
      `üî• –°–µ—Ä–∏—è: ${streak} –¥–Ω–µ–π`,
      { show_alert: true }
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await checkAchievements(userId);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –±–æ–Ω—É—Å–∞:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–∏–π
bot.action('tasks', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await getUser(userId);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', 'daily_tasks'),
        Markup.button.callback('üéØ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è', 'sponsor_tasks')
      ],
      [
        Markup.button.callback('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', 'task_progress'),
        Markup.button.callback('üèÜ –ù–∞–≥—Ä–∞–¥—ã', 'task_rewards')
      ],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    const text = `üìã **–ó–∞–¥–∞–Ω–∏—è**\n\n` +
                 `–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥!\n\n` +
                 `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
                 `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${user.taskCount || 0}\n` +
                 `üéÅ –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥: ${formatNumber(user.stars || 0)}‚≠ê\n\n` +
                 `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π:`;
    
    await ctx.editMessageText(text, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–¥–∞–Ω–∏–π:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
bot.action('promocode', async (ctx) => {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'activate_promo')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', 'promo_stats')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    const text = `üé´ **–ü—Ä–æ–º–æ–∫–æ–¥—ã**\n\n` +
                 `–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã!\n\n` +
                 `üí° –ü—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –¥—Ä—É–∑–µ–π.`;
    
    await ctx.editMessageText(text, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è
bot.action('profile', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await getUser(userId);
    const stats = await getBotStatistics();
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'statistics'),
        Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')
      ],
      [
        Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals'),
        Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')
      ],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    const rank = getUserRank(user);
    const mainTitle = getUserMainTitle(user);
    const titleText = mainTitle ? `\nüèÜ –¢–∏—Ç—É–ª: ${mainTitle.name}` : '';
    
    const text = `üë§ **–ü—Ä–æ—Ñ–∏–ª—å**\n\n` +
                 `üë§ –ò–º—è: ${ctx.from.first_name}\n` +
                 `üÜî ID: ${ctx.from.id}\n` +
                 `‚≠ê –†–∞–Ω–≥: ${rank.name}\n` +
                 `üí∞ Magnum Coins: ${formatNumber(user.magnumCoins || 0)}ü™ô\n` +
                 `‚≠ê –ó–≤–µ–∑–¥—ã: ${formatNumber(user.stars || 0)}‚≠ê\n` +
                 `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.invited || 0} —á–µ–ª–æ–≤–µ–∫\n` +
                 `üåæ –§–∞—Ä–º–æ–≤: ${user.farmCount || 0}\n` +
                 `üéÅ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${user.promoCount || 0}${titleText}\n\n` +
                 `üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${formatNumber(stats.totalUsers)}`;
    
    await ctx.editMessageText(text, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
bot.action('referrals', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await getUser(userId);
    const referralLink = `https://t.me/${ctx.botInfo.username}?start=${userId}`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π', `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Magnum Tap Bot! üöÄ')}`)],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', 'referral_stats')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    const text = `üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n` +
                 `üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: \`${referralLink}\`\n\n` +
                 `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
                 `üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${user.invited || 0}\n` +
                 `‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${formatNumber((user.invited || 0) * 50)} –∑–≤–µ–∑–¥\n\n` +
                 `üí° –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +50 –∑–≤–µ–∑–¥!`;
    
    await ctx.editMessageText(text, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞–π–Ω–µ—Ä–∞
bot.action('miner', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await getUser(userId);
    
    const keyboard = Markup.inlineKeyboard([
      [
        user.miner?.active ? 
          Markup.button.callback('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä', 'stop_miner') :
          Markup.button.callback('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä', 'start_miner')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞', 'miner_stats'),
        Markup.button.callback('‚ö° –£–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä', 'upgrade_miner')
      ],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    const status = user.miner?.active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
    const totalEarned = user.miner?.totalEarned || 0;
    const rewardPerHour = 0.1; // 0.1 –∑–≤–µ–∑–¥—ã –≤ —á–∞—Å
    
    const text = `‚õèÔ∏è **–ú–∞–π–Ω–µ—Ä**\n\n` +
                 `üìä –°—Ç–∞—Ç—É—Å: ${status}\n` +
                 `üí∞ –î–æ—Ö–æ–¥ –≤ —á–∞—Å: ${formatNumber(rewardPerHour)}‚≠ê\n` +
                 `üíé –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber(totalEarned)}‚≠ê\n\n` +
                 `üí° –ú–∞–π–Ω–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±—ã–≤–∞–µ—Ç –∑–≤–µ–∑–¥—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç.`;
    
    await ctx.editMessageText(text, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–∞–π–Ω–µ—Ä–∞:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–º–µ–Ω–∞
bot.action('exchange', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await getUser(userId);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('ü™ô ‚Üí ‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã', 'buy_stars'),
        Markup.button.callback('‚≠ê ‚Üí ü™ô –ü—Ä–æ–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã', 'sell_stars')
      ],
      [
        Markup.button.callback('üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', 'exchange_rates'),
        Markup.button.callback('üè¶ –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏', 'reserve_info')
      ],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    const text = `üí± **–û–±–º–µ–Ω –≤–∞–ª—é—Ç**\n\n` +
                 `üí∞ –í–∞—à–∏ Magnum Coins: ${formatNumber(user.magnumCoins || 0)}ü™ô\n` +
                 `‚≠ê –í–∞—à–∏ –∑–≤–µ–∑–¥—ã: ${formatNumber(user.stars || 0)}‚≠ê\n\n` +
                 `üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1ü™ô = 1‚≠ê\n` +
                 `üí∞ –ö–æ–º–∏—Å—Å–∏—è: 2.5%\n\n` +
                 `–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:`;
    
    await ctx.editMessageText(text, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞
bot.action('withdrawal', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await getUser(userId);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üí≥ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'create_withdrawal'),
        Markup.button.callback('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', 'my_withdrawals')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤', 'withdrawal_stats'),
        Markup.button.callback('‚ùì –ü—Ä–∞–≤–∏–ª–∞', 'withdrawal_rules')
      ],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    const text = `üí≥ **–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤**\n\n` +
                 `üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${formatNumber(user.magnumCoins || 0)}ü™ô\n` +
                 `‚≠ê –ó–≤–µ–∑–¥—ã: ${formatNumber(user.stars || 0)}‚≠ê\n\n` +
                 `üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 100ü™ô\n` +
                 `‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 1-24 —á–∞—Å–∞\n\n` +
                 `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(text, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
bot.action('support', async (ctx) => {
  try {
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìû –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç', 'create_ticket'),
        Markup.button.callback('üìã –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã', 'my_tickets')
      ],
      [
        Markup.button.callback('‚ùì FAQ', 'faq'),
        Markup.button.callback('üì¢ –ö–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏', 'support_channel')
      ],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    const text = `üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n` +
                 `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –º—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n\n` +
                 `üí¨ –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏\n` +
                 `üì¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n` +
                 `‚ùì –ò–∑—É—á–∏—Ç–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã`;
    
    await ctx.editMessageText(text, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.action('main_menu', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await getUser(userId);
    await showMainMenu(ctx, user);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatNumber(num) {
  if (num === null || num === undefined) return '0';
  
  if (num >= 1000000) {
    return (num / 1000000).toFixed(2) + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(2) + 'K';
  } else {
    return num.toFixed(2);
  }
}

function getUserRank(user) {
  const stars = user.stars || 0;
  
  if (stars >= 1000000) return { name: '–õ–µ–≥–µ–Ω–¥–∞', level: 10 };
  if (stars >= 500000) return { name: '–ú–∞—Å—Ç–µ—Ä', level: 9 };
  if (stars >= 100000) return { name: '–≠–∫—Å–ø–µ—Ä—Ç', level: 8 };
  if (stars >= 50000) return { name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', level: 7 };
  if (stars >= 10000) return { name: '–û–ø—ã—Ç–Ω—ã–π', level: 6 };
  if (stars >= 5000) return { name: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', level: 5 };
  if (stars >= 1000) return { name: '–ê–∫—Ç–∏–≤–Ω—ã–π', level: 4 };
  if (stars >= 500) return { name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π', level: 3 };
  if (stars >= 100) return { name: '–ù–æ–≤–∏—á–æ–∫', level: 2 };
  return { name: '–ù–æ–≤–∏—á–æ–∫', level: 1 };
}

function getUserMainTitle(user) {
  if (!user.titles || user.titles.length === 0) return null;
  
  const mainTitle = user.titles.find(t => t.isMain);
  if (mainTitle) return mainTitle;
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª –µ—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  return user.titles[0];
}

async function checkAchievements(userId) {
  try {
    const user = await getUser(userId);
    const newAchievements = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ñ–∞—Ä–º—É
    const farmCount = user.farmCount || 0;
    if (farmCount >= 1000 && !hasAchievement(user, 'farm_master')) {
      newAchievements.push({
        id: 'farm_master',
        name: '–ú–∞—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞',
        description: '–§–∞—Ä–º–∏–ª 1000 —Ä–∞–∑',
        type: 'farm_boost',
        level: 1,
        reward: 100
      });
    }
    
    if (farmCount >= 100 && !hasAchievement(user, 'farm_expert')) {
      newAchievements.push({
        id: 'farm_expert',
        name: '–≠–∫—Å–ø–µ—Ä—Ç —Ñ–∞—Ä–º–∞',
        description: '–§–∞—Ä–º–∏–ª 100 —Ä–∞–∑',
        type: 'farm_boost',
        level: 1,
        reward: 50
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º
    const promoCount = user.promoCount || 0;
    if (promoCount >= 50 && !hasAchievement(user, 'promo_collector')) {
      newAchievements.push({
        id: 'promo_collector',
        name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
        description: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª 50 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
        type: 'bonus_boost',
        level: 1,
        reward: 200
      });
    }
    
    // –í—ã–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (newAchievements.length > 0) {
      const currentAchievements = user.achievements || [];
      const updatedAchievements = [...currentAchievements, ...newAchievements];
      
      await db.collection('users').updateOne(
        { id: parseInt(userId) },
        { $set: { achievements: updatedAchievements } }
      );
      
      // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
      for (const achievement of newAchievements) {
        await db.collection('users').updateOne(
          { id: parseInt(userId) },
          { $inc: { stars: achievement.reward } }
        );
      }
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à
      userCache.delete(userId.toString());
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        const achievementsText = newAchievements.map(a => a.name).join(', ');
        await ctx.telegram.sendMessage(userId,
          `üèÜ **–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!**\n\n` +
          `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n` +
          `${achievementsText}\n\n` +
          `–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥!`,
          { parse_mode: 'Markdown' }
        );
      } catch (notifyError) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö`);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
  }
}

function hasAchievement(user, achievementId) {
  return user.achievements && user.achievements.some(a => a.id === achievementId);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
async function processMinerRewards() {
  try {
    console.log('‚õèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤...');
    const now = Math.floor(Date.now() / 1000);
    const oneHour = 3600;
    
    const usersWithMiners = await db.collection('users').find({ 'miner.active': true }).toArray();
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${usersWithMiners.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤`);
    
    for (const user of usersWithMiners) {
      const timeSinceLastReward = now - (user.miner.lastReward || 0);
      const hoursElapsed = Math.floor(timeSinceLastReward / oneHour);
      
      if (hoursElapsed > 0) {
        const rewardPerHour = 0.1;
        const totalReward = hoursElapsed * rewardPerHour;
        
        console.log(`‚õèÔ∏è –ú–∞–π–Ω–µ—Ä ${user.id}: ${rewardPerHour}‚≠ê/—á–∞—Å, ${hoursElapsed}—á = ${totalReward}‚≠ê`);
        
        await db.collection('users').updateOne(
          { id: user.id },
          {
            $inc: { 
              stars: totalReward,
              'miner.totalEarned': totalReward
            },
            $set: { 'miner.lastReward': now }
          }
        );
        
        // –û—á–∏—â–∞–µ–º –∫–µ—à
        userCache.delete(user.id.toString());
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try {
          await ctx.telegram.sendMessage(user.id, 
            `‚õèÔ∏è **–ú–∞–π–Ω–µ—Ä –ø—Ä–∏–Ω–µ—Å –¥–æ—Ö–æ–¥!**\n\n` +
            `üíé –ü–æ–ª—É—á–µ–Ω–æ: ${totalReward.toFixed(4)} ‚≠ê –∑–≤–µ–∑–¥\n` +
            `‚è∞ –ó–∞ –ø–µ—Ä–∏–æ–¥: ${hoursElapsed} —á–∞—Å(–æ–≤)\n` +
            `üìà –î–æ—Ö–æ–¥ –≤ —á–∞—Å: ${rewardPerHour.toFixed(4)} ‚≠ê\n` +
            `üìä –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${((user.miner.totalEarned || 0) + totalReward).toFixed(4)} ‚≠ê\n\n` +
            `–ú–∞–π–Ω–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`,
            { parse_mode: 'Markdown' }
          );
        } catch (notifyError) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –æ –¥–æ—Ö–æ–¥–µ –º–∞–π–Ω–µ—Ä–∞`);
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤:', error);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch(async (err, ctx) => {
  console.error('üö® –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  console.error('üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', {
    updateType: ctx.updateType,
    userId: ctx.from?.id,
    chatId: ctx.chat?.id,
    messageText: ctx.message?.text,
    callbackData: ctx.callbackQuery?.data
  });
  
  try {
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery('‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.', { show_alert: true });
    } else if (ctx.message) {
      await ctx.reply('‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.');
    }
  } catch (notifyError) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ:', notifyError);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', (reason, promise) => {
  console.error('üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –ø—Ä–æ–º–∏—Å–∞:', reason);
  console.error('üìç Promise:', promise);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  console.error('üìç Stack trace:', error.stack);
  console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞...');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    console.log('ü§ñ BOT_TOKEN:', BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    console.log('üóÑÔ∏è MONGODB_URI:', MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    console.log('üëë ADMIN_IDS:', ADMIN_IDS.length ? ADMIN_IDS.join(', ') : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´');
    
    if (!BOT_TOKEN) throw new Error('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN!');
    if (!MONGODB_URI) throw new Error('–ù–µ –∑–∞–¥–∞–Ω MONGODB_URI!');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectDB();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–π–Ω–µ—Ä–æ–≤
    setInterval(processMinerRewards, 30 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.launch();
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üì± –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();