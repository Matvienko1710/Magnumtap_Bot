class MinerModule {
  constructor(database, cache) {
    this.db = database;
    this.cache = cache;
  }

  async startMiner(userId, ctx) {
    try {
      const user = await this.getUser(userId);
      
      if (user.miner.active) {
        return {
          success: false,
          message: '‚õèÔ∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!'
        };
      }

      await this.db.collections.users.updateOne(
        { id: parseInt(userId) },
        {
          $set: {
            'miner.active': true,
            'miner.lastReward': Math.floor(Date.now() / 1000),
            lastSeen: Math.floor(Date.now() / 1000)
          }
        }
      );

      this.cache.userCache.delete(userId.toString());
      
      return {
        success: true,
        message: '‚õèÔ∏è –ú–∞–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç.'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async stopMiner(userId, ctx) {
    try {
      const user = await this.getUser(userId);
      
      if (!user.miner.active) {
        return {
          success: false,
          message: '‚õèÔ∏è –ú–∞–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!'
        };
      }

      await this.db.collections.users.updateOne(
        { id: parseInt(userId) },
        {
          $set: {
            'miner.active': false,
            lastSeen: Math.floor(Date.now() / 1000)
          }
        }
      );

      this.cache.userCache.delete(userId.toString());
      
      return {
        success: true,
        message: '‚õèÔ∏è –ú–∞–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–π–Ω–µ—Ä–∞:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async getMinerStats(userId, ctx) {
    try {
      const user = await this.getUser(userId);
      const now = Math.floor(Date.now() / 1000);
      
      const status = user.miner.active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
      const totalEarned = user.miner.totalEarned || 0;
      const rewardPerHour = 0.1;
      
      let timeSinceLastReward = 0;
      if (user.miner.active && user.miner.lastReward) {
        timeSinceLastReward = now - user.miner.lastReward;
      }
      
      const hoursSinceLastReward = Math.floor(timeSinceLastReward / 3600);
      const pendingReward = hoursSinceLastReward * rewardPerHour;
      
      return {
        success: true,
        status: status,
        totalEarned: totalEarned,
        rewardPerHour: rewardPerHour,
        pendingReward: pendingReward,
        hoursSinceLastReward: hoursSinceLastReward,
        isActive: user.miner.active
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–∞:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async upgradeMiner(userId, ctx) {
    try {
      const user = await this.getUser(userId);
      const upgradeCost = 1000; // 1000 –∑–≤–µ–∑–¥ –∑–∞ —É–ª—É—á—à–µ–Ω–∏–µ
      
      if (user.stars < upgradeCost) {
        return {
          success: false,
          message: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è! –ù—É–∂–Ω–æ: ${upgradeCost}‚≠ê`
        };
      }

      const currentLevel = user.miner.level || 1;
      const newLevel = currentLevel + 1;
      const newEfficiency = 1.0 + (newLevel - 1) * 0.1; // +10% –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å

      await this.db.collections.users.updateOne(
        { id: parseInt(userId) },
        {
          $inc: { stars: -upgradeCost },
          $set: {
            'miner.level': newLevel,
            'miner.efficiency': newEfficiency,
            lastSeen: Math.floor(Date.now() / 1000)
          }
        }
      );

      this.cache.userCache.delete(userId.toString());
      
      return {
        success: true,
        message: `‚õèÔ∏è –ú–∞–π–Ω–µ—Ä —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${newLevel}! –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: +${((newEfficiency - 1) * 100).toFixed(0)}%`
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞:', error);
      return {
        success: false,
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      };
    }
  }

  async processMinerRewards() {
    try {
      console.log('‚õèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤...');
      const now = Math.floor(Date.now() / 1000);
      const oneHour = 3600;
      
      const usersWithMiners = await this.db.collections.users.find({ 'miner.active': true }).toArray();
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${usersWithMiners.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤`);
      
      for (const user of usersWithMiners) {
        const timeSinceLastReward = now - (user.miner.lastReward || 0);
        const hoursElapsed = Math.floor(timeSinceLastReward / oneHour);
        
        if (hoursElapsed > 0) {
          const baseRewardPerHour = 0.1;
          const efficiency = user.miner.efficiency || 1.0;
          const rewardPerHour = baseRewardPerHour * efficiency;
          const totalReward = hoursElapsed * rewardPerHour;
          
          console.log(`‚õèÔ∏è –ú–∞–π–Ω–µ—Ä ${user.id}: ${rewardPerHour.toFixed(4)}‚≠ê/—á–∞—Å, ${hoursElapsed}—á = ${totalReward.toFixed(4)}‚≠ê`);
          
          await this.db.collections.users.updateOne(
            { id: user.id },
            {
              $inc: { 
                stars: totalReward,
                'miner.totalEarned': totalReward,
                totalEarnedStars: totalReward
              },
              $set: { 'miner.lastReward': now }
            }
          );
          
          // –û—á–∏—â–∞–µ–º –∫–µ—à
          this.cache.userCache.delete(user.id.toString());
          
          // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          await this.logMinerReward(user.id, totalReward, hoursElapsed);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          try {
            await this.sendMinerNotification(user.id, totalReward, hoursElapsed, rewardPerHour);
          } catch (notifyError) {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –æ –¥–æ—Ö–æ–¥–µ –º–∞–π–Ω–µ—Ä–∞`);
          }
        }
      }
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤:', error);
    }
  }

  async logMinerReward(userId, amount, hours) {
    try {
      const reward = {
        userId: parseInt(userId),
        amount: amount,
        hours: hours,
        createdAt: new Date()
      };

      await this.db.collections.minerRewards.insertOne(reward);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞:', error);
    }
  }

  async sendMinerNotification(userId, amount, hours, rewardPerHour) {
    try {
      const user = await this.getUser(userId);
      const totalEarned = (user.miner.totalEarned || 0) + amount;
      
      const message = `‚õèÔ∏è **–ú–∞–π–Ω–µ—Ä –ø—Ä–∏–Ω–µ—Å –¥–æ—Ö–æ–¥!**\n\n` +
                     `üíé –ü–æ–ª—É—á–µ–Ω–æ: ${amount.toFixed(4)} ‚≠ê –∑–≤–µ–∑–¥\n` +
                     `‚è∞ –ó–∞ –ø–µ—Ä–∏–æ–¥: ${hours} —á–∞—Å(–æ–≤)\n` +
                     `üìà –î–æ—Ö–æ–¥ –≤ —á–∞—Å: ${rewardPerHour.toFixed(4)} ‚≠ê\n` +
                     `üìä –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalEarned.toFixed(4)} ‚≠ê\n\n` +
                     `–ú–∞–π–Ω–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`;
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      // await bot.telegram.sendMessage(userId, message, { parse_mode: 'Markdown' });
      
      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${amount.toFixed(4)}‚≠ê`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞:', error);
    }
  }

  async getMinerHistory(userId, limit = 10) {
    try {
      const history = await this.db.collections.minerRewards
        .find({ userId: parseInt(userId) })
        .sort({ createdAt: -1 })
        .limit(limit)
        .toArray();
      
      return history;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–∞–π–Ω–µ—Ä–∞:', error);
      return [];
    }
  }

  async getTopMiners(limit = 10) {
    try {
      const topMiners = await this.db.collections.users
        .find({ 'miner.active': true })
        .sort({ 'miner.totalEarned': -1 })
        .limit(limit)
        .toArray();
      
      return topMiners.map(user => ({
        id: user.id,
        username: user.username,
        totalEarned: user.miner.totalEarned || 0,
        level: user.miner.level || 1,
        efficiency: user.miner.efficiency || 1.0
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤:', error);
      return [];
    }
  }

  async getMinerLeaderboard() {
    try {
      const leaderboard = await this.db.collections.users.aggregate([
        { $match: { 'miner.active': true } },
        {
          $project: {
            id: 1,
            username: 1,
            totalEarned: { $ifNull: ['$miner.totalEarned', 0] },
            level: { $ifNull: ['$miner.level', 1] },
            efficiency: { $ifNull: ['$miner.efficiency', 1.0] }
          }
        },
        { $sort: { totalEarned: -1 } },
        { $limit: 20 }
      ]).toArray();
      
      return leaderboard;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –º–∞–π–Ω–µ—Ä–æ–≤:', error);
      return [];
    }
  }

  async getMinerStats() {
    try {
      const stats = await this.db.collections.users.aggregate([
        {
          $group: {
            _id: null,
            totalActiveMiners: { $sum: { $cond: [{ $eq: ['$miner.active', true] }, 1, 0] } },
            totalMinerEarnings: { $sum: { $ifNull: ['$miner.totalEarned', 0] } },
            avgMinerLevel: { $avg: { $ifNull: ['$miner.level', 1] } },
            avgMinerEfficiency: { $avg: { $ifNull: ['$miner.efficiency', 1.0] } }
          }
        }
      ]).toArray();
      
      return stats[0] || {
        totalActiveMiners: 0,
        totalMinerEarnings: 0,
        avgMinerLevel: 1,
        avgMinerEfficiency: 1.0
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤:', error);
      return {
        totalActiveMiners: 0,
        totalMinerEarnings: 0,
        avgMinerLevel: 1,
        avgMinerEfficiency: 1.0
      };
    }
  }

  async getUser(userId) {
    try {
      const cached = this.cache.getUser(userId);
      if (cached) return cached;

      const user = await this.db.collections.users.findOne({ id: parseInt(userId) });
      if (user) {
        this.cache.setUser(userId, user);
      }
      return user;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }
}

module.exports = MinerModule;