require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { MongoClient, ObjectId } = require('mongodb');
const express = require('express');
const path = require('path');
const fs = require('fs');

// RichAds –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
const { 
  getRichAdsOffers, 
  verifyRichAdsOffer, 
  sendRichAdsConversion, 
  getRichAdsUserStats,
  isRichAdsAvailable 
} = require('./richads-integration');

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 12-—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
function generateKey() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 12; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è WebApp
const app = express();
const PORT = process.env.PORT || 3000; // Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π –ø–æ—Ä—Ç

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`üåê [${new Date().toISOString()}] ${req.method} ${req.path}`);
    next();
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –†–∞–∑–¥–∞—á–∞ WebApp –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–¥ —É–¥–∞–ª—ë–Ω –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã)



// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
    res.json({ 
        status: 'ok', 
        message: 'Magnum Stars Bot with MC & Stars currencies is running',
        timestamp: new Date().toISOString(),
        webappUrl: '/webapp',
        apiUrl: '/api/webapp/check-access'
    });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è UptimeRobot - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get('/health', (req, res) => {
    res.status(200).json({
        status: 'healthy',
        message: 'Magnum Stars Bot is alive and running with dual currency system',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        version: '1.0.0',
        environment: process.env.NODE_ENV || 'development'
    });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è UptimeRobot - –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
app.get('/ping', (req, res) => {
    res.status(200).send('pong');
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.get('/test', (req, res) => {
    // [–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è] –£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç fs ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–π 'fs'
    const webappEnabled = process.env.WEBAPP_ENABLED === 'true'; // [–ò–∑–º–µ–Ω–µ–Ω–∏–µ] –£–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∞–º–∏ WebApp —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const webappPath = path.join(__dirname, 'webapp');
    const indexPath = path.join(webappPath, 'index.html');
    const stylesPath = path.join(webappPath, 'styles.css');
    const scriptPath = path.join(webappPath, 'app.js');
    
    if (webappEnabled) {
        console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ WebApp...');
        console.log(`üìÅ –ü—É—Ç—å –∫ WebApp: ${webappPath}`);
        console.log(`üìÑ index.html: ${fs.existsSync(indexPath) ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        console.log(`üé® styles.css: ${fs.existsSync(stylesPath) ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        console.log(`‚ö° app.js: ${fs.existsSync(scriptPath) ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
    }
    
    res.json({
        status: 'test',
        webappPath: webappPath,
        files: {
            index: fs.existsSync(indexPath) ? 'found' : 'not found',
            styles: fs.existsSync(stylesPath) ? 'found' : 'not found',
            app: fs.existsSync(scriptPath) ? 'found' : 'not found'
        },
        timestamp: new Date().toISOString()
    });
});



// WebApp –º–∞—Ä—à—Ä—É—Ç—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
if (process.env.WEBAPP_ENABLED === 'true') {
  app.use('/webapp', express.static(path.join(__dirname, 'webapp'), {
    maxAge: '1h',
    etag: true
  }));

  app.get('/api/webapp/check-access', async (req, res) => {
    try {
      const { userId } = req.query;
      if (!userId) {
        return res.status(400).json({ error: 'Missing userId' });
      }

      const user = await db.collection('users').findOne({ id: parseInt(userId) });
      const hasAccess = user && config.ADMIN_IDS.includes(parseInt(userId));
      
      res.json({ hasAccess, user: hasAccess ? user : null });
    } catch (error) {
      console.error('WebApp access check error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  app.get('/api/webapp/user-data', async (req, res) => {
    try {
      const { userId } = req.query;
      if (!userId) {
        return res.status(400).json({ error: 'Missing userId' });
      }

      const user = await db.collection('users').findOne({ id: parseInt(userId) });
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }

      res.json(user);
    } catch (error) {
      console.error('User data error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  // WebApp API endpoints –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
  app.post('/api/webapp/mining-click', async (req, res) => {
    try {
      const { userId } = req.body;
      if (!userId) {
        return res.status(400).json({ success: false, message: 'Missing userId' });
      }

      const user = await db.collection('users').findOne({ id: parseInt(userId) });
      if (!user) {
        return res.status(404).json({ success: false, message: 'User not found' });
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–∫
      const baseReward = 0.1;
      const levelMultiplier = 1 + (user.level - 1) * 0.1;
      const reward = baseReward * levelMultiplier;

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db.collection('users').updateOne(
        { id: parseInt(userId) },
        { 
          $inc: { 
            magnuStarsoins: reward,
            'miningStats.activeClicks': 1,
            'miningStats.activeRewards': reward
          },
          $set: { lastActivity: new Date() }
        }
      );

      res.json({ 
        success: true, 
        reward: reward.toFixed(2),
        message: `+${reward.toFixed(2)} Magnum Coins –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–∫!`
      });

    } catch (error) {
      console.error('Mining click error:', error);
      res.status(500).json({ success: false, message: 'Internal server error' });
    }
  });

  app.post('/api/webapp/farm', async (req, res) => {
    try {
      const { userId } = req.body;
      if (!userId) {
        return res.status(400).json({ success: false, message: 'Missing userId' });
      }

      const user = await db.collection('users').findOne({ id: parseInt(userId) });
      if (!user) {
        return res.status(404).json({ success: false, message: 'User not found' });
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ñ–∞—Ä–º
      const baseReward = 10;
      const levelBonus = Math.min(user.level * 0.1, 2);
      const reward = baseReward + levelBonus;

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db.collection('users').updateOne(
        { id: parseInt(userId) },
        { 
          $inc: { 
            magnuStarsoins: reward,
            'miningStats.totalMinedStars': reward
          },
          $set: { lastActivity: new Date() }
        }
      );

      res.json({ 
        success: true, 
        reward: reward.toFixed(2),
        message: `+${reward.toFixed(2)} Magnum Coins –∑–∞ —Ñ–∞—Ä–º!`
      });

    } catch (error) {
      console.error('Farm error:', error);
      res.status(500).json({ success: false, message: 'Internal server error' });
    }
  });

  app.post('/api/webapp/tasks', async (req, res) => {
    try {
      const { userId } = req.body;
      if (!userId) {
        return res.status(400).json({ success: false, message: 'Missing userId' });
      }

      const user = await db.collection('users').findOne({ id: parseInt(userId) });
      if (!user) {
        return res.status(404).json({ success: false, message: 'User not found' });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
      const tasks = [
        {
          id: 1,
          name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥',
          description: '–ó–∞–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è',
          reward: 5,
          icon: 'üìÖ',
          type: 'daily'
        },
        {
          id: 2,
          name: '–ê–∫—Ç–∏–≤–Ω—ã–π –º–∞–π–Ω–µ—Ä',
          description: '–°–¥–µ–ª–∞–π—Ç–µ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–∫–æ–≤',
          reward: 15,
          icon: '‚ö°',
          type: 'clicks',
          progress: Math.min((user.miningStats?.activeClicks || 0), 10),
          target: 10
        },
        {
          id: 3,
          name: '–§–∞—Ä–º–µ—Ä',
          description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞—Ä–º 3 —Ä–∞–∑–∞',
          reward: 25,
          icon: 'üåæ',
          type: 'farm',
          progress: Math.min((user.miningStats?.farStarsount || 0), 3),
          target: 3
        }
      ];

      res.json({ 
        success: true, 
        tasks: tasks
      });

    } catch (error) {
      console.error('Tasks error:', error);
      res.status(500).json({ success: false, message: 'Internal server error' });
    }
  });

  // API –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç (Magnum Coins ‚Üî Stars)
  app.post('/api/webapp/exchange', async (req, res) => {
    try {
      const { userId, from, amount } = req.body;
      if (!userId || !from || typeof amount !== 'number' || amount <= 0) {
        return res.status(400).json({ error: 'Bad request' });
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º webappUsers –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –æ–±–º–µ–Ω–∞
      const user = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
      if (!user) return res.status(404).json({ error: 'User not found' });

      const rate = await calculateExchangeRate();
      const commission = (config.EXCHANGE_COMMISSION || 2.5) / 100;

      let inc = { magnuStarsoins: 0, stars: 0 };
      let reserveInc = { magnuStarsoins: 0, stars: 0 };

      let received = 0;
      if (from === 'Stars') {
        // –û–±–º–µ–Ω Magnum Coins ‚Üí Stars
        if (user.magnuStarsoins < amount) return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins' });
        const starsOut = amount * rate * (1 - commission);
        inc.magnuStarsoins -= amount;
        inc.stars += starsOut;
        reserveInc.magnuStarsoins += amount * commission;
        received = starsOut;
      } else if (from === 'stars') {
        // –û–±–º–µ–Ω Stars ‚Üí Magnum Coins
        if ((user.stars || 0) < amount) return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars' });
        const StarsOut = (amount / rate) * (1 - commission);
        inc.stars -= amount;
        inc.magnuStarsoins += StarsOut;
        reserveInc.stars += amount * commission;
        received = StarsOut;
      } else {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –æ–±–º–µ–Ω–∞' });
      }

      await db.collection('webappUsers').updateOne(
        { userId: parseInt(userId) },
        { $inc: inc, $set: { updatedAt: new Date() } }
      );

      await db.collection('reserve').updateOne(
        { currency: 'main' },
        { $inc: reserveInc },
        { upsert: true }
      );

      await db.collection('exchangeHistory').insertOne({
        userId: parseInt(userId),
        direction: from,
        amount,
        rate,
        received,
        commission: commission * 100,
        timestamp: new Date()
      });

      const updated = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
      res.json({
        success: true,
        rate,
        magnuStarsoins: updated.magnuStarsoins,
        stars: updated.stars
      });
    } catch (error) {
      console.error('WebApp exchange error:', error);
      res.status(500).json({ error: 'Server error' });
    }
  });
}

// API –º–∞—Ä—à—Ä—É—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

// Express —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É–¥–∞–ª–µ–Ω - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
console.log('üöÄ –ó–∞–ø—É—Å–∫ Magnum Stars Bot...');
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
  process.exit(1);
}

if (!process.env.MONGODB_URI) {
  console.error('‚ùå MONGODB_URI –Ω–µ –Ω–∞–π–¥–µ–Ω');
  process.exit(1);
}

console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');

const config = {
  BOT_TOKEN: process.env.BOT_TOKEN,
  MONGODB_URI: process.env.MONGODB_URI,
  ADMIN_IDS: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())) : [],
  SUPPORT_CHANNEL: process.env.SUPPORT_CHANNEL ? `@${process.env.SUPPORT_CHANNEL}` : null,
  WITHDRAWAL_CHANNEL: process.env.WITHDRAWAL_CHANNEL ? `@${process.env.WITHDRAWAL_CHANNEL}` : null,
  REQUIRED_CHANNEL: process.env.REQUIRED_CHANNEL ? `@${process.env.REQUIRED_CHANNEL}` : null,
  // RichAds –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω—è–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è)
  RICHADS_API_KEY: process.env.RICHADS_API_KEY,
  RICHADS_ENABLED: process.env.RICHADS_ENABLED === 'true',
  
  // WebApp –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  WEBAPP_URL: process.env.WEBAPP_URL,
  
  // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
  SPONSOR_TASK_CHANNEL: process.env.SPONSOR_TASK_CHANNEL || '@musice46',
  SPONSOR_TASK_BOT: process.env.SPONSOR_TASK_BOT || 'https://t.me/farmikstars_bot?start=6587897295',
  REQUIRED_BOT_LINK: process.env.REQUIRED_BOT_LINK || 'https://t.me/ReferalStarsRobot?start=6587897295',
  FIRESTARS_BOT_LINK: process.env.FIRESTARS_BOT_LINK || 'https://t.me/firestars_rbot?start=6587897295',
  FARMIK_BOT_LINK: process.env.FARMIK_BOT_LINK || 'https://t.me/farmikstars_bot?start=6587897295',
  BASKET_BOT_LINK: process.env.BASKET_BOT_LINK || 'https://t.me/basket_gift_bot?start=6587897295',
  PRIVATE_CHANNEL_LINK: process.env.PRIVATE_CHANNEL_LINK || 'https://t.me/+4BUF9S_rLZw3NDQ6',
  PROMO_NOTIFICATIONS_CHAT: process.env.PROMO_NOTIFICATIONS_CHAT || '@magnumtapchat',
  BOT_PHOTO_URL: process.env.BOT_PHOTO_URL,
  
  // –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  INITIAL_STARS: 0,
  INITIAL_MAGNUM_COINS: 1000,

  DAILY_BONUS_BASE: 3,
  REFERRAL_BONUS: 50,
  REFERRAL_REWARD: 5, // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  MINER_REWARD_PER_MINUTE: 0.01, // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∏–Ω—É—Ç—É (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
  MINER_REWARD_PER_HOUR: 0.1, // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  
  // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞–π–Ω–∏–Ω–≥–∞
  MINING_SEASON_DURATION: 30, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∑–æ–Ω–∞ –≤ –¥–Ω—è—Ö
  MINING_REWARD_INTERVAL: 1, // –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –≤ –º–∏–Ω—É—Ç–∞—Ö
  MINING_ACTIVE_CLICK_BONUS: 0.5, // –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–∫ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É)
  
  // –ú–∞–π–Ω–µ—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
  MINERS: {
    basic: {
      id: 'basic',
      name: '–ë–∞–∑–æ–≤—ã–π –º–∞–π–Ω–µ—Ä',
      rarity: 'common',
      baseSpeed: 0.01, // ~7 –¥–Ω–µ–π –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
      price: 100,
      currency: 'magnuStarsoins',
      description: '–ü—Ä–æ—Å—Ç–æ–π –º–∞–π–Ω–µ—Ä –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö (–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å ~7 –¥–Ω–µ–π)'
    },
    advanced: {
      id: 'advanced',
      name: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–∞–π–Ω–µ—Ä',
      rarity: 'rare',
      baseSpeed: 0.025, // ~14 –¥–Ω–µ–π –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
      price: 500,
      currency: 'magnuStarsoins',
      description: '–ë–æ–ª–µ–µ –º–æ—â–Ω—ã–π –º–∞–π–Ω–µ—Ä (–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å ~14 –¥–Ω–µ–π)'
    },
    premium: {
      id: 'premium',
      name: '–ü—Ä–µ–º–∏—É–º –º–∞–π–Ω–µ—Ä',
      rarity: 'epic',
      baseSpeed: 0.0017, // ~21 –¥–µ–Ω—å –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
      price: 50,
      currency: 'stars',
      miningCurrency: 'stars', // –î–æ–±—ã–≤–∞–µ—Ç Stars (–≤—Ç–æ—Ä–∞—è –≤–∞–ª—é—Ç–∞)
      description: '–ú–æ—â–Ω—ã–π –º–∞–π–Ω–µ—Ä –∑–∞ Stars, –¥–æ–±—ã–≤–∞–µ—Ç Stars (–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å ~21 –¥–µ–Ω—å)'
    },
    legendary: {
      id: 'legendary',
      name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–∞–π–Ω–µ—Ä',
      rarity: 'legendary',
      baseSpeed: 0.0045, // ~31 –¥–µ–Ω—å –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
      price: 200,
      currency: 'stars',
      miningCurrency: 'stars', // –î–æ–±—ã–≤–∞–µ—Ç Stars (–≤—Ç–æ—Ä–∞—è –≤–∞–ª—é—Ç–∞)
      description: '–°–∞–º—ã–π –º–æ—â–Ω—ã–π –º–∞–π–Ω–µ—Ä, –¥–æ–±—ã–≤–∞–µ—Ç Stars (–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å ~31 –¥–µ–Ω—å)'
    }
  },
  
  // –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–µ–∑–æ–Ω—ã (—Ç–æ–ª—å–∫–æ —Ç–æ–ø-10)
  SEASON_REWARDS: {
    top1: { magnuStarsoins: 10000, stars: 100, title: 'üèÜ –ß–µ–º–ø–∏–æ–Ω —Å–µ–∑–æ–Ω–∞' },
    top3: { magnuStarsoins: 5000, stars: 50, title: 'ü•á –¢–æ–ø-3 —Å–µ–∑–æ–Ω–∞' },
    top10: { magnuStarsoins: 2000, stars: 20, title: 'ü•à –¢–æ–ø-10 —Å–µ–∑–æ–Ω–∞' }
  },
  
  EXCHANGE_COMMISSION: 2.5,
  WITHDRAWAL_COMMISSION: 5.0,
  MIN_WITHDRAWAL: 50,
  MAX_WITHDRAWAL: 10000,
  
  // –°–∏—Å—Ç–µ–º–∞ —Å–µ–∑–æ–Ω–æ–≤ –º–∞–π–Ω–∏–Ω–≥–∞
  MINING_SEASON_DURATION: 7, // –¥–Ω–µ–π
  MINING_SEASON_START_DATE: new Date('2025-11-22'), // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞
  MINING_TOTAL_MAGNUM_COINS: 1000000, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  MINING_TOTAL_STARS: 100, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  MINING_SEASON_MULTIPLIER: 1.2, // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –∫–∞–∂–¥—ã–π —Å–µ–∑–æ–Ω
  
  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  USER_CACHE_TTL: 30000,
  STATS_CACHE_TTL: 120000,
  
  // Rate limiting
  RATE_LIMIT_WINDOW: 60000,
  RATE_LIMIT_MAX_REQUESTS: 30,
  
  // –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏
  INITIAL_RESERVE_STARS: 1000000, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ Stars
  INITIAL_RESERVE_MAGNUM_COINS: 1000, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ Magnum Coins
  
  // –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ (–±–∞–∑–æ–≤—ã–π)
  BASE_EXCHANGE_RATE: 0.0000001, // 1 Magnum Coin = 0.0000001 Star
  EXCHANGE_RATE_MULTIPLIER: 1.0 // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫—É—Ä—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑–µ—Ä–≤–∞
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(userId) {
  try {
    const id = parseInt(userId);
    return Array.isArray(config.ADMIN_IDS) && config.ADMIN_IDS.includes(id);
  } catch (_) {
    return false;
  }
}

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ WebApp
app.get('/api/webapp/check-access', async (req, res) => {
    try {
        const userId = req.query.user_id;
        if (!userId) {
            return res.json({ access: false, reason: 'No user ID provided' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        const isAdmin = config.ADMIN_IDS.includes(parseInt(userId));
        const webappEnabled = process.env.WEBAPP_ENABLED === 'true';
        const adminOnly = process.env.WEBAPP_ADMIN_ONLY === 'true';

        if (!webappEnabled) {
            return res.json({ access: false, reason: 'WebApp disabled' });
        }

        if (adminOnly && !isAdmin) {
            return res.json({ access: false, reason: 'Admin only' });
        }

        res.json({ access: true, isAdmin });
    } catch (error) {
        console.error('WebApp access check error:', error);
        res.status(500).json({ access: false, reason: 'Server error' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/webapp/user-data', async (req, res) => {
    try {
        const userId = req.query.user_id;
        if (!userId) {
            return res.status(400).json({ error: 'User ID required' });
        }

        console.log(`üì• WebApp –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        let webappUser = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        
        if (!webappUser) {
            webappUser = {
                userId: parseInt(userId),
                magnuStarsoins: 1000,
                stars: 0,
                level: 1,
                experience: 0,
                clickCount: 0,
                cps: 1,
                minerActive: false,
                referralsCount: 0,
                referralEarnings: 0,
                achievementsCompleted: 0,
                upgrades: {
                    autoClicker: { level: 0, cost: 10, baseCost: 10, multiplier: 1.5 },
                    clickPower: { level: 0, cost: 25, baseCost: 25, multiplier: 2 },
                    starGenerator: { level: 0, cost: 50, baseCost: 50, multiplier: 2.5 }
                },
                minerUpgrades: {
                    efficiency: { level: 0, cost: 100, baseCost: 100, multiplier: 2 },
                    capacity: { level: 0, cost: 200, baseCost: 200, multiplier: 2.5 }
                },
                tasks: {
                    daily: [
                        { id: 'click_100', name: '–ö–ª–∏–∫–µ—Ä', description: '–°–¥–µ–ª–∞–π—Ç–µ 100 –∫–ª–∏–∫–æ–≤', target: 100, progress: 0, reward: 50, completed: false },
                        { id: 'earn_1000', name: '–ó–∞—Ä–∞–±–æ—Ç–æ–∫', description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 1000 Stars', target: 1000, progress: 0, reward: 100, completed: false },
                        { id: 'farm_5', name: '–§–∞—Ä–º–µ—Ä', description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞—Ä–º 5 —Ä–∞–∑', target: 5, progress: 0, reward: 75, completed: false }
                    ],
                    achievements: [
                        { id: 'first_click', name: '–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫', description: '–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫', target: 1, progress: 0, reward: 25, completed: false },
                        { id: 'rich_player', name: '–ë–æ–≥–∞—á', description: '–ù–∞–∫–æ–ø–∏—Ç–µ 10000 Stars', target: 10000, progress: 0, reward: 500, completed: false },
                        { id: 'click_master', name: '–ú–∞—Å—Ç–µ—Ä –∫–ª–∏–∫–æ–≤', description: '–°–¥–µ–ª–∞–π—Ç–µ 1000 –∫–ª–∏–∫–æ–≤', target: 1000, progress: 0, reward: 200, completed: false }
                    ]
                },
                settings: {
                    notifications: true,
                    sound: true,
                    autoSave: true
                },
                lastFarmAt: null,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            await db.collection('webappUsers').insertOne(webappUser);
            console.log(`üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π WebApp –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
        }

        if (webappUser.minerActive) {
            const now = Date.now();
            const lastUpdate = new Date(webappUser.updatedAt || webappUser.createdAt).getTime();
            const minutesPassed = Math.floor((now - lastUpdate) / 60000);
            if (minutesPassed > 0) {
                const baseIncome = 1;
                const efficiencyBonus = (webappUser.minerUpgrades?.efficiency?.level || 0) * 0.5;
                const capacityBonus = (webappUser.minerUpgrades?.capacity?.level || 0) * 0.3;
                const perMinute = baseIncome + efficiencyBonus + capacityBonus;
                const passiveEarn = perMinute * minutesPassed;
                await db.collection('webappUsers').updateOne(
                    { userId: parseInt(userId) },
                    { $inc: { magnuStarsoins: passiveEarn }, $set: { updatedAt: new Date() } }
                );
                webappUser.magnuStarsoins += passiveEarn;
            }
        }

        const farStarsooldownMs = (parseInt(process.env.WEBAPP_FARM_COOLDOWN_SEC || '5') || 5) * 1000;

        res.json({
            success: true,
            data: {
                magnuStarsoins: webappUser.magnuStarsoins || 0,
                stars: webappUser.stars || 0,
                level: webappUser.level || 1,
                experience: webappUser.experience || 0,
                clickCount: webappUser.clickCount || 0,
                cps: webappUser.cps || 1,
                minerActive: !!webappUser.minerActive,
                referralsCount: webappUser.referralsCount || 0,
                referralEarnings: webappUser.referralEarnings || 0,
                achievementsCompleted: webappUser.achievementsCompleted || 0,
                upgrades: webappUser.upgrades || {
                    autoClicker: { level: 0, cost: 10, baseCost: 10, multiplier: 1.5 },
                    clickPower: { level: 0, cost: 25, baseCost: 25, multiplier: 2 },
                    starGenerator: { level: 0, cost: 50, baseCost: 50, multiplier: 2.5 }
                },
                minerUpgrades: webappUser.minerUpgrades || {
                    efficiency: { level: 0, cost: 100, baseCost: 100, multiplier: 2 },
                    capacity: { level: 0, cost: 200, baseCost: 200, multiplier: 2.5 }
                },
                tasks: webappUser.tasks || {
                    daily: [
                        { id: 'click_100', name: '–ö–ª–∏–∫–µ—Ä', description: '–°–¥–µ–ª–∞–π—Ç–µ 100 –∫–ª–∏–∫–æ–≤', target: 100, progress: 0, reward: 50, completed: false },
                        { id: 'earn_1000', name: '–ó–∞—Ä–∞–±–æ—Ç–æ–∫', description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 1000 Stars', target: 1000, progress: 0, reward: 100, completed: false },
                        { id: 'farm_5', name: '–§–∞—Ä–º–µ—Ä', description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞—Ä–º 5 —Ä–∞–∑', target: 5, progress: 0, reward: 75, completed: false }
                    ],
                    achievements: [
                        { id: 'first_click', name: '–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫', description: '–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫', target: 1, progress: 0, reward: 25, completed: false },
                        { id: 'rich_player', name: '–ë–æ–≥–∞—á', description: '–ù–∞–∫–æ–ø–∏—Ç–µ 10000 Stars', target: 10000, progress: 0, reward: 500, completed: false },
                        { id: 'click_master', name: '–ú–∞—Å—Ç–µ—Ä –∫–ª–∏–∫–æ–≤', description: '–°–¥–µ–ª–∞–π—Ç–µ 1000 –∫–ª–∏–∫–æ–≤', target: 1000, progress: 0, reward: 200, completed: false }
                    ]
                },
                settings: webappUser.settings || {
                    notifications: true,
                    sound: true,
                    autoSave: true
                },
                lastFarmAt: webappUser.lastFarmAt || null,
                farStarsooldownMs
            }
        });
    } catch (error) {
        console.error('WebApp user data error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/webapp/update-data', async (req, res) => {
    try {
        const { userId, magnuStarsoins, stars, level, experience, clickCount, upgrades, minerUpgrades, tasks, settings, cps, minerActive, lastFarmAt } = req.body;
        
        if (!userId) {
            return res.status(400).json({ error: 'User ID required' });
        }

        // –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        const updateData = { updatedAt: new Date() };
        if (typeof magnuStarsoins === 'number' && isFinite(magnuStarsoins) && magnuStarsoins >= 0) updateData.magnuStarsoins = magnuStarsoins;
        if (typeof stars === 'number' && isFinite(stars) && stars >= 0) updateData.stars = stars;
        if (typeof level === 'number' && isFinite(level) && level >= 1) updateData.level = Math.floor(level);
        if (typeof experience === 'number' && isFinite(experience) && experience >= 0) updateData.experience = Math.floor(experience);
        if (typeof clickCount === 'number' && isFinite(clickCount) && clickCount >= 0) updateData.clickCount = Math.floor(clickCount);
        if (typeof cps === 'number' && isFinite(cps) && cps >= 0) updateData.cps = cps;
        if (typeof minerActive === 'boolean') updateData.minerActive = minerActive;
        if (lastFarmAt) updateData.lastFarmAt = new Date(lastFarmAt);

        if (upgrades && typeof upgrades === 'object') updateData.upgrades = upgrades;
        if (minerUpgrades && typeof minerUpgrades === 'object') updateData.minerUpgrades = minerUpgrades;
        if (tasks && typeof tasks === 'object') updateData.tasks = tasks;
        if (settings && typeof settings === 'object') updateData.settings = settings;

        const result = await db.collection('webappUsers').updateOne(
            { userId: parseInt(userId) },
            { $set: updateData },
            { upsert: true }
        );

        console.log(`‚úÖ WebApp –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, result);

        res.json({ success: true, message: 'Data updated successfully' });
    } catch (error) {
        console.error('WebApp update data error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç —Ñ–∞—Ä–º–∞ —Å –∫—É–ª–¥–∞—É–Ω–æ–º
app.post('/api/webapp/farm', async (req, res) => {
    try {
        const { userId } = req.body;
        if (!userId) {
            return res.status(400).json({ error: 'User ID required' });
        }

        const farStarsooldownMs = (parseInt(process.env.WEBAPP_FARM_COOLDOWN_SEC || '5') || 5) * 1000;
        const now = Date.now();

        let webappUser = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        if (!webappUser) {
            return res.status(404).json({ error: 'User not found' });
        }

        const lastFarmAt = webappUser.lastFarmAt ? new Date(webappUser.lastFarmAt).getTime() : 0;
        const elapsed = now - lastFarmAt;
        const remainingMs = farStarsooldownMs - elapsed;
        if (remainingMs > 0) {
            return res.status(429).json({
                error: 'Cooldown',
                remainingMs,
                nextAvailableAt: now + remainingMs,
                farStarsooldownMs
            });
        }

        const reward = Math.max(1, webappUser.cps || 1);
        const updates = {
            $inc: { magnuStarsoins: reward, clickCount: 1, experience: 1 },
            $set: { lastFarmAt: new Date(now), updatedAt: new Date(now) }
        };
        await db.collection('webappUsers').updateOne({ userId: parseInt(userId) }, updates);

        const newBalance = (webappUser.magnuStarsoins || 0) + reward;

        return res.json({
            success: true,
            reward,
            magnuStarsoins: newBalance,
            nextAvailableAt: now + farStarsooldownMs,
            farStarsooldownMs
        });
    } catch (error) {
        console.error('WebApp farm error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞
app.post('/api/webapp/miner/toggle', async (req, res) => {
    try {
        const { userId, active } = req.body;
        if (!userId || typeof active !== 'boolean') {
            return res.status(400).json({ error: 'Bad request' });
        }
        await db.collection('webappUsers').updateOne(
            { userId: parseInt(userId) },
            { $set: { minerActive: active, updatedAt: new Date() } }
        );
        res.json({ success: true });
    } catch (error) {
        console.error('WebApp miner toggle error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç (Magnum Coins ‚Üî Stars)
app.post('/api/webapp/exchange', async (req, res) => {
    try {
        const { userId, from, amount } = req.body;
        if (!userId || !from || typeof amount !== 'number' || amount <= 0) {
            return res.status(400).json({ error: 'Bad request' });
        }
        const user = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        if (!user) return res.status(404).json({ error: 'User not found' });

        const rate = await calculateExchangeRate();
        const commission = (config.EXCHANGE_COMMISSION || 2.5) / 100;

        let inc = { magnuStarsoins: 0, stars: 0 };
        let reserveInc = { magnuStarsoins: 0, stars: 0 };

        let received = 0;
        if (from === 'Stars') {
            if (user.magnuStarsoins < amount) return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins' });
            const starsOut = amount * rate * (1 - commission);
            inc.magnuStarsoins -= amount;
            inc.stars += starsOut;
            reserveInc.magnuStarsoins += amount * commission;
            received = starsOut;
        } else if (from === 'stars') {
            if ((user.stars || 0) < amount) return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars' });
            const StarsOut = (amount / rate) * (1 - commission);
            inc.stars -= amount;
            inc.magnuStarsoins += StarsOut;
            reserveInc.stars += amount * commission;
            received = StarsOut;
        } else {
            return res.status(400).json({ error: 'Unknown from' });
        }

        await db.collection('webappUsers').updateOne(
            { userId: parseInt(userId) },
            { $inc: inc, $set: { updatedAt: new Date() } }
        );

        await db.collection('reserve').updateOne(
            { currency: 'main' },
            { $inc: reserveInc },
            { upsert: true }
        );

        await db.collection('exchangeHistory').insertOne({
            userId: parseInt(userId), direction: from, amount, rate, received, commission: commission * 100, timestamp: new Date()
        });

        const updated = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        res.json({ success: true, rate, magnuStarsoins: updated.magnuStarsoins, stars: updated.stars });
    } catch (error) {
        console.error('WebApp exchange error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
app.post('/api/webapp/bonus', async (req, res) => {
    try {
        const { userId } = req.body;
        if (!userId) return res.status(400).json({ error: 'Bad request' });
        const user = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        if (!user) return res.status(404).json({ error: 'User not found' });
        const base = config.DAILY_BONUS_BASE || 10;
        const now = Date.now();
        const last = user.lastBonusAt ? new Date(user.lastBonusAt).getTime() : 0;
        const oneDay = 24 * 60 * 60 * 1000;
        if (now - last < oneDay) {
            return res.status(429).json({ error: 'Already claimed' });
        }
        const streak = (user.bonusStreak || 0) + (now - last < 2 * oneDay && last > 0 ? 1 : 1);
        const reward = base * (1 + Math.min(streak, 40) * 0.1);
        await db.collection('webappUsers').updateOne(
            { userId: parseInt(userId) },
            { $inc: { magnuStarsoins: Math.floor(reward) }, $set: { lastBonusAt: new Date(now), bonusStreak: streak, updatedAt: new Date(now) } }
        );
        const updated = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        res.json({ success: true, reward: Math.floor(reward), magnuStarsoins: updated.magnuStarsoins, bonusStreak: streak });
    } catch (error) {
        console.error('WebApp bonus error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
app.post('/api/webapp/promocode', async (req, res) => {
    try {
        const { userId, code } = req.body;
        if (!userId || !code) return res.status(400).json({ error: 'Bad request' });
        const promo = await db.collection('promocodes').findOne({ code: String(code).trim().toUpperCase(), isActive: true });
        if (!promo) return res.status(404).json({ error: 'Invalid code' });
        if (promo.expiresAt && new Date(promo.expiresAt).getTime() < Date.now()) return res.status(400).json({ error: 'Expired' });
        if (promo.maxActivations && (promo.activations || 0) >= promo.maxActivations) return res.status(400).json({ error: 'Limit reached' });

        await db.collection('webappUsers').updateOne(
            { userId: parseInt(userId) },
            { $inc: { magnuStarsoins: promo.reward || 0 }, $set: { updatedAt: new Date() } }
        );
        await db.collection('promocodes').updateOne(
            { _id: promo._id },
            { $inc: { activations: 1 } }
        );
        const updated = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        res.json({ success: true, reward: promo.reward || 0, magnuStarsoins: updated.magnuStarsoins });
    } catch (error) {
        console.error('WebApp promocode error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
app.get('/api/webapp/exchange-rate', async (req, res) => {
    try {
        const rate = await calculateExchangeRate();
        res.json({ success: true, rate });
    } catch (error) {
        res.status(500).json({ success: false });
    }
});

// –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/webapp/exchange-history', async (req, res) => {
    try {
        const userId = parseInt(String(req.query.user_id||'0'));
        if (!userId) return res.status(400).json({ success:false });
        const items = await db.collection('exchangeHistory').find({ userId }).sort({ timestamp:-1 }).limit(50).toArray();
        res.json({ success:true, items });
    } catch (error) {
        res.status(500).json({ success:false });
    }
});

// API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
app.get('/api/bot-info', async (req, res) => {
    try {
        const username = process.env.BOT_PUBLIC_USERNAME || (bot?.botInfo?.username) || null;
        res.json({ success: true, username });
    } catch (error) {
        res.json({ success: true, username: null });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
app.get('/api/status', async (req, res) => {
    try {
        const botStatus = bot ? 'running' : 'not_initialized';
        const dbStatus = db ? 'connected' : 'disconnected';
        
        res.json({
            status: 'ok',
            bot: {
                status: botStatus,
                username: process.env.BOT_PUBLIC_USERNAME || (bot?.botInfo?.username) || null
            },
            database: {
                status: dbStatus,
                name: db ? db.databaseName : null
            },
            server: {
                uptime: process.uptime(),
                memory: process.memoryUsage(),
                timestamp: new Date().toISOString()
            },
            environment: process.env.NODE_ENV || 'development'
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∑–∞ 24 —á–∞—Å–∞
let exchangeRate24h = null;
let lastRateUpdate = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
async function calculateExchangeRate() {
  try {
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    if (!reserve) {
      return config.BASE_EXCHANGE_RATE;
    }
    
    const magnuStarsoinsReserve = reserve.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS;
    const starsReserve = reserve.stars || config.INITIAL_RESERVE_STARS;
    
    // –†–∞—Å—á–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤
    const ratio = magnuStarsoinsReserve / starsReserve;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é —à–∫–∞–ª—É –¥–ª—è –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    let multiplier;
    if (ratio <= 1) {
      // –ï—Å–ª–∏ Magnum Coins –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ Stars, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–Ω–µ–π–Ω—É—é —à–∫–∞–ª—É
      multiplier = Math.max(0.001, ratio);
    } else {
      // –ï—Å–ª–∏ Magnum Coins –±–æ–ª—å—à–µ Stars, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é —à–∫–∞–ª—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
      const logRatio = Math.log(ratio) / Math.log(10); // log10
      multiplier = Math.max(0.001, 1 + logRatio * 2);
    }
    
    const dynamicRate = config.BASE_EXCHANGE_RATE * multiplier;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –∑–∞ 24 —á–∞—Å–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å
    const now = new Date();
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    
    if (!lastRateUpdate || lastRateUpdate < oneDayAgo) {
      exchangeRate24h = dynamicRate;
      lastRateUpdate = now;
      console.log(`üìÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫—É—Ä—Å –∑–∞ 24 —á–∞—Å–∞: ${dynamicRate.toFixed(6)}`);
      try {
        // [–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ] –ü–µ—Ä—Å–∏—Å—Ç–∏–º 24—á –∫—É—Ä—Å –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ MongoDB
        await db.collection('config').updateOne(
          { key: 'EXCHANGE_RATE_24H' },
          { $set: { value: exchangeRate24h, updatedAt: now } },
          { upsert: true }
        );
        await db.collection('config').updateOne(
          { key: 'LAST_RATE_UPDATE' },
          { $set: { value: lastRateUpdate.toISOString(), updatedAt: now } },
          { upsert: true }
        );
      } catch (e) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ –±–∞–∑—É:', e.message);
      }
    }
    
    console.log(`üí± –†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞:`, {
      magnuStarsoinsReserve: formatNumber(magnuStarsoinsReserve),
      starsReserve: formatNumber(starsReserve),
      ratio: ratio.toFixed(4),
      logRatio: ratio > 1 ? (Math.log(ratio) / Math.log(10)).toFixed(4) : 'N/A',
      multiplier: multiplier.toFixed(4),
      baseRate: config.BASE_EXCHANGE_RATE,
      dynamicRate: dynamicRate.toFixed(6),
      rate24h: exchangeRate24h ? exchangeRate24h.toFixed(6) : 'N/A'
    });
    
    return dynamicRate;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞:', error);
    return config.BASE_EXCHANGE_RATE;
  }
}
// ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
let db;
let client;

async function connectDB() {
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', {
      uri: config.MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      uriLength: config.MONGODB_URI?.length || 0
    });
    
    client = new MongoClient(config.MONGODB_URI);
    await client.connect();
    console.log('üîå MongoDB –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
    
    db = client.db();
    console.log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–∞');
    
    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', {
      databaseName: db.databaseName,
      collections: await db.listCollections().toArray().then(cols => cols.map(c => c.name))
    });
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users...');
    await db.collection('users').createIndex({ id: 1 }, { unique: true });
    await db.collection('users').createIndex({ username: 1 });
    await db.collection('users').createIndex({ 'miner.active': 1 });
    await db.collection('users').createIndex({ lastSeen: -1 });
    await db.collection('users').createIndex({ referrerId: 1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è users —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ promocodes...');
    await db.collection('promocodes').createIndex({ code: 1 }, { unique: true });
    await db.collection('promocodes').createIndex({ isActive: 1 });
    await db.collection('promocodes').createIndex({ expiresAt: 1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è promocodes —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ withdrawalRequests...');
    await db.collection('withdrawalRequests').createIndex({ userId: 1 });
    await db.collection('withdrawalRequests').createIndex({ status: 1 });
    await db.collection('withdrawalRequests').createIndex({ createdAt: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è withdrawalRequests —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ supportTickets...');
    await db.collection('supportTickets').createIndex({ userId: 1 });
    await db.collection('supportTickets').createIndex({ status: 1 });
    await db.collection('supportTickets').createIndex({ createdAt: -1 });
    await db.collection('supportTickets').createIndex({ id: 1 }, { unique: true });
    await db.collection('supportTickets').createIndex({ adminId: 1 });
    await db.collection('supportTickets').createIndex({ updatedAt: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è supportTickets —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ taskChecks...');
    await db.collection('taskChecks').createIndex({ userId: 1 });
    await db.collection('taskChecks').createIndex({ status: 1 });
    await db.collection('taskChecks').createIndex({ createdAt: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è taskChecks —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ dailyTasks...');
    await db.collection('dailyTasks').createIndex({ userId: 1 });
    await db.collection('dailyTasks').createIndex({ date: 1 });
    await db.collection('dailyTasks').createIndex({ completed: 1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è dailyTasks —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ exchangeHistory...');
    await db.collection('exchangeHistory').createIndex({ userId: 1 });
    await db.collection('exchangeHistory').createIndex({ timestamp: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è exchangeHistory —Å–æ–∑–¥–∞–Ω—ã');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ reserve...');
    try {
      await db.collection('reserve').createIndex({ currency: 1 }, { unique: true });
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è reserve —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      if (error.code === 11000) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏, —É–¥–∞–ª—è–µ–º –∏—Ö –∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞–Ω–æ–≤–æ
        console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–∑–µ—Ä–≤–µ...');
        const deleteResult = await db.collection('reserve').deleteMany({ currency: null });
        console.log('–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π:', { deletedCount: deleteResult.deletedCount });
        await db.collection('reserve').createIndex({ currency: 1 }, { unique: true });
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è reserve –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω');
      } else {
        throw error;
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ webappUsers
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ webappUsers...');
    await db.collection('webappUsers').createIndex({ userId: 1 }, { unique: true });
    await db.collection('webappUsers').createIndex({ updatedAt: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è webappUsers —Å–æ–∑–¥–∞–Ω—ã');
    console.log('‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    console.log('üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞...');
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤
    await initializeReserve();
    console.log('‚úÖ –†–µ–∑–µ—Ä–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', {
      databaseName: db.databaseName,
      collectionsCount: (await db.listCollections().toArray()).length
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    console.log('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', {
      error: error.message,
      stack: error.stack,
      mongoUri: config.MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    });
    process.exit(1);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞
async function initializeReserve() {
  try {
    // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    await db.collection('reserve').deleteMany({ currency: null });
    
    let reserve = await db.collection('reserve').findOne({ currency: 'main' });
    
    if (!reserve) {
      reserve = {
        currency: 'main',
        stars: config.INITIAL_RESERVE_STARS,
        magnuStarsoins: config.INITIAL_RESERVE_MAGNUM_COINS,
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      await db.collection('reserve').insertOne(reserve);
      console.log('üí∞ –†–µ–∑–µ—Ä–≤ –≤–∞–ª—é—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          } else {
        console.log('üí∞ –†–µ–∑–µ—Ä–≤ –≤–∞–ª—é—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞:', error);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function resetDatabase() {
  try {
    console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
    const collections = await db.listCollections().toArray();
    const collectionNames = collections.map(col => col.name);
    
    console.log('üìã –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', collectionNames);
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö
    for (const collectionName of collectionNames) {
      if (!collectionName.startsWith('system.')) {
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: ${collectionName}`);
        await db.collection(collectionName).drop();
      }
    }
    
    console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã');
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üìã –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
    await db.collection('users').createIndex({ id: 1 }, { unique: true });
    await db.collection('users').createIndex({ username: 1 });
    await db.collection('users').createIndex({ 'miner.active': 1 });
    await db.collection('users').createIndex({ lastSeen: -1 });
    await db.collection('users').createIndex({ referrerId: 1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ promocodes
    await db.collection('promocodes').createIndex({ code: 1 }, { unique: true });
    await db.collection('promocodes').createIndex({ isActive: 1 });
    await db.collection('promocodes').createIndex({ expiresAt: 1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ withdrawalRequests
    await db.collection('withdrawalRequests').createIndex({ userId: 1 });
    await db.collection('withdrawalRequests').createIndex({ status: 1 });
    await db.collection('withdrawalRequests').createIndex({ createdAt: -1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ supportTickets
    await db.collection('supportTickets').createIndex({ userId: 1 });
    await db.collection('supportTickets').createIndex({ status: 1 });
    await db.collection('supportTickets').createIndex({ createdAt: -1 });
    await db.collection('supportTickets').createIndex({ id: 1 }, { unique: true });
    await db.collection('supportTickets').createIndex({ adminId: 1 });
    await db.collection('supportTickets').createIndex({ updatedAt: -1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ taskChecks
    await db.collection('taskChecks').createIndex({ userId: 1 });
    await db.collection('taskChecks').createIndex({ status: 1 });
    await db.collection('taskChecks').createIndex({ createdAt: -1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ dailyTasks
    await db.collection('dailyTasks').createIndex({ userId: 1 });
    await db.collection('dailyTasks').createIndex({ date: 1 });
    await db.collection('dailyTasks').createIndex({ completed: 1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ exchangeHistory
    await db.collection('exchangeHistory').createIndex({ userId: 1 });
    await db.collection('exchangeHistory').createIndex({ timestamp: -1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞
    await db.collection('reserve').createIndex({ currency: 1 }, { unique: true });
    
    console.log('‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤ –∑–∞–Ω–æ–≤–æ
    console.log('üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞...');
    await initializeReserve();
    console.log('‚úÖ –†–µ–∑–µ—Ä–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à–∏
    userCache.clear();
    statsCache.clear();
    console.log('‚úÖ –ö–µ—à–∏ –æ—á–∏—â–µ–Ω—ã');
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!');
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// ==================== –ö–ï–®–ò–†–û–í–ê–ù–ò–ï ====================
const userCache = new Map();
const statsCache = new Map();

function getCachedUser(id) {
  const cached = userCache.get(id);
  if (cached && (Date.now() - cached.timestamp) < config.USER_CACHE_TTL) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (cached.user && typeof cached.user.magnuStarsoins === 'number' && typeof cached.user.stars === 'number' &&
        !isNaN(cached.user.magnuStarsoins) && !isNaN(cached.user.stars)) {
      return cached.user;
    } else {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã, —É–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞
      userCache.delete(id);
      console.warn(`üßπ –£–¥–∞–ª–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} (NaN –∏–ª–∏ null –∑–Ω–∞—á–µ–Ω–∏—è)`);
      return null;
    }
  }
  return null;
}

function setCachedUser(id, user) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –∫–µ—à
  if (user && typeof user.magnuStarsoins === 'number' && typeof user.stars === 'number' &&
      !isNaN(user.magnuStarsoins) && !isNaN(user.stars)) {
    userCache.set(id, { user, timestamp: Date.now() });
  } else {
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} –≤ –∫–µ—à:`, {
      magnuStarsoins: user?.magnuStarsoins,
      stars: user?.stars,
      type: typeof user?.magnuStarsoins,
      isNaN_magnuStarsoins: isNaN(user?.magnuStarsoins),
      isNaN_stars: isNaN(user?.stars)
    });
  }
}

function getCachedStats(key) {
  const cached = statsCache.get(key);
  if (cached && (Date.now() - cached.timestamp) < config.STATS_CACHE_TTL) {
    return cached.data;
  }
  return null;
}

function setCachedStats(key, data) {
  statsCache.set(key, { data, timestamp: Date.now() });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞
function cleanupInvalidCache() {
  const now = Date.now();
  let cleanedCount = 0;
  
  for (const [id, cached] of userCache.entries()) {
    if (cached && cached.user) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      if (typeof cached.user.magnuStarsoins !== 'number' || typeof cached.user.stars !== 'number' ||
          isNaN(cached.user.magnuStarsoins) || isNaN(cached.user.stars)) {
        userCache.delete(id);
        cleanedCount++;
        console.log(`üßπ –£–¥–∞–ª–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} (NaN –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)`);
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
      else if (now - cached.timestamp > config.USER_CACHE_TTL) {
        userCache.delete(id);
        cleanedCount++;
      }
    }
  }
  
  if (cleanedCount > 0) {
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  }
  
  return cleanedCount;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function clearUserCache(userId) {
  if (userCache.has(userId)) {
    userCache.delete(userId);
    console.log(`üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    return true;
  }
  return false;
}

// ==================== –£–¢–ò–õ–ò–¢–´ ====================
function escapeMarkdown(text) {
  if (!text) return '';
  return text
    .replace(/\*/g, '\\*')
    .replace(/\[/g, '\\[')
    .replace(/\]/g, '\\]')
    .replace(/\(/g, '\\(')
    .replace(/\)/g, '\\)')
    .replace(/~/g, '\\~')
    .replace(/`/g, '\\`')
    .replace(/>/g, '\\>')
    .replace(/#/g, '\\#')
    .replace(/\+/g, '\\+')
    .replace(/\|/g, '\\|')
    .replace(/\{/g, '\\{')
    .replace(/\}/g, '\\}')
    .replace(/!/g, '\\!');
}

function formatNumber(num) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ num —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
  if (num === null || num === undefined || isNaN(num)) {
    return '0,00';
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  num = Number(num);
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ü–µ–ª—É—é –∏ –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç–∏
  const [integerPart, decimalPart = '00'] = num.toFixed(2).split('.');
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á –∫ —Ü–µ–ª–æ–π —á–∞—Å—Ç–∏
  const formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
  return `${formattedInteger},${decimalPart}`;
}

function formatTime(seconds) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ seconds —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
  if (seconds === null || seconds === undefined || isNaN(seconds)) {
    return '0—Å';
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  seconds = Number(seconds);
  
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;
  
  if (hours > 0) {
    return `${hours}—á ${minutes}–º ${secs}—Å`;
  } else if (minutes > 0) {
    return `${minutes}–º ${secs}—Å`;
  }
  return `${secs}—Å`;
}

function calculateExperienceToNextLevel(level) {
  // –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –¥–ª—è 1 —É—Ä–æ–≤–Ω—è
  let baseExperience = 100;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—ã—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
  for (let i = 1; i < level; i++) {
    baseExperience = Math.floor(baseExperience * 1.2);
  }
  
  return baseExperience;
}

function getRankByLevel(level) {
  // –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω–µ–π
  if (level >= 100) return 'üëë –ò–º–ø–µ—Ä–∞—Ç–æ—Ä';
  if (level >= 80) return '‚öúÔ∏è –ö–æ—Ä–æ–ª—å';
  if (level >= 60) return 'üëë –ü—Ä–∏–Ω—Ü';
  if (level >= 40) return 'üõ°Ô∏è –†—ã—Ü–∞—Ä—å';
  if (level >= 30) return '‚öîÔ∏è –í–æ–∏–Ω';
  if (level >= 20) return 'üõ°Ô∏è –°—Ç—Ä–∞–∂';
  if (level >= 15) return 'üó°Ô∏è –û—Ö–æ—Ç–Ω–∏–∫';
  if (level >= 10) return 'üèπ –õ—É—á–Ω–∏–∫';
  if (level >= 5) return '‚öîÔ∏è –ë–æ–µ—Ü';
  return 'üõ°Ô∏è –†–µ–∫—Ä—É—Ç';
}

function getUserRank(user) {
  const level = user.level || 1;
  
  console.log(`üîç getUserRank –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, —É—Ä–æ–≤–µ–Ω—å: ${level}`);
  
  return getRankByLevel(level);
}

function getRankRequirements() {
  return [
    { level: 1, name: 'üõ°Ô∏è –†–µ–∫—Ä—É—Ç', requirement: '–ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥' },
    { level: 5, name: '‚öîÔ∏è –ë–æ–µ—Ü', requirement: '5 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 10, name: 'üèπ –õ—É—á–Ω–∏–∫', requirement: '10 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 15, name: 'üó°Ô∏è –û—Ö–æ—Ç–Ω–∏–∫', requirement: '15 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 20, name: 'üõ°Ô∏è –°—Ç—Ä–∞–∂', requirement: '20 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 30, name: '‚öîÔ∏è –í–æ–∏–Ω', requirement: '30 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 40, name: 'üõ°Ô∏è –†—ã—Ü–∞—Ä—å', requirement: '40 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 60, name: 'üëë –ü—Ä–∏–Ω—Ü', requirement: '60 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 80, name: '‚öúÔ∏è –ö–æ—Ä–æ–ª—å', requirement: '80 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 100, name: 'üëë –ò–º–ø–µ—Ä–∞—Ç–æ—Ä', requirement: '100 —É—Ä–æ–≤–µ–Ω—å' }
  ];
}

async function getRankProgress(user) {
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
  const freshUser = await getUser(user.id);
  const level = freshUser ? (freshUser.level || 1) : (user.level || 1);
  const ranks = getRankRequirements();
  
  console.log(`üîç getRankProgress –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  console.log(`üîç –£—Ä–æ–≤–µ–Ω—å –∏–∑ freshUser: ${freshUser ? freshUser.level : 'null'}`);
  console.log(`üîç –£—Ä–æ–≤–µ–Ω—å –∏–∑ user: ${user.level}`);
  console.log(`üîç –ò—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${level}`);
  
  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥
  let currentRank = ranks[0];
  let nextRank = null;
  
  for (let i = ranks.length - 1; i >= 0; i--) {
    if (level >= ranks[i].level) {
      currentRank = ranks[i];
      if (i < ranks.length - 1) {
        nextRank = ranks[i + 1];
      }
      break;
    }
  }
  
  console.log(`üîç –ù–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: ${currentRank.name} (${currentRank.level})`);
  console.log(`üîç –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥: ${nextRank ? nextRank.name + ' (' + nextRank.level + ')' : '–ù–µ—Ç'}`);
  // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥
  if (!nextRank) {
    const result = {
      current: currentRank,
      next: null,
      progress: 100,
      remaining: 0,
      isMax: true
    };
    
    console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞:`, result);
    return result;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  if (nextRank.level <= currentRank.level) {
    console.error('–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–∞: nextRank.level <= currentRank.level', {
      currentRank,
      nextRank,
      userLevel: level,
      userId: user.id
    });
    return {
      current: currentRank,
      next: nextRank,
      progress: 0,
      remaining: nextRank.level - level,
      isMax: false
    };
  }
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const levelDifference = nextRank.level - currentRank.level;
  const userProgress = level - currentRank.level;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø—ã—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  const experienceProgress = freshUser ? (freshUser.experience / freshUser.experienceToNextLevel) : 0;
  const totalUserProgress = userProgress + experienceProgress;
  
  console.log(`üîç –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: levelDifference=${levelDifference}, userProgress=${userProgress}, experienceProgress=${experienceProgress.toFixed(2)}, totalUserProgress=${totalUserProgress.toFixed(2)}`);
  if (levelDifference <= 0) {
    console.error('–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–∞: levelDifference <= 0', {
      currentRank,
      nextRank,
      userLevel: level,
      levelDifference,
      userId: user.id
    });
    return {
      current: currentRank,
      next: nextRank,
      progress: 0,
      remaining: nextRank.level - level,
      isMax: false
    };
  }
  
  const progress = Math.min(100, Math.max(0, Math.round((totalUserProgress / levelDifference) * 100)));
  const remaining = Math.max(0, nextRank.level - level);
  
  const result = {
    current: currentRank,
    next: nextRank,
    progress: progress,
    remaining: remaining,
    isMax: false
  };
  
  console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, {
    level,
    currentRank: currentRank.name,
    nextRank: nextRank.name,
    progress,
    remaining,
    userProgress,
    experienceProgress: experienceProgress.toFixed(2),
    totalUserProgress: totalUserProgress.toFixed(2),
    levelDifference,
    calculation: `(${totalUserProgress.toFixed(2)} / ${levelDifference}) * 100 = ${progress}%`
  });
  
  return result;
}

function isAdmin(userId) {
  return config.ADMIN_IDS.includes(userId);
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkAndUpdateLevel(user) {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: –æ–ø—ã—Ç ${user.experience}/${user.experienceToNextLevel}, —É—Ä–æ–≤–µ–Ω—å ${user.level}`);
    
    let levelUp = false;
    let newLevel = user.level || 1;
    let newExperience = user.experience || 0;
    let newExperienceToNextLevel = user.experienceToNextLevel || 100;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    while (newExperience >= newExperienceToNextLevel) {
      levelUp = true;
      newExperience -= newExperienceToNextLevel;
      newLevel++;
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
      newExperienceToNextLevel = Math.floor(newExperienceToNextLevel * 1.2);
      
      console.log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ ${newLevel}! –û—Å—Ç–∞–ª–æ—Å—å –æ–ø—ã—Ç–∞: ${newExperience}/${newExperienceToNextLevel}`);
    }
    
    // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (levelUp) {
      await db.collection('users').updateOne(
        { id: user.id },
        { 
          $set: { 
            level: newLevel,
            experience: newExperience,
            experienceToNextLevel: newExperienceToNextLevel,
            updatedAt: new Date()
          }
        }
      );
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
      userCache.delete(user.id);
      
      console.log(`‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –æ–±–Ω–æ–≤–ª–µ–Ω: ${newLevel}, –æ–ø—ã—Ç: ${newExperience}/${newExperienceToNextLevel}`);
    }
    
    return { levelUp, newLevel, newExperience, newExperienceToNextLevel };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
    return { levelUp: false, newLevel: user.level, newExperience: user.experience, newExperienceToNextLevel: user.experienceToNextLevel };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è
function getRequiredExperience(level) {
  let requiredExp = 100; // –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –¥–ª—è 1 —É—Ä–æ–≤–Ω—è
  
  for (let i = 2; i <= level; i++) {
    requiredExp = Math.floor(requiredExp * 1.2);
  }
  
  return requiredExp;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–∞
async function debugRankProgress(user) {
  const level = user.level || 1;
  const ranks = getRankRequirements();
  
  console.log(`üîç –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`);
  console.log(`‚îú –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${level}`);
  console.log(`‚îú –í—Å–µ —Ä–∞–Ω–≥–∏:`, ranks.map(r => `${r.name} (${r.level})`));
  
  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥
  let currentRank = ranks[0];
  let nextRank = null;
  
  for (let i = ranks.length - 1; i >= 0; i--) {
    if (level >= ranks[i].level) {
      currentRank = ranks[i];
      if (i < ranks.length - 1) {
        nextRank = ranks[i + 1];
      }
      break;
    }
  }
  
  console.log(`‚îú –¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: ${currentRank.name} (${currentRank.level})`);
  console.log(`‚îú –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥: ${nextRank ? nextRank.name + ' (' + nextRank.level + ')' : '–ù–µ—Ç (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)'}`);
  
  if (nextRank) {
    const levelDifference = nextRank.level - currentRank.level;
    const userProgress = level - currentRank.level;
    const progress = Math.min(100, Math.max(0, Math.round((userProgress / levelDifference) * 100)));
    
    console.log(`‚îú –†–∞–∑–Ω–∏—Ü–∞ —É—Ä–æ–≤–Ω–µ–π: ${levelDifference}`);
    console.log(`‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userProgress}`);
    console.log(`‚îú –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${progress}%`);
    console.log(`‚îî –û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–≤–Ω–µ–π: ${nextRank.level - level}`);
  } else {
    console.log(`‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞`);
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é getRankProgress
  const rankProgress = await getRankProgress(user);
  console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç getRankProgress:`, rankProgress);
}
// ==================== –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function ensureUserFields(user) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  if (!user.statistics) {
    user.statistics = {
      joinDate: user.createdAt || new Date(),
      lastSeen: new Date(),
      totalSessions: 1,
      totalActions: 0,
      favoriteAction: null
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–µ—Ä–º—É
  if (!user.farm) {
    user.farm = {
      lastFarm: null,
      farStarsount: 0,
      totalFarmEarnings: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–π–Ω–µ—Ä
  if (!user.miner) {
    user.miner = {
      active: false,
      level: 1,
      efficiency: 1,
      lastReward: null,
      totalMined: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
  if (!user.dailyBonus) {
    user.dailyBonus = {
      lastBonus: null,
      streak: 0,
      maxStreak: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–º–µ–Ω
  if (!user.exchange) {
    user.exchange = {
      totalExchanged: 0,
      exchangeCount: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
  if (!user.withdrawal) {
    user.withdrawal = {
      totalWithdrawn: 0,
      withdrawalCount: 0,
      pendingAmount: 0
    };
  }
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è
  if (!user.tasks) {
    user.tasks = {
      dailyTasks: [],
      sponsorTasks: [],
      lastDailyTasksReset: null,
      completedTasks: 0,
      totalTaskEarnings: 0
    };
  }
  
  // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (user.tasks && (user.tasks.completedTasksCount !== undefined || user.tasks.totalTaskRewards !== undefined)) {
    if (user.tasks.completedTasksCount !== undefined) {
      user.tasks.completedTasks = user.tasks.completedTasksCount;
      delete user.tasks.completedTasksCount;
    }
    if (user.tasks.totalTaskRewards !== undefined) {
      user.tasks.totalTaskEarnings = user.tasks.totalTaskRewards;
      delete user.tasks.totalTaskRewards;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
  if (!user.support) {
    user.support = {
      ticketsCount: 0,
      lastTicket: null
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  if (!user.settings) {
    user.settings = {
      notifications: true,
      language: 'ru',
      theme: 'default'
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  if (!user.achievements) {
    user.achievements = [];
  }
  
  if (!user.achievementsCount) {
    user.achievementsCount = 0;
  }
  
  if (!user.achievementsProgress) {
    user.achievementsProgress = {};
  }
  
  if (!user.titles) {
    user.titles = ['üå± –ù–æ–≤–∏—á–æ–∫'];
  }
  
  if (!user.mainTitle) {
    user.mainTitle = 'üå± –ù–æ–≤–∏—á–æ–∫';
  }
  
  if (!user.referrals) {
    user.referrals = [];
  }
  
  if (!user.referralsCount) {
    user.referralsCount = 0;
  }
  
  if (!user.totalReferralEarnings) {
    user.totalReferralEarnings = 0;
  }
  
  if (!user.totalEarnedStars) {
    user.totalEarnedStars = user.stars || 0;
  }
  
  if (!user.totalEarnedMagnuStarsoins) {
    user.totalEarnedMagnuStarsoins = user.magnuStarsoins || 0;
  }
  
  if (!user.level) {
    user.level = 1;
  }
  
  if (!user.experience) {
    user.experience = 0;
  }
  
  if (!user.experienceToNextLevel) {
    user.experienceToNextLevel = 100;
  }
  
  if (!user.rank) {
    user.rank = getUserRank(user);
  }
  
  if (!user.referralCode) {
    user.referralCode = generateReferralCode();
  }
  
  return user;
}
async function getUser(id, ctx = null) {
  try {
    logFunction('getUser', id, { ctx: ctx ? 'present' : 'null' });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if (!id || isNaN(parseInt(id))) {
      console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${id}`);
      return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = getCachedUser(id);
    if (cached) {
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (cached.banned) {
        if (ctx) {
          await ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }
        return null;
      }
      return cached;
    }

    let user = await db.collection('users').findOne({ id: id });
    
    if (!user) {
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = {
        id: id,
        username: ctx?.from?.username || null,
        firstName: ctx?.from?.first_name || null,
        lastName: ctx?.from?.last_name || null,
        stars: config.INITIAL_STARS,
        magnuStarsoins: config.INITIAL_MAGNUM_COINS,
        totalEarnedStars: config.INITIAL_STARS,
        totalEarnedMagnuStarsoins: config.INITIAL_MAGNUM_COINS,
        level: 1,
        experience: 0,
        experienceToNextLevel: 100,
        rank: getUserRank({ stars: config.INITIAL_STARS }),
        mainTitle: 'üå± –ù–æ–≤–∏—á–æ–∫',
        titles: ['üå± –ù–æ–≤–∏—á–æ–∫'],
        achievements: [],
        achievementsCount: 0,
        achievementsProgress: {},
        referralCode: generateReferralCode(),
        referrerId: null,
        referrals: [],
        referralsCount: 0,
        totalReferralEarnings: 0,
        farm: {
          lastFarm: null,
          farStarsount: 0,
          totalFarmEarnings: 0
        },
        miner: {
          active: false,
          level: 1,
          efficiency: 1,
          lastReward: null,
          totalMined: 0
        },
        dailyBonus: {
          lastBonus: null,
          streak: 0,
          maxStreak: 0
        },
        exchange: {
          totalExchanged: 0,
          exchangeCount: 0
        },
        withdrawal: {
          totalWithdrawn: 0,
          withdrawalCount: 0,
          pendingAmount: 0
        },
        tasks: {
          dailyTasks: [],
          sponsorTasks: [],
          lastDailyTasksReset: null,
          completedTasks: 0,
          totalTaskEarnings: 0
        },
        support: {
          ticketsCount: 0,
          lastTicket: null
        },
        settings: {
          notifications: true,
          language: 'ru',
          theme: 'default'
        },
        statistics: {
          joinDate: new Date(),
          lastSeen: new Date(),
          totalSessions: 1,
          totalActions: 0,
          favoriteAction: null
        },
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      await db.collection('users').insertOne(user);
    } else {
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (user.banned) {
        if (ctx) {
          await ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }
        return null;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
      user = ensureUserFields(user);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const oldLastSeen = user.statistics?.lastSeen;
      const oldSessions = user.statistics?.totalSessions || 0;
      user.statistics.lastSeen = new Date();
      user.statistics.totalSessions = oldSessions + 1;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      const updateData = { 
        'statistics.lastSeen': user.statistics.lastSeen,
        'statistics.totalSessions': user.statistics.totalSessions,
        updatedAt: new Date()
      };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ username, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      if (ctx?.from?.first_name) {
        updateData.firstName = ctx.from.first_name;
        user.firstName = ctx.from.first_name;
      }
      if (ctx?.from?.last_name) {
        updateData.lastName = ctx.from.last_name;
        user.lastName = ctx.from.last_name;
      }
      if (ctx?.from?.username) {
        updateData.username = ctx.from.username;
        user.username = ctx.from.username;
      }
      
      await db.collection('users').updateOne(
        { id: id },
        { $set: updateData }
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    if (typeof user.magnuStarsoins !== 'number' || typeof user.stars !== 'number' || 
        isNaN(user.magnuStarsoins) || isNaN(user.stars)) {
      console.error(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, {
        magnuStarsoins: user.magnuStarsoins,
        stars: user.stars,
        type: typeof user.magnuStarsoins,
        isNaN_magnuStarsoins: isNaN(user.magnuStarsoins),
        isNaN_stars: isNaN(user.stars)
      });
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      user.magnuStarsoins = (typeof user.magnuStarsoins === 'number' && !isNaN(user.magnuStarsoins)) ? user.magnuStarsoins : config.INITIAL_MAGNUM_COINS;
      user.stars = (typeof user.stars === 'number' && !isNaN(user.stars)) ? user.stars : config.INITIAL_STARS;
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      clearUserCache(id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await db.collection('users').updateOne(
        { id: id },
        { 
          $set: { 
            magnuStarsoins: user.magnuStarsoins,
            stars: user.stars,
            updatedAt: new Date()
          }
        }
      );
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    setCachedUser(id, user);
    return user;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, error);
    console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, {
      error: error.message,
      stack: error.stack
    });
    return null;
  }
}

function generateReferralCode() {
  return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getDisplayName(user) {
  if (user.firstName) {
    return user.firstName;
  }
  if (user.username) {
    return `@${user.username}`;
  }
  return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async function formatProfileMessage(user, rankProgress) {
  let rankInfo = `‚îú –†–∞–Ω–≥: ${rankProgress.current.name}\n`;
  if (!rankProgress.isMax) {
    rankInfo += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: ${rankProgress.progress}% (${rankProgress.remaining} —É—Ä. –¥–æ ${rankProgress.next.name})\n`;
  } else {
    rankInfo += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥! üéâ\n`;
  }

  // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const globalStats = await getGlobalStats();

  return `üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!*\n\n` +
    `üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n` +
    `‚îú ID: \`${user.id}\`\n` +
    `‚îú –ò–º—è: ${getDisplayName(user)}\n` +
    `‚îú –£—Ä–æ–≤–µ–Ω—å: ${user.level}\n` +
    `${rankInfo}` +
    `‚îî –¢–∏—Ç—É–ª: ${user.mainTitle}\n\n` +
    `üíé *–ë–∞–ª–∞–Ω—Å:*\n` +
    `‚îú ‚≠ê Stars: \`${formatNumber(user.stars)}\`\n` +
    `‚îî ü™ô Magnum Coins: \`${formatNumber(user.magnuStarsoins)}\`\n\n` +
    `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:*\n` +
    `‚îú üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${Math.floor(globalStats.totalUsers)}\`\n` +
    `‚îú üí∞ –í—ã–≤–µ–¥–µ–Ω–æ Stars: \`${formatNumber(globalStats.totalWithdrawnStars)}\`\n` +
    `‚îî üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ Magnum: \`${formatNumber(globalStats.totalEarnedMagnumCoins)}\`\n\n` +
    `üì± *–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*\n` +
    `‚îú [üì∞ –ù–æ–≤–æ—Å—Ç–∏](https://t.me/magnumtap)\n` +
    `‚îú [üí∞ –í—ã–≤–æ–¥—ã](https://t.me/magnumwithdraw)\n` +
    `‚îî [üí¨ –ß–∞—Ç](https://t.me/magnumtapchat)\n\n` +
    `‚ö†Ô∏è *–ù–∞—à–ª–∏ –æ—à–∏–±–∫—É?*\n` +
    `‚îú –°–æ–æ–±—â–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ!\n` +
    `‚îú FAQ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n` +
    `‚îî –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
}

// ==================== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ====================
async function checkSubscription(ctx) {
  try {
    if (!config.REQUIRED_CHANNEL) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (!config.REQUIRED_CHANNEL.startsWith('@') && !config.REQUIRED_CHANNEL.startsWith('https://t.me/')) {
      console.log('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞:', config.REQUIRED_CHANNEL);
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ctx.from.id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!ctx.from || !ctx.from.id) {
      console.error('‚ùå ctx.from.id –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return true;
    }
    
    const member = await ctx.telegram.getChatMember(config.REQUIRED_CHANNEL, ctx.from.id);
    return ['creator', 'administrator', 'member'].includes(member.status);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      channel: config.REQUIRED_CHANNEL,
      userId: ctx.from?.id,
      error: error.message,
      stack: error.stack
    });
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    return true;
  }
}
async function showSubscriptionMessage(ctx) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (!config.REQUIRED_CHANNEL || (!config.REQUIRED_CHANNEL.startsWith('@') && !config.REQUIRED_CHANNEL.startsWith('https://t.me/'))) {
      console.log('‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:', config.REQUIRED_CHANNEL);
      // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      const user = await getUser(ctx.from.id);
      if (user) {
        await showMainMenu(ctx, user);
      }
      return;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–Ω–∞–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Ñ–æ—Ä–º–∞—Ç
    let channelUrl = config.REQUIRED_CHANNEL;
    if (channelUrl.startsWith('@')) {
      channelUrl = `https://t.me/${channelUrl.substring(1)}`;
    } else if (!channelUrl.startsWith('https://')) {
      channelUrl = `https://t.me/${channelUrl}`;
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', channelUrl)],
      [Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'check_subscription')]
    ]);
    
    await ctx.reply(
      `üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n` +
      `üì¢ –ö–∞–Ω–∞–ª: ${config.REQUIRED_CHANNEL}\n\n` +
      `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"`,
      { reply_markup: keyboard.reply_markup }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:', error);
    console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      channel: config.REQUIRED_CHANNEL,
      userId: ctx.from?.id,
      error: error.message,
      stack: error.stack
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try {
      const user = await getUser(ctx.from.id);
      if (user) {
        await showMainMenu(ctx, user);
      }
    } catch (fallbackError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', fallbackError);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
async function getGlobalStats() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const totalUsers = await db.collection('users').countDocuments();

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞–ª—é—Ç–∞–º (–∏—Å–∫–ª—é—á–∞—è –¥–æ—Ö–æ–¥—ã –æ—Ç –±–∏—Ä–∂–∏)
    const usersWithStats = await db.collection('users').find({}, {
      projection: {
        magnuStarsoins: 1,
        stars: 1,
        totalEarnedMagnuStarsoins: 1,
        totalEarnedStars: 1,
        totalWithdrawnMagnuStarsoins: 1,
        totalWithdrawnStars: 1
      }
    }).toArray();

    // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã
    let totalMagnumCoins = 0;
    let totalStars = 0;
    let totalEarnedMagnumCoins = 0;
    let totalEarnedStars = 0;
    let totalWithdrawnMagnumCoins = 0;
    let totalWithdrawnStars = 0;

    for (const user of usersWithStats) {
      totalMagnumCoins += user.magnuStarsoins || 0;
      totalStars += user.stars || 0;
      totalEarnedMagnumCoins += user.totalEarnedMagnuStarsoins || 0;
      totalEarnedStars += user.totalEarnedStars || 0;
      totalWithdrawnMagnumCoins += user.totalWithdrawnMagnuStarsoins || 0;
      totalWithdrawnStars += user.totalWithdrawnStars || 0;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö Stars —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    const approvedWithdrawals = await db.collection('withdrawalRequests').find({ status: 'approved' }).toArray();
    const totalApprovedWithdrawnStars = approvedWithdrawals.reduce((sum, withdrawal) => {
      if (withdrawal.currency === 'stars') {
        return sum + (withdrawal.amount || 0);
      }
      return sum;
    }, 0);

    // –í—ã—á–∏—Ç–∞–µ–º –¥–æ—Ö–æ–¥—ã –æ—Ç –±–∏—Ä–∂–∏ –∏–∑ –æ–±—â–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Magnum Coins
    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –æ–±–º–µ–Ω–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ
    const exchangeOperations = await db.collection('exchangeHistory').find({}).toArray();
    let totalExchangeMagnumEarnings = 0;

    for (const exchange of exchangeOperations) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–º–µ–Ω—è–ª Stars –Ω–∞ Magnum Coins, —ç—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–æ—Ö–æ–¥–æ–º –æ—Ç –±–∏—Ä–∂–∏
      if (exchange.direction === 'stars') {
        totalExchangeMagnumEarnings += exchange.received || 0;
      }
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º –¥–æ—Ö–æ–¥—ã –æ—Ç –±–∏—Ä–∂–∏ –∏–∑ –æ–±—â–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
    totalEarnedMagnumCoins = Math.max(0, totalEarnedMagnumCoins - totalExchangeMagnumEarnings);

    return {
      totalUsers,
      totalMagnumCoins,
      totalStars,
      totalEarnedMagnumCoins,
      totalEarnedStars,
      totalWithdrawnMagnumCoins,
      totalWithdrawnStars: totalApprovedWithdrawnStars
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return {
      totalUsers: 0,
      totalMagnumCoins: 0,
      totalStars: 0,
      totalEarnedMagnumCoins: 0,
      totalEarnedStars: 0,
      totalWithdrawnMagnumCoins: 0,
      totalWithdrawnStars: 0
    };
  }
}

// ==================== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ====================
async function handleReferral(userId, referrerId) {
  try {
    console.log(`üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${userId} -> ${referrerId}`);
    console.log(`üîç –î–µ—Ç–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:`, {
      userId: userId,
      referrerId: referrerId,
      userIdType: typeof userId,
      referrerIdType: typeof referrerId
    });
    
    if (userId === referrerId) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º');
      return;
    }
    
    const user = await getUser(userId);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω:`, {
      id: user.id,
      referrerId: user.referrerId,
      referralsCount: user.referralsCount
    });
    
    if (user.referrerId) {
      console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä:', user.referrerId);
      return;
    }
    
    const referrer = await getUser(referrerId);
    console.log(`üë§ –†–µ—Ñ–µ—Ä–µ—Ä –ø–æ–ª—É—á–µ–Ω:`, {
      id: referrer.id,
      referralsCount: referrer.referralsCount,
      referralsEarnings: referrer.referralsEarnings,
      totalReferralEarnings: referrer.totalReferralEarnings
    });
    
    if (!referrer) {
      console.log('‚ùå –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: userId },
      { 
        $set: { 
          referrerId: referrerId,
          updatedAt: new Date()
        }
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π
    const referralReward = config.REFERRAL_REWARD; // 5 Stars –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    await db.collection('users').updateOne(
      { id: referrerId },
      { 
        $inc: { 
          referralsCount: 1,
          totalReferralEarnings: referralReward,
          referralsEarnings: referralReward, // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          stars: referralReward, // –ù–∞—á–∏—Å–ª—è–µ–º Stars –≤–º–µ—Å—Ç–æ Stars
          totalEarnedStars: referralReward
        },
        $push: { referrals: userId },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(userId);
    userCache.delete(referrerId);
    
    console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${userId} -> ${referrerId}`);
    console.log(`üí∞ –ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞: ${referralReward} Stars`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    try {
      const referrerUser = await getUser(referrerId);
      const newUser = await getUser(userId);
      
      const notificationMessage = 
        `üéâ *–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${newUser.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
        `üÜî ID: \`${userId}\`\n` +
        `‚≠ê –ù–∞–≥—Ä–∞–¥–∞: +${formatNumber(referralReward)} Stars\n\n` +
        `üìä –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrerUser.referralsCount}\n` +
        `üíé –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${formatNumber(referrerUser.referralsEarnings || referrerUser.totalReferralEarnings || 0)} Stars`;
      
      await bot.telegram.sendMessage(referrerId, notificationMessage, {
        parse_mode: 'Markdown'
      });
      
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä—É ${referrerId}`);
    } catch (notifyError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É:', notifyError);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      const welcomeMessage = 
        `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!*\n\n` +
        `üë• –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n` +
        `üë§ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${referrer.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
        `üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏: +${formatNumber(config.INITIAL_MAGNUM_COINS)} Stars\n\n` +
        `üéÆ –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;
      
      await bot.telegram.sendMessage(userId, welcomeMessage, {
        parse_mode: 'Markdown'
      });
      
      console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    } catch (welcomeError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', welcomeError);
    }
    
    console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${userId} -> ${referrerId}`);
    console.log(`üí∞ –ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞: ${referralReward} Stars`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
    logError(error, '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
  }
}
// ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================
async function showMainMenu(ctx, user) {
  try {
    log(`üè† –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const rankProgress = await getRankProgress(user);
    log(`üè† –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (—Ä–∞–±–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏)
    const buttons = [
      [
        Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä', 'miner'),
        Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')
      ],
      [
        Markup.button.callback('üîë –ö–ª—é—á–∏', 'promocode'),
        Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')
      ],
      [
        Markup.button.callback('üó∫Ô∏è –†–æ–∞–¥–º–∞–ø', 'roadmap'),
        Markup.button.callback('üìà –ë–∏—Ä–∂–∞', 'exchange')
      ],
      [
        Markup.button.callback('üí∞ –í—ã–≤–æ–¥', 'withdrawal')
      ]
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±–æ–Ω—É—Å–∞
    if (isAdmin(user.id)) {
      buttons.splice(3, 0, [
        Markup.button.webApp('üéÅ –ë–æ–Ω—É—Å', `${config.WEBAPP_URL || 'https://your-domain.com'}/webapp`)
      ]);
    } else {
      buttons.splice(3, 0, [
        Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus_user')
      ]);
    }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (isAdmin(user.id)) {
    buttons.push([
      Markup.button.callback('üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')
    ]);
  }
  
  const keyboard = Markup.inlineKeyboard(buttons);
  
  const message = await formatProfileMessage(user, rankProgress);
  
  try {
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (editError) {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ`);
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  }
  
  log(`‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    log(`‚ùå –û—à–∏–±–∫–∞ –≤ showMainMenu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${error.message}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ answerCbQuery –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if (ctx.answerCbQuery) {
      try {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é');
      } catch (cbError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ answerCbQuery:', cbError);
      }
    }
  }
}

async function showMainMenuStart(ctx, user) {
  try {
    const rankProgress = await getRankProgress(user);
  
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (—Ä–∞–±–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏)
    const buttons = [
      [
        Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä', 'miner'),
        Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')
      ],
      [
        Markup.button.callback('üîë –ö–ª—é—á–∏', 'promocode'),
        Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')
      ],
      [
        Markup.button.callback('üó∫Ô∏è –†–æ–∞–¥–º–∞–ø', 'roadmap'),
        Markup.button.callback('üìà –ë–∏—Ä–∂–∞', 'exchange')
      ],
      [
        Markup.button.callback('üí∞ –í—ã–≤–æ–¥', 'withdrawal')
      ]
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±–æ–Ω—É—Å–∞
    if (isAdmin(user.id)) {
      buttons.splice(3, 0, [
        Markup.button.webApp('üéÅ –ë–æ–Ω—É—Å', `${config.WEBAPP_URL || 'https://your-domain.com'}/webapp`)
      ]);
    } else {
      buttons.splice(3, 0, [
        Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus_user')
      ]);
    }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (isAdmin(user.id)) {
    buttons.push([
      Markup.button.callback('üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')
    ]);
  }
  
  const keyboard = Markup.inlineKeyboard(buttons);
  
  const message = await formatProfileMessage(user, rankProgress);
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
    console.log(`–û—à–∏–±–∫–∞ –≤ showMainMenuStart:`, {
      userId: user.id,
      error: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } catch (replyError) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, replyError);
    }
  }
}

// ==================== –†–û–ê–î–ú–ê–ü ====================
async function showRoadmap(ctx, user) {
  try {
    log(`üó∫Ô∏è –ü–æ–∫–∞–∑ —Ä–æ–∞–¥–º–∞–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üöÄ Q4 2025 (–ë–æ—Ç)', 'roadmap_q4_2025'),
        Markup.button.callback('üéØ Q1 2026 (WebApp)', 'roadmap_q1_2026')
      ],
      [
        Markup.button.callback('üåü Q2 2026 (WebApp)', 'roadmap_q2_2026'),
        Markup.button.callback('üî• Q3 2026 (WebApp)', 'roadmap_q3_2026')
      ],
      [
        Markup.button.callback('üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (‚è≥)', 'roadmap_suggestions')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üó∫Ô∏è *–†–æ–∞–¥–º–∞–ø —Ä–∞–∑–≤–∏—Ç–∏—è Magnum Stars*\n\n` +
      `üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–µ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!*\n\n` +
      `üî¨ *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: Beta-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞*\n` +
      `üìÖ *–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: 28 –∞–≤–≥—É—Å—Ç–∞ 2025*\n\n` +
      `üìÖ *–ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è:*\n` +
      `‚îú üöÄ Q4 2025 - –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ë–æ—Ç)\n` +
      `‚îú üéØ Q1 2026 - WebApp –ø–µ—Ä–µ—Ö–æ–¥\n` +
      `‚îú üåü Q2 2026 - –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ (WebApp)\n` +
      `‚îî üî• Q3 2026 - –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ (WebApp)\n\n` +
      `üéÆ *–ß—Ç–æ –Ω–∞—Å –∂–¥–µ—Ç:*\n` +
      `‚îú üè∞ –°–∏—Å—Ç–µ–º–∞ –≥–∏–ª—å–¥–∏–π\n` +
      `‚îú ‚öîÔ∏è PvP —Å—Ä–∞–∂–µ–Ω–∏—è\n` +
      `‚îú üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã –∏ —Ç—É—Ä–Ω–∏—Ä—ã\n` +
      `‚îú üé® –°–∏—Å—Ç–µ–º–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏\n` +
      `‚îú üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∏—Ä–∂–∞\n` +
      `‚îú üé≠ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è\n` +
      `‚îú üåç –ú–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–∞—è\n` +
      `‚îî üíé NFT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\n\n` +
      `üì± *WebApp –ø–µ—Ä–µ—Ö–æ–¥:*\n` +
      `‚îú üîÑ –°–µ–Ω—Ç—è–±—Ä—å - –ù–æ—è–±—Ä—å 2025: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n` +
      `‚îú üöÄ 22 –Ω–æ—è–±—Ä—è 2025: –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ WebApp\n` +
      `‚îî üì± –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ - —Ç–æ–ª—å–∫–æ WebApp!\n\n` +
      `üí° *–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ!*\n` +
      `‚îú üìä –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ —Ñ—É–Ω–∫—Ü–∏–∏\n` +
      `‚îî üí° –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∏–¥–µ–∏\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∞–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –†–æ–∞–¥–º–∞–ø –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Ä–æ–∞–¥–º–∞–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–æ–∞–¥–º–∞–ø–∞');
  }
}

// ==================== –î–ï–¢–ê–õ–¨–ù–´–ï –†–û–ê–î–ú–ê–ü–´ ====================
async function showRoadmapQ4_2025(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∞–¥–º–∞–ø—É', 'roadmap')]
    ]);
    
    const message = 
      `üöÄ *Q4 2025 - –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ë–æ—Ç)*\n\n` +
      `üìÖ *–ê–≤–≥—É—Å—Ç - –î–µ–∫–∞–±—Ä—å 2025*\n` +
      `ü§ñ *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram Bot*\n\n` +
      `‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–æ:*\n` +
      `‚îú üåæ –°–∏—Å—Ç–µ–º–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞\n` +
      `‚îú üìà –ë–∏—Ä–∂–∞ Magnum Exchange\n` +
      `‚îú ‚õèÔ∏è –ú–∞–π–Ω–µ—Ä —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏\n` +
      `‚îú üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã\n` +
      `‚îú üìã –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π\n` +
      `‚îú üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n` +
      `‚îú üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n` +
      `‚îú üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã\n` +
      `‚îú üëë –°–∏—Å—Ç–µ–º–∞ —Ç–∏—Ç—É–ª–æ–≤\n` +
      `‚îî üí∞ –°–∏—Å—Ç–µ–º–∞ –≤—ã–≤–æ–¥–∞\n\n` +
      `üîÑ *–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:*\n` +
      `‚îú üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n` +
      `‚îú üé® –£–ª—É—á—à–µ–Ω–Ω—ã–π UI/UX\n` +
      `‚îî ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n` +
      `üì± *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ WebApp:*\n` +
      `‚îú üîÑ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞\n` +
      `‚îú üì± –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ WebApp\n` +
      `‚îî üé® –î–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞\n\n` +
      `üöÄ *WebApp –ø–µ—Ä–µ—Ö–æ–¥:*\n` +
      `‚îî 22 –Ω–æ—è–±—Ä—è 2025\n\n` +
      `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å: 85%*\n` +
      `üéØ *–ó–∞–ø—É—Å–∫: 28 –∞–≤–≥—É—Å—Ç–∞ 2025*`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–æ–∞–¥–º–∞–ø–∞ Q4 2024');
  }
}

async function showRoadmapQ1_2026(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∞–¥–º–∞–ø—É', 'roadmap')]
    ]);
    
    const message = 
      `üéØ *Q1 2026 - –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (WebApp)*\n\n` +
      `üìÖ *–Ø–Ω–≤–∞—Ä—å - –ú–∞—Ä—Ç 2026*\n` +
      `üì± *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram WebApp*\n\n` +
      `üîÑ *WebApp –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:*\n` +
      `‚îú üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π\n` +
      `‚îú üîÑ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n` +
      `‚îú üîÑ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI/UX\n` +
      `‚îî üîÑ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n` +
      `üè∞ *–°–∏—Å—Ç–µ–º–∞ –≥–∏–ª—å–¥–∏–π:*\n` +
      `‚îú –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∏–ª—å–¥–∏—è–º–∏\n` +
      `‚îú –û–±—â–∏–π –±–∞–Ω–∫ –≥–∏–ª—å–¥–∏–∏\n` +
      `‚îú –ì–∏–ª—å–¥–µ–π—Å–∫–∏–µ —á–∞—Ç—ã\n` +
      `‚îî –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤ –≤ –≥–∏–ª—å–¥–∏–∏\n\n` +
      `üí¨ *–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n` +
      `‚îú –í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π —á–∞—Ç\n` +
      `‚îú –°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑–µ–π\n` +
      `‚îú –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n` +
      `‚îî –≠–º–æ–¥–∑–∏ –∏ —Å—Ç–∏–∫–µ—Ä—ã\n\n` +
      `üé≠ *–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:*\n` +
      `‚îú –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è\n` +
      `‚îú –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤\n` +
      `‚îú –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã\n` +
      `‚îî –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫\n\n` +
      `üì± *WebApp –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*\n` +
      `‚îú üîî Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n` +
      `‚îú üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n` +
      `‚îú üé® –¢–µ–º–Ω–∞—è/—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞\n` +
      `‚îî üì± PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n` +
      `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å: 15%*\n` +
      `üéØ *–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 22 –Ω–æ—è–±—Ä—è 2025*`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–æ–∞–¥–º–∞–ø–∞ Q1 2025');
  }
}

async function showRoadmapQ2_2026(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∞–¥–º–∞–ø—É', 'roadmap')]
    ]);
    
    const message = 
      `üåü *Q2 2026 - –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ (WebApp)*\n\n` +
      `üìÖ *–ê–ø—Ä–µ–ª—å - –ò—é–Ω—å 2026*\n` +
      `üì± *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram WebApp*\n\n` +
      `‚öîÔ∏è *PvP —Å–∏—Å—Ç–µ–º–∞:*\n` +
      `‚îú –î—É—ç–ª–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏\n` +
      `‚îú –¢—É—Ä–Ω–∏—Ä—ã —Å –ø—Ä–∏–∑–æ–≤—ã–º–∏ —Ñ–æ–Ω–¥–∞–º–∏\n` +
      `‚îú –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞\n` +
      `‚îî –ö–æ–º–∞–Ω–¥–Ω—ã–µ –±–∏—Ç–≤—ã\n\n` +
      `üé≤ *–ú–∏–Ω–∏-–∏–≥—Ä—ã –∏ —Ç—É—Ä–Ω–∏—Ä—ã:*\n` +
      `‚îú –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã\n` +
      `‚îú –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏\n` +
      `‚îú –°–ª–æ–≤–µ—Å–Ω—ã–µ –∏–≥—Ä—ã\n` +
      `‚îî –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã\n\n` +
      `üé® *–°–∏—Å—Ç–µ–º–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏:*\n` +
      `‚îú –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã\n` +
      `‚îú –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–∞–º–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n` +
      `‚îú –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã\n` +
      `‚îî –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏\n\n` +
      `üì± *WebApp –∏–≥—Ä—ã:*\n` +
      `‚îú üéÆ –ò–≥—Ä—ã –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n` +
      `‚îú üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Ä–µ–∂–∏–º\n` +
      `‚îú üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã\n` +
      `‚îî üîÑ Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n\n` +
      `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%*\n` +
      `üéØ *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: WebApp —Ç–æ–ª—å–∫–æ*`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–æ–∞–¥–º–∞–ø–∞ Q2 2025');
  }
}

async function showRoadmapQ3_2026(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∞–¥–º–∞–ø—É', 'roadmap')]
    ]);
    
    const message = 
      `üî• *Q3 2026 - –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ (WebApp)*\n\n` +
      `üìÖ *–ò—é–ª—å - –°–µ–Ω—Ç—è–±—Ä—å 2026*\n` +
      `üì± *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram WebApp*\n\n` +
      `üéÆ *–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:*\n` +
      `‚îú –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n` +
      `‚îú –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã\n` +
      `‚îú –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n` +
      `‚îî –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n` +
      `üíé *NFT –∏ –±–ª–æ–∫—á–µ–π–Ω:*\n` +
      `‚îú NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n` +
      `‚îú –ë–ª–æ–∫—á–µ–π–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\n` +
      `‚îú –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞\n` +
      `‚îî –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã\n\n` +
      `ü§ñ *AI –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:*\n` +
      `‚îú AI –ø–æ–º–æ—â–Ω–∏–∫\n` +
      `‚îú –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–¥–µ–ª–∫–∏\n` +
      `‚îú –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n` +
      `‚îî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n` +
      `üì± *WebApp —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è:*\n` +
      `‚îú ‚úÖ –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n` +
      `‚îú üì± –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º\n` +
      `‚îú üîÑ PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n` +
      `‚îî üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è\n\n` +
      `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%*\n` +
      `üéØ *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: WebApp —Ç–æ–ª—å–∫–æ*`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–æ–∞–¥–º–∞–ø–∞ Q3 2025');
  }
}



async function showRoadmapSuggestions(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∞–¥–º–∞–ø—É', 'roadmap')]
    ]);
    
    const message = 
      `üí° *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è*\n\n` +
      `‚ö†Ô∏è *–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*\n\n` +
      `üîß *–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n` +
      `‚îú üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n` +
      `‚îú üéØ –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n` +
      `‚îú üèÜ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥\n` +
      `‚îî üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n` +
      `üìÖ *–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:*\n` +
      `‚îî 15 –¥–µ–∫–∞–±—Ä—è 2025\n\n` +
      `üí° *–ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:*\n` +
      `‚îú üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n` +
      `‚îú üó∫Ô∏è –ò–∑—É—á–∞—Ç—å –ø–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è –≤ —Ä–æ–∞–¥–º–∞–ø–µ\n` +
      `‚îî üéÆ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö (—á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å)\n\n` +
      `üöÄ *–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!*`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ä–æ–∞–¥–º–∞–ø–∞');
  }
}
// ==================== –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–ê–ô–ù–ò–ù–ì–ê ====================
async function showMinerMenu(ctx, user) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –º–∞–π–Ω–∏–Ω–≥–∞
  const userWithMining = initializeNewMiningSystem(user);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ
  const currentSeason = getCurrentMiningSeason();
  const seasonInfo = currentSeason ? 
    `\nüìÖ *–°–µ–∑–æ–Ω ${currentSeason.season}* (–î–µ–Ω—å ${currentSeason.dayInSeason}/${config.MINING_SEASON_DURATION})\n` +
    `üìà *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–µ–∑–æ–Ω–∞:* ${currentSeason.multiplier.toFixed(2)}x\n` +
    `‚è∞ *–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞:* ${currentSeason.daysUntilNextSeason} –¥–Ω–µ–π` :
    `\nüìÖ *–í—ã—Ö–æ–¥–Ω—ã–µ* - –º–∞–π–Ω–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞
  const totalSpeed = calculateTotalMiningSpeed(userWithMining);
  const rewardPerMinuteStars = totalSpeed.stars * currentSeason.multiplier;
  const rewardPerHourStars = rewardPerMinuteStars * 60;
  const rewardPerMinuteMagnumCoins = totalSpeed.magnuStarsoins * currentSeason.multiplier;
  const rewardPerHourMagnumCoins = rewardPerMinuteMagnumCoins * 60;
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–π–Ω–µ—Ä–æ–≤
  const totalMiners = userWithMining.miners.reduce((sum, miner) => sum + miner.count, 0);
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('üõí –ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤', 'miner_shop'),
      Markup.button.callback('üìÖ –°–µ–∑–æ–Ω', 'miner_season_info')
    ],
    [
      Markup.button.callback('üèÜ –†–µ–π—Ç–∏–Ω–≥', 'miner_leaderboard'),
      Markup.button.callback('‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥—ã', 'miner_upgrades')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏—Ç—É–ª–µ
  const titlesList = getTitlesList(userWithMining);
  const mainTitle = userWithMining.mainTitle || 'üå± –ù–æ–≤–∏—á–æ–∫';
  const currentTitle = titlesList.find(t => t.name === mainTitle);
  const titleBonus = currentTitle ? currentTitle.minerBonus : 1.0;
  const titleBonusText = titleBonus > 1.0 ? ` (+${((titleBonus - 1) * 100).toFixed(0)}%)` : '';

  const message =
    `‚õèÔ∏è *–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞–π–Ω–∏–Ω–≥–∞*${seasonInfo}\n\n` +
    `üíé *–í–∞—à–∏ –º–∞–π–Ω–µ—Ä—ã:* ${totalMiners} —à—Ç.\n` +
    `‚ö° *–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±—ã—á–∏:*\n` +
    `‚îú ü™ô Magnum Coins: ${formatNumber(totalSpeed.magnuStarsoins)} MC/–º–∏–Ω\n` +
    `‚îî ‚≠ê Stars: ${formatNumber(totalSpeed.stars)} Stars/–º–∏–Ω\n\n` +
    `üí∞ *–ù–∞–≥—Ä–∞–¥—ã:*\n` +
    `‚îú ü™ô Magnum Coins: ${formatNumber(rewardPerMinuteMagnumCoins)} MC/–º–∏–Ω ‚Ä¢ ${formatNumber(rewardPerHourMagnumCoins)} MC/—á–∞—Å\n` +
    `‚îî ‚≠ê Stars: ${formatNumber(rewardPerMinuteStars)} Stars/–º–∏–Ω ‚Ä¢ ${formatNumber(rewardPerHourStars)} Stars/—á–∞—Å\n\n` +
    `üëë *–¢–∏—Ç—É–ª:* ${mainTitle}${titleBonusText}\n\n` +
    `üìä *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:*\n` +
    `‚îú ü™ô Magnum Coins: ${formatNumber(userWithMining.miningStats?.totalMinedMagnumCoins || 0)} MC\n` +
    `‚îî ‚≠ê Stars: ${formatNumber(userWithMining.miningStats?.totalMinedStars || 0)} Stars\n\n` +
    `üìä *–°–µ–∑–æ–Ω–Ω–∞—è –¥–æ–±—ã—á–∞:*\n` +
    `‚îú ü™ô Magnum Coins: ${formatNumber(userWithMining.miningStats?.seasonMinedMagnumCoins || 0)} MC\n` +
    `‚îî ‚≠ê Stars: ${formatNumber(userWithMining.miningStats?.seasonMinedStars || 0)} Stars\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}
async function startMiner(ctx, user) {
  try {
    log(`‚õèÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (user.miner.active) {
      log(`‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!');
      return;
    }
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'miner.active': true,
          'miner.lastReward': new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚úÖ –ú–∞–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å Stars –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.');
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    await updateMinerMenu(ctx, { ...user, miner: { ...user.miner, active: true } });
  } catch (error) {
    logError(error, '–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞');
  }
}

async function stopMiner(ctx, user) {
  try {
    log(`‚èπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (!user.miner.active) {
      log(`‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      return;
    }
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'miner.active': false,
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚èπÔ∏è –ú–∞–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    await updateMinerMenu(ctx, { ...user, miner: { ...user.miner, active: false } });
  } catch (error) {
    logError(error, '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–π–Ω–µ—Ä–∞');
  }
}
// ==================== –£–õ–£–ß–®–ï–ù–ò–ï –ú–ê–ô–ù–ï–†–ê ====================
async function showMinerUpgrade(ctx, user) {
  try {
    log(`‚¨ÜÔ∏è –ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const miner = user.miner;
    const currentLevel = miner.level || 1;
    const currentEfficiency = miner.efficiency || 1;
    
    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
    const upgradeCost = currentLevel * 100; // 100 Stars –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    const newEfficiency = currentEfficiency + 0.2;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –∏ —Ç–∏—Ç—É–ª–∞
    const newRewardPerMinute = await calculateMinerReward(newEfficiency, user);
    const newRewardPerHour = newRewardPerMinute * 60;
    
    const canUpgrade = user.magnuStarsoins >= upgradeCost;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          canUpgrade ? `‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å (${formatNumber(upgradeCost)} Stars)` : `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars (${formatNumber(upgradeCost)})`,
          canUpgrade ? 'confirm_miner_upgrade' : 'insufficient_funds'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
    ]);
    
    const message = 
      `‚¨ÜÔ∏è *–£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞*\n\n` +
      `üìä *–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:* ${currentLevel}\n` +
      `‚ö° *–¢–µ–∫—É—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${currentEfficiency.toFixed(1)}x\n` +
      `üí∞ *–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber((await calculateMinerReward(currentEfficiency, user)) * 60)} ü™ô Magnum Coins\n\n` +
      `üìà *–ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è:*\n` +
      `‚ö° *–ù–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${newEfficiency.toFixed(1)}x\n` +
      `üí∞ *–ù–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(newRewardPerHour)} ü™ô Magnum Coins\n\n` +
      `üíé *–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è:* ${formatNumber(upgradeCost)} ü™ô Magnum Coins\n` +
      `üíé *–í–∞—à –±–∞–ª–∞–Ω—Å:* ${formatNumber(user.magnuStarsoins)} ü™ô Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ú–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  }
}

// ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–ô–ù–ï–†–ê ====================
async function showMinerStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const miner = user.miner;
    const isActive = miner.active || false;
    const efficiency = miner.efficiency || 1;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä–∞–¥—É —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –∏ —Ç–∏—Ç—É–ª–∞
    const currentReward = await calculateMinerReward(efficiency, user);
    const rewardPerMinute = currentReward;
    const rewardPerHour = currentReward * 60;
    
    let statusText = isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
    let lastRewardText = '';
    let nextRewardText = '';
    
    if (miner.lastReward) {
      const timeSince = Math.floor((Date.now() - miner.lastReward.getTime()) / 1000);
      if (timeSince < 60) {
        const remaining = 60 - timeSince;
        nextRewardText = `\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${formatTime(remaining)}`;
      } else {
        nextRewardText = `\n‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –Ω–∞–≥—Ä–∞–¥—ã!`;
      }
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
    ]);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏—Ç—É–ª–µ
    const titlesList = getTitlesList(user);
    const mainTitle = user.mainTitle || 'üå± –ù–æ–≤–∏—á–æ–∫';
    const currentTitle = titlesList.find(t => t.name === mainTitle);
    const titleBonus = currentTitle ? currentTitle.minerBonus : 1.0;
    const titleBonusText = titleBonus > 1.0 ? ` (+${((titleBonus - 1) * 100).toFixed(0)}%)` : '';

    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞*\n\n` +
      `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${miner.level || 1}\n` +
      `‚ö° *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${efficiency.toFixed(1)}x\n` +
      `üëë *–¢–∏—Ç—É–ª:* ${mainTitle}${titleBonusText}\n` +
      `üìä *–°—Ç–∞—Ç—É—Å:* ${statusText}\n` +
      `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/–º–∏–Ω—É—Ç—É:*\n` +
      `‚îú ü™ô Magnum Coins: ${formatNumber(rewardPerMinute)} MC/–º–∏–Ω\n` +
      `‚îî ‚≠ê Stars: ${formatNumber(rewardPerMinute)} Stars/–º–∏–Ω\n` +
      `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/—á–∞—Å:*\n` +
      `‚îú ü™ô Magnum Coins: ${formatNumber(rewardPerHour)} MC/—á–∞—Å\n` +
      `‚îî ‚≠ê Stars: ${formatNumber(rewardPerHour)} Stars/—á–∞—Å\n` +
      `üíé *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:*\n` +
      `‚îú ü™ô Magnum Coins: ${formatNumber(miner.totalMined || 0)} MC\n` +
      `‚îî ‚≠ê Stars: ${formatNumber(miner.totalMined || 0)} Stars\n` +
      `‚è∞ *–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞:* ${miner.lastReward ? miner.lastReward.toLocaleString('ru-RU') : '–ù–µ—Ç'}\n` +
      `${nextRewardText}\n\n` +
      `üìà *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚Ä¢ –ú–∞–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n` +
      `‚Ä¢ –ù–∞–≥—Ä–∞–¥—ã –≤—ã–¥–∞—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n` +
      `‚Ä¢ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –∏ —Ç–∏—Ç—É–ª–∞\n` +
      `‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏\n` +
      `‚Ä¢ –ú–æ–∂–Ω–æ —É–ª—É—á—à–∞—Ç—å –∑–∞ Stars`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  }
}
// ==================== –§–£–ù–ö–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –ú–ê–ô–ù–ï–†–ê ====================
async function upgradeMiner(ctx, user) {
  try {
    log(`‚¨ÜÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const miner = user.miner;
    const currentLevel = miner.level || 1;
    const currentEfficiency = miner.efficiency || 1;
    const upgradeCost = currentLevel * 100;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    if (user.magnuStarsoins < upgradeCost) {
      log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars!');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä
    const newLevel = currentLevel + 1;
    const newEfficiency = currentEfficiency + 0.2;
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnuStarsoins: -upgradeCost,
          totalEarnedMagnuStarsoins: -upgradeCost
        },
        $set: { 
          'miner.level': newLevel,
          'miner.efficiency': newEfficiency,
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery(`‚úÖ –ú–∞–π–Ω–µ—Ä —É–ª—É—á—à–µ–Ω! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${newLevel}, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${newEfficiency.toFixed(1)}x`);
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showMinerMenu(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞');
  }
}

// ==================== –°–ò–°–¢–ï–ú–ê –°–ï–ó–û–ù–û–í –ú–ê–ô–ù–ò–ù–ì–ê ====================

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
function getCurrentMiningSeason() {
  const now = new Date();
  const startDate = config.MINING_SEASON_START_DATE;
  const seasonDuration = config.MINING_SEASON_DURATION;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
  const dayOfWeek = now.getDay();
  if (dayOfWeek === 0 || dayOfWeek === 6) {
    return null; // –í—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è
  }
  
  const daysSinceStart = Math.floor((now - startDate) / (1000 * 60 * 60 * 24));
  const currentSeason = Math.floor(daysSinceStart / seasonDuration) + 1;
  
  return {
    season: currentSeason,
    dayInSeason: (daysSinceStart % seasonDuration) + 1,
    daysUntilNextSeason: seasonDuration - (daysSinceStart % seasonDuration),
    startDate: new Date(startDate.getTime() + (currentSeason - 1) * seasonDuration * 24 * 60 * 60 * 1000),
    endDate: new Date(startDate.getTime() + currentSeason * seasonDuration * 24 * 60 * 60 * 1000),
    multiplier: Math.pow(config.MINING_SEASON_MULTIPLIER, currentSeason - 1)
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Å–µ–∑–æ–Ω–∞
function getSeasonLimits(season) {
  const baseStarsLimit = config.MINING_TOTAL_STARS;
  const multiplier = Math.pow(config.MINING_SEASON_MULTIPLIER, season - 1);
  
  return {
    magnuStarsoins: Math.floor(baseStarsLimit * multiplier),
    stars: Math.floor(baseStarsLimit * multiplier)
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–∑–æ–Ω–∞
async function getSeasonStats(season) {
  const startDate = new Date(config.MINING_SEASON_START_DATE.getTime() + (season - 1) * config.MINING_SEASON_DURATION * 24 * 60 * 60 * 1000);
  const endDate = new Date(startDate.getTime() + config.MINING_SEASON_DURATION * 24 * 60 * 60 * 1000);
  
  const stats = await db.collection('miningSeasonStats').findOne({ season: season });
  
  if (!stats) {
    return {
      season: season,
      totalMinedStars: 0,
      activeMiners: 0,
      startDate: startDate,
      endDate: endDate
    };
  }
  
  return {
    ...stats,
    startDate: startDate,
    endDate: endDate
  };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–∑–æ–Ω–∞
async function updateSeasonStats(season, minedStars) {
  await db.collection('miningSeasonStats').updateOne(
    { season: season },
    { 
      $inc: { 
        totalMinedStars: minedStars
      },
      $set: { 
        updatedAt: new Date()
      }
    },
    { upsert: true }
  );
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–µ–∑–æ–Ω–∞
async function checkSeasonLimits(season, minedStars) {
  const limits = getSeasonLimits(season);
  const stats = await getSeasonStats(season);
  
  const canMineStars = stats.totalMinedStars + minedStars <= limits.stars;
  
  return {
    canMineStars,
    remainingStars: Math.max(0, limits.stars - stats.totalMinedStars)
  };
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ –º–∞–π–Ω–∏–Ω–≥–∞
async function showMinerSeasonInfo(ctx, user) {
  try {
    log(`üìÖ –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ –º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const currentSeason = getCurrentMiningSeason();
    
    if (!currentSeason) {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
      ]);
      
      await ctx.editMessageText(
        `üìÖ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–µ –º–∞–π–Ω–∏–Ω–≥–∞*\n\n` +
        `üåÖ *–í—ã—Ö–æ–¥–Ω—ã–µ*\n\n` +
        `‚è∏Ô∏è –ú–∞–π–Ω–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏\n` +
        `üìÖ –°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏\n\n` +
        `üîÑ –ú–∞–π–Ω–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );
      return;
    }
    
    const limits = getSeasonLimits(currentSeason.season);
    const stats = await getSeasonStats(currentSeason.season);
    const limitsCheck = await checkSeasonLimits(currentSeason.season, 0, 0);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
    ]);
    
    const message = 
      `üìÖ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–µ –º–∞–π–Ω–∏–Ω–≥–∞*\n\n` +
      `üéØ *–¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω:* ${currentSeason.season}\n` +
      `üìÖ *–î–µ–Ω—å —Å–µ–∑–æ–Ω–∞:* ${currentSeason.dayInSeason}/${config.MINING_SEASON_DURATION}\n` +
      `‚è∞ *–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞:* ${currentSeason.daysUntilNextSeason} –¥–Ω–µ–π\n\n` +
      `üìà *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–µ–∑–æ–Ω–∞:* ${currentSeason.multiplier.toFixed(2)}x\n` +
      `üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ–∑–æ–Ω–∞:* ${((currentSeason.dayInSeason / config.MINING_SEASON_DURATION) * 100).toFixed(1)}%\n\n` +
      `üí∞ *–õ–∏–º–∏—Ç—ã —Å–µ–∑–æ–Ω–∞:*\n` +
      `‚îú ü™ô Magnum Coins: ${formatNumber(limits.magnuStarsoins)}\n` +
      `‚îî ‚≠ê Stars: ${formatNumber(limits.stars)}\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∑–æ–Ω–∞:*\n` +
      `‚îú –î–æ–±—ã—Ç–æ ü™ô Magnum Coins: ${formatNumber(stats.totalMinedMagnumCoins)} / ${formatNumber(limits.magnuStarsoins)}\n` +
      `‚îú –î–æ–±—ã—Ç–æ ‚≠ê Stars: ${formatNumber(stats.totalMinedStars)} / ${formatNumber(limits.stars)}\n` +
      `‚îú –û—Å—Ç–∞–ª–æ—Å—å ü™ô Magnum Coins: ${formatNumber(limitsCheck.remainingMagnumCoins)}\n` +
      `‚îî –û—Å—Ç–∞–ª–æ—Å—å ‚≠ê Stars: ${formatNumber(limitsCheck.remainingStars)}\n\n` +
      `üìÖ *–î–∞—Ç—ã —Å–µ–∑–æ–Ω–∞:*\n` +
      `‚îú –ù–∞—á–∞–ª–æ: ${currentSeason.startDate.toLocaleDateString('ru-RU')}\n` +
      `‚îî –ö–æ–Ω–µ—Ü: ${currentSeason.endDate.toLocaleDateString('ru-RU')}\n\n` +
      `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚îú –ö–∞–∂–¥—ã–π —Å–µ–∑–æ–Ω –¥–ª–∏—Ç—Å—è ${config.MINING_SEASON_DURATION} –¥–Ω–µ–π\n` +
      `‚îú –í—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏\n` +
      `‚îú –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ${((config.MINING_SEASON_MULTIPLIER - 1) * 100).toFixed(0)}% –∫–∞–∂–¥—ã–π —Å–µ–∑–æ–Ω\n` +
      `‚îî –õ–∏–º–∏—Ç—ã —Ç–∞–∫–∂–µ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è —Å –∫–∞–∂–¥—ã–º —Å–µ–∑–æ–Ω–æ–º`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ');
  }
}

// ==================== –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–ê–ô–ù–ò–ù–ì–ê ====================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞ –º–∞–π–Ω–∏–Ω–≥–∞
function getCurrentMiningSeason() {
  const now = new Date();
  const seasonStart = new Date('2025-08-28T00:00:00Z'); // 28 –∞–≤–≥—É—Å—Ç–∞ 00:00 UTC
  
  const daysSinceStart = Math.floor((now - seasonStart) / (1000 * 60 * 60 * 24));
  const currentSeason = Math.floor(daysSinceStart / config.MINING_SEASON_DURATION) + 1;
  const dayInSeason = (daysSinceStart % config.MINING_SEASON_DURATION) + 1;
  
  const seasonStartDate = new Date(seasonStart);
  seasonStartDate.setDate(seasonStartDate.getDate() + (currentSeason - 1) * config.MINING_SEASON_DURATION);
  
  const seasonEndDate = new Date(seasonStartDate);
  seasonEndDate.setDate(seasonEndDate.getDate() + config.MINING_SEASON_DURATION);
  
  const daysUntilNextSeason = config.MINING_SEASON_DURATION - dayInSeason;
  
  const season = {
    season: currentSeason,
    dayInSeason: dayInSeason,
    daysUntilNextSeason: daysUntilNextSeason,
    startDate: seasonStartDate,
    endDate: seasonEndDate,
    multiplier: 1 + (currentSeason - 1) * 0.1, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ 10% –∫–∞–∂–¥—ã–π —Å–µ–∑–æ–Ω
    isActive: true
  };
  
  console.log('üìÖ –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω –º–∞–π–Ω–∏–Ω–≥–∞:', {
    now: now.toISOString(),
    seasonStart: seasonStart.toISOString(),
    daysSinceStart,
    currentSeason: season.season,
    dayInSeason: season.dayInSeason,
    multiplier: season.multiplier,
    isActive: season.isActive
  });
  
  return season;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –º–∞–π–Ω–∏–Ω–≥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initializeNewMiningSystem(user) {
  if (!user.miners) {
    user.miners = [];
  }
  
  if (!user.miningStats) {
    user.miningStats = {
      totalMinedMagnumCoins: 0,
      totalMinedStars: 0,
      seasonMinedMagnumCoins: 0,
      seasonMinedStars: 0,
      lastReward: null,
      activeClickCount: 0,
      passiveRewards: 0
    };
  }
  
  if (!user.miningSeasonStats) {
    user.miningSeasonStats = {};
  }
  
  return user;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function calculateTotalMiningSpeed(user) {
  let totalSpeedStars = 0;
  
  if (user.miners && user.miners.length > 0) {
    for (const miner of user.miners) {
      const minerConfig = config.MINERS[miner.type];
      if (minerConfig) {
        const levelMultiplier = 1 + (miner.level - 1) * 0.2; // +20% –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        const minerSpeed = minerConfig.baseSpeed * levelMultiplier * miner.count;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –º–∞–π–Ω–∏–Ω–≥–∞
        const miningCurrency = minerConfig.miningCurrency || 'stars';
        if (miningCurrency === 'stars') {
          totalSpeedStars += minerSpeed;
        } else {
          totalSpeedStars += minerSpeed;
        }
      }
    }
  }
  
  // –ë–æ–Ω—É—Å –æ—Ç —Ç–∏—Ç—É–ª–∞
  const titlesList = getTitlesList(user);
  const mainTitle = user.mainTitle || 'üå± –ù–æ–≤–∏—á–æ–∫';
  const currentTitle = titlesList.find(t => t.name === mainTitle);
  const titleBonus = currentTitle ? currentTitle.minerBonus : 1.0;
  
  return {
    magnuStarsoins: totalSpeedStars * titleBonus,
    stars: totalSpeedStars * titleBonus
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–∏–Ω–≥–∞
async function processMiningRewards() {
  try {
    console.log('‚õèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–∏–Ω–≥–∞...');
    
    const currentSeason = getCurrentMiningSeason();
    if (!currentSeason.isActive) {
      console.log('üìÖ –ú–∞–π–Ω–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤—ã—Ö–æ–¥–Ω—ã–µ');
      return;
    }
    
    const users = await db.collection('users').find({
      $or: [
        { 'miningStats.lastReward': { $exists: true } },
        { 'miners': { $exists: true, $ne: [] } }
      ]
    }).toArray();
    
    let processedCount = 0;
    
    for (const user of users) {
      try {
        const userWithMining = initializeNewMiningSystem(user);
        const totalSpeed = calculateTotalMiningSpeed(userWithMining);
        
        const totalSpeedSum = totalSpeed.stars;
        if (totalSpeedSum > 0) {
          const now = new Date();
          const lastReward = userWithMining.miningStats.lastReward || now;
          const timeDiff = (now - lastReward) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
          
          if (timeDiff >= config.MINING_REWARD_INTERVAL) {
            const rewardStars = totalSpeed.stars * config.MINING_REWARD_INTERVAL * currentSeason.multiplier;
            const rewardMagnumCoins = totalSpeed.magnuStarsoins * config.MINING_REWARD_INTERVAL * currentSeason.multiplier;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await db.collection('users').updateOne(
              { id: userWithMining.id },
              {
                $inc: {
                  magnuStarsoins: rewardMagnumCoins,
                  stars: rewardStars,
                  'miningStats.totalMinedMagnumCoins': rewardMagnumCoins,
                  'miningStats.totalMinedStars': rewardStars,
                  'miningStats.seasonMinedMagnumCoins': rewardMagnumCoins,
                  'miningStats.seasonMinedStars': rewardStars,
                  'miningStats.passiveRewards': rewardStars
                },
                $set: {
                  'miningStats.lastReward': now
                }
              }
            );
            
            // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userCache.delete(userWithMining.id);
            
            processedCount++;
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
      }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–∏–Ω–≥–∞:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞
async function buyMiner(user, minerType) {
  try {
    const minerConfig = config.MINERS[minerType];
    if (!minerConfig) {
      return { success: false, message: '‚ùå –ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    
    const userWithMining = initializeNewMiningSystem(user);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const userBalance = userWithMining[minerConfig.currency];
    if (userBalance < minerConfig.price) {
      return { 
        success: false, 
        message: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${minerConfig.currency === 'magnuStarsoins' ? 'Magnum Coins' : 'Stars'}` 
      };
    }
    
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–π–Ω–µ—Ä —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
    const existingMiner = userWithMining.miners.find(m => m.type === minerType);
    const currentCount = existingMiner ? existingMiner.count : 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 5 –º–∞–π–Ω–µ—Ä–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)
    if (currentCount >= 5) {
      return { 
        success: false, 
        message: `‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–∫—É–ø–∫–∏ (5 –º–∞–π–Ω–µ—Ä–æ–≤ ${minerConfig.name})` 
      };
    }
    
    if (existingMiner) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      existingMiner.count++;
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞–π–Ω–µ—Ä
      userWithMining.miners.push({
        type: minerType,
        level: 1,
        count: 1
      });
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    await db.collection('users').updateOne(
      { id: userWithMining.id },
      {
        $inc: {
          [minerConfig.currency]: -minerConfig.price
        },
        $set: {
          miners: userWithMining.miners
        }
      }
    );
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await db.collection('users').findOne({ id: userWithMining.id });
    if (updatedUser) {
      await forceSaveUser(updatedUser);
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(userWithMining.id);
    
    return { 
      success: true, 
      message: `‚úÖ –ö—É–ø–ª–µ–Ω ${minerConfig.name} –∑–∞ ${minerConfig.price} ${minerConfig.currency === 'magnuStarsoins' ? 'Stars' : 'Stars'}!` 
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞' };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞
async function upgradeMiner(user, minerType) {
  try {
    const userWithMining = initializeNewMiningSystem(user);
    const miner = userWithMining.miners.find(m => m.type === minerType);
    
    if (!miner) {
      return { success: false, message: '‚ùå –ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    
    const upgradeCost = miner.level * 50; // –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞ —Ä–∞—Å—Ç–µ—Ç —Å —É—Ä–æ–≤–Ω–µ–º
    
    if (userWithMining.magnuStarsoins < upgradeCost) {
      return { success: false, message: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞' };
    }
    
    // –ê–ø–≥—Ä–µ–π–¥–∏–º –º–∞–π–Ω–µ—Ä
    await db.collection('users').updateOne(
      { id: userWithMining.id },
      {
        $inc: {
          magnuStarsoins: -upgradeCost,
          'miners.$.level': 1
        }
      },
      { arrayFilters: [{ 'miners.type': minerType }] }
    );
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await db.collection('users').findOne({ id: userWithMining.id });
    if (updatedUser) {
      await forceSaveUser(updatedUser);
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(userWithMining.id);
    
    return { 
      success: true, 
      message: `‚úÖ –ú–∞–π–Ω–µ—Ä ${config.MINERS[minerType].name} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${miner.level + 1}!` 
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞' };
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞
async function showMinerShop(ctx, user, minerIndex = 0) {
  try {
    const userWithMining = initializeNewMiningSystem(user);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–∞–π–Ω–µ—Ä–æ–≤
    const minerTypes = Object.keys(config.MINERS);
    const currentMinerType = minerTypes[minerIndex];
    const minerConfig = config.MINERS[currentMinerType];
    
    if (!minerConfig) {
      await ctx.answerCbQuery('‚ùå –ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç—Ç–æ–º—É –º–∞–π–Ω–µ—Ä—É
    const userMiner = userWithMining.miners.find(m => m.type === currentMinerType);
    const userCount = userMiner ? userMiner.count : 0;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Ä–≤–µ—Ä—É
    const serverStats = await getServerMinerStats();
    const serverCount = serverStats[currentMinerType] || 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 5 –º–∞–π–Ω–µ—Ä–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)
    const canBuy = userCount < 5;
    const remainingSlots = 5 - userCount;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    const keyboard = [];
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navRow = [];
    if (minerIndex > 0) {
      navRow.push(Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π', `miner_shop_${minerIndex - 1}`));
    }
    if (minerIndex < minerTypes.length - 1) {
      navRow.push(Markup.button.callback('–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è', `miner_shop_${minerIndex + 1}`));
    }
    if (navRow.length > 0) {
      keyboard.push(navRow);
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
    if (canBuy) {
      const currencySymbol = minerConfig.currency === 'magnuStarsoins' ? 'Stars' : '‚≠ê';
      keyboard.push([
        Markup.button.callback(`üõí –ö—É–ø–∏—Ç—å ${minerConfig.name} (${minerConfig.price} ${currencySymbol})`, `buy_miner_${currentMinerType}`)
      ]);
    } else {
      keyboard.push([
        Markup.button.callback('‚ùå –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (5/5)', 'miner_shop_limit')
      ]);
    }
    
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const miningCurrency = minerConfig.miningCurrency || 'magnuStarsoins';
    const currencySymbol = miningCurrency === 'stars' ? '‚≠ê' : 'ü™ô';
    const priceSymbol = minerConfig.currency === 'magnuStarsoins' ? 'ü™ô' : '‚≠ê';
    
    let message = `üõí *–ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤*\n\n`;
    message += `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*\n`;
    message += `‚îú ü™ô Magnum Coins: ${formatNumber(userWithMining.magnuStarsoins)}\n`;
    message += `‚îî ‚≠ê Stars: ${formatNumber(userWithMining.stars)}\n\n`;
    
    message += `üì¶ *${minerConfig.name}*\n`;
    message += `‚îú –°–∫–æ—Ä–æ—Å—Ç—å: ${formatNumber(minerConfig.baseSpeed)} ${currencySymbol}/–º–∏–Ω\n`;
    message += `‚îú –†–µ–¥–∫–æ—Å—Ç—å: ${getRarityEmoji(minerConfig.rarity)} ${minerConfig.rarity}\n`;
    message += `‚îú –¶–µ–Ω–∞: ${minerConfig.price} ${priceSymbol}\n`;
    message += `‚îú –£ –≤–∞—Å: ${userCount}/5 —à—Ç.\n`;
    message += `‚îú –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: ${remainingSlots}\n`;
    message += `‚îú –í—Å–µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${serverCount} —à—Ç.\n`;
    message += `‚îî ${minerConfig.description}\n\n`;
    
    message += `üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å:* ${minerIndex + 1}/${minerTypes.length}\n\n`;
    
    if (canBuy) {
      message += `‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –º–∞–π–Ω–µ—Ä\n`;
    } else {
      message += `‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–∫—É–ø–∫–∏ (5 –º–∞–π–Ω–µ—Ä–æ–≤)\n`;
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard(keyboard).reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –º–∞–π–Ω–µ—Ä–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞');
  }
}

async function showMinerUpgrades(ctx, user) {
  try {
    const userWithMining = initializeNewMiningSystem(user);
    
    let keyboardButtons = [
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
    ];
    
    let message = `‚¨ÜÔ∏è *–ê–ø–≥—Ä–µ–π–¥—ã –º–∞–π–Ω–µ—Ä–æ–≤*\n\n`;
    message += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${formatNumber(userWithMining.magnuStarsoins)} ü™ô Magnum Coins\n\n`;
    
    if (userWithMining.miners.length === 0) {
      message += `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞\n\n`;
      message += `üõí –ö—É–ø–∏—Ç–µ –º–∞–π–Ω–µ—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!`;
    } else {
      message += `üì¶ *–í–∞—à–∏ –º–∞–π–Ω–µ—Ä—ã:*\n\n`;
      
      for (const miner of userWithMining.miners) {
        const minerConfig = config.MINERS[miner.type];
        if (minerConfig) {
          const currentSpeed = minerConfig.baseSpeed * (1 + (miner.level - 1) * 0.2);
          const nextLevelSpeed = minerConfig.baseSpeed * (1 + miner.level * 0.2);
          const upgradeCost = miner.level * 50;
          const miningCurrency = minerConfig.miningCurrency || 'magnuStarsoins';
          const currencySymbol = miningCurrency === 'stars' ? '‚≠ê' : 'ü™ô';
          
          message += `üî∏ *${minerConfig.name}*\n`;
          message += `‚îú –£—Ä–æ–≤–µ–Ω—å: ${miner.level}\n`;
          message += `‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${miner.count} —à—Ç.\n`;
          message += `‚îú –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${formatNumber(currentSpeed)} ${currencySymbol}/–º–∏–Ω\n`;
          message += `‚îú –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Å–ª–µ –∞–ø–≥—Ä–µ–π–¥–∞: ${formatNumber(nextLevelSpeed)} ${currencySymbol}/–º–∏–Ω\n`;
          message += `‚îú –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞: ${upgradeCost} Stars\n`;
          
          if (userWithMining.magnuStarsoins >= upgradeCost) {
            message += `‚îî [–£–ª—É—á—à–∏—Ç—å](buy_miner_${miner.type})\n\n`;
            keyboardButtons.unshift([
              Markup.button.callback(`‚¨ÜÔ∏è ${minerConfig.name} (${upgradeCost} Stars)`, `upgrade_miner_${miner.type}`)
            ]);
          } else {
            message += `‚îî ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n`;
          }
        }
      }
    }
    
    message += `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ø–≥—Ä–µ–π–¥–∞—Ö:*\n`;
    message += `‚îú –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å +20% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏\n`;
    message += `‚îú –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç —Å —É—Ä–æ–≤–Ω–µ–º\n`;
    message += `‚îî –ê–ø–≥—Ä–µ–π–¥ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –º–∞–π–Ω–µ—Ä–∞–º —ç—Ç–æ–≥–æ —Ç–∏–ø–∞`;
    
    const keyboard = Markup.inlineKeyboard(keyboardButtons);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –∞–ø–≥—Ä–µ–π–¥–æ–≤ –º–∞–π–Ω–µ—Ä–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ø–≥—Ä–µ–π–¥–æ–≤');
  }
}

async function showMinerLeaderboard(ctx, user) {
  try {
    const currentSeason = getCurrentMiningSeason();
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥', 'miner_leaderboard_total'),
        Markup.button.callback('üìÖ –°–µ–∑–æ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', 'miner_leaderboard_season')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
    ]);
    
    let message = `üèÜ *–†–µ–π—Ç–∏–Ω–≥ –º–∞–π–Ω–∏–Ω–≥–∞*\n\n`;
    message += `üìÖ –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: ${currentSeason.season}\n`;
    message += `üìä –î–µ–Ω—å —Å–µ–∑–æ–Ω–∞: ${currentSeason.dayInSeason}/${config.MINING_SEASON_DURATION}\n\n`;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ–±—â–µ–º—É –º–∞–π–Ω–∏–Ω–≥—É
    const topTotal = await db.collection('users')
      .find({ 'miningStats.totalMinedStars': { $exists: true } })
      .sort({ 'miningStats.totalMinedStars': -1 })
      .limit(10)
      .toArray();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å–µ–∑–æ–Ω–Ω–æ–º—É –º–∞–π–Ω–∏–Ω–≥—É
    const topSeason = await db.collection('users')
      .find({ 'miningStats.seasonMinedStars': { $exists: true } })
      .sort({ 'miningStats.seasonMinedStars': -1 })
      .limit(10)
      .toArray();
    
    message += `ü•á *–¢–æ–ø-5 –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:*\n`;
    for (let i = 0; i < Math.min(5, topTotal.length); i++) {
      const player = topTotal[i];
      const position = i + 1;
      const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : 'üèÖ';
      message += `${emoji} ${player.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${formatNumber(player.miningStats?.totalMinedStars || 0)} Stars\n`;
    }
    
    message += `\nüìÖ *–¢–æ–ø-5 —Å–µ–∑–æ–Ω–∞ ${currentSeason.season}:*\n`;
    for (let i = 0; i < Math.min(5, topSeason.length); i++) {
      const player = topSeason[i];
      const position = i + 1;
      const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : 'üèÖ';
      message += `${emoji} ${player.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${formatNumber(player.miningStats?.seasonMinedStars || 0)} Stars\n`;
    }
    
    message += `\nüí° *–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–µ–∑–æ–Ω:*\n`;
    message += `‚îú ü•á 1 –º–µ—Å—Ç–æ: ${formatNumber(config.SEASON_REWARDS.top1.magnuStarsoins)} Stars + ${config.SEASON_REWARDS.top1.stars} ‚≠ê\n`;
    message += `‚îú ü•à 2-3 –º–µ—Å—Ç–æ: ${formatNumber(config.SEASON_REWARDS.top3.magnuStarsoins)} Stars + ${config.SEASON_REWARDS.top3.stars} ‚≠ê\n`;
    message += `‚îî ü•â 4-10 –º–µ—Å—Ç–æ: ${formatNumber(config.SEASON_REWARDS.top10.magnuStarsoins)} Stars + ${config.SEASON_REWARDS.top10.stars} ‚≠ê`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞ –º–∞–π–Ω–∏–Ω–≥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
async function showMinerLeaderboardTotal(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É', 'miner_leaderboard')]
    ]);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ–±—â–µ–º—É –º–∞–π–Ω–∏–Ω–≥—É
    const topTotal = await db.collection('users')
      .find({ 'miningStats.totalMinedStars': { $exists: true } })
      .sort({ 'miningStats.totalMinedStars': -1 })
      .limit(20)
      .toArray();
    
    let message = `üèÜ *–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –º–∞–π–Ω–∏–Ω–≥–∞*\n\n`;
    
    for (let i = 0; i < topTotal.length; i++) {
      const player = topTotal[i];
      const position = i + 1;
      const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : 'üèÖ';
      const totalStars = player.miningStats?.totalMinedStars || 0;
      message += `${emoji} ${position}. ${player.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
      message += `   üíé ${formatNumber(totalStars)} Stars | ‚≠ê ${formatNumber(totalStars)} Stars\n`;
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –º–∞–π–Ω–∏–Ω–≥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
async function showMinerLeaderboardSeason(ctx, user) {
  try {
    const currentSeason = getCurrentMiningSeason();
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É', 'miner_leaderboard')]
    ]);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å–µ–∑–æ–Ω–Ω–æ–º—É –º–∞–π–Ω–∏–Ω–≥—É
    const topSeason = await db.collection('users')
      .find({ 'miningStats.seasonMinedStars': { $exists: true } })
      .sort({ 'miningStats.seasonMinedStars': -1 })
      .limit(20)
      .toArray();
    
    let message = `üìÖ *–°–µ–∑–æ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ - –°–µ–∑–æ–Ω ${currentSeason.season}*\n\n`;
    message += `üìä –î–µ–Ω—å —Å–µ–∑–æ–Ω–∞: ${currentSeason.dayInSeason}/${config.MINING_SEASON_DURATION}\n\n`;
    
    for (let i = 0; i < topSeason.length; i++) {
      const player = topSeason[i];
      const position = i + 1;
      const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : 'üèÖ';
      const seasonStars = player.miningStats?.seasonMinedStars || 0;
      message += `${emoji} ${position}. ${player.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
      message += `   üíé ${formatNumber(seasonStars)} Stars | ‚≠ê ${formatNumber(seasonStars)} Stars\n`;
    }
    
    message += `\nüí° *–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–µ–∑–æ–Ω:*\n`;
    message += `‚îú ü•á 1 –º–µ—Å—Ç–æ: ${formatNumber(config.SEASON_REWARDS.top1.magnuStarsoins)} Stars + ${config.SEASON_REWARDS.top1.stars} ‚≠ê\n`;
    message += `‚îú ü•à 2-3 –º–µ—Å—Ç–æ: ${formatNumber(config.SEASON_REWARDS.top3.magnuStarsoins)} Stars + ${config.SEASON_REWARDS.top3.stars} ‚≠ê\n`;
    message += `‚îî ü•â 4-10 –º–µ—Å—Ç–æ: ${formatNumber(config.SEASON_REWARDS.top10.magnuStarsoins)} Stars + ${config.SEASON_REWARDS.top10.stars} ‚≠ê`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –º–∞–π–Ω–∏–Ω–≥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏
function getRarityEmoji(rarity) {
  switch (rarity) {
    case 'common': return '‚ö™';
    case 'rare': return 'üîµ';
    case 'epic': return 'üü£';
    case 'legendary': return 'üü°';
    default: return '‚ö™';
  }
}

// ==================== –í–´–í–û–î –°–†–ï–î–°–¢–í ====================
async function showWithdrawalMenu(ctx, user) {
  const withdrawal = user.withdrawal || { withdrawalCount: 0, totalWithdrawn: 0 };
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('üí∞ –í—ã–≤–µ—Å—Ç–∏ Stars', 'withdrawal_Stars'),
      Markup.button.callback('‚≠ê –í—ã–≤–µ—Å—Ç–∏ Stars', 'withdrawal_stars')
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤', 'withdrawal_stats'),
      Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤', 'withdrawal_history')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üí∞ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*\n\n` +
    `üíé *–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞:*\n` +
    `‚îú ü™ô Magnum Coins: ${formatNumber(user.magnuStarsoins)}\n` +
    `‚îî ‚≠ê Stars: ${formatNumber(user.stars)}\n\n` +
    `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤:*\n` +
    `‚îú –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${withdrawal.withdrawalCount}\n` +
    `‚îú –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ MC: ${formatNumber(withdrawal.totalWithdrawn || 0)}\n` +
    `‚îî –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ Stars: ${formatNumber(withdrawal.totalWithdrawnStars || 0)}\n\n` +
    `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
    `‚îú üöß –í—ã–≤–æ–¥ Stars: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n` +
          `‚îú –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ Stars: 50 Stars\n` +
    `‚îú –ö–æ–º–∏—Å—Å–∏—è: 5%\n` +
    `‚îî –û–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ 24 —á–∞—Å–æ–≤\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}




// ==================== –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° ====================
async function updateMinerMenu(ctx, user) {
  try {
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –º–∞–π–Ω–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (!user.miner) {
      log(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      user.miner = {
        active: false,
        level: 1,
        efficiency: 1,
        lastReward: null,
        totalMined: 0
      };
    }
  
  const miner = user.miner;
  const isActive = miner.active || false;
  const efficiency = miner.efficiency || 1;
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ
  const currentSeason = getCurrentMiningSeason();
  const seasonInfo = currentSeason ? 
    `\nüìÖ *–°–µ–∑–æ–Ω ${currentSeason.season}* (–î–µ–Ω—å ${currentSeason.dayInSeason}/${config.MINING_SEASON_DURATION})\n` +
    `üìà *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–µ–∑–æ–Ω–∞:* ${currentSeason.multiplier.toFixed(2)}x\n` +
    `‚è∞ *–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞:* ${currentSeason.daysUntilNextSeason} –¥–Ω–µ–π` :
    `\nüìÖ *–í—ã—Ö–æ–¥–Ω—ã–µ* - –º–∞–π–Ω–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä–∞–¥—É —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–∞
  const baseReward = await calculateMinerReward(efficiency, user);
  const seasonMultiplier = currentSeason ? currentSeason.multiplier : 0;
  const currentReward = baseReward * seasonMultiplier;
  const rewardPerMinute = currentReward;
  const rewardPerHour = currentReward * 60;
  
  let statusText = isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
  let lastRewardText = '';
  
  if (miner.lastReward) {
    const timeSince = Math.floor((Date.now() - miner.lastReward.getTime()) / 1000);
    if (timeSince < 60) {
      const remaining = 60 - timeSince;
      lastRewardText = `\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${formatTime(remaining)}`;
    }
  }
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        isActive ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä',
        isActive ? 'stop_miner' : 'start_miner'
      )
    ],
    [
      Markup.button.callback('‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä', 'upgrade_miner')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏—Ç—É–ª–µ
  const titlesList = getTitlesList(user);
  const mainTitle = user.mainTitle || 'üå± –ù–æ–≤–∏—á–æ–∫';
  const currentTitle = titlesList.find(t => t.name === mainTitle);
  const titleBonus = currentTitle ? currentTitle.minerBonus : 1.0;
  const titleBonusText = titleBonus > 1.0 ? ` (+${((titleBonus - 1) * 100).toFixed(0)}%)` : '';

  const message = 
    `‚õèÔ∏è *–ú–∞–π–Ω–µ—Ä*\n\n` +
    `üìä *–°—Ç–∞—Ç—É—Å:* ${statusText}\n` +
    `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${miner.level || 1}\n` +
    `‚ö° *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${efficiency}x\n` +
    `üëë *–¢–∏—Ç—É–ª:* ${mainTitle}${titleBonusText}\n` +
    `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/–º–∏–Ω—É—Ç—É:*\n` +
    `‚îú ü™ô Magnum Coins: ${formatNumber(rewardPerMinute)} MC/–º–∏–Ω\n` +
    `‚îî ‚≠ê Stars: ${formatNumber(rewardPerMinute)} Stars/–º–∏–Ω\n` +
    `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/—á–∞—Å:*\n` +
    `‚îú ü™ô Magnum Coins: ${formatNumber(rewardPerHour)} MC/—á–∞—Å\n` +
    `‚îî ‚≠ê Stars: ${formatNumber(rewardPerHour)} Stars/—á–∞—Å\n` +
    `üíé *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:*\n` +
    `‚îú ü™ô Magnum Coins: ${formatNumber(miner.totalMined || 0)} MC\n` +
    `‚îî ‚≠ê Stars: ${formatNumber(miner.totalMined || 0)} Stars${lastRewardText}\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
    log(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    log(`‚úÖ –ú–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    log(`üîÑ Fallback: –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await showMinerMenu(ctx, user);
  }
}

  
  

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–∞
function startBonusCountdown(ctx, user, remainingSeconds) {
  const countdownKey = `bonus_countdown_${user.id}`;
  
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (global[countdownKey]) {
    clearInterval(global[countdownKey]);
  }
  
  let secondsLeft = remainingSeconds;
  
  const updateCountdown = async () => {
    try {
      if (secondsLeft <= 0) {
        // –ö—É–ª–¥–∞—É–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        clearInterval(global[countdownKey]);
        delete global[countdownKey];
        
        const updatedUser = await getUser(ctx.from.id);
        if (updatedUser) {
          await updateBonusMenu(ctx, updatedUser);
          log(`üîÑ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
        }
        return;
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
      const updatedUser = await getUser(ctx.from.id);
      if (updatedUser) {
        const bonus = updatedUser.dailyBonus;
        const now = new Date();
        const lastBonus = bonus.lastBonus;
        
        let canClaim = false;
        let timeUntilNext = 0;
        
        if (!lastBonus) {
          canClaim = true;
        } else {
          const timeSince = now.getTime() - lastBonus.getTime();
          const dayInMs = 24 * 60 * 60 * 1000;
          
          if (timeSince >= dayInMs) {
            canClaim = true;
          } else {
            timeUntilNext = dayInMs - timeSince;
          }
        }
        
        const baseReward = config.DAILY_BONUS_BASE;
        const streakBonus = Math.min(bonus.streak * 0.5, 5);
        const totalReward = baseReward + streakBonus;
        
        const keyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback(
              canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(secondsLeft / 1000))}`,
              canClaim ? 'claim_bonus' : 'bonus_cooldown'
            )
          ],
          [
            Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'bonus_stats'),
            Markup.button.callback('üî• –°–µ—Ä–∏—è', 'bonus_streak')
          ],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
        ]);
        
        const message = 
          `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
          `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canClaim ? 'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
          `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} ü™ô Magnum Coins\n` +
          `üî• *–ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏:* +${formatNumber(streakBonus)} ü™ô Magnum Coins\n` +
          `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} ü™ô Magnum Coins\n` +
          `üî• *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:* ${bonus.streak} –¥–Ω–µ–π\n` +
          `üìä *–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ:* ${bonus.totalClaimed || 0} –±–æ–Ω—É—Å–æ–≤\n` +
          `üíé *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${formatNumber(bonus.totalEarned || 0)} ü™ô Magnum Coins\n\n` +
          `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        });
      }
      
      secondsLeft--;
    } catch (error) {
      logError(error, '–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –±–æ–Ω—É—Å–∞');
      clearInterval(global[countdownKey]);
      delete global[countdownKey];
    }
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
  global[countdownKey] = setInterval(updateCountdown, 5000);
  
  // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  updateCountdown();
  
  log(`‚è∞ –ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Å—Ç–∞–ª–æ—Å—å: ${remainingSeconds}—Å`);
}

// ==================== –ê–î–ú–ò–ù –¢–ò–¢–£–õ–´ ====================
async function showAdminRanksMenu(ctx, user) {
  try {
    log(`‚≠ê –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚≠ê –í—ã–¥–∞—Ç—å —Ä–∞–Ω–≥', 'admin_give_rank')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–Ω–≥–æ–≤', 'admin_ranks_stats')
      ],
      [
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')
      ]
    ]);
    
    const message = 
      `‚≠ê *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞–º–∏*\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–Ω–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n` +
      `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n` +
      `‚îú ‚≠ê –í—ã–¥–∞—Ç—å —Ä–∞–Ω–≥ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
      `‚îî üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–Ω–≥–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–æ–≤\n\n` +
      `üìã *–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤:*\n` +
      `‚îú 1-4: üå± –ù–æ–≤–∏—á–æ–∫\n` +
      `‚îú 5-9: ‚öîÔ∏è –ë–æ–µ—Ü\n` +
      `‚îú 10-19: üèπ –õ—É—á–Ω–∏–∫\n` +
      `‚îú 20-34: üõ°Ô∏è –†—ã—Ü–∞—Ä—å\n` +
      `‚îú 35-49: ‚öîÔ∏è –í–æ–∏–Ω\n` +
      `‚îú 50-74: ü¶∏ –ì–µ—Ä–æ–π\n` +
      `‚îú 75-99: üèÜ –õ–µ–≥–µ–Ω–¥–∞\n` +
      `‚îî 100+: üëë –ò–º–ø–µ—Ä–∞—Ç–æ—Ä\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞–º–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞–º–∏');
  }
}
async function showAdminTitles(ctx, user) {
  try {
    log(`üëë –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –í—ã–¥–∞—Ç—å —Ç–∏—Ç—É–ª', 'admin_give_title'),
        Markup.button.callback('‚ûñ –ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª', 'admin_remove_title')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏—Ç—É–ª–æ–≤', 'admin_titles_stats'),
        Markup.button.callback('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∏—Ç—É–ª–æ–≤', 'admin_sync_titles')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üëë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏*\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏—Ç—É–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú ‚ûï –í—ã–¥–∞—Ç—å —Ç–∏—Ç—É–ª - –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n` +
      `‚îú ‚ûñ –ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª - —É–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
      `‚îú üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏—Ç—É–ª–æ–≤ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
      `‚îî üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∏—Ç—É–ª–æ–≤ - –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∏—Ç—É–ª—ã\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    if (error.message && error.message.includes('message is not modified')) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
      log(`‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    } else {
      logError(error, '–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏');
    }
  }
}

// ==================== –ê–î–ú–ò–ù –ü–û–°–¢–´ ====================
async function showAdminPosts(ctx, user) {
  try {
    log(`üìù –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π', 'admin_create_post_with_button'),
        Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏', 'admin_create_post_no_button')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤', 'admin_posts_stats')
      ],
      [
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')
      ]
    ]);
    
    const message = 
      `üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏*\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª @magnumtap\n\n` +
      `üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π\n` +
      `‚îú üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏\n` +
      `‚îî üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏');
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–∏—Ç—É–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function handleAdminGiveTitle(ctx, user, text) {
  try {
    const parts = text.trim().split(/\s+/);
    if (parts.length < 2) {
      await ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–∏—Ç—É–ª–∞\n\n–ü—Ä–∏–º–µ—Ä: 123456789 üå± –ù–æ–≤–∏—á–æ–∫');
      return;
    }
    
    const userId = parseInt(parts[0]);
    const titleName = parts.slice(1).join(' ');
    
    if (isNaN(userId)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const targetUser = await getUser(userId);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–∏—Ç—É–ª
    const userTitles = targetUser.titles || [];
    if (userTitles.includes(titleName)) {
      await ctx.reply(`‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.firstName || targetUser.username || userId} —É–∂–µ –µ—Å—Ç—å —Ç–∏—Ç—É–ª ${titleName}`);
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏—Ç—É–ª
    await db.collection('users').updateOne(
      { id: userId },
      { 
        $addToSet: { titles: titleName },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(userId);
    
    await ctx.reply(`‚úÖ –¢–∏—Ç—É–ª ${titleName} –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUser.firstName || targetUser.username || userId}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –∞–¥–º–∏–Ω–∞
    userCache.delete(user.id);
    
  } catch (error) {
    logError(error, '–í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ç–∏—Ç—É–ª–∞');
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–±–æ—Ä–∞ —Ç–∏—Ç—É–ª–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleAdminRemoveTitle(ctx, user, text) {
  try {
    const parts = text.trim().split(/\s+/);
    if (parts.length < 2) {
      await ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–∏—Ç—É–ª–∞\n\n–ü—Ä–∏–º–µ—Ä: 123456789 üå± –ù–æ–≤–∏—á–æ–∫');
      return;
    }
    
    const userId = parseInt(parts[0]);
    const titleName = parts.slice(1).join(' ');
    
    if (isNaN(userId)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const targetUser = await getUser(userId);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ç–∏—Ç—É–ª
    const userTitles = targetUser.titles || [];
    if (!userTitles.includes(titleName)) {
      await ctx.reply(`‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.firstName || targetUser.username || userId} –Ω–µ—Ç —Ç–∏—Ç—É–ª–∞ ${titleName}`);
      return;
    }
    
    // –£–±–∏—Ä–∞–µ–º —Ç–∏—Ç—É–ª
    await db.collection('users').updateOne(
      { id: userId },
      { 
        $pull: { titles: titleName },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –≥–ª–∞–≤–Ω—ã–π —Ç–∏—Ç—É–ª, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    if (targetUser.mainTitle === titleName) {
      await db.collection('users').updateOne(
        { id: userId },
        { 
          $set: { mainTitle: 'üå± –ù–æ–≤–∏—á–æ–∫', updatedAt: new Date() }
        }
      );
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(userId);
    
    await ctx.reply(`‚úÖ –¢–∏—Ç—É–ª ${titleName} –∑–∞–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.firstName || targetUser.username || userId}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –∞–¥–º–∏–Ω–∞
    userCache.delete(user.id);
    
  } catch (error) {
    logError(error, '–ó–∞–±–æ—Ä —Ç–∏—Ç—É–ª–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–±–æ—Ä–∞ —Ç–∏—Ç—É–ª–∞');
  }
}

// ==================== –ê–î–ú–ò–ù –ü–†–û–ú–û–ö–û–î–´ ====================
async function showAdminPromocodes(ctx, user) {
  try {
    log(`üé´ –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    const promocodes = await db.collection('promocodes').find({}).toArray();
    const totalPromocodes = promocodes.length;
    const activePromocodes = promocodes.filter(p => p.activations > 0).length;
    const totalActivations = promocodes.reduce((sum, p) => sum + (p.totalActivations || 0), 0);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á', 'admin_create_promocode')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π', 'admin_promocodes_stats')
      ],
      [
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')
      ]
    ]);
    
    const message = 
      `üîë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏*\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª—é—á–∞–º–∏\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: \`${totalPromocodes}\`\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: \`${activePromocodes}\`\n` +
      `‚îî –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: \`${totalActivations}\`\n\n` +
      `üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á\n` +
      `‚îî üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏');
  }
}
// ==================== –ü–†–û–ú–û–ö–û–î–´ ====================
async function showPromocodeMenu(ctx, user) {
  try {
    log(`üé´ –ü–æ–∫–∞–∑ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    const dailyPromocodes = user.dailyPromocodes || [];
    const todayPromocodes = dailyPromocodes.filter(p => {
      const promoDate = new Date(p.date);
      return promoDate >= today && promoDate < tomorrow;
    });
    
    const usedToday = todayPromocodes.length;
    const remainingToday = Math.max(0, 10 - usedToday);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á', 'enter_promocode')
      ],
      [
        Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π', 'promocode_history')
      ],
      [
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')
      ]
    ]);
    
    const message = 
      `üîë *–ö–ª—é—á–∏*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ü–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n` +
      `–ö–∞–∂–¥—ã–π –∫–ª—é—á –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—É–Ω–¥—É–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è:\n` +
      `‚Ä¢ üü¢ –û–±—ã—á–Ω—ã–µ ‚Äî ü™ô Magnum Coins, ‚≠ê Stars\n` +
      `‚Ä¢ üîµ –†–µ–¥–∫–∏–µ ‚Äî –ú–∞–π–Ω–µ—Ä—ã, –±—É—Å—Ç–µ—Ä—ã –∫ –º–∞–π–Ω–∏–Ω–≥—É\n` +
      `‚Ä¢ üü£ –≠–ø–∏—á–µ—Å–∫–∏–µ ‚Äî –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏—Ç—É–ª—ã, –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏\n` +
      `‚Ä¢ üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ ‚Äî –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–∞–±–æ—Ä—ã (Coins + Stars + –ú–∞–π–Ω–µ—Ä—ã + –¢–∏—Ç—É–ª)\n\n` +
      `‚ö°Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:*\n` +
      `–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–æ 10 –∫–ª—é—á–µ–π –≤ –¥–µ–Ω—å.\n` +
      `üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${usedToday}/10\n` +
      `üéØ –û—Å—Ç–∞–ª–æ—Å—å: ${remainingToday}\n\n` +
      `üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á\n` +
      `‚îî üìä –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
  }
}

async function showBonusMenu(ctx, user) {
  const bonus = user.dailyBonus;
  const now = new Date();
  const lastBonus = bonus.lastBonus;
  
  let canClaim = false;
  let timeUntilNext = 0;
  
  if (!lastBonus) {
    canClaim = true;
  } else {
    const timeSince = now.getTime() - lastBonus.getTime();
    const dayInMs = 24 * 60 * 60 * 1000;
    
    if (timeSince >= dayInMs) {
      canClaim = true;
    } else {
      timeUntilNext = dayInMs - timeSince;
    }
  }
  
  const baseReward = config.DAILY_BONUS_BASE;
  const streakBonus = Math.min(bonus.streak * 0.5, 5);
  const totalReward = baseReward + streakBonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(timeUntilNext / 1000))}`,
        canClaim ? 'claim_bonus' : 'bonus_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'bonus_stats'),
      Markup.button.callback('üî• –°–µ—Ä–∏—è', 'bonus_streak')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canClaim ? 'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} ü™ô Magnum Coins\n` +
    `üî• *–ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏:* +${formatNumber(streakBonus)} ü™ô Magnum Coins\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} ü™ô Magnum Coins\n` +
    `üìä *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:* ${bonus.streak} –¥–Ω–µ–π\n` +
    `üèÜ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è:* ${bonus.maxStreak} –¥–Ω–µ–π\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}
async function updateBonusMenu(ctx, user) {
  try {
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const now = new Date();
    const lastBonus = bonus.lastBonus;
  
  let canClaim = false;
  let timeUntilNext = 0;
  
  if (!lastBonus) {
    canClaim = true;
  } else {
    const timeSince = now.getTime() - lastBonus.getTime();
    const dayInMs = 24 * 60 * 60 * 1000;
    
    if (timeSince >= dayInMs) {
      canClaim = true;
    } else {
      timeUntilNext = dayInMs - timeSince;
    }
  }
  
  const baseReward = config.DAILY_BONUS_BASE;
  const streakBonus = Math.min(bonus.streak * 0.5, 5);
  const totalReward = baseReward + streakBonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(timeUntilNext / 1000))}`,
        canClaim ? 'claim_bonus' : 'bonus_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'bonus_stats'),
      Markup.button.callback('üî• –°–µ—Ä–∏—è', 'bonus_streak')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canClaim ? 'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} ü™ô Magnum Coins\n` +
    `üî• *–ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏:* +${formatNumber(streakBonus)} ü™ô Magnum Coins\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} ü™ô Magnum Coins\n` +
    `üìä *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:* ${bonus.streak} –¥–Ω–µ–π\n` +
    `üèÜ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è:* ${bonus.maxStreak} –¥–Ω–µ–π\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
    log(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    log(`‚úÖ –ú–µ–Ω—é –±–æ–Ω—É—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    log(`üîÑ Fallback: –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await showBonusMenu(ctx, user);
  }
}
async function claimBonus(ctx, user) {
  try {
    log(`üéÅ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const now = new Date();
    const lastBonus = bonus.lastBonus;
    
    if (lastBonus) {
      const timeSince = now.getTime() - lastBonus.getTime();
      const dayInMs = 24 * 60 * 60 * 1000;
      
      log(`‚è∞ –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞: ${Math.floor(timeSince / 1000)}—Å`);
      
          if (timeSince < dayInMs) {
      const remaining = dayInMs - timeSince;
      log(`‚è≥ –ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Å—Ç–∞–ª–æ—Å—å: ${Math.floor(remaining / 1000)}—Å`);
      await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(Math.floor(remaining / 1000))} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞!`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
      startBonusCountdown(ctx, user, Math.floor(remaining / 1000));
      
      return;
    }
    }
    
    const baseReward = config.DAILY_BONUS_BASE;
    const streakBonus = Math.min(bonus.streak * 0.5, 5);
    const totalReward = baseReward + streakBonus;
    
    log(`üí∞ –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞: –±–∞–∑–æ–≤–∞—è ${baseReward}, —Å–µ—Ä–∏—è ${bonus.streak}, –±–æ–Ω—É—Å —Å–µ—Ä–∏–∏ ${streakBonus}, –∏—Ç–æ–≥–æ ${totalReward} Magnum Coins`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ª–∏ –¥–µ–Ω—å
    let newStreak = bonus.streak + 1;
    if (lastBonus) {
      const timeSince = now.getTime() - lastBonus.getTime();
      const twoDaysInMs = 2 * 24 * 60 * 60 * 1000;
      if (timeSince > twoDaysInMs) {
        newStreak = 1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é
        log(`üîÑ –°–±—Ä–æ—Å —Å–µ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} (–ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å)`);
      }
    }
    
    log(`üìà –ù–æ–≤–∞—è —Å–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤: ${newStreak}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          stars: totalReward,
          totalEarnedStars: totalReward,
          experience: Math.floor(totalReward * 5),
          'statistics.totalActions': 1
        },
        $set: { 
          'dailyBonus.lastBonus': now,
          'dailyBonus.streak': newStreak,
          'dailyBonus.maxStreak': Math.max(newStreak, bonus.maxStreak),
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await getUser(user.id);
    if (updatedUser) {
      const levelResult = await checkAndUpdateLevel(updatedUser);
      if (levelResult.levelUp) {
        log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ ${levelResult.newLevel}!`);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è "–ë–æ–Ω—É—Å –¥–Ω—è"
    await updateDailyTaskProgress(user, 'daily_bonus', 1);
    
    log(`‚úÖ –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalReward} Stars, —Å–µ—Ä–∏—è: ${newStreak} –¥–Ω–µ–π`);
    await ctx.answerCbQuery(
      `üéÅ –ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω! –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber(totalReward)} Stars, —Å–µ—Ä–∏—è: ${newStreak} –¥–Ω–µ–π`
    );
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±–æ–Ω—É—Å–∞
    await updateBonusMenu(ctx, { ...user, dailyBonus: { ...bonus, lastBonus: now, streak: newStreak } });
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞');
  }
}
// ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–ù–£–°–ê ====================
async function showBonusStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const totalEarned = bonus.totalEarned || 0;
    const claimedCount = bonus.claimedCount || 0;
    const maxStreak = bonus.maxStreak || 0;
    const currentStreak = bonus.streak || 0;
    
    const averageReward = claimedCount > 0 ? totalEarned / claimedCount : 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'bonus')]
    ]);
    
    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤*\n\n` +
      `üí∞ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: \`${claimedCount}\`\n` +
      `‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarned)}\` ü™ô Magnum Coins\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${formatNumber(averageReward)}\` ü™ô Magnum Coins\n` +
      `‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: \`${maxStreak}\` –¥–Ω–µ–π\n\n` +
      `üî• *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:*\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Ä–∏—è: \`${currentStreak}\` –¥–Ω–µ–π\n` +
      `‚îî –†–µ–∫–æ—Ä–¥–Ω–∞—è —Å–µ—Ä–∏—è: \`${maxStreak}\` –¥–Ω–µ–π\n\n` +
      `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å:*\n` +
      `‚îú –î–æ 7 –¥–Ω–µ–π: \`${Math.min(currentStreak, 7)}/7\`\n` +
      `‚îú –î–æ 30 –¥–Ω–µ–π: \`${Math.min(currentStreak, 30)}/30\`\n` +
      `‚îî –î–æ 100 –¥–Ω–µ–π: \`${Math.min(currentStreak, 100)}/100\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

async function showBonusStreak(ctx, user) {
  try {
    log(`üî• –ü–æ–∫–∞–∑ —Å–µ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const currentStreak = bonus.streak || 0;
    const maxStreak = bonus.maxStreak || 0;
    const lastBonus = bonus.lastBonus;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
    let timeUntilNext = 0;
    if (lastBonus) {
      const now = new Date();
      const timeSince = now.getTime() - lastBonus.getTime();
      const dayInMs = 24 * 60 * 60 * 1000;
      timeUntilNext = Math.max(0, dayInMs - timeSince);
    }
    
    const canClaim = timeUntilNext === 0;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(timeUntilNext / 1000))}`,
          canClaim ? 'claim_bonus' : 'bonus_cooldown'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'bonus')]
    ]);
    
    const message = 
      `üî• *–°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤*\n\n` +
      `üìä *–í–∞—à–∞ —Å–µ—Ä–∏—è:*\n` +
      `‚îú –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: \`${currentStreak}\` –¥–Ω–µ–π\n` +
      `‚îú –†–µ–∫–æ—Ä–¥–Ω–∞—è —Å–µ—Ä–∏—è: \`${maxStreak}\` –¥–Ω–µ–π\n` +
      `‚îî –°—Ç–∞—Ç—É—Å: ${canClaim ? 'üü¢ –ú–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞:*\n` +
      `‚îî ${canClaim ? '–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω!' : formatTime(Math.floor(timeUntilNext / 1000))}\n\n` +
      `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–µ—Ä–∏–∏:*\n` +
      `‚îú 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${currentStreak >= 7 ? '‚úÖ' : '‚ùå'}\n` +
      `‚îú 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${currentStreak >= 30 ? '‚úÖ' : '‚ùå'}\n` +
      `‚îî 100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${currentStreak >= 100 ? '‚úÖ' : '‚ùå'}\n\n` +
      `üí° *–°–æ–≤–µ—Ç:* –ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ —Å–µ—Ä–∏—è, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å!\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å–µ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–µ—Ä–∏–∏');
  }
}
// ==================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====================
async function showAdminPanel(ctx, user) {
  try {
    log(`üë®‚Äçüíº –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'admin_stats'),
        Markup.button.callback('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'admin_users')
      ],
      [
        Markup.button.callback('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏', 'admin_balance'),
        Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', 'admin_settings')
      ],
      [
        Markup.button.callback('üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏', 'admin_posts'),
        Markup.button.callback('üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏', 'admin_promocodes')
      ],
      [
        Markup.button.callback('üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles'),
        Markup.button.callback('‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞–º–∏', 'admin_ranks')
      ],
      [
        Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')
      ],
      [
        Markup.button.callback('üó≥Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º', 'admin_voting'),
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞', 'admin_cache')
      ],
      [
        Markup.button.callback('üè¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º', 'admin_reserve'),
        Markup.button.callback('üîç –û—Ç–ª–∞–¥–∫–∞ —Ä–∞–Ω–≥–æ–≤', 'admin_debug_ranks')
      ],
      [
        Markup.button.callback('üí∏ –ö–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–∞', 'admin_exchange_commission'),
        Markup.button.callback('üí∞ –ö–æ–º–∏—Å—Å–∏—è –≤—ã–≤–æ–¥–∞', 'admin_withdrawal_commission')
      ],
      [
        Markup.button.callback('üóëÔ∏è –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'admin_reset_db')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üë®‚Äçüíº *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*\n\n` +
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n` +
      `üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n` +
      `‚îú üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
      `‚îú üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –ø–æ–∏—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n` +
      `‚îú üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤\n` +
      `‚îú ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è\n` +
      `‚îú üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª\n` +
      `‚îú üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n` +
      `‚îú üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏ - –≤—ã–¥–∞—á–∞ –∏ –∑–∞–±–æ—Ä —Ç–∏—Ç—É–ª–æ–≤\n` +
      `‚îú ‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞–º–∏ - –≤—ã–¥–∞—á–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–Ω–≥–æ–≤\n` +
      `‚îú üì¢ –†–∞—Å—Å—ã–ª–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n` +
      `‚îú üó≥Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è–º–∏\n` +
      `‚îú üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ - –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞\n` +
      `‚îú üè¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º –±–∏—Ä–∂–∏\n` +
      `‚îî üóëÔ∏è –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
  }
}

async function showAdminStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const totalUsers = await db.collection('users').countDocuments();
    const activeUsers = await db.collection('users').countDocuments({
      'lastSeen': { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
    });
    const newUsersToday = await db.collection('users').countDocuments({
      'createdAt': { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º
    const totalMagnuStarsoins = await db.collection('users').aggregate([
      { $group: { _id: null, total: { $sum: '$magnuStarsoins' } } }
    ]).toArray();
    
    const totalStars = await db.collection('users').aggregate([
      { $group: { _id: null, total: { $sum: '$stars' } } }
    ]).toArray();
    
    const totalMagnum = totalMagnuStarsoins.length > 0 ? totalMagnuStarsoins[0].total : 0;
    const totalStarsAmount = totalStars.length > 0 ? totalStars[0].total : 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n` +
      `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n` +
      `‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${totalUsers}\`\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: \`${activeUsers}\`\n` +
      `‚îî –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: \`${newUsersToday}\`\n\n` +
      `üí∞ *–≠–∫–æ–Ω–æ–º–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ Stars: \`${formatNumber(totalMagnum)}\`\n` +
      `‚îî –í—Å–µ–≥–æ Stars: \`${formatNumber(totalStarsAmount)}\`\n\n` +
      `üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`${Math.round((activeUsers / totalUsers) * 100)}%\`\n` +
      `‚îî –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –¥–µ–Ω—å: \`${newUsersToday}\` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}
async function showAdminUsers(ctx, user) {
  try {
    log(`üë• –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_search_user'),
        Markup.button.callback('üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin_top_users')
      ],
      [
        Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 'admin_ban_user'),
        Markup.button.callback('‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 'admin_unban_user')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n` +
      `üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –Ω–∞–π—Ç–∏ –ø–æ ID\n` +
      `‚îú üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏\n` +
      `‚îú üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø\n` +
      `‚îî ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø\n\n` +
      `üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
  }
}
async function showAdminBalance(ctx, user) {
  try {
    log(`üí∞ –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Stars', 'admin_add_magnum'),
        Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Stars', 'admin_remove_magnum')
      ],
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Stars', 'admin_add_stars'),
        Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Stars', 'admin_remove_stars')
      ],
      [
        Markup.button.callback('üí∞ –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞', 'admin_mass_give'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤', 'admin_balance_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏*\n\n` +
      `üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú ‚ûï –î–æ–±–∞–≤–∏—Ç—å Stars - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n` +
      `‚îú ‚ûñ –£–±—Ä–∞—Ç—å Stars - —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n` +
      `‚îú ‚ûï –î–æ–±–∞–≤–∏—Ç—å Stars - –≤—ã–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã\n` +
      `‚îú ‚ûñ –£–±—Ä–∞—Ç—å Stars - —Å–ø–∏—Å–∞—Ç—å –∑–≤–µ–∑–¥—ã\n` +
      `‚îú üí∞ –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ - –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n` +
      `‚îî üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã!\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏');
  }
}
// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ó–ï–†–í–û–ú ====================
async function showAdminReserve(ctx, user) {
  try {
    log(`üè¶ –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∑–µ—Ä–≤
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const magnuStarsoinsReserve = reserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS;
    const starsReserve = reserve?.stars || config.INITIAL_RESERVE_STARS;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    const exchangeRate = await calculateExchangeRate();
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å MC', 'admin_reserve_add_Stars'),
        Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å MC', 'admin_reserve_remove_Stars')
      ],
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Stars', 'admin_reserve_add_stars'),
        Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Stars', 'admin_reserve_remove_stars')
      ],
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', 'admin_reserve_update_rate'),
        Markup.button.callback('üìä –î–µ—Ç–∞–ª–∏ –∫—É—Ä—Å–∞', 'admin_reserve_rate_details')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üè¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º –±–∏—Ä–∂–∏*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–π —Ä–µ–∑–µ—Ä–≤:*\n` +
      `‚îú ü™ô Magnum Coins: \`${formatNumber(magnuStarsoinsReserve)}\`\n` +
      `‚îî ‚≠ê Stars: \`${formatNumber(starsReserve)}\`\n\n` +
      `üí± *–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞:*\n` +
      `‚îú 1 Magnum Coin = ${exchangeRate.toFixed(6)} Stars\n` +
      `‚îú 100 Stars = ${(100 * exchangeRate).toFixed(4)} Magnum Coins\n` +
      `‚îî –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–≤: ${(magnuStarsoinsReserve / starsReserve).toFixed(4)}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º');
  }
}

// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–û–õ–û–°–û–í–ê–ù–ò–ï–ú ====================
async function showAdminVoting(ctx, user) {
  try {
    log(`üó≥Ô∏è –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const activeVotings = await db.collection('votings').find({ 
      isActive: true 
    }).toArray();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
    const totalVotings = await db.collection('votings').countDocuments();
    const totalVotes = await db.collection('votes').countDocuments();
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', 'admin_voting_create'),
        Markup.button.callback('üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è', 'admin_voting_active')
      ],
      [
        Markup.button.callback('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π', 'admin_voting_stats'),
        Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è', 'admin_voting_settings')
      ],
      [
        Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', 'admin_voting_delete'),
        Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π', 'admin_voting_history')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üó≥Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º*\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: \`${totalVotings}\`\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: \`${activeVotings.length}\`\n` +
      `‚îî –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: \`${totalVotes}\`\n\n` +
      `üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú ‚ûï –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ - –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n` +
      `‚îú üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n` +
      `‚îú üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n` +
      `‚îú ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è\n` +
      `‚îú üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ - —É–¥–∞–ª–µ–Ω–∏–µ\n` +
      `‚îî üìã –ò—Å—Ç–æ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π - –∞—Ä—Ö–∏–≤\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º');
  }
}
// ==================== –î–ï–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ì–û–õ–û–°–û–í–ê–ù–ò–Ø ====================
async function showAdminVotingCreate(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_voting')]
    ]);
    
    const message = 
      `‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è*\n\n` +
      `üìù *–§–æ—Ä–º–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è:*\n` +
      `‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"\n` +
      `‚îú –û–ø–∏—Å–∞–Ω–∏–µ: "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"\n` +
      `‚îú –í–∞—Ä–∏–∞–Ω—Ç—ã: "–í–∞—Ä–∏–∞–Ω—Ç 1|–í–∞—Ä–∏–∞–Ω—Ç 2|–í–∞—Ä–∏–∞–Ω—Ç 3"\n` +
      `‚îú –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: "7" (–≤ –¥–Ω—è—Ö)\n` +
      `‚îî –¢–∏–ø: "public" –∏–ª–∏ "private"\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:*\n` +
      `–ù–∞–∑–≤–∞–Ω–∏–µ: "–í—ã–±–æ—Ä –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"\n` +
      `–û–ø–∏—Å–∞–Ω–∏–µ: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–æ—Ç–∞"\n` +
      `–í–∞—Ä–∏–∞–Ω—Ç—ã: "–°–∏—Å—Ç–µ–º–∞ –≥–∏–ª—å–¥–∏–π|PvP —Å–∏—Å—Ç–µ–º–∞|–ú–∏–Ω–∏-–∏–≥—Ä—ã"\n` +
      `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: "7"\n` +
      `–¢–∏–ø: "public"\n\n` +
      `üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'creating_voting', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
  } catch (error) {
    logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
  }
}

async function showAdminVotingActive(ctx, user) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const activeVotings = await db.collection('votings').find({ 
      isActive: true 
    }).toArray();
    
    let message = `üìä *–ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è*\n\n`;
    
    if (activeVotings.length === 0) {
      message += `‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –Ω–µ—Ç\n\n`;
    } else {
      activeVotings.forEach((voting, index) => {
        const endDate = new Date(voting.endDate);
        const now = new Date();
        const timeLeft = endDate.getTime() - now.getTime();
        const daysLeft = Math.ceil(timeLeft / (1000 * 60 * 60 * 24));
        
        message += `${index + 1}. *${voting.title}*\n`;
        message += `‚îú üìÖ –û—Å—Ç–∞–ª–æ—Å—å: ${daysLeft} –¥–Ω–µ–π\n`;
        message += `‚îú üë• –ì–æ–ª–æ—Å–æ–≤: ${voting.totalVotes || 0}\n`;
        message += `‚îî üîó ID: \`${voting._id}\`\n\n`;
      });
    }
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìà –î–µ—Ç–∞–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è', 'admin_voting_details'),
        Markup.button.callback('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', 'admin_voting_stop')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_voting')]
    ]);
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π');
  }
}
async function showAdminVotingStats(ctx, user) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
    const totalVotings = await db.collection('votings').countDocuments();
    const activeVotings = await db.collection('votings').countDocuments({ isActive: true });
    const totalVotes = await db.collection('votes').countDocuments();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤
    const topVotings = await db.collection('votings')
      .find({})
      .sort({ totalVotes: -1 })
      .limit(5)
      .toArray();
    
    let message = `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π*\n\n`;
    message += `üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚îú –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: \`${totalVotings}\`\n`;
    message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: \`${activeVotings}\`\n`;
    message += `‚îî –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: \`${totalVotes}\`\n\n`;
    
    if (topVotings.length > 0) {
      message += `üèÜ *–¢–æ–ø –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π:*\n`;
      topVotings.forEach((voting, index) => {
        message += `${index + 1}. ${voting.title}\n`;
        message += `‚îú üë• –ì–æ–ª–æ—Å–æ–≤: ${voting.totalVotes || 0}\n`;
        message += `‚îú üìÖ –°–æ–∑–¥–∞–Ω–æ: ${new Date(voting.createdAt).toLocaleDateString()}\n`;
        message += `‚îî ${voting.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–æ' : 'üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–æ'}\n\n`;
      });
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_voting')]
    ]);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π');
  }
}

async function showAdminVotingSettings(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏', 'admin_voting_time_settings'),
        Markup.button.callback('üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞', 'admin_voting_access_settings')
      ],
      [
        Markup.button.callback('üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'admin_voting_display_settings'),
        Markup.button.callback('üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', 'admin_voting_security_settings')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_voting')]
    ]);
    
    const message = 
      `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è*\n\n` +
      `üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú ‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π\n` +
      `‚îú üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - –∫—Ç–æ –º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å\n` +
      `‚îú üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∫–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n` +
      `‚îî üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
  }
}

async function showAdminVotingDelete(ctx, user) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const allVotings = await db.collection('votings').find({}).toArray();
    
    let message = `üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è*\n\n`;
    
    if (allVotings.length === 0) {
      message += `‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç\n\n`;
    } else {
      message += `üìã *–°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π:*\n`;
      allVotings.forEach((voting, index) => {
        message += `${index + 1}. *${voting.title}*\n`;
        message += `‚îú üë• –ì–æ–ª–æ—Å–æ–≤: ${voting.totalVotes || 0}\n`;
        message += `‚îú üìÖ –°–æ–∑–¥–∞–Ω–æ: ${new Date(voting.createdAt).toLocaleDateString()}\n`;
        message += `‚îî üîó ID: \`${voting._id}\`\n\n`;
      });
    }
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ ID', 'admin_voting_delete_by_id'),
        Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ', 'admin_voting_delete_all')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_voting')]
    ]);
    
    message += `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n`;
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π');
  }
}

async function showAdminVotingHistory(ctx, user) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const finishedVotings = await db.collection('votings')
      .find({ isActive: false })
      .sort({ endDate: -1 })
      .limit(10)
      .toArray();
    
    let message = `üìã *–ò—Å—Ç–æ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π*\n\n`;
    
    if (finishedVotings.length === 0) {
      message += `‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –Ω–µ—Ç\n\n`;
    } else {
      finishedVotings.forEach((voting, index) => {
        const endDate = new Date(voting.endDate);
        message += `${index + 1}. *${voting.title}*\n`;
        message += `‚îú üë• –ì–æ–ª–æ—Å–æ–≤: ${voting.totalVotes || 0}\n`;
        message += `‚îú üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${endDate.toLocaleDateString()}\n`;
        message += `‚îî üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${voting.winner || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n\n`;
      });
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_voting')]
    ]);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π');
  }
}



// ==================== –û–¢–õ–ê–î–ö–ê –†–ê–ù–ì–û–í ====================
async function showAdminDebugRanks(ctx, user) {
  try {
    log(`üîç –ü–æ–∫–∞–∑ –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–Ω–≥–∞–º
    const ranks = getRankRequirements();
    const rankStats = [];
    
    for (const rank of ranks) {
      const count = await db.collection('users').countDocuments({ level: { $gte: rank.level } });
      rankStats.push({ ...rank, count });
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_debug_user_rank')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–Ω–≥–æ–≤', 'admin_rank_stats')],
      [Markup.button.callback('üß™ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞', 'admin_test_progress')],
      [Markup.button.callback('‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è', 'admin_force_level_check')],
      [Markup.button.callback('üéØ –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç', 'admin_add_experience')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    let message = `üîç *–û—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–≥–æ–≤*\n\n`;
    message += `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–Ω–≥–∞–º:*\n`;
    
    rankStats.forEach((rank, index) => {
      const percentage = rankStats[0].count > 0 ? Math.round((rank.count / rankStats[0].count) * 100) : 0;
      message += `${index + 1}. ${rank.name} (${rank.level} —É—Ä.) - ${rank.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${percentage}%)\n`;
    });
    
    message += `\nüîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n`;
    message += `‚îú üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
    message += `‚îú üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–Ω–≥–æ–≤ - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
    message += `‚îú üß™ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n`;
    message += `‚îú ‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è - –æ–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`;
    message += `‚îú üéØ –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç - –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n`;
    message += `‚îî üîô –ù–∞–∑–∞–¥ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n`;
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –û—Ç–ª–∞–¥–∫–∞ —Ä–∞–Ω–≥–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–Ω–≥–æ–≤');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–æ–≤
async function showAdminTestProgress(ctx, user) {
  try {
    log(`üß™ –ü–æ–∫–∞–∑ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const ranks = getRankRequirements();
    let message = `üß™ *–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–æ–≤*\n\n`;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
    const testLevels = [1, 3, 7, 12, 18, 25, 35, 50, 70, 90, 100];
    
    message += `üìä *–¢–µ—Å—Ç–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏:*\n`;
    
    for (const level of testLevels) {
      const testUser = { id: 'test', level: level };
      const rankProgress = await getRankProgress(testUser);
      
      if (rankProgress.isMax) {
        message += `‚îú –£—Ä–æ–≤–µ–Ω—å ${level}: ${rankProgress.current.name} (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥)\n`;
      } else {
        message += `‚îú –£—Ä–æ–≤–µ–Ω—å ${level}: ${rankProgress.current.name} ‚Üí ${rankProgress.next.name} (${rankProgress.progress}%)\n`;
      }
    }
    
    message += `\nüîç *–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è 7:*\n`;
    const testUser7 = { id: 'test', level: 7 };
    const rankProgress7 = await getRankProgress(testUser7);
    message += `‚îú –¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: ${rankProgress7.current.name} (${rankProgress7.current.level})\n`;
    message += `‚îú –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥: ${rankProgress7.next.name} (${rankProgress7.next.level})\n`;
    message += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: ${rankProgress7.progress}%\n`;
    message += `‚îî –û—Å—Ç–∞–ª–æ—Å—å: ${rankProgress7.remaining} —É—Ä–æ–≤–Ω–µ–π\n\n`;
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_debug_ranks')]
    ]);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function showAdminForceLevelCheck(ctx, user) {
  try {
    log(`‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = await db.collection('users').find({}).toArray();
    let updatedCount = 0;
    let levelUpCount = 0;
    
    message = `‚ö° *–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è*\n\n`;
    message += `üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n\n`;
    
    await ctx.editMessageText(message, { parse_mode: 'Markdown' });
    
    for (const dbUser of allUsers) {
      try {
        const levelResult = await checkAndUpdateLevel(dbUser);
        if (levelResult.levelUp) {
          levelUpCount++;
          log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${dbUser.id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ ${levelResult.newLevel}!`);
        }
        updatedCount++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (updatedCount % 10 === 0) {
          message = `‚ö° *–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è*\n\n`;
          message += `üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${updatedCount}/${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`;
          message += `üéâ –ü–æ–≤—ã—Å–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å: ${levelUpCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n`;
          message += `‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...`;
          
          await ctx.editMessageText(message, { parse_mode: 'Markdown' });
        }
      } catch (error) {
        logError(error, `–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${dbUser.id}`);
      }
    }
    
    message = `‚ö° *–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n\n`;
    message += `‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${updatedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`;
    message += `üéâ –ü–æ–≤—ã—Å–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å: ${levelUpCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n`;
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_debug_ranks')]
    ]);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${updatedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${levelUpCount} –ø–æ–≤—ã—à–µ–Ω–∏–π`);
  } catch (error) {
    logError(error, `–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function showAdminAddExperience(ctx, user) {
  try {
    log(`üéØ –ü–æ–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º 100 –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const experienceToAdd = 100;
    
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          experience: experienceToAdd
        },
        $set: { 
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await getUser(user.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    const levelResult = await checkAndUpdateLevel(updatedUser);
    
    let message = `üéØ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞*\n\n`;
    message += `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${experienceToAdd} –æ–ø—ã—Ç–∞\n\n`;
    message += `üìä *–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:*\n`;
    message += `‚îú –£—Ä–æ–≤–µ–Ω—å: ${updatedUser.level}\n`;
    message += `‚îú –û–ø—ã—Ç: ${updatedUser.experience}/${updatedUser.experienceToNextLevel}\n`;
    
    if (levelResult.levelUp) {
      message += `‚îú üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ: ${levelResult.newLevel}\n`;
      message += `‚îú –ù–æ–≤—ã–π –æ–ø—ã—Ç: ${levelResult.newExperience}/${levelResult.newExperienceToNextLevel}\n`;
    }
    
    message += `‚îî –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${Math.round((updatedUser.experience / updatedUser.experienceToNextLevel) * 100)}%\n\n`;
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üéØ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–ø—ã—Ç', 'admin_add_experience')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_debug_ranks')]
    ]);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –û–ø—ã—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: +${experienceToAdd}, —É—Ä–æ–≤–µ–Ω—å: ${updatedUser.level}`);
  } catch (error) {
    logError(error, `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞');
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º
async function handleAdminAddReserveStars(ctx, user, text) {
  try {
    const amount = parseFloat(text);
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
    await db.collection('reserve').updateOne(
      { currency: 'main' },
      { 
        $inc: { magnuStarsoins: amount },
        $set: { updatedAt: new Date() }
      },
      { upsert: true }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à —Ä–µ–∑–µ—Ä–≤–∞
    statsCache.delete('reserve');
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
    const updatedReserve = await db.collection('reserve').findOne({ currency: 'main' });
    const newRate = await calculateExchangeRate();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
    await db.collection('exchangeHistory').insertOne({
      type: 'rate_update',
      rate: newRate,
      timestamp: new Date(),
      magnuStarsoinsReserve: updatedReserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS,
      starsReserve: updatedReserve?.stars || config.INITIAL_RESERVE_STARS,
      reason: 'admin_reserve_change',
      adminId: user.id,
      changeType: 'add_Stars',
      changeAmount: amount
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º', 'admin_reserve')]
    ]);
    
    await ctx.reply(
      `‚úÖ *Stars –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤!*\n\n` +
      `üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ: \`${formatNumber(amount)}\` Stars\n` +
      `üìä –ù–æ–≤—ã–π –∫—É—Ä—Å: \`${newRate.toFixed(6)}\` Stars –∑–∞ 1 Stars\n\n` +
      `üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} –¥–æ–±–∞–≤–∏–ª ${amount} Stars –≤ —Ä–µ–∑–µ—Ä–≤`);
  } catch (error) {
    logError(error, `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars –≤ —Ä–µ–∑–µ—Ä–≤ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Stars –≤ —Ä–µ–∑–µ—Ä–≤.');
  }
}
async function handleAdminRemoveReserveStars(ctx, user, text) {
  try {
    const amount = parseFloat(text);
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∑–µ—Ä–≤
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const currentReserve = reserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS;
    
    if (amount > currentReserve) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –≤ —Ä–µ–∑–µ—Ä–≤–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${formatNumber(currentReserve)}`);
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤ (—Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞)
    await db.collection('reserve').updateOne(
      { currency: 'main' },
      { 
        $inc: { magnuStarsoins: -amount },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–∏—Å—Ç–µ–º—ã
    await db.collection('systemStats').updateOne(
      { type: 'global' },
      { 
        $inc: { totalMagnuStarsoinsSpent: amount },
        $set: { updatedAt: new Date() }
      },
      { upsert: true }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à —Ä–µ–∑–µ—Ä–≤–∞
    statsCache.delete('reserve');
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
    const updatedReserve = await db.collection('reserve').findOne({ currency: 'main' });
    const newRate = await calculateExchangeRate();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
    await db.collection('exchangeHistory').insertOne({
      type: 'rate_update',
      rate: newRate,
      timestamp: new Date(),
      magnuStarsoinsReserve: updatedReserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS,
      starsReserve: updatedReserve?.stars || config.INITIAL_RESERVE_STARS,
      reason: 'admin_reserve_change',
      adminId: user.id,
      changeType: 'remove_Stars',
      changeAmount: amount
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º', 'admin_reserve')]
    ]);
    
    await ctx.reply(
      `‚úÖ *Stars —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞!*\n\n` +
      `üí∞ –£–¥–∞–ª–µ–Ω–æ: \`${formatNumber(amount)}\` Stars\n` +
      `üìä –ù–æ–≤—ã–π –∫—É—Ä—Å: \`${newRate.toFixed(6)}\` Stars –∑–∞ 1 Stars\n\n` +
      `üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} —É–¥–∞–ª–∏–ª ${amount} Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞`);
  } catch (error) {
    logError(error, `–£–¥–∞–ª–µ–Ω–∏–µ Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞.');
  }
}

async function handleAdminAddReserveStars(ctx, user, text) {
  try {
    const amount = parseFloat(text);
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
    await db.collection('reserve').updateOne(
      { currency: 'main' },
      { 
        $inc: { stars: amount },
        $set: { updatedAt: new Date() }
      },
      { upsert: true }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à —Ä–µ–∑–µ—Ä–≤–∞
    statsCache.delete('reserve');
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
    const updatedReserve = await db.collection('reserve').findOne({ currency: 'main' });
    const newRate = await calculateExchangeRate();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
    await db.collection('exchangeHistory').insertOne({
      type: 'rate_update',
      rate: newRate,
      timestamp: new Date(),
      magnuStarsoinsReserve: updatedReserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS,
      starsReserve: updatedReserve?.stars || config.INITIAL_RESERVE_STARS,
      reason: 'admin_reserve_change',
      adminId: user.id,
      changeType: 'add_stars',
      changeAmount: amount
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º', 'admin_reserve')]
    ]);
    
    await ctx.reply(
      `‚úÖ *Stars –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤!*\n\n` +
      `‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ: \`${formatNumber(amount)}\` Stars\n` +
      `üìä –ù–æ–≤—ã–π –∫—É—Ä—Å: \`${newRate.toFixed(6)}\` Stars –∑–∞ 1 Stars\n\n` +
      `üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} –¥–æ–±–∞–≤–∏–ª ${amount} Stars –≤ —Ä–µ–∑–µ—Ä–≤`);
  } catch (error) {
    logError(error, `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars –≤ —Ä–µ–∑–µ—Ä–≤ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Stars –≤ —Ä–µ–∑–µ—Ä–≤.');
  }
}
async function handleAdminRemoveReserveStars(ctx, user, text) {
  try {
    const amount = parseFloat(text);
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∑–µ—Ä–≤
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const currentReserve = reserve?.stars || config.INITIAL_RESERVE_STARS;
    
    if (amount > currentReserve) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –≤ —Ä–µ–∑–µ—Ä–≤–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${formatNumber(currentReserve)}`);
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
    await db.collection('reserve').updateOne(
      { currency: 'main' },
      { 
        $inc: { stars: -amount },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à —Ä–µ–∑–µ—Ä–≤–∞
    statsCache.delete('reserve');
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
    const updatedReserve = await db.collection('reserve').findOne({ currency: 'main' });
    const newRate = await calculateExchangeRate();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
    await db.collection('exchangeHistory').insertOne({
      type: 'rate_update',
      rate: newRate,
      timestamp: new Date(),
      magnuStarsoinsReserve: updatedReserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS,
      starsReserve: updatedReserve?.stars || config.INITIAL_RESERVE_STARS,
      reason: 'admin_reserve_change',
      adminId: user.id,
      changeType: 'remove_stars',
      changeAmount: amount
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º', 'admin_reserve')]
    ]);
    
    await ctx.reply(
      `‚úÖ *Stars —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞!*\n\n` +
      `‚≠ê –£–¥–∞–ª–µ–Ω–æ: \`${formatNumber(amount)}\` Stars\n` +
      `üìä –ù–æ–≤—ã–π –∫—É—Ä—Å: \`${newRate.toFixed(6)}\` Stars –∑–∞ 1 Stars\n\n` +
      `üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} —É–¥–∞–ª–∏–ª ${amount} Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞`);
  } catch (error) {
    logError(error, `–£–¥–∞–ª–µ–Ω–∏–µ Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞.');
  }
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏
async function handleAdminSetCommission(ctx, user, text) {
  try {
    const commission = parseFloat(text);
    
    if (isNaN(commission) || commission < 0 || commission > 50) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 50.');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config.EXCHANGE_COMMISSION = commission;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–µ–π', 'admin_exchange_commission')]
    ]);
    
    await ctx.reply(
      `‚úÖ *–ö–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*\n\n` +
      `üí∏ –ù–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: \`${commission}%\`\n\n` +
      `üìä *–ü—Ä–∏–º–µ—Ä—ã –æ–±–º–µ–Ω–∞:*\n` +
      `‚îú 100 Stars ‚Üí ${((100 - (100 * commission / 100)) * 0.001).toFixed(4)} Stars\n` +
      `‚îú 500 Stars ‚Üí ${((500 - (500 * commission / 100)) * 0.001).toFixed(4)} Stars\n` +
      `‚îî 1000 Stars ‚Üí ${((1000 - (1000 * commission / 100)) * 0.001).toFixed(4)} Stars\n\n` +
      `üí° –ö–æ–º–∏—Å—Å–∏—è –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫–æ –≤—Å–µ–º –Ω–æ–≤—ã–º –æ–±–º–µ–Ω–∞–º.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–æ–º–∏—Å—Å–∏—é ${commission}%`);
  } catch (error) {
    logError(error, `–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏.');
  }
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏ –≤—ã–≤–æ–¥–∞
async function handleAdminSetWithdrawalCommission(ctx, user, text) {
  try {
    const commission = parseFloat(text);

    if (isNaN(commission) || commission < 0 || commission > 50) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 50.');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'WITHDRAWAL_COMMISSION' },
      { $set: { value: commission } },
      { upsert: true }
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config.WITHDRAWAL_COMMISSION = commission;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );

    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–µ–π', 'admin_withdrawal_commission')]
    ]);
    
    await ctx.reply(
      `‚úÖ *–ö–æ–º–∏—Å—Å–∏—è –≤—ã–≤–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*\n\n` +
      `üí∏ –ù–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: \`${commission}%\`\n\n` +
      `üìä *–ü—Ä–∏–º–µ—Ä—ã –≤—ã–≤–æ–¥–∞:*\n` +
      `‚îú 50 Stars ‚Üí ${(50 * (1 - commission / 100)).toFixed(2)} Stars –∫ –≤—ã–ø–ª–∞—Ç–µ\n` +
      `‚îú 100 Stars ‚Üí ${(100 * (1 - commission / 100)).toFixed(2)} Stars –∫ –≤—ã–ø–ª–∞—Ç–µ\n` +
      `‚îî 500 Stars ‚Üí ${(500 * (1 - commission / 100)).toFixed(2)} Stars –∫ –≤—ã–ø–ª–∞—Ç–µ\n\n` +
      `üí° –ö–æ–º–∏—Å—Å–∏—è –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫–æ –≤—Å–µ–º –Ω–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º –Ω–∞ –≤—ã–≤–æ–¥.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–æ–º–∏—Å—Å–∏—é –≤—ã–≤–æ–¥–∞ ${commission}%`);
  } catch (error) {
    logError(error, `–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏ –≤—ã–≤–æ–¥–∞.');
  }
}

async function showAdminSettings(ctx, user) {
  try {
    log(`‚öôÔ∏è –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [

        Markup.button.callback('‚è∞ –ö—É–ª–¥–∞—É–Ω—ã', 'admin_cooldowns')
      ],
      [
        Markup.button.callback('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 'admin_daily_bonus'),
        Markup.button.callback('‚õèÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–π–Ω–µ—Ä–∞', 'admin_miner_settings')
      ],
      [
        Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', 'admin_referral_settings'),
        Markup.button.callback('üì¢ –ö–∞–Ω–∞–ª—ã –ø–æ–¥–ø–∏—Å–∫–∏', 'admin_subscription_channels')
      ],
      [
        Markup.button.callback('üí∏ –ö–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–∞', 'admin_exchange_commission')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n` +
      `üîß *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +

      `‚îú üéÅ –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å: \`${config.DAILY_BONUS_BASE}\` Magnum Coins\n` +
      `‚îú ‚õèÔ∏è –ù–∞–≥—Ä–∞–¥–∞ –º–∞–π–Ω–µ—Ä–∞: \`${config.MINER_REWARD_PER_MINUTE}\` Stars/–º–∏–Ω\n` +
      `‚îú üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.REFERRAL_REWARD}\` Stars\n` +
      `‚îú üí∏ –ö–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–∞: \`${config.EXCHANGE_COMMISSION}%\`\n` +
      `‚îî üì¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: \`${config.REQUIRED_CHANNEL || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}


// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ò–°–°–ò–ï–ô ====================
async function showAdminExchangeCommission(ctx, user) {
  try {
    log(`üí∏ –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π –æ–±–º–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é', 'admin_commission_increase'),
        Markup.button.callback('‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é', 'admin_commission_decrease')
      ],
      [
        Markup.button.callback('üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', 'admin_commission_set'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–π', 'admin_commission_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üí∏ *–ö–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–∞*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: \`${config.EXCHANGE_COMMISSION}%\`\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è —Å 100 Stars: \`${(100 * config.EXCHANGE_COMMISSION / 100).toFixed(2)}\` Stars\n` +
      `‚îî –ö–æ–º–∏—Å—Å–∏—è —Å 1000 Stars: \`${(1000 * config.EXCHANGE_COMMISSION / 100).toFixed(2)}\` Stars\n\n` +
      `üìä *–ü—Ä–∏–º–µ—Ä—ã –æ–±–º–µ–Ω–∞:*\n` +
      `‚îú 100 Stars ‚Üí ${((100 - (100 * config.EXCHANGE_COMMISSION / 100)) * 0.001).toFixed(4)} Stars\n` +
      `‚îú 500 Stars ‚Üí ${((500 - (500 * config.EXCHANGE_COMMISSION / 100)) * 0.001).toFixed(4)} Stars\n` +
      `‚îî 1000 Stars ‚Üí ${((1000 - (1000 * config.EXCHANGE_COMMISSION / 100)) * 0.001).toFixed(4)} Stars\n\n` +
      `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è –≤–∑–∏–º–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ Stars\n` +
      `‚îî –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–µ–π –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π');
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–µ–π –≤—ã–≤–æ–¥–∞
async function showAdminWithdrawalCommission(ctx, user) {
  try {
    log(`üí∞ –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π –≤—ã–≤–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é', 'admin_withdrawal_commission_increase'),
        Markup.button.callback('‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é', 'admin_withdrawal_commission_decrease')
      ],
      [
        Markup.button.callback('üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', 'admin_withdrawal_commission_set'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–π', 'admin_withdrawal_commission_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const commission = config.WITHDRAWAL_COMMISSION || 5.0;
    const commissionDecimal = commission / 100;
    
    const message = 
      `üí∞ *–ö–æ–º–∏—Å—Å–∏—è –≤—ã–≤–æ–¥–∞*\n\n` +
      `üí∏ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: \`${commission}%\`\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è —Å 50 Stars: \`${(50 * commissionDecimal).toFixed(2)}\` Stars\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è —Å 100 Stars: \`${(100 * commissionDecimal).toFixed(2)}\` Stars\n` +
      `‚îî –ö–æ–º–∏—Å—Å–∏—è —Å 500 Stars: \`${(500 * commissionDecimal).toFixed(2)}\` Stars\n\n` +
      `üìä *–ü—Ä–∏–º–µ—Ä—ã –≤—ã–≤–æ–¥–∞:*\n` +
      `‚îú 50 Stars ‚Üí ${(50 * (1 - commissionDecimal)).toFixed(2)} Stars –∫ –≤—ã–ø–ª–∞—Ç–µ\n` +
      `‚îú 100 Stars ‚Üí ${(100 * (1 - commissionDecimal)).toFixed(2)} Stars –∫ –≤—ã–ø–ª–∞—Ç–µ\n` +
      `‚îî 500 Stars ‚Üí ${(500 * (1 - commissionDecimal)).toFixed(2)} Stars –∫ –≤—ã–ø–ª–∞—Ç–µ\n\n` +
      `‚öôÔ∏è *–î–∏–∞–ø–∞–∑–æ–Ω –∫–æ–º–∏—Å—Å–∏–∏:* 0% - 15%\n` +
      `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è –≤–∑–∏–º–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n` +
      `‚îú –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º –Ω–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º\n` +
      `‚îî –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—É–º–º—É –∫ –≤—ã–ø–ª–∞—Ç–µ\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    try {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    } catch (editError) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      if (editError.message.includes('message is not modified')) {
        await ctx.answerCbQuery('‚úÖ –ú–µ–Ω—é —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ');
        return;
      }
      throw editError;
    }
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–µ–π –≤—ã–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π –≤—ã–≤–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π –≤—ã–≤–æ–¥–∞');
  }
}

async function showAdminCooldowns(ctx, user) {
  try {
    log(`‚è∞ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ª–¥–∞—É–Ω–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [

        Markup.button.callback('üéÅ –ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞', 'admin_cooldown_bonus')
      ],
      [
        Markup.button.callback('‚õèÔ∏è –ö—É–ª–¥–∞—É–Ω –º–∞–π–Ω–µ—Ä–∞', 'admin_cooldown_miner'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤', 'admin_cooldown_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `‚è∞ *–ö—É–ª–¥–∞—É–Ω—ã*\n\n` +
      `‚è≥ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: \`24\` —á–∞—Å–∞\n` +
      `‚îî –ú–∞–π–Ω–µ—Ä: \`60\` –º–∏–Ω—É—Ç\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n` +
      `‚îî –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–Ω—É—Å: ${user.dailyBonus?.lastBonus ? user.dailyBonus.lastBonus.toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞'}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ª–¥–∞—É–Ω–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ª–¥–∞—É–Ω–æ–≤');
  }
}

async function showAdminDailyBonus(ctx, user) {
  try {
    log(`üéÅ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üí∞ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞', 'admin_bonus_base'),
        Markup.button.callback('üî• –ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏', 'admin_bonus_streak')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤', 'admin_bonus_stats'),
        Markup.button.callback('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–∏–∏', 'admin_bonus_series')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.DAILY_BONUS_BASE}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é: \`+0.5\` Magnum Coins –∑–∞ –¥–µ–Ω—å\n` +
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å —Å–µ—Ä–∏–∏: \`5\` Magnum Coins\n` +
      `‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.DAILY_BONUS_BASE + 5}\` Magnum Coins\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
      `‚îú –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: \`${user.dailyBonus?.streak || 0}\` –¥–Ω–µ–π\n` +
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: \`${user.dailyBonus?.maxStreak || 0}\` –¥–Ω–µ–π\n` +
      `‚îú –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: \`${user.dailyBonus?.claimedCount || 0}\`\n` +
      `‚îî –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ–Ω—É—Å–∞–º–∏: \`${formatNumber(user.dailyBonus?.totalEarned || 0)}\` Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ–Ω—É—Å–∞');
  }
}
async function showAdminMiningSeasons(ctx, user) {
  try {
    log(`üìÖ –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏ –º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const currentSeason = getCurrentMiningSeason();
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω', 'admin_season_start'),
        Markup.button.callback('‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∑–æ–Ω', 'admin_season_end')
      ],
      [
        Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∑–æ–Ω–∞', 'admin_season_settings'),
        Markup.button.callback('üèÜ –í—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã', 'admin_season_rewards')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∑–æ–Ω–∞', 'admin_season_stats'),
        Markup.button.callback('üîÑ –°–±—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞', 'admin_season_reset')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_miner_settings')]
    ]);
    
    const message = 
      `üìÖ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞–º–∏ –º–∞–π–Ω–∏–Ω–≥–∞*\n\n` +
      `üéØ *–¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω:*\n` +
      `‚îú –ù–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞: \`${currentSeason.season}\`\n` +
      `‚îú –î–µ–Ω—å —Å–µ–∑–æ–Ω–∞: \`${currentSeason.dayInSeason}/${config.MINING_SEASON_DURATION}\`\n` +
      `‚îú –î–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞: \`${currentSeason.daysUntilNextSeason}\`\n` +
      `‚îú –ú–Ω–æ–∂–∏—Ç–µ–ª—å: \`${currentSeason.multiplier}x\`\n` +
      `‚îî –°—Ç–∞—Ç—É—Å: ${currentSeason.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n` +
      `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∑–æ–Ω–æ–≤:*\n` +
      `‚îú –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∑–æ–Ω–∞: \`${config.MINING_SEASON_DURATION}\` –¥–Ω–µ–π\n` +
      `‚îú –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–≥—Ä–∞–¥: \`${config.MINING_REWARD_INTERVAL}\` –º–∏–Ω\n` +
      `‚îú –ë–æ–Ω—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞: \`${config.MINING_ACTIVE_CLICK_BONUS}x\`\n` +
      `‚îî –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞: \`+10%\` –∑–∞ —Å–µ–∑–æ–Ω\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞–º–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏');
  }
}

async function showAdminMinerSettings(ctx, user) {
  try {
    log(`‚õèÔ∏è –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üí∞ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞', 'admin_miner_reward'),
        Markup.button.callback('‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 'admin_miner_efficiency')
      ],
      [
        Markup.button.callback('üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞–º–∏', 'admin_mining_seasons'),
        Markup.button.callback('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π', 'admin_miner_levels')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `‚õèÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–π–Ω–µ—Ä–∞*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∏–Ω—É—Ç—É: \`${config.MINER_REWARD_PER_MINUTE}\` Stars\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`1.0\`\n` +
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`5.0\`\n` +
      `‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.MINER_REWARD_PER_MINUTE * 5}\` Stars/–º–∏–Ω\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å –º–∞–π–Ω–µ—Ä–∞: \`${user.miner?.level || 1}\`\n` +
      `‚îú –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`${user.miner?.efficiency || 1.0}\`\n` +
      `‚îú –°—Ç–∞—Ç—É—Å: ${user.miner?.active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n` +
      `‚îú –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ MC: \`${formatNumber(user.miner?.totalMined || 0)}\` ü™ô\n` +
      `‚îú –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ Stars: \`${formatNumber(user.miner?.totalMined || 0)}\` ‚≠ê\n` +
      `‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: ${user.miner?.lastReward ? user.miner.lastReward.toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞'}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–π–Ω–µ—Ä–∞');
  }
}
async function showAdminReferralSettings(ctx, user) {
  try {
    log(`üë• –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞', 'admin_referral_reward'),
        Markup.button.callback('üèÜ –ë–æ–Ω—É—Å—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'admin_referral_bonuses')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', 'admin_referral_stats'),
        Markup.button.callback('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π', 'admin_referral_levels')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: \`${config.REFERRAL_REWARD}\` Stars\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`50\` Stars\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`100\` Stars\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ 25 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`250\` Stars\n` +
      `‚îî –ë–æ–Ω—É—Å –∑–∞ 50 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`500\` Stars\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
      `‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${user.referralsCount || 0}\`\n` +
      `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(user.referralsEarnings || 0)}\` ü™ô Magnum Coins\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å: \`${getReferralLevel(user.referralsCount || 0)}\`\n` +
      `‚îî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: \`${user.referralCode}\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
}

async function showAdminSubscriptionChannels(ctx, user) {
  try {
    log(`üì¢ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', 'admin_subscription_add'),
        Markup.button.callback('‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', 'admin_subscription_remove')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫', 'admin_subscription_stats'),
        Markup.button.callback('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏', 'admin_subscription_check')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üì¢ *–ö–∞–Ω–∞–ª—ã –ø–æ–¥–ø–∏—Å–∫–∏*\n\n` +
      `üì∫ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: \`${config.REQUIRED_CHANNEL || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\`\n` +
      `‚îú –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${config.REQUIRED_CHANNEL ? 'üü¢ –í–∫–ª—é—á–µ–Ω–∞' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n` +
      `‚îî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: \`–ü—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏\`\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${await db.collection('users').countDocuments()}\`\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${await db.collection('users').countDocuments({ 'lastSeen': { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } })}\`\n` +
      `‚îî –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: \`${Math.round((await db.collection('users').countDocuments({ 'lastSeen': { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } })) / (await db.collection('users').countDocuments()) * 100)}%\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏');
  }
}

async function showAdminTopUsers(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    const topByLevel = await db.collection('users').find().sort({ level: -1 }).limit(10).toArray();
    const topByMagnuStarsoins = await db.collection('users').find().sort({ magnuStarsoins: -1 }).limit(10).toArray();
    const topByStars = await db.collection('users').find().sort({ stars: -1 }).limit(10).toArray();
    const topByReferrals = await db.collection('users').find().sort({ referralsCount: -1 }).limit(10).toArray();
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚≠ê –ü–æ —É—Ä–æ–≤–Ω—é', 'admin_top_level'),
        Markup.button.callback('ü™ô –ü–æ Magnum Coins', 'admin_top_magnum')
      ],
      [
        Markup.button.callback('üíé –ü–æ Stars', 'admin_top_stars'),
        Markup.button.callback('üë• –ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', 'admin_top_referrals')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    let message = `üìä *–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é
    message += `‚≠ê *–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é:*\n`;
    topByLevel.forEach((user, index) => {
      message += `${index + 1}. ID: \`${user.id}\` - –£—Ä–æ–≤–µ–Ω—å: \`${user.level}\`\n`;
    });
    
    message += `\nü™ô *–¢–æ–ø –ø–æ Magnum Coins:*\n`;
    topByMagnuStarsoins.forEach((user, index) => {
      message += `${index + 1}. ID: \`${user.id}\` - \`${formatNumber(user.magnuStarsoins)}\` ü™ô MC\n`;
    });
    
    message += `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
}
async function showAdminSearchUser(ctx, user) {
  try {
    log(`üîç –ü–æ–∫–∞–∑ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    const message = 
      `üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n` +
      `‚îú –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç\n` +
      `‚îú ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
      `‚îî –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* \`123456789\` –∏–ª–∏ \`@username\`\n\n` +
      `üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    user.adminState = 'searching_user';
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'searching_user', updatedAt: new Date() } }
    );
    
    log(`‚úÖ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–∏—Å–∫–∞');
  }
}
async function showAdminBanUser(ctx, user) {
  try {
    log(`üö´ –ü–æ–∫–∞–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    const message = 
      `üö´ *–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n` +
      `‚îú –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n` +
      `‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n` +
      `‚îî –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!\n\n` +
      `üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    user.adminState = 'banning_user';
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'banning_user', updatedAt: new Date() } }
    );
    
    log(`‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
  }
}
async function showAdminUnbanUser(ctx, user) {
  try {
    log(`‚úÖ –ü–æ–∫–∞–∑ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    const message = 
      `‚úÖ *–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n` +
      `‚îú –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n` +
      `‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n` +
      `‚îî –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è\n\n` +
      `üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    user.adminState = 'unbanning_user';
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'unbanning_user', updatedAt: new Date() } }
    );
    
    log(`‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
  }
}

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ê–ô–ù–ï–†–ê ====================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –∏ —Ç–∏—Ç—É–ª–∞
async function calculateMinerReward(userEfficiency = 1, user = null) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤
    const activeMinersCount = await db.collection('users').countDocuments({
      'miner.active': true
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    const exchangeRate = await calculateExchangeRate();
    
    // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∏–Ω—É—Ç—É
    let baseReward = config.MINER_REWARD_PER_MINUTE;
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞ (—á–µ–º –≤—ã—à–µ –∫—É—Ä—Å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞)
    const exchangeMultiplier = Math.max(0.1, exchangeRate / config.BASE_EXCHANGE_RATE);
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ (—á–µ–º –±–æ–ª—å—à–µ –º–∞–π–Ω–µ—Ä–æ–≤, —Ç–µ–º –º–µ–Ω—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞)
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–π–Ω–µ—Ä–∞–º–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    const totalMinersCount = await db.collection('users').countDocuments({
      'miner': { $exists: true }
    });
    const minersMultiplier = Math.max(0.3, Math.min(2.0, 1 / Math.sqrt(totalMinersCount + 1)));
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏—Ç—É–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let titleMultiplier = 1.0;
    if (user && user.mainTitle) {
      const titlesList = getTitlesList(user);
      const currentTitle = titlesList.find(t => t.name === user.mainTitle);
      if (currentTitle) {
        titleMultiplier = currentTitle.minerBonus || 1.0;
      }
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
    const finalReward = baseReward * exchangeMultiplier * minersMultiplier * userEfficiency * titleMultiplier;
    
    return Math.max(0.001, finalReward); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ 0.001
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞:', error);
    return config.MINER_REWARD_PER_MINUTE * userEfficiency;
  }
}

async function processMinerRewards() {
  try {
    console.log('‚õèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–∏–Ω–≥–∞...');
    
    const currentSeason = getCurrentMiningSeason();
    if (!currentSeason.isActive) {
      console.log('üìÖ –ú–∞–π–Ω–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤—ã—Ö–æ–¥–Ω—ã–µ');
      return;
    }
    
    const users = await db.collection('users').find({
      $or: [
        { 'miningStats.lastReward': { $exists: true } },
        { 'miners': { $exists: true, $ne: [] } }
      ]
    }).toArray();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–π–Ω–µ—Ä–∞–º–∏`);
    
    let processedCount = 0;
    
    for (const user of users) {
      try {
        const userWithMining = initializeNewMiningSystem(user);
        const totalSpeed = calculateTotalMiningSpeed(userWithMining);
        
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userWithMining.id}:`, {
          miners: userWithMining.miners?.length || 0,
          totalSpeedStars: totalSpeed.stars,
          totalSpeedStars: totalSpeed.stars,
          lastReward: userWithMining.miningStats?.lastReward
        });
        
        const totalSpeedSum = totalSpeed.stars + totalSpeed.stars;
        if (totalSpeedSum > 0) {
          const now = new Date();
          const lastReward = userWithMining.miningStats.lastReward || now;
          const timeDiff = (now - lastReward) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
          
          console.log(`‚è∞ –í—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userWithMining.id}:`, {
            now: now.toISOString(),
            lastReward: lastReward.toISOString(),
            timeDiff,
            requiredInterval: config.MINING_REWARD_INTERVAL
          });
          
          // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç lastReward, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
          if (!userWithMining.miningStats.lastReward) {
            console.log(`üÜï –ü–µ—Ä–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userWithMining.id}`);
            const rewardStars = totalSpeed.stars * config.MINING_REWARD_INTERVAL * currentSeason.multiplier;
            
            console.log(`üí∞ –ü–µ—Ä–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userWithMining.id}:`, {
              rewardStars,
              multiplier: currentSeason.multiplier
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await db.collection('users').updateOne(
              { id: userWithMining.id },
              {
                $inc: {
                  stars: rewardStars,
                  'miningStats.totalMinedStars': rewardStars,
                  'miningStats.seasonMinedStars': rewardStars,
                  'miningStats.passiveRewards': rewardStars
                },
                $set: {
                  'miningStats.lastReward': now
                }
              }
            );
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updatedUser = await db.collection('users').findOne({ id: userWithMining.id });
            if (updatedUser) {
              await forceSaveUser(updatedUser);
            }
            
            // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userCache.delete(userWithMining.id);
            
            processedCount++;
            console.log(`‚úÖ –ü–µ—Ä–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userWithMining.id}`);
          } else if (timeDiff >= config.MINING_REWARD_INTERVAL) {
            const rewardStars = totalSpeed.stars * config.MINING_REWARD_INTERVAL * currentSeason.multiplier;
            
            console.log(`üí∞ –ù–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userWithMining.id}:`, {
              rewardStars,
              multiplier: currentSeason.multiplier
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await db.collection('users').updateOne(
              { id: userWithMining.id },
              {
                $inc: {
                  magnuStarsoins: rewardStars,
                  stars: rewardStars,
                  'miningStats.totalMinedStars': rewardStars,
                  'miningStats.totalMinedStars': rewardStars,
                  'miningStats.seasonMinedStars': rewardStars,
                  'miningStats.seasonMinedStars': rewardStars,
                  'miningStats.passiveRewards': rewardStars + rewardStars
                },
                $set: {
                  'miningStats.lastReward': now
                }
              }
            );
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updatedUser = await db.collection('users').findOne({ id: userWithMining.id });
            if (updatedUser) {
              await forceSaveUser(updatedUser);
            }
            
            // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userCache.delete(userWithMining.id);
            
            processedCount++;
            console.log(`‚úÖ –ù–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userWithMining.id}`);
          } else {
            console.log(`‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userWithMining.id} –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –Ω–∞–≥—Ä–∞–¥–µ`);
          }
        } else {
          console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userWithMining.id} –Ω–µ –∏–º–µ–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
      }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–∏–Ω–≥–∞:', error);
  }
}

// ==================== –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ====================
// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function saveUserToDatabase(userId, updateData, options = {}) {
  try {
    const { upsert = false, increment = false } = options;
    
    let updateOperation;
    if (increment) {
      updateOperation = { $inc: updateData };
    } else {
      updateOperation = { $set: { ...updateData, updatedAt: new Date() } };
    }
    
    if (upsert) {
      updateOperation.$setOnInsert = { 
        id: userId,
        createdAt: new Date()
      };
    }
    
    const result = await db.collection('users').updateOne(
      { id: userId },
      updateOperation,
      { upsert }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(userId);
    
    console.log(`üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:`, {
      matchedCount: result.matchedCount,
      modifiedCount: result.modifiedCount,
      upsertedCount: result.upsertedCount
    });
    
    return result;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ —Å–µ—Ä–≤–µ—Ä—É
async function getServerMinerStats() {
  try {
    const stats = {};
    const minerTypes = Object.keys(config.MINERS);
    
    for (const minerType of minerTypes) {
      const result = await db.collection('users').aggregate([
        {
          $match: {
            [`miners`]: { $exists: true, $ne: [] }
          }
        },
        {
          $unwind: '$miners'
        },
        {
          $match: {
            'miners.type': minerType
          }
        },
        {
          $group: {
            _id: null,
            totalCount: { $sum: '$miners.count' }
          }
        }
      ]).toArray();
      
      stats[minerType] = result.length > 0 ? result[0].totalCount : 0;
    }
    
    return stats;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤:', error);
    return {};
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function forceSaveUser(user) {
  try {
    const updateData = {
      magnuStarsoins: user.magnuStarsoins,
      stars: user.stars,
      level: user.level,
      experience: user.experience,
      miners: user.miners,
      miningStats: user.miningStats,
      achievements: user.achievements,
      statistics: user.statistics,
      settings: user.settings,
      referralCode: user.referralCode,
      referredBy: user.referredBy,
      referralRewards: user.referralRewards,
      tasks: user.tasks,
      dailyTasks: user.dailyTasks,
      lastDailyReset: user.lastDailyReset,
      lastWeeklyReset: user.lastWeeklyReset,
      lastMonthlyReset: user.lastMonthlyReset,
      banned: user.banned,
      admin: user.admin,
      firstName: user.firstName,
      lastName: user.lastName,
      username: user.username,
      updatedAt: new Date()
    };
    
    await saveUserToDatabase(user.id, updateData);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
  }
}

// ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================
function log(message, type = 'INFO') {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [${type}] ${message}`;
  console.log(logMessage);
  
  // –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è Railway
  if (process.env.NODE_ENV === 'production') {
    console.log(logMessage);
  }
}
function logError(error, context = '') {
  const timestamp = new Date().toISOString();
  const errorMessage = error.message || error;
  const stack = error.stack || '';
  const logMessage = `[${timestamp}] [ERROR] ${context}: ${errorMessage}`;
  console.error(logMessage);
  
  let stackMessage = '';
  if (stack) {
    stackMessage = `[${timestamp}] [ERROR] Stack: ${stack}`;
    console.error(stackMessage);
  }
  
  // –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è Railway
  if (process.env.NODE_ENV === 'production') {
    console.error(logMessage);
    if (stack) {
      console.error(stackMessage);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
function logErrorWithContext(error, context, userId = null) {
  const timestamp = new Date().toISOString();
  const errorLog = {
    timestamp,
    userId,
    context,
    error: {
      message: error.message,
      stack: error.stack,
      name: error.name
    },
    memory: process.memoryUsage(),
    uptime: process.uptime()
  };
  
  console.error(`‚ùå [ERROR] ${timestamp} | User: ${userId || 'N/A'} | Context: ${context} | Error:`, error.message);
  console.error('Stack:', error.stack);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
  const fs = require('fs');
  const logFile = 'error_log.log';
  const logLine = JSON.stringify(errorLog) + '\n';
  
  try {
    fs.appendFileSync(logFile, logLine);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ error –ª–æ–≥–∞:', err.message);
  }
}

function logDebug(message, data = null) {
  const timestamp = new Date().toISOString();
  let logMessage = `[${timestamp}] [DEBUG] ${message}`;
  
  if (data) {
    logMessage += ` | Data: ${JSON.stringify(data, null, 2)}`;
  }
  
  console.log(logMessage);
}

function logAction(userId, action, details = '') {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [ACTION] User ${userId} | Action: ${action} | Details: ${details}`;
  console.log(logMessage);
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const logEntry = {
    timestamp,
    userId,
    action,
    details,
    memory: process.memoryUsage(),
    uptime: process.uptime()
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const fs = require('fs');
  const logFile = 'user_actions.log';
  const logLine = JSON.stringify(logEntry) + '\n';
  
  try {
    fs.appendFileSync(logFile, logLine);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ action –ª–æ–≥–∞:', error.message);
  }
}

function logFunction(functionName, userId = null, params = null) {
  const timestamp = new Date().toISOString();
  let logMessage = `[${timestamp}] [FUNCTION] ${functionName}`;
  
  if (userId) {
    logMessage += ` | User: ${userId}`;
  }
  
  if (params) {
    logMessage += ` | Params: ${JSON.stringify(params)}`;
  }
  
  console.log(logMessage);
}
// ==================== –ë–ò–†–ñ–ê ====================


async function showExchangeMenu(ctx, user) {
  try {
    log(`üìà –ü–æ–∫–∞–∑ –±–∏—Ä–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    const exchangeRate = await calculateExchangeRate();
    const maxExchange = Math.floor(user.magnuStarsoins);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–µ
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const magnuStarsoinsReserve = reserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS;
    const starsReserve = reserve?.stars || config.INITIAL_RESERVE_STARS;
    

    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∑–∞ 24 —á–∞—Å–∞
    let priceChange = 0;
    let priceChangePercent = 0;
    let priceChangeIcon = 'üìà';
    let priceChangeColor = 'üü¢';
    
    if (exchangeRate24h !== null) {
      priceChange = exchangeRate - exchangeRate24h;
      priceChangePercent = exchangeRate24h > 0 ? ((priceChange / exchangeRate24h) * 100) : 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      if (isNaN(priceChange) || isNaN(priceChangePercent)) {
        priceChange = 0;
        priceChangePercent = 0;
      }
      
      priceChangeIcon = priceChange >= 0 ? 'üìà' : 'üìâ';
      priceChangeColor = priceChange >= 0 ? 'üü¢' : 'üî¥';
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
    const formatPriceChange = (change, percent) => {
      const changeSign = change >= 0 ? '+' : '';
      const percentSign = percent >= 0 ? '+' : '';
      return `${changeSign}${change.toFixed(6)} (${percentSign}${percent.toFixed(2)}%)`;
    };
    

    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('ü™ô –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É MC ‚Üí Stars', 'exchange_custom_Stars'),
        Markup.button.callback('‚≠ê –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É Stars ‚Üí MC', 'exchange_custom_stars')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º–µ–Ω–æ–≤', 'exchange_stats'),
        Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤', 'exchange_history')
      ],
      [
        Markup.button.callback('üì∞ –ù–æ–≤–æ—Å—Ç–∏ –±–∏—Ä–∂–∏', 'exchange_news')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if (isAdmin(user.id)) {
      keyboard.reply_markup.inline_keyboard.splice(2, 0, [
        Markup.button.callback('üìà –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞', 'exchange_chart'),
        Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏', 'exchange_settings')
      ]);
    }
    
    const message = 
      `üìà *Magnum Exchange*\n\n` +
      `üí∞ *–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:*\n` +
      `‚îú ü™ô Magnum Coins: \`${formatNumber(user.magnuStarsoins)}\`\n` +
      `‚îî ‚≠ê Stars: \`${formatNumber(user.stars)}\`\n\n` +
      `üìä *–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:*\n` +
      `‚îú ${priceChangeIcon} 1 Magnum Coin = ${exchangeRate.toFixed(6)} Stars\n` +
      `‚îú ${priceChangeColor} –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: ${exchangeRate24h !== null ? formatPriceChange(priceChange, priceChangePercent) : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n` +
      `‚îú üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${config.EXCHANGE_COMMISSION}%\n` +
      `‚îî üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString('ru-RU')}\n\n` +
      `üè¶ *–†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏:*\n` +
      `‚îú ü™ô Magnum Coins: \`${formatNumber(magnuStarsoinsReserve)}\`\n` +
      `‚îî ‚≠ê Stars: \`${formatNumber(starsReserve)}\`\n\n` +
      `üìà *–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n` +
      `‚îú 24—á –æ–±—ä–µ–º: \`${formatNumber(user.exchange?.totalExchanged || 0)}\` ü™ô MC\n` +
      `‚îú –í—Å–µ–≥–æ –æ–±–º–µ–Ω–æ–≤: \`${user.exchange?.totalExchanges || 0}\`\n` +
      `‚îî –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${Math.min(100, ((magnuStarsoinsReserve / config.INITIAL_RESERVE_MAGNUM_COINS) * 100)).toFixed(1)}%\n\n` +

      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    }
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –±–∏—Ä–∂–∏');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏—Ä–∂–∏');
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏—Ä–∂–∏');
    }
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∫—É—Ä—Å–∞
async function showExchangeChart(ctx, user) {
  try {
    log(`üìà –ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –∫—É—Ä—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫—É—Ä—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const exchangeHistory = await db.collection('exchangeHistory')
      .find({ 
        timestamp: { $gte: yesterday },
        type: 'rate_update' // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –∫—É—Ä—Å–∞–º–∏
      })
      .sort({ timestamp: 1 })
      .toArray();
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìä 24 —á–∞—Å–∞', 'chart_24h'),
        Markup.button.callback('üìà 7 –¥–Ω–µ–π', 'chart_7d')
      ],
      [
        Markup.button.callback('üìâ 30 –¥–Ω–µ–π', 'chart_30d'),
        Markup.button.callback('üìä –í—Å–µ –≤—Ä–µ–º—è', 'chart_all')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'exchange')]
    ]);
    
    let message = `üìà *–ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ Magnum Coin*\n\n`;
    
    if (exchangeHistory.length > 0) {
      const currentRate = exchangeHistory[exchangeHistory.length - 1].rate || 0.001;
      const minRate = Math.min(...exchangeHistory.map(h => h.rate || 0.001));
      const maxRate = Math.max(...exchangeHistory.map(h => h.rate || 0.001));
      const avgRate = exchangeHistory.reduce((sum, h) => sum + (h.rate || 0.001), 0) / exchangeHistory.length;
      
      message += `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:*\n`;
      message += `‚îú üìà –ú–∞–∫—Å–∏–º—É–º: \`${maxRate.toFixed(6)}\` Stars\n`;
      message += `‚îú üìâ –ú–∏–Ω–∏–º—É–º: \`${minRate.toFixed(6)}\` Stars\n`;
      message += `‚îú üìä –°—Ä–µ–¥–Ω–µ–µ: \`${avgRate.toFixed(6)}\` Stars\n`;
      message += `‚îî üìà –¢–µ–∫—É—â–∏–π: \`${currentRate.toFixed(6)}\` Stars\n\n`;
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
      message += `üìà *–î–∏–Ω–∞–º–∏–∫–∞ –∫—É—Ä—Å–∞:*\n`;
      const points = Math.min(10, exchangeHistory.length);
      const step = Math.floor(exchangeHistory.length / points);
      
      for (let i = 0; i < points; i++) {
        const index = i * step;
        const rate = exchangeHistory[index]?.rate || 0.001;
        const timestamp = exchangeHistory[index]?.timestamp || new Date();
        const time = new Date(timestamp).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        const bar = '‚ñà'.repeat(Math.floor((rate / maxRate) * 10));
        message += `‚îú ${time}: ${rate.toFixed(6)} ${bar}\n`;
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç
      const currentRate = await calculateExchangeRate();
      message += `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
      message += `‚îú üìà –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: \`${currentRate.toFixed(6)}\` Stars\n`;
      message += `‚îú üìâ –ú–∏–Ω–∏–º—É–º: \`${currentRate.toFixed(6)}\` Stars\n`;
      message += `‚îú üìä –°—Ä–µ–¥–Ω–µ–µ: \`${currentRate.toFixed(6)}\` Stars\n`;
      message += `‚îî üìà –ú–∞–∫—Å–∏–º—É–º: \`${currentRate.toFixed(6)}\` Stars\n\n`;
      message += `üìà *–î–∏–Ω–∞–º–∏–∫–∞ –∫—É—Ä—Å–∞:*\n`;
      message += `‚îú ${new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}: ${currentRate.toFixed(6)} ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\n`;
      message += `‚îî üí° –ì—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–º–µ–Ω–æ–≤\n`;
    }
    
    message += `\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –∫—É—Ä—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤
async function showExchangeHistory(ctx, user) {
  try {
    log(`üìã –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userHistory = await db.collection('exchangeHistory')
      .find({ 
        userId: user.id,
        type: { $ne: 'rate_update' } // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –∫—É—Ä—Å–∞–º–∏
      })
      .sort({ timestamp: -1 })
      .limit(10)
      .toArray();
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìä –í—Å–µ –æ–±–º–µ–Ω—ã', 'history_all'),
        Markup.button.callback('üìà –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ', 'history_profit')
      ],
      [
        Markup.button.callback('üìâ –£–±—ã—Ç–æ—á–Ω—ã–µ', 'history_loss'),
        Markup.button.callback('üìÖ –ü–æ –¥–∞—Ç–∞–º', 'history_dates')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'exchange')]
    ]);
    
    let message = `üìã *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ–±–º–µ–Ω–æ–≤*\n\n`;
    
    if (userHistory.length > 0) {
      message += `üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–±–º–µ–Ω–æ–≤:*\n\n`;
      
      userHistory.forEach((exchange, index) => {
        const date = new Date(exchange.timestamp || new Date()).toLocaleString('ru-RU');
        const magnuStarsoinsAmount = exchange.magnuStarsoinsAmount || 0;
        const starsReceived = exchange.starsReceived || 0;
        const commission = exchange.commission || 0;
        const profit = starsReceived - (magnuStarsoinsAmount * 0.001); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
        const profitIcon = profit >= 0 ? 'üìà' : 'üìâ';
        
        message += `${index + 1}. ${date}\n`;
        message += `‚îú üí± ${magnuStarsoinsAmount} Stars ‚Üí ${starsReceived.toFixed(6)} Stars\n`;
        message += `‚îú üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${commission.toFixed(2)} Stars\n`;
        message += `‚îî ${profitIcon} –ü—Ä–∏–±—ã–ª—å: ${profit >= 0 ? '+' : ''}${profit.toFixed(6)} Stars\n\n`;
      });
      
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const totalExchanged = userHistory.reduce((sum, h) => sum + (h.magnuStarsoinsAmount || 0), 0);
      const totalStars = userHistory.reduce((sum, h) => sum + (h.starsReceived || 0), 0);
      const totalCommission = userHistory.reduce((sum, h) => sum + (h.commission || 0), 0);
      
      message += `üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
      message += `‚îú üí± –í—Å–µ–≥–æ –æ–±–º–µ–Ω–µ–Ω–æ: \`${formatNumber(totalExchanged)}\` Stars\n`;
      message += `‚îú ‚≠ê –ü–æ–ª—É—á–µ–Ω–æ Stars: \`${formatNumber(totalStars)}\`\n`;
      message += `‚îî üí∏ –£–ø–ª–∞—á–µ–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: \`${formatNumber(totalCommission)}\` Stars\n`;
    } else {
      message += `‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤\n`;
      message += `üí° –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –æ–±–º–µ–Ω, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!`;
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂–∏
async function showExchangeSettings(ctx, user) {
  try {
    log(`‚öôÔ∏è –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'exchange_notifications'),
        Markup.button.callback('üìä –ê–≤—Ç–æ–æ–±–º–µ–Ω', 'exchange_auto')
      ],
      [
        Markup.button.callback('üéØ –õ–∏–º–∏—Ç—ã', 'exchange_limits'),
        Markup.button.callback('üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'exchange_security')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'exchange')]
    ]);
    
    const message = 
      `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏*\n\n` +
      `üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n` +
      `‚îú –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞: ${user.exchangeSettings?.priceAlerts ? '‚úÖ' : '‚ùå'}\n` +
      `‚îú –£—Å–ø–µ—à–Ω—ã–µ –æ–±–º–µ–Ω—ã: ${user.exchangeSettings?.successAlerts ? '‚úÖ' : '‚ùå'}\n` +
      `‚îî –û—à–∏–±–∫–∏ –æ–±–º–µ–Ω–∞: ${user.exchangeSettings?.errorAlerts ? '‚úÖ' : '‚ùå'}\n\n` +
      `üìä *–ê–≤—Ç–æ–æ–±–º–µ–Ω:*\n` +
      `‚îú –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω: ${user.exchangeSettings?.autoExchange ? '‚úÖ' : '‚ùå'}\n` +
      `‚îú –õ–∏–º–∏—Ç –∞–≤—Ç–æ–±–º–µ–Ω–∞: \`${user.exchangeSettings?.autoLimit || 0}\` Stars\n` +
      `‚îî –¶–µ–ª–µ–≤–æ–π –∫—É—Ä—Å: \`${user.exchangeSettings?.targetRate || 0}\` Stars\n\n` +
      `üéØ *–õ–∏–º–∏—Ç—ã:*\n` +
      `‚îú –ú–∞–∫—Å–∏–º—É–º –∑–∞ —Ä–∞–∑: \`${user.exchangeSettings?.maxAmount || '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ'}\` Stars\n` +
      `‚îú –ú–∏–Ω–∏–º—É–º –∑–∞ —Ä–∞–∑: \`${user.exchangeSettings?.minAmount || 1}\` Stars\n` +
      `‚îî –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: \`${user.exchangeSettings?.dailyLimit || '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ'}\` Stars\n\n` +
      `üîí *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*\n` +
      `‚îú –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–º–µ–Ω–æ–≤: ${user.exchangeSettings?.confirmExchanges ? '‚úÖ' : '‚ùå'}\n` +
      `‚îú 2FA –¥–ª—è –æ–±–º–µ–Ω–æ–≤: ${user.exchangeSettings?.require2FA ? '‚úÖ' : '‚ùå'}\n` +
      `‚îî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ${user.exchangeSettings?.logExchanges ? '‚úÖ' : '‚ùå'}\n\n` +
      `üí° –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –±–∏—Ä–∂–∏
async function showExchangeNews(ctx, user) {
  try {
    log(`üì∞ –ü–æ–∫–∞–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –±–∏—Ä–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', 'news_analytics'),
        Markup.button.callback('üìä –û—Ç—á–µ—Ç—ã', 'news_reports')
      ],
      [
        Markup.button.callback('üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'news_updates'),
        Markup.button.callback('üì∞ –ù–æ–≤–æ—Å—Ç–∏', 'news_latest')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'exchange')]
    ]);
    
    const currentRate = await calculateExchangeRate();
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const magnuStarsoinsReserve = reserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS;
    
    const message = 
      `üì∞ *–ù–æ–≤–æ—Å—Ç–∏ Magnum Exchange*\n\n` +
      `üìÖ *${new Date().toLocaleDateString('ru-RU')}*\n\n` +
      `üìà *–†—ã–Ω–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:*\n` +
      `‚îú –ö—É—Ä—Å Magnum Coin —Å—Ç–∞–±–∏–ª–µ–Ω\n` +
      `‚îú –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏: \`${formatNumber(magnuStarsoinsReserve)}\` Stars\n` +
      `‚îî –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${((magnuStarsoinsReserve / config.INITIAL_RESERVE_MAGNUM_COINS) * 100).toFixed(1)}%\n\n` +
      `üîî *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:*\n` +
      `‚îú ‚úÖ –£–ª—É—á—à–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n` +
      `‚îú ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n` +
      `‚îú ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±–º–µ–Ω–æ–≤\n` +
      `‚îî ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω —Ä–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏\n\n` +
      `üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:*\n` +
      `‚îú –¢—Ä–µ–Ω–¥: ${currentRate > 0.001 ? 'üìà –†–∞—Å—Ç—É—â–∏–π' : 'üìâ –ü–∞–¥–∞—é—â–∏–π'}\n` +
      `‚îú –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: –ù–∏–∑–∫–∞—è\n` +
      `‚îî –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${currentRate > 0.001 ? '–ü–æ–∫—É–ø–∞—Ç—å' : '–ü—Ä–æ–¥–∞–≤–∞—Ç—å'}\n\n` +
      `üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –±–∏—Ä–∂–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π');
  }
}

async function performExchange(ctx, user, amount) {
  try {
    log(`üí± –ü–æ–ø—ã—Ç–∫–∞ –æ–±–º–µ–Ω–∞ ${amount} Stars –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (amount > user.magnuStarsoins) {
      log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –¥–ª—è –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    if (amount <= 0) {
      log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞!');
      return;
    }
    

    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    const exchangeRate = await calculateExchangeRate();
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
    const commission = (amount * config.EXCHANGE_COMMISSION) / 100;
    const amountAfterCommission = amount - commission;
    const starsToReceive = amountAfterCommission * exchangeRate;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤ Stars
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const availableStars = reserve?.stars || config.INITIAL_RESERVE_STARS;
    
    if (starsToReceive > availableStars) {
      log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –≤ —Ä–µ–∑–µ—Ä–≤–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –≤ —Ä–µ–∑–µ—Ä–≤–µ –¥–ª—è –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnuStarsoins: -amount,
          stars: starsToReceive,
          'exchange.totalExchanges': 1,
          'exchange.totalExchanged': amount,
          'statistics.totalActions': 1
        },
        $set: { 
          updatedAt: new Date()
        }
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
    // –ö–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ Stars, –∞ –æ–±–º–µ–Ω–Ω–∞—è —Å—É–º–º–∞ —É—Ö–æ–¥–∏—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É Stars
    await db.collection('reserve').updateOne(
      { currency: 'main' },
      { 
        $inc: { 
          magnuStarsoins: commission, // –¢–æ–ª—å–∫–æ –∫–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ Stars
          stars: -starsToReceive    // Stars —É—Ö–æ–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        },
        $set: { 
          updatedAt: new Date()
        }
      }
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±–º–µ–Ω–∞
    await db.collection('exchangeHistory').insertOne({
      userId: user.id,
      magnuStarsoinsAmount: amount,
      starsReceived: starsToReceive,
      exchangeRate: exchangeRate,
      commission: commission,
      timestamp: new Date(),
      userFirstName: user.firstName,
      userUsername: user.username
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫—É—Ä—Å–æ–≤
    await db.collection('exchangeHistory').insertOne({
      type: 'rate_update',
      rate: exchangeRate,
      timestamp: new Date(),
      magnuStarsoinsReserve: reserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS,
      starsReserve: reserve?.stars || config.INITIAL_RESERVE_STARS
    });
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è "–¢—Ä–µ–π–¥–µ—Ä –¥–Ω—è"
    await updateDailyTaskProgress(user, 'daily_exchange', 1);
    
    log(`‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${amount} Stars ‚Üí ${starsToReceive} Stars (–∫—É—Ä—Å: ${exchangeRate}, –∫–æ–º–∏—Å—Å–∏—è: ${commission})`);
    log(`üí∞ –ö–æ–º–∏—Å—Å–∏—è ${commission} Stars –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏`);
    await ctx.reply(
      `‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω! ${formatNumber(amount)} Stars ‚Üí ${formatNumber(starsToReceive)} Stars\nüí∏ –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(commission)} Stars (${config.EXCHANGE_COMMISSION}%)`
    );
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±–∏—Ä–∂–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showExchangeMenu(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω Stars –Ω–∞ Stars');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞');
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞ Stars –Ω–∞ Stars
async function performStarsToStarsExchange(ctx, user, starsAmount) {
  try {
    log(`üí± –ü–æ–ø—ã—Ç–∫–∞ –æ–±–º–µ–Ω–∞ ${starsAmount} Stars –Ω–∞ Stars –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (starsAmount > user.stars) {
      log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –¥–ª—è –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    if (starsAmount <= 0) {
      log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    const exchangeRate = await calculateExchangeRate();
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ Stars
    const commission = (starsAmount * config.EXCHANGE_COMMISSION) / 100;
    const starsAfterCommission = starsAmount - commission;
    const StarsToReceive = starsAfterCommission / exchangeRate;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤ Stars
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const availableStars = reserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS;
    
    if (StarsToReceive > availableStars) {
      log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –≤ —Ä–µ–∑–µ—Ä–≤–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –≤ —Ä–µ–∑–µ—Ä–≤–µ –¥–ª—è –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          stars: -starsAmount,
          magnuStarsoins: StarsToReceive,
          'exchange.totalExchanges': 1,
          'exchange.totalExchanged': StarsToReceive,
          'statistics.totalActions': 1
        },
        $set: { 
          updatedAt: new Date()
        }
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
    // –ö–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ Stars, –∞ –æ–±–º–µ–Ω–Ω–∞—è —Å—É–º–º–∞ —É—Ö–æ–¥–∏—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É Stars
    await db.collection('reserve').updateOne(
      { currency: 'main' },
      { 
        $inc: { 
          stars: commission, // –¢–æ–ª—å–∫–æ –∫–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ Stars
          magnuStarsoins: -StarsToReceive    // Stars —É—Ö–æ–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        },
        $set: { 
          updatedAt: new Date()
        }
      }
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±–º–µ–Ω–∞
    await db.collection('exchangeHistory').insertOne({
      userId: user.id,
      starsAmount: starsAmount,
      magnuStarsoinsReceived: StarsToReceive,
      exchangeRate: exchangeRate,
      commission: commission,
      commissionType: 'stars',
      timestamp: new Date(),
      userFirstName: user.firstName,
      userUsername: user.username
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫—É—Ä—Å–æ–≤
    await db.collection('exchangeHistory').insertOne({
      type: 'rate_update',
      rate: exchangeRate,
      timestamp: new Date(),
      magnuStarsoinsReserve: reserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS,
      starsReserve: reserve?.stars || config.INITIAL_RESERVE_STARS
    });
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è "–¢—Ä–µ–π–¥–µ—Ä –¥–Ω—è"
    await updateDailyTaskProgress(user, 'daily_exchange', 1);
    
    log(`‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${starsAmount} Stars ‚Üí ${StarsToReceive} Stars (–∫—É—Ä—Å: ${exchangeRate}, –∫–æ–º–∏—Å—Å–∏—è: ${commission} Stars)`);
    log(`üí∞ –ö–æ–º–∏—Å—Å–∏—è ${commission} Stars –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏`);
    await ctx.reply(
      `‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω! ${formatNumber(starsAmount)} Stars ‚Üí ${formatNumber(StarsToReceive)} Stars\nüí∏ –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(commission)} Stars (${config.EXCHANGE_COMMISSION}%)`
    );
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±–∏—Ä–∂–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showExchangeMenu(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω –≤–∞–ª—é—Ç');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Å—É–º–º—ã Stars –¥–ª—è –æ–±–º–µ–Ω–∞
async function handleExchangeCustomStars(ctx, user, text) {
  try {
    log(`ü™ô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É Stars –¥–ª—è –æ–±–º–µ–Ω–∞: "${text}"`);
    
    const amount = parseFloat(text);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    if (amount > user.magnuStarsoins) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars! –£ –≤–∞—Å: ${formatNumber(user.magnuStarsoins)} Stars`);
      return;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
    await performExchange(ctx, user, amount);
    
  } catch (error) {
    logError(error, `–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã Stars –¥–ª—è –æ–±–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Å—É–º–º—ã Stars –¥–ª—è –æ–±–º–µ–Ω–∞
async function handleExchangeCustomStars(ctx, user, text) {
  try {
    log(`‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É Stars –¥–ª—è –æ–±–º–µ–Ω–∞: "${text}"`);
    
    const amount = parseFloat(text);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    if (amount > user.stars) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars! –£ –≤–∞—Å: ${formatNumber(user.stars)} Stars`);
      return;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
    await performStarsToStarsExchange(ctx, user, amount);
    
  } catch (error) {
    logError(error, `–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã Stars –¥–ª—è –æ–±–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// ==================== –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ====================
// –§—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω—ã
function getAchievementsList(user) {
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  const farStarsount = user.farm?.farStarsount || 0;
  const magnuStarsoins = user.magnuStarsoins || 0;
  const level = user.level || 1;
  const referralsCount = user.referralsCount || 0;
  const dailyStreak = user.dailyBonus?.streak || 0;
  const totalExchanges = user.exchange?.totalExchanges || 0;
  
  return [
    {
      id: 'first_farm',
      title: 'üåæ –ü–µ—Ä–≤—ã–π —Ñ–∞—Ä–º',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∞—Ä–º',
      condition: farStarsount >= 1,
      progress: farStarsount,
      target: 1,
      reward: '10 Stars'
    },
    {
      id: 'farm_master',
      title: 'üëë –ú–∞—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 100 —Ñ–∞—Ä–º–æ–≤',
      condition: farStarsount >= 100,
      progress: farStarsount,
      target: 100,
      reward: '500 Stars'
    },
    {
      id: 'magnum_collector',
      title: 'ü™ô –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä Magnum',
      description: '–ù–∞–∫–æ–ø–∏—Ç–µ 1000 Stars',
      condition: magnuStarsoins >= 1000,
      progress: magnuStarsoins,
      target: 1000,
      reward: '200 Stars'
    },
    {
      id: 'exchange_trader',
      title: 'üí± –¢—Ä–µ–π–¥–µ—Ä',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 50 –æ–±–º–µ–Ω–æ–≤',
      condition: totalExchanges >= 50,
      progress: totalExchanges,
      target: 50,
      reward: '300 Stars'
    },
    {
      id: 'level_10',
      title: '‚≠ê –£—Ä–æ–≤–µ–Ω—å 10',
      description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è',
      condition: level >= 10,
      progress: level,
      target: 10,
      reward: '100 Stars'
    },
    {
      id: 'level_50',
      title: '‚≠ê‚≠ê –£—Ä–æ–≤–µ–Ω—å 50',
      description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 50 —É—Ä–æ–≤–Ω—è',
      condition: level >= 50,
      progress: level,
      target: 50,
      reward: '1000 Stars'
    },
    {
      id: 'referral_king',
      title: 'üë• –ö–æ—Ä–æ–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
      description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
      condition: referralsCount >= 10,
      progress: referralsCount,
      target: 10,
      reward: '400 Stars'
    },
    {
      id: 'daily_streak',
      title: 'üî• –°–µ—Ä–∏—è –¥–Ω–µ–π',
      description: '–ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
      condition: dailyStreak >= 7,
      progress: dailyStreak,
      target: 7,
      reward: '150 Stars'
    }
  ];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
async function checkAndUpdateAchievements(user) {
  try {
    log(`üèÜ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const achievements = getAchievementsList(user);
    const userAchievements = user.achievements || [];
    const userAchievementsProgress = user.achievementsProgress || {};
    
    let newAchievements = [];
    let totalReward = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    for (const achievement of achievements) {
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
      if (achievement.condition && !userAchievements.includes(achievement.id)) {
        newAchievements.push(achievement);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        const rewardAmount = parseInt(achievement.reward.split(' ')[0]);
        totalReward += rewardAmount;
        
        log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.title} (${achievement.reward})`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      userAchievementsProgress[achievement.id] = {
        progress: achievement.progress,
        target: achievement.target,
        completed: achievement.condition,
        lastUpdated: new Date()
      };
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –≤—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    if (newAchievements.length > 0) {
      await db.collection('users').updateOne(
        { id: user.id },
        { 
          $inc: { 
            magnuStarsoins: totalReward,
            totalEarnedMagnuStarsoins: totalReward,
            experience: Math.floor(totalReward * 5),
            achievementsCount: newAchievements.length
          },
          $push: { 
            achievements: { $each: newAchievements.map(a => a.id) }
          },
          $set: { 
            achievementsProgress: userAchievementsProgress,
            updatedAt: new Date()
          }
        }
      );
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à
      userCache.delete(user.id);
      
      log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –ø–æ–ª—É—á–∏–ª ${newAchievements.length} –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –Ω–∞–≥—Ä–∞–¥–∞: ${totalReward} Stars`);
      
      return {
        newAchievements,
        totalReward,
        totalAchievements: (user.achievements || []).length + newAchievements.length
      };
    }
    
    return {
      newAchievements: [],
      totalReward: 0,
      totalAchievements: user.achievements?.length || 0
    };
    
  } catch (error) {
    logError(error, `–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    return {
      newAchievements: [],
      totalReward: 0,
      totalAchievements: user.achievements?.length || 0
    };
  }
}
async function showAchievementsProgress(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const achievements = getAchievementsList(user);
    const completedAchievements = achievements.filter(a => a.condition);
    const totalAchievements = achievements.length;
    const completionRate = Math.round((completedAchievements.length / totalAchievements) * 100);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º', 'achievements')]
    ]);
    
    let message = `üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π*\n\n`;
    message += `üìà *–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:* ${completedAchievements.length}/${totalAchievements} (${completionRate}%)\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    message += `üéØ *–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n\n`;
    
    achievements.forEach((achievement, index) => {
      const status = achievement.condition ? '‚úÖ' : 'üîÑ';
      const progressPercent = Math.min(Math.round((achievement.progress / achievement.target) * 100), 100);
      const progressBar = createProgressBar(progressPercent);
      
      message += `${status} *${achievement.title}*\n`;
      message += `‚îî ${achievement.description}\n`;
      message += `‚îî –ü—Ä–æ–≥—Ä–µ—Å—Å: \`${achievement.progress}/${achievement.target}\` (${progressPercent}%)\n`;
      message += `‚îî ${progressBar}\n\n`;
    });
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
  }
}

async function showAchievementsRewards(ctx, user) {
  try {
    log(`üéÅ –ü–æ–∫–∞–∑ –Ω–∞–≥—Ä–∞–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const achievements = getAchievementsList(user);
    const completedAchievements = achievements.filter(a => a.condition);
    const totalRewards = completedAchievements.reduce((sum, a) => {
      const rewardAmount = parseInt(a.reward.split(' ')[0]);
      return sum + rewardAmount;
    }, 0);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º', 'achievements')]
    ]);
    
    let message = `üéÅ *–ù–∞–≥—Ä–∞–¥—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π*\n\n`;
    message += `üí∞ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: \`${completedAchievements.length}\`\n`;
    message += `‚îú –í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: \`${totalRewards} Stars\`\n`;
    message += `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${completedAchievements.length > 0 ? Math.round(totalRewards / completedAchievements.length) : 0} Stars\`\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    message += `üèÜ *–ù–∞–≥—Ä–∞–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n\n`;
    
    const categories = {
      'üåæ –§–∞—Ä–º': achievements.filter(a => a.id.includes('farm')),
      'ü™ô Magnum Coins': achievements.filter(a => a.id.includes('magnum')),
      'üí± –û–±–º–µ–Ω': achievements.filter(a => a.id.includes('exchange')),
      '‚≠ê –£—Ä–æ–≤–Ω–∏': achievements.filter(a => a.id.includes('level')),
      'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã': achievements.filter(a => a.id.includes('referral')),
      'üî• –°–µ—Ä–∏–∏': achievements.filter(a => a.id.includes('daily'))
    };
    
    Object.entries(categories).forEach(([category, categoryAchievements]) => {
      if (categoryAchievements.length > 0) {
        const completed = categoryAchievements.filter(a => a.condition);
        const totalReward = completed.reduce((sum, a) => {
          const rewardAmount = parseInt(a.reward.split(' ')[0]);
          return sum + rewardAmount;
        }, 0);
        
        message += `*${category}:*\n`;
        message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ: \`${completed.length}/${categoryAchievements.length}\`\n`;
        message += `‚îî –ù–∞–≥—Ä–∞–¥—ã: \`${totalReward} Stars\`\n\n`;
      }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Å–∞–º—ã—Ö —Ü–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const valuableAchievements = achievements
      .filter(a => !a.condition)
      .sort((a, b) => {
        const rewardA = parseInt(a.reward.split(' ')[0]);
        const rewardB = parseInt(b.reward.split(' ')[0]);
        return rewardB - rewardA;
      })
      .slice(0, 3);
    
    if (valuableAchievements.length > 0) {
      message += `üíé *–°–∞–º—ã–µ —Ü–µ–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ:*\n`;
      valuableAchievements.forEach((achievement, index) => {
        const rewardAmount = parseInt(achievement.reward.split(' ')[0]);
        message += `${index + 1}. ${achievement.title} - \`${achievement.reward}\`\n`;
      });
      message += `\n`;
    }
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞–≥—Ä–∞–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≥—Ä–∞–¥');
  }
}
function createProgressBar(percent) {
  const filled = Math.round(percent / 10);
  const empty = 10 - filled;
  return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
}
// ==================== –†–ï–§–ï–†–ê–õ–´ ====================
async function showReferralsMenu(ctx, user) {
  try {
    log(`üë• –ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', 'referral_link'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'referral_stats')
      ],
      [
        Markup.button.callback('üéÅ –ù–∞–≥—Ä–∞–¥—ã', 'referral_rewards'),
        Markup.button.callback('üë• –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', 'referral_list')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\n` +
      `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${user.referralsCount || 0}\`\n` +
      `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(user.referralsEarnings || 0)}\` Stars\n` +
      `‚îî –£—Ä–æ–≤–µ–Ω—å: \`${getReferralLevel(user.referralsCount || 0)}\`\n\n` +
      `üí∞ *–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n` +
      `‚îú –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: \`${config.REFERRAL_REWARD || 10}\` Stars\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`50\` Stars\n` +
      `‚îî –ë–æ–Ω—É—Å –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`100\` Stars\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
}

async function showReferralLink(ctx, user) {
  try {
    log(`üîó –ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const botUsername = (await ctx.telegram.getMe()).username;
    const referralLink = `https://t.me/${botUsername}?start=${user.id}`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.url('üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É', referralLink),
        Markup.button.callback('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 'copy_referral_link')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'referrals')]
    ]);
    
    const message = 
      `üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞*\n\n` +
      `üìù *–°—Å—ã–ª–∫–∞:*\n` +
      `\`${referralLink}\`\n\n` +
      `üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n` +
      `‚îú –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º\n` +
      `‚îú –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω—É—Ç –≤–∞—à–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏\n` +
      `‚îî –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n` +
      `üí∞ *–ù–∞–≥—Ä–∞–¥–∞:* \`${config.REFERRAL_REWARD || 10}\` Stars –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏');
  }
}
async function showReferralStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const referrals = await db.collection('users').find(
      { referrerId: user.id },
      { projection: { id: 1, firstName: 1, username: 1, level: 1, createdAt: 1 } }
    ).toArray();
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'referrals')]
    ]);
    
    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n`;
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚îú –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${user.referralsCount || 0}\`\n`;
    message += `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(user.referralsEarnings || 0)}\` Stars\n`;
    message += `‚îú –£—Ä–æ–≤–µ–Ω—å: \`${getReferralLevel(user.referralsCount || 0)}\`\n`;
    message += `‚îî –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${referrals.length > 0 ? Math.round(referrals.reduce((sum, r) => sum + (r.level || 1), 0) / referrals.length) : 0}\`\n\n`;
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–∏–º –±–æ–Ω—É—Å–∞–º
    const nextBonus5 = 5 - (user.referralsCount || 0);
    const nextBonus10 = 10 - (user.referralsCount || 0);
    
    message += `üéØ *–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –±–æ–Ω—É—Å–∞–º:*\n`;
    if (nextBonus5 > 0) {
      message += `‚îú –î–æ –±–æ–Ω—É—Å–∞ –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${nextBonus5}\` —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
    } else {
      message += `‚îú ‚úÖ –ë–æ–Ω—É—Å –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω\n`;
    }
    
    if (nextBonus10 > 0) {
      message += `‚îî –î–æ –±–æ–Ω—É—Å–∞ –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${nextBonus10}\` —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
    } else {
      message += `‚îî ‚úÖ –ë–æ–Ω—É—Å –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω\n`;
    }
    
    message += `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}
async function showReferralRewards(ctx, user) {
  try {
    log(`üéÅ –ü–æ–∫–∞–∑ –Ω–∞–≥—Ä–∞–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'referrals')]
    ]);
    
    const referralReward = config.REFERRAL_REWARD || 10;
    const totalEarnings = user.referralsEarnings || 0;
    const referralsCount = user.referralsCount || 0;
    
    let message = `üéÅ *–ù–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n`;
    
    // –¢–µ–∫—É—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
    message += `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n`;
    message += `‚îú –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: \`${referralReward}\` Stars\n`;
    message += `‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarnings)}\` Stars\n`;
    message += `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${referralsCount > 0 ? Math.round(totalEarnings / referralsCount) : 0}\` Stars\n\n`;
    
    // –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤
    message += `üèÜ *–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤:*\n`;
    message += `‚îú 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`50\` Stars (–±–æ–Ω—É—Å)\n`;
    message += `‚îú 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`100\` Stars (–±–æ–Ω—É—Å)\n`;
    message += `‚îú 25 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`250\` Stars (–±–æ–Ω—É—Å)\n`;
    message += `‚îî 50 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`500\` Stars (–±–æ–Ω—É—Å)\n\n`;
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –±–æ–Ω—É—Å–∞–º
    message += `üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n`;
    const bonuses = [
      { count: 5, reward: 50, achieved: referralsCount >= 5 },
      { count: 10, reward: 100, achieved: referralsCount >= 10 },
      { count: 25, reward: 250, achieved: referralsCount >= 25 },
      { count: 50, reward: 500, achieved: referralsCount >= 50 }
    ];
    
    bonuses.forEach(bonus => {
      const status = bonus.achieved ? '‚úÖ' : 'üîÑ';
      const progress = bonus.achieved ? 
        `–í—ã–ø–æ–ª–Ω–µ–Ω–æ!` : 
        `–û—Å—Ç–∞–ª–æ—Å—å: ${bonus.count - referralsCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`;
      
      message += `${status} ${bonus.count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - \`${bonus.reward}\` Stars\n`;
      message += `‚îî ${progress}\n\n`;
    });
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞–≥—Ä–∞–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≥—Ä–∞–¥');
  }
}

function getReferralLevel(referralsCount) {
  if (referralsCount >= 50) return 'üëë –õ–µ–≥–µ–Ω–¥–∞';
  if (referralsCount >= 25) return '‚≠ê –ú–∞—Å—Ç–µ—Ä';
  if (referralsCount >= 10) return 'üî• –≠–∫—Å–ø–µ—Ä—Ç';
  if (referralsCount >= 5) return 'üíé –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª';
  if (referralsCount >= 1) return 'üå± –ù–æ–≤–∏—á–æ–∫';
  return 'üî∞ –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤';
}
async function showReferralList(ctx, user) {
  try {
    log(`üë• –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const referrals = await db.collection('users').find(
      { referrerId: user.id },
      { 
        projection: { 
          id: 1, 
          firstName: 1, 
          username: 1, 
          level: 1, 
          createdAt: 1,
          stars: 1,
          magnuStarsoins: 1
        },
        sort: { createdAt: -1 }
      }
    ).toArray();
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'referrals')]
    ]);
    
    let message = `üë• *–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n`;
    
    if (referrals.length === 0) {
      message += `üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n`;
      message += `üí° *–ö–∞–∫ –ø—Ä–∏–≤–ª–µ—á—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n`;
      message += `‚îú –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π\n`;
      message += `‚îú –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –¥—Ä—É–∑—å—è–º –æ –±–æ—Ç–µ\n`;
      message += `‚îî –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n`;
    } else {
      message += `üìä *–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:* \`${referrals.length}\`\n\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const recentReferrals = referrals.slice(0, 10);
      message += `üë§ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:*\n\n`;
      
      recentReferrals.forEach((referral, index) => {
        const daysAgo = Math.floor((Date.now() - referral.createdAt.getTime()) / (1000 * 60 * 60 * 24));
        const timeText = daysAgo === 0 ? '—Å–µ–≥–æ–¥–Ω—è' : daysAgo === 1 ? '–≤—á–µ—Ä–∞' : `${daysAgo} –¥–Ω. –Ω–∞–∑–∞–¥`;
        
        message += `${index + 1}. ${referral.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n`;
        message += `‚îú ID: \`${referral.id}\`\n`;
        message += `‚îú –£—Ä–æ–≤–µ–Ω—å: \`${referral.level || 1}\`\n`;
        message += `‚îú –ë–∞–ª–∞–Ω—Å: \`${formatNumber(referral.stars || 0)}\` Stars\n`;
        message += `‚îú Stars: \`${formatNumber(referral.magnuStarsoins || 0)}\`\n`;
        message += `‚îî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${timeText}\n\n`;
      });
      
      if (referrals.length > 10) {
        message += `... –∏ –µ—â–µ \`${referrals.length - 10}\` —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n`;
      }
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const activeReferrals = referrals.filter(r => r.level > 1);
      const totalReferralStars = referrals.reduce((sum, r) => sum + (r.stars || 0), 0);
      const totalReferralMagnum = referrals.reduce((sum, r) => sum + (r.magnuStarsoins || 0), 0);
      
      message += `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: \`${activeReferrals.length}\`\n`;
      message += `‚îú –í—Å–µ–≥–æ Stars —É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${formatNumber(totalReferralStars)}\`\n`;
      message += `‚îî –í—Å–µ–≥–æ Stars —É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${formatNumber(totalReferralMagnum)}\`\n\n`;
    }
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
}

// ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
async function showSettingsMenu(ctx, user) {
  try {
    log(`‚öôÔ∏è –ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'settings_notifications'),
        Markup.button.callback('üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', 'settings_privacy')
      ],
      [
        Markup.button.callback('üåê –Ø–∑—ã–∫', 'settings_language'),
        Markup.button.callback('üîÑ –°–±—Ä–æ—Å', 'settings_reset')
      ],
      [
        Markup.button.callback('üéñ –¢–∏—Ç—É–ª—ã', 'titles'),
        Markup.button.callback('‚öîÔ∏è –†–∞–Ω–≥–∏', 'ranks')
      ],
      [
        Markup.button.callback('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n` +
      `üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* ${settings.notifications !== false ? 'üü¢ –í–∫–ª—é—á–µ–Ω—ã' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã'}\n` +
      `üîí *–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:* ${settings.privacy !== false ? 'üü¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : 'üî¥ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è'}\n` +
      `üåê *–Ø–∑—ã–∫:* ${settings.language === 'en' ? 'üá∫üá∏ English' : 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'}\n\n` +
      `üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

// ==================== –ü–†–û–§–ò–õ–¨ ====================
async function showProfileMenu(ctx, user) {
  try {
    log(`üë§ –ü–æ–∫–∞–∑ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const rankProgress = await getRankProgress(user);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üéñ –¢–∏—Ç—É–ª—ã', 'titles'),
        Markup.button.callback('‚öîÔ∏è –†–∞–Ω–≥–∏', 'ranks')
      ],
      [
        Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'settings_notifications'),
        Markup.button.callback('üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', 'settings_privacy')
      ],
      [
        Markup.button.callback('üåê –Ø–∑—ã–∫', 'settings_language'),
        Markup.button.callback('üîÑ –°–±—Ä–æ—Å', 'settings_reset')
      ],
      [
        Markup.button.callback('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `üë§ *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚îú –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `‚îú Username: ${user.username ? '@' + user.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `‚îú ID: \`${user.id}\`\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å: ${user.level || 1}\n` +
      `‚îú –û–ø—ã—Ç: ${formatNumber(user.experience || 0)}/${formatNumber(getRequiredExperience(user.level || 1))}\n` +
      `‚îî –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.createdAt ? new Date(user.createdAt).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n` +
      `üí∞ *–ë–∞–ª–∞–Ω—Å—ã:*\n` +
      `‚îú ü™ô Magnum Coins: ${formatNumber(user.magnuStarsoins || 0)}\n` +
      `‚îú ‚≠ê Stars: ${formatNumber(user.stars || 0)}\n` +
      `‚îî –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber((user.totalEarnedMagnuStarsoins || 0) + (user.totalEarnedStars || 0))}\n\n` +
      `üéØ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referralsCount || 0}\n` +
      `‚îî –†–∞–Ω–≥: ${rankProgress.current.name}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
  }
}

async function showNotificationSettings(ctx, user) {
  try {
    log(`üîî –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const notificationsEnabled = settings.notifications !== false;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          notificationsEnabled ? 'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üü¢ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
          'toggle_notifications'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')]
    ]);
    
    const message = 
      `üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n` +
      `üì± *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:* ${notificationsEnabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω—ã' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n` +
      `üìã *–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–∞—Ä–º–µ\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞–π–Ω–∏–Ω–≥–µ\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–∞—Ö\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö\n` +
      `‚îî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö\n\n` +
      `üí° *–ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:*\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∞\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –º–∞–π–Ω–µ—Ä–∞\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö\n` +
      `‚îî –î—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
}
async function showPrivacySettings(ctx, user) {
  try {
    log(`üîí –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const privacyEnabled = settings.privacy !== false;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          privacyEnabled ? 'üî¥ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å' : 'üü¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å',
          'toggle_privacy'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')]
    ]);
    
    const message = 
      `üîí *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏*\n\n` +
      `üõ°Ô∏è *–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:* ${privacyEnabled ? 'üü¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : 'üî¥ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è'}\n\n` +
      `üìä *–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:*\n` +
      `‚îú –í–∞—à ID –≤–∏–¥–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n` +
      `‚îú –ò–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å –≤–∏–¥–µ–Ω –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º\n` +
      `‚îî –ë–∞–ª–∞–Ω—Å—ã —Å–∫—Ä—ã—Ç—ã\n\n` +
      `üîí *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:*\n` +
      `‚îú ID —Å–∫—Ä—ã—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n` +
      `‚îú –ò–º—è —Å–∫—Ä—ã—Ç–æ –≤ —Å–ø–∏—Å–∫–∞—Ö\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å —Å–∫—Ä—ã—Ç\n` +
      `‚îî –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
  }
}

async function showLanguageSettings(ctx, user) {
  try {
    log(`üåê –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const currentLanguage = settings.language || 'ru';
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          currentLanguage === 'ru' ? '‚úÖ üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
          'set_language_ru'
        ),
        Markup.button.callback(
          currentLanguage === 'en' ? '‚úÖ üá∫üá∏ English' : 'üá∫üá∏ English',
          'set_language_en'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')]
    ]);
    
    const message = 
      `üåê *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞*\n\n` +
      `üó£Ô∏è *–¢–µ–∫—É—â–∏–π —è–∑—ã–∫:* ${currentLanguage === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∫üá∏ English'}\n\n` +
      `üìù *–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:*\n\n` +
      `üá∑üá∫ *–†—É—Å—Å–∫–∏–π:*\n` +
      `‚îú –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n` +
      `‚îú –í—Å–µ –º–µ–Ω—é –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n` +
      `‚îî –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üá∫üá∏ *English:*\n` +
      `‚îú Full English language support\n` +
      `‚îú All menus and messages in English\n` +
      `‚îî Recommended for English-speaking users\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞');
  }
}
async function showResetSettings(ctx, user) {
  try {
    log(`üîÑ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–±—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'confirm_reset'),
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')
      ]
    ]);
    
    const message = 
      `üîÑ *–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫*\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n` +
      `üóëÔ∏è *–ß—Ç–æ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ:*\n` +
      `‚îú –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n` +
      `‚îú –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏\n` +
      `‚îú –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞\n` +
      `‚îî –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
      `‚úÖ *–ß—Ç–æ –ù–ï –±—É–¥–µ—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ:*\n` +
      `‚îú –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–≥—Ä–µ\n` +
      `‚îú –ë–∞–ª–∞–Ω—Å—ã (Stars, Stars)\n` +
      `‚îú –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã\n` +
      `‚îî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É—Ä–æ–≤–µ–Ω—å\n\n` +
      `üí° *–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:*\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã\n` +
      `‚îú –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π\n` +
      `‚îî –Ø–∑—ã–∫ –±—É–¥–µ—Ç —Ä—É—Å—Å–∫–∏–π\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–±—Ä–æ—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–±—Ä–æ—Å–∞');
  }
}

async function toggleNotificationSetting(ctx, user) {
  try {
    log(`üîî –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const newNotificationState = settings.notifications === false ? true : false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'settings.notifications': newNotificationState,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    const status = newNotificationState ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã';
    log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    await ctx.answerCbQuery(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status}!`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showNotificationSettings(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

async function togglePrivacySetting(ctx, user) {
  try {
    log(`üîí –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const newPrivacyState = settings.privacy === false ? true : false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'settings.privacy': newPrivacyState,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    const status = newPrivacyState ? '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : '—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è';
    log(`‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${status} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    await ctx.answerCbQuery(`‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: ${status}!`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showPrivacySettings(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}
async function setLanguage(ctx, user, language) {
  try {
    log(`üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ ${language} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'settings.language': language,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    const langName = language === 'ru' ? '—Ä—É—Å—Å–∫–∏–π' : 'English';
    log(`‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${langName} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    await ctx.answerCbQuery(`‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${langName}!`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showLanguageSettings(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞');
  }
}

async function resetUserSettings(ctx, user) {
  try {
    log(`üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'settings': {
            notifications: true,
            privacy: true,
            language: 'ru'
          },
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    await ctx.answerCbQuery('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showSettingsMenu(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}
// ==================== –ó–ê–î–ê–ù–ò–Ø ====================
async function showTasksMenu(ctx, user) {
  try {
    log(`üìã –ü–æ–∫–∞–∑ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const tasks = user.tasks || {};
    const completedTasks = tasks.completedTasks || 0;
    const totalEarnings = tasks.totalTaskEarnings || 0;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å RichAds –æ—Ñ—Ñ–µ—Ä–æ–≤
    const sponsorTasks = await getRichAdsTasks();
    log(`üìã –ü–æ–ª—É—á–µ–Ω—ã RichAds –æ—Ñ—Ñ–µ—Ä—ã: ${sponsorTasks.length} –æ—Ñ—Ñ–µ—Ä–æ–≤`);
    
    const userSponsorTasks = tasks.sponsorTasks || {};
    const completedSponsorTasks = Object.values(userSponsorTasks).filter(task => task && task.completed).length;
    const totalSponsorTasks = sponsorTasks.length;
    
    log(`üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RichAds –æ—Ñ—Ñ–µ—Ä–æ–≤: ${completedSponsorTasks}/${totalSponsorTasks} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
    
    let sponsorStatus = '';
    if (completedSponsorTasks === 0) {
      sponsorStatus = 'üîÑ';
    } else if (completedSponsorTasks === totalSponsorTasks) {
      sponsorStatus = '‚úÖ';
    } else {
      sponsorStatus = 'üéÅ';
    }
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(`${sponsorStatus} RichAds –æ—Ñ—Ñ–µ—Ä—ã`, 'tasks_sponsor'),
        Markup.button.callback('üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', 'tasks_daily')
      ],
      [
        Markup.button.callback('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', 'tasks_progress'),
        Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'tasks_achievements')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üìã *–°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π*\n\n` +
      `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: \`${completedTasks}\`\n` +
      `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarnings)}\` Stars\n` +
      `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${completedTasks > 0 ? formatNumber(totalEarnings / completedTasks) : '0.00'}\` Stars\n\n` +
      `üéØ *–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:*\n` +
      `‚îú üéØ RichAds –æ—Ñ—Ñ–µ—Ä—ã (–ø–æ–¥–ø–∏—Å–∫–∏, —É—Å—Ç–∞–Ω–æ–≤–∫–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)\n` +
      `‚îú üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (—Ñ–∞—Ä–º, –º–∞–π–Ω–∏–Ω–≥, –±–æ–Ω—É—Å—ã)\n` +
      `‚îî üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏)\n\n` +
      `üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π:*\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ú–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π');
    log(`‚ùå –û—à–∏–±–∫–∞ –≤ showTasksMenu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${error.message}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π');
  }
}

async function showSponsorTasks(ctx, user) {
  try {
    logAction(user.id, 'showSponsorTasks', '–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ RichAds –æ—Ñ—Ñ–µ—Ä–æ–≤');
    log(`üéØ –ü–æ–∫–∞–∑ RichAds –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = await getRichAdsTasks();
    logAction(user.id, 'getRichAdsTasks', { count: sponsorTasks.length, offers: sponsorTasks.map(o => ({ id: o.id, title: o.title })) });
    log(`üéØ –ü–æ–ª—É—á–µ–Ω—ã RichAds –æ—Ñ—Ñ–µ—Ä—ã: ${sponsorTasks.length} –æ—Ñ—Ñ–µ—Ä–æ–≤`);
    
    const userTasks = user.tasks?.sponsorTasks || {};
    log(`üéØ –û—Ñ—Ñ–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(userTasks)}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ñ—Ñ–µ—Ä
    const firstUncompletedTask = sponsorTasks.find(task => {
      const userTask = userTasks[task.id];
      // –ï—Å–ª–∏ –æ—Ñ—Ñ–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ userTasks –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω/–Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞
      return !userTask || !userTask.completed || !userTask.claimed;
    });
    
    if (firstUncompletedTask) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ñ—Ñ–µ—Ä
      logAction(user.id, 'showFirstUncompletedTask', { taskId: firstUncompletedTask.id, taskTitle: firstUncompletedTask.title });
      await showSponsorTaskDetails(ctx, user, firstUncompletedTask.id);
    } else {
      // –í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
      const taskButtons = [];
      sponsorTasks.forEach((task, index) => {
        const userTask = userTasks[task.id];
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –æ—Ñ—Ñ–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ userTasks –∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        if (userTask && userTask.completed && userTask.claimed) {
          taskButtons.push([
            Markup.button.callback(`‚úÖ ${task.title} (–ó–∞–≤–µ—Ä—à–µ–Ω–æ)`, `sponsor_task_${task.id}`)
          ]);
        }
      });
      
      taskButtons.push([
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks')
      ]);
      
      const keyboard = Markup.inlineKeyboard(taskButtons);
      
      let message = `‚úÖ *–í—Å–µ RichAds –æ—Ñ—Ñ–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!*\n\n`;
      message += `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ RichAds –æ—Ñ—Ñ–µ—Ä—ã.\n\n`;
      
      sponsorTasks.forEach((task, index) => {
        const userTask = userTasks[task.id];
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –æ—Ñ—Ñ–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ userTasks –∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        if (userTask && userTask.completed && userTask.claimed) {
          const rewardText = task.rewardType === 'stars' ? `${task.reward} ‚≠ê Stars` : `${task.reward} ü™ô Magnum Coins`;
          message += `‚úÖ *${escapeMarkdown(task.title)}*\n`;
          message += `‚îú –ù–∞–≥—Ä–∞–¥–∞: \`${escapeMarkdown(rewardText)}\` ‚úÖ –ü–æ–ª—É—á–µ–Ω–∞\n`;
          message += `‚îî –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${escapeMarkdown(task.difficulty)}\n\n`;
        }
      });
      
      message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    }
    
    logAction(user.id, 'showSponsorTasks', '–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    log(`‚úÖ RichAds –æ—Ñ—Ñ–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    logErrorWithContext(error, 'showSponsorTasks', user.id);
    logError(error, '–ü–æ–∫–∞–∑ RichAds –æ—Ñ—Ñ–µ—Ä–æ–≤');
    log(`‚ùå –û—à–∏–±–∫–∞ –≤ showSponsorTasks –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${error.message}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RichAds –æ—Ñ—Ñ–µ—Ä–æ–≤');
  }
}
async function showSponsorTaskDetails(ctx, user, taskId) {
  try {
    logAction(user.id, 'showSponsorTaskDetails', { taskId, action: '–Ω–∞—á–∞–ª–æ' });
    log(`üéØ –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π RichAds –æ—Ñ—Ñ–µ—Ä–∞ ${taskId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = await getRichAdsTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    logAction(user.id, 'findTaskInDetails', { taskId, taskFound: !!task, taskTitle: task?.title });
    
    if (!task) {
      logAction(user.id, 'taskNotFoundInDetails', { taskId });
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    const userTasks = user.tasks?.sponsorTasks || {};
    const userTask = userTasks[taskId] || {};
    const isCompleted = userTask.completed || false;
    const isClaimed = userTask.claimed || false;
    const hasScreenshot = userTask.screenshot || false;
    
    // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –ø–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞)
    if (isCompleted && isClaimed) {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks_sponsor')]
      ]);
      
      const rewardText = task.rewardType === 'stars' ? `${task.reward} ‚≠ê Stars` : `${task.reward} ü™ô Magnum Coins`;
      
      let message = `‚úÖ *${escapeMarkdown(task.title)}*\n\n`;
      message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${escapeMarkdown(task.description)}\n\n`;
      message += `üí∞ *–ù–∞–≥—Ä–∞–¥–∞:* \`${escapeMarkdown(rewardText)}\` ‚úÖ –ü–æ–ª—É—á–µ–Ω–∞\n`;
      message += `‚≠ê *–°–ª–æ–∂–Ω–æ—Å—Ç—å:* ${escapeMarkdown(task.difficulty)}\n`;
      message += `‚è∞ *–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${escapeMarkdown(task.estimatedTime)}\n\n`;
      message += `üéâ *–ó–∞–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\\!*\n`;
      message += `‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–¥–æ–±—Ä–µ–Ω\n`;
      message += `üéÅ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞\n`;
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
      return;
    }
    
    // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –Ω–∞–≥—Ä–∞–¥–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
    if (isCompleted && !isClaimed) {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É', `claim_sponsor_${taskId}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks_sponsor')]
      ]);
      
      const rewardText = task.rewardType === 'stars' ? `${task.reward} ‚≠ê Stars` : `${task.reward} ü™ô Magnum Coins`;
      
      let message = `üéÅ *${escapeMarkdown(task.title)}*\n\n`;
      message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${escapeMarkdown(task.description)}\n\n`;
      message += `üí∞ *–ù–∞–≥—Ä–∞–¥–∞:* \`${escapeMarkdown(rewardText)}\` üéÅ –ì–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é\n`;
      message += `‚≠ê *–°–ª–æ–∂–Ω–æ—Å—Ç—å:* ${escapeMarkdown(task.difficulty)}\n`;
      message += `‚è∞ *–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${escapeMarkdown(task.estimatedTime)}\n\n`;
      message += `‚úÖ *–°–∫—Ä–∏–Ω—à–æ—Ç –æ–¥–æ–±—Ä–µ–Ω\\!*\n`;
      message += `üéÅ –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n`;
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
      return;
    }
    
    // –ï—Å–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω
    if (hasScreenshot && !isCompleted) {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', `verify_sponsor_${taskId}`)],
        [Markup.button.callback('üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç', `send_screenshot_${taskId}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks_sponsor')]
      ]);
      
      const rewardText = task.rewardType === 'stars' ? `${task.reward} ‚≠ê Stars` : `${task.reward} ü™ô Magnum Coins`;
      
      let message = `üì∏ *${escapeMarkdown(task.title)}*\n\n`;
      message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${escapeMarkdown(task.description)}\n\n`;
      message += `üí∞ *–ù–∞–≥—Ä–∞–¥–∞:* \`${escapeMarkdown(rewardText)}\`\n`;
      message += `‚≠ê *–°–ª–æ–∂–Ω–æ—Å—Ç—å:* ${escapeMarkdown(task.difficulty)}\n`;
      message += `‚è∞ *–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${escapeMarkdown(task.estimatedTime)}\n\n`;
      message += `üì∏ *–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω*\n`;
      message += `‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n`;
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
      return;
    }
    
    // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∞—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω
    const allSponsorTasks = await getRichAdsTasks();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    const hasNextTask = allSponsorTasks.some(t => {
      if (t.id === taskId) return false; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
      const userTask = userTasks[t.id] || {};
      return !userTask.completed || !userTask.claimed;
    });
    
    let keyboardButtons = [
      [
        Markup.button.url('üì± –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', task.url),
        Markup.button.callback('üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', `send_screenshot_${taskId}`)
      ]
    ];
    
    if (hasNextTask) {
      keyboardButtons.push([
        Markup.button.callback('‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', 'next_sponsor_task')
      ]);
    }
    
    keyboardButtons.push([
      Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks_sponsor')
    ]);
    
    const keyboard = Markup.inlineKeyboard(keyboardButtons);
    
    const rewardText = task.rewardType === 'stars' ? `${task.reward} ‚≠ê Stars` : `${task.reward} ü™ô Magnum Coins`;
    
    let message = `üîÑ *${escapeMarkdown(task.title)}*\n\n`;
    message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${escapeMarkdown(task.description)}\n\n`;
    message += `üí∞ *–ù–∞–≥—Ä–∞–¥–∞:* \`${escapeMarkdown(rewardText)}\`\n`;
    message += `‚≠ê *–°–ª–æ–∂–Ω–æ—Å—Ç—å:* ${escapeMarkdown(task.difficulty)}\n`;
    message += `‚è∞ *–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${escapeMarkdown(task.estimatedTime)}\n\n`;
    
    if (task.requirements && Array.isArray(task.requirements)) {
      message += `üìã *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*\n`;
      task.requirements.forEach(req => {
        message += `‚îú ${escapeMarkdown(req)}\n`;
      });
      message += `\n`;
    } else if (task.requirements && typeof task.requirements === 'string') {
      message += `üìã *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*\n`;
      message += `‚îú ${escapeMarkdown(task.requirements)}\n\n`;
    }
    
    message += `üîÑ *–°—Ç–∞—Ç—É—Å:* –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
    message += `üì± –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n`;
    
    message += `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    log(`üéØ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${taskId} (–ø–æ–ª–Ω–æ–µ): ${message}`);
    
    try {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      logError(error, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è');
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    }
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç answerCbQuery
    if (ctx.answerCbQuery) {
      try {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞–Ω–∏—è');
      } catch (cbError) {
        logError(cbError, '–û—à–∏–±–∫–∞ answerCbQuery');
      }
    }
  }
}

async function verifySponsorTask(ctx, user, taskId) {
  try {
    log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è RichAds –æ—Ñ—Ñ–µ—Ä–∞ ${taskId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = await getRichAdsTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const userTasks = user.tasks?.sponsorTasks || {};
    const userTask = userTasks[taskId] || {};
    
    if (userTask.completed && userTask.claimed) {
      await ctx.answerCbQuery('‚ùå –û—Ñ—Ñ–µ—Ä —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞');
      return;
    }
    
    if (userTask.completed && !userTask.claimed) {
      await ctx.answerCbQuery('üéÅ –û—Ñ—Ñ–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É');
      return;
    }
    
    if (!userTask.screenshot) {
      await ctx.answerCbQuery('‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤)
    const screenshotTime = userTask.screenshotAt;
    const hoursSinceScreenshot = screenshotTime ? (Date.now() - screenshotTime.getTime()) / (1000 * 60 * 60) : 0;
    
    if (hoursSinceScreenshot > 24) {
      await ctx.answerCbQuery('‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å—Ç–∞—Ä–µ–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç');
      return;
    }
    
    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Ñ—Ñ–µ—Ä —á–µ—Ä–µ–∑ RichAds API
    log(`‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è RichAds –æ—Ñ—Ñ–µ—Ä–∞ ${taskId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const verificationResult = await verifyRichAdsOffer(taskId, user.id);
    
    if (!verificationResult.success) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ñ—Ñ–µ—Ä–∞');
      return;
    }
    
    if (!verificationResult.verified) {
      await ctx.answerCbQuery('‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      return;
    }
    
    // –û—Ç–º–µ—á–∞–µ–º –æ—Ñ—Ñ–µ—Ä –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          [`tasks.sponsorTasks.${taskId}.completed`]: true,
          [`tasks.sponsorTasks.${taskId}.completedAt`]: new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    const rewardText = task.rewardType === 'stars' ? `${task.reward} ‚≠ê Stars` : `${task.reward} ü™ô Magnum Coins`;
    log(`‚úÖ RichAds –æ—Ñ—Ñ–µ—Ä ${taskId} –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}`);
    await ctx.answerCbQuery(`‚úÖ –û—Ñ—Ñ–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω! –ù–∞–≥—Ä–∞–¥–∞: ${rewardText}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä–∞
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showSponsorTaskDetails(ctx, updatedUser, taskId);
    }
  } catch (error) {
    logError(error, '–ü—Ä–æ–≤–µ—Ä–∫–∞ RichAds –æ—Ñ—Ñ–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ñ—Ñ–µ—Ä–∞');
  }
}
async function claimSponsorTask(ctx, user, taskId) {
  try {
    log(`üéÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã RichAds –æ—Ñ—Ñ–µ—Ä–∞ ${taskId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = await getRichAdsTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const userTasks = user.tasks?.sponsorTasks || {};
    const userTask = userTasks[taskId] || {};
    
    if (!userTask.completed) {
      await ctx.answerCbQuery('‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      return;
    }
    
    if (userTask.claimed) {
      await ctx.answerCbQuery('‚ùå –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞');
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ RichAds
    log(`üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ RichAds –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ ${taskId}`);
    const conversionResult = await sendRichAdsConversion(taskId, user.id, 1);
    
    if (!conversionResult.success) {
      log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ RichAds: ${conversionResult.message}`);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–¥–∞—á—É –Ω–∞–≥—Ä–∞–¥—ã –¥–∞–∂–µ –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
    }
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    const rewardType = task.rewardType || 'stars';
    const updateData = { 
      $inc: { 
        'tasks.completedTasks': 1,
        'tasks.totalTaskEarnings': task.reward
      },
      $set: { 
        [`tasks.sponsorTasks.${taskId}.claimed`]: true,
        [`tasks.sponsorTasks.${taskId}.claimedAt`]: new Date(),
        updatedAt: new Date()
      }
    };
    
    if (rewardType === 'stars') {
      updateData.$inc.stars = task.reward;
      updateData.$inc.totalEarnedStars = task.reward;
    } else {
      updateData.$inc.magnuStarsoins = task.reward;
      updateData.$inc.totalEarnedMagnuStarsoins = task.reward;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      updateData
    );
    
    // –£–¥–∞–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $unset: { [`tasks.sponsorTasks.${taskId}`]: "" },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    const rewardText = rewardType === 'stars' ? `${task.reward} ‚≠ê Stars` : `${task.reward} ü™ô Magnum Coins`;
    log(`üéÅ –ù–∞–≥—Ä–∞–¥–∞ RichAds –æ—Ñ—Ñ–µ—Ä–∞ ${taskId} –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}: ${rewardText}`);
    await ctx.answerCbQuery(`üéÅ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! +${rewardText}`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É RichAds –æ—Ñ—Ñ–µ—Ä–æ–≤
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showSponsorTasks(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã RichAds –æ—Ñ—Ñ–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã');
  }
}
async function showDailyTasks(ctx, user) {
  try {
    log(`üìÖ –ü–æ–∫–∞–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const dailyTasks = getDailyTasks();
    const userTasks = user.tasks?.dailyTasks || {};
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
    const buttons = [];
    dailyTasks.forEach((task) => {
      const userTask = userTasks[task.id] || {};
      const progress = userTask.progress || 0;
      const isCompleted = progress >= task.target;
      const isClaimed = userTask.claimed || false;
      
      if (isCompleted && !isClaimed) {
        buttons.push([Markup.button.callback(`üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É: ${task.title}`, `claim_daily_${task.id}`)]);
      }
    });
    
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    let message = `üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*\n\n`;
    message += `üîÑ *–≠—Ç–∏ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!*\n\n`;
    
    dailyTasks.forEach((task, index) => {
      const userTask = userTasks[task.id] || {};
      const progress = userTask.progress || 0;
      const isCompleted = progress >= task.target;
      const isClaimed = userTask.claimed || false;
      const status = isCompleted ? (isClaimed ? '‚úÖ' : 'üéÅ') : 'üîÑ';
      
      message += `${status} *${task.title}*\n`;
      message += `‚îú ${task.description}\n`;
      message += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: \`${progress}/${task.target}\`\n`;
      message += `‚îú –ù–∞–≥—Ä–∞–¥–∞: \`${task.reward}\` Stars\n`;
      message += `‚îî ${isCompleted ? (isClaimed ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –ø–æ–ª—É—á–µ–Ω–æ' : 'üéÅ –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é!') : 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}\n\n`;
    });
    
    message += `üí° *–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:*\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –æ–±—ã—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ\n`;
    message += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n`;
    message += `‚îú –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É\n`;
    message += `‚îî –ó–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n`;
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
async function handleSendScreenshot(ctx, user, taskId) {
  try {
    log(`üì∏ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${taskId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = getSponsorTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    const userTasks = user.tasks?.sponsorTasks || {};
    const userTask = userTasks[taskId] || {};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–æ
    if (userTask.completed && userTask.claimed) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞');
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          adminState: `sending_screenshot_${taskId}`,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    const sponsorChannel = config.SPONSOR_TASK_CHANNEL;
    const sponsorBot = config.SPONSOR_TASK_BOT;
    const botName = sponsorBot.includes('farmikstars_bot') ? 'FarmikBot' : 'SponsorBot';
    
    let message = '';
    if (taskId === 1) {
      message = `üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª ${sponsorChannel}`;
      await ctx.answerCbQuery(`üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ${sponsorChannel}`);
    } else if (taskId === 2) {
      message = `üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${botName} (–∫–Ω–æ–ø–∫–∞ /start)`;
      await ctx.answerCbQuery(`üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${botName}`);
    } else {
      message = `üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è`;
      await ctx.answerCbQuery(`üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è`);
    }
    
    await ctx.reply(message);
  } catch (error) {
    logError(error, '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
async function handleScreenshotUpload(ctx, user, taskId) {
  try {
    log(`üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${taskId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = getSponsorTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
    const photo = ctx.message.photo[ctx.message.photo.length - 1]; // –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    const fileId = photo.file_id;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          [`tasks.sponsorTasks.${taskId}.screenshot`]: true,
          [`tasks.sponsorTasks.${taskId}.screenshotFileId`]: fileId,
          [`tasks.sponsorTasks.${taskId}.screenshotAt`]: new Date(),
          adminState: null,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const supportChannel = config.SUPPORT_CHANNEL;
    if (supportChannel) {
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_screenshot_${user.id}_${taskId}`),
          Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_screenshot_${user.id}_${taskId}`)
        ],
        [
          Markup.button.callback('üö´ –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω', `reject_reason_${user.id}_${taskId}_not_subscribed`),
          Markup.button.callback('üì∏ –ù–µ—á–µ—Ç–∫–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç', `reject_reason_${user.id}_${taskId}_blurry`)
        ],
        [
          Markup.button.callback('üîó –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª', `reject_reason_${user.id}_${taskId}_wrong_channel`),
          Markup.button.callback('‚è∞ –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ', `reject_reason_${user.id}_${taskId}_too_fast`)
        ]
      ]);
      
      const supportMessage = 
        `üì∏ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ*\n\n` +
        `üéØ *–ó–∞–¥–∞–Ω–∏–µ:* ${escapeMarkdown(task.title)}\n` +
        `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${escapeMarkdown(getDisplayName(user))}\n` +
        `üì± *Username:* ${user.username ? '@' + user.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üÜî *User ID:* \`${user.id}\`\n` +
        `üí∞ *–ù–∞–≥—Ä–∞–¥–∞:* ${task.reward} ${task.rewardType === 'stars' ? '‚≠ê Stars' : 'Stars'}\n` +
        `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n` +
        `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
      
      try {
        await ctx.telegram.sendPhoto(supportChannel, fileId, {
          caption: supportMessage,
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        });
        
        log(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ ${taskId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ${supportChannel}`);
      } catch (error) {
        logError(error, `–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ ${taskId} –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏`);
      }
    }
    
    await ctx.reply('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.');
  } catch (error) {
    logError(error, '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async function showNextSponsorTask(ctx, user) {
  try {
    log(`‚è≠Ô∏è –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ RichAds –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = await getRichAdsTasks();
    const userTasks = user.tasks?.sponsorTasks || {};
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ñ—Ñ–µ—Ä
    const nextTask = sponsorTasks.find(task => {
      const userTask = userTasks[task.id] || {};
      return !userTask.completed;
    });
    
    if (nextTask) {
      await showSponsorTaskDetails(ctx, user, nextTask.id);
    } else {
      await ctx.answerCbQuery('üéâ –í—Å–µ RichAds –æ—Ñ—Ñ–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
      await showSponsorTasks(ctx, user);
    }
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ RichAds –æ—Ñ—Ñ–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞');
  }
}

async function showTasksProgress(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const tasks = user.tasks || {};
    const completedTasks = tasks.completedTasks || 0;
    const totalEarnings = tasks.totalTaskEarnings || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks')]
    ]);
    
    let message = `üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π*\n\n`;
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: \`${completedTasks}\`\n`;
    message += `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarnings)}\` Stars\n`;
    message += `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${completedTasks > 0 ? formatNumber(totalEarnings / completedTasks) : '0.00'}\` Stars\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    const sponsorTasks = tasks.sponsorTasks || {};
    const dailyTasks = tasks.dailyTasks || {};
    
    const completedSponsor = Object.values(sponsorTasks).filter(t => t && t.completed).length;
    const completedDaily = Object.values(dailyTasks).filter(t => t && t.claimed).length;
    
    message += `üéØ *–ü–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π:*\n`;
    message += `‚îú –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ: \`${completedSponsor}\` –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
    message += `‚îú –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ: \`${completedDaily}\` –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
    message += `‚îî –í—Å–µ–≥–æ: \`${completedSponsor + completedDaily}\` –∑–∞–¥–∞–Ω–∏–π\n\n`;
    
    // –ù–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    message += `üèÜ *–ù–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n`;
    
    const allTasks = [];
    Object.entries(sponsorTasks).forEach(([id, task]) => {
      if (task.claimedAt) {
        allTasks.push({ ...task, type: 'sponsor', id });
      }
    });
    Object.entries(dailyTasks).forEach(([id, task]) => {
      if (task.claimedAt) {
        allTasks.push({ ...task, type: 'daily', id });
      }
    });
    
    const recentTasks = allTasks
      .sort((a, b) => new Date(b.claimedAt) - new Date(a.claimedAt))
      .slice(0, 5);
    
    if (recentTasks.length > 0) {
      recentTasks.forEach((task, index) => {
        const daysAgo = Math.floor((Date.now() - task.claimedAt.getTime()) / (1000 * 60 * 60 * 24));
        const timeText = daysAgo === 0 ? '—Å–µ–≥–æ–¥–Ω—è' : daysAgo === 1 ? '–≤—á–µ—Ä–∞' : `${daysAgo} –¥–Ω. –Ω–∞–∑–∞–¥`;
        
        message += `${index + 1}. ${task.type === 'sponsor' ? 'üéØ' : 'üìÖ'} –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
        message += `‚îî ${timeText}\n\n`;
      });
    } else {
      message += `–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n\n`;
    }
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
  }
}

async function showTasksAchievements(ctx, user) {
  try {
    log(`üèÜ –ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –∑–∞–¥–∞–Ω–∏—è—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const tasks = user.tasks || {};
    const completedTasks = tasks.completedTasks || 0;
    const totalEarnings = tasks.totalTaskEarnings || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks')]
    ]);
    
    let message = `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–∏—è—Ö*\n\n`;
    
    // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const achievements = [
      { id: 'first_task', title: 'üéØ –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', requirement: 1, reward: 100 },
      { id: 'task_master', title: 'üéØ –ú–∞—Å—Ç–µ—Ä –∑–∞–¥–∞–Ω–∏–π', description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 –∑–∞–¥–∞–Ω–∏–π', requirement: 10, reward: 500 },
      { id: 'task_expert', title: 'üéØ –≠–∫—Å–ø–µ—Ä—Ç –∑–∞–¥–∞–Ω–∏–π', description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 25 –∑–∞–¥–∞–Ω–∏–π', requirement: 25, reward: 1500 },
      { id: 'task_legend', title: 'üéØ –õ–µ–≥–µ–Ω–¥–∞ –∑–∞–¥–∞–Ω–∏–π', description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 50 –∑–∞–¥–∞–Ω–∏–π', requirement: 50, reward: 5000 },
      { id: 'task_god', title: 'üéØ –ë–æ–≥ –∑–∞–¥–∞–Ω–∏–π', description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 100 –∑–∞–¥–∞–Ω–∏–π', requirement: 100, reward: 15000 }
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const userAchievements = tasks.achievements || {};
    
    message += `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: \`${completedTasks}\`\n`;
    message += `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarnings)}\` Stars\n`;
    message += `‚îî –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: \`${Object.keys(userAchievements).length}\`\n\n`;
    
    message += `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n`;
    
    achievements.forEach(achievement => {
      const isCompleted = userAchievements[achievement.id]?.completed || false;
      const isClaimed = userAchievements[achievement.id]?.claimed || false;
      const progress = Math.min(100, Math.round((completedTasks / achievement.requirement) * 100));
      
      const status = isCompleted ? (isClaimed ? '‚úÖ' : 'üéÅ') : 'üîÑ';
      
      message += `${status} *${achievement.title}*\n`;
      message += `‚îú ${achievement.description}\n`;
      message += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: \`${completedTasks}/${achievement.requirement}\` (\`${progress}%\`)\n`;
      message += `‚îú –ù–∞–≥—Ä–∞–¥–∞: \`${achievement.reward}\` Stars\n`;
      
      if (isCompleted && !isClaimed) {
        message += `‚îî üéÅ *–ì–æ—Ç–æ–≤–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é!*\n\n`;
      } else if (isClaimed) {
        message += `‚îî ‚úÖ *–ü–æ–ª—É—á–µ–Ω–æ!*\n\n`;
      } else {
        message += `‚îî –û—Å—Ç–∞–ª–æ—Å—å: \`${achievement.requirement - completedTasks}\` –∑–∞–¥–∞–Ω–∏–π\n\n`;
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é
    const readyToClaim = achievements.filter(a => 
      userAchievements[a.id]?.completed && !userAchievements[a.id]?.claimed
    );
    
    if (readyToClaim.length > 0) {
      message += `üéÅ *–ì–æ—Ç–æ–≤–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é:* \`${readyToClaim.length}\` –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n`;
    }
    
    message += `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n`;
    message += `‚îú –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—É—á–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n`;
    message += `‚îú –ù–∞–≥—Ä–∞–¥—ã –≤—ã–¥–∞—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è\n`;
    message += `‚îî –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n`;
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –∑–∞–¥–∞–Ω–∏—è—Ö');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }
}
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function isValidObjectId(id) {
  return id && typeof id === 'string' && id.length === 24 && /^[0-9a-fA-F]{24}$/.test(id);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ RichAds –æ—Ñ—Ñ–µ—Ä–æ–≤ (–∑–∞–º–µ–Ω—è–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è)
async function getRichAdsTasks() {
  try {
    log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ RichAds –æ—Ñ—Ñ–µ—Ä–æ–≤...');
    
    const offers = await getRichAdsOffers();
    
    if (offers.length === 0) {
      log('‚ö†Ô∏è RichAds –æ—Ñ—Ñ–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ñ—Ñ–µ—Ä—ã');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ñ—Ñ–µ—Ä—ã –∏–∑ –º–æ–¥—É–ª—è RichAds
      const { richAdsIntegration } = require('./richads-integration');
      const demoOffers = richAdsIntegration.getDemoOffers();
      log(`üìã –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${demoOffers.length} –¥–µ–º–æ-–æ—Ñ—Ñ–µ—Ä–æ–≤`);
      return demoOffers;
    }
    
    log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${offers.length} RichAds –æ—Ñ—Ñ–µ—Ä–æ–≤`);
    return offers;
  } catch (error) {
    logErrorWithContext(error, 'getRichAdsTasks', 'system');
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ RichAds –æ—Ñ—Ñ–µ—Ä–æ–≤');
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ñ—Ñ–µ—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const { richAdsIntegration } = require('./richads-integration');
    const demoOffers = richAdsIntegration.getDemoOffers();
    log(`üìã –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${demoOffers.length} –¥–µ–º–æ-–æ—Ñ—Ñ–µ—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ`);
    return demoOffers;
  }
}

// –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º RichAds –æ—Ñ—Ñ–µ—Ä—ã –∫–∞–∫ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
async function getSponsorTasks() {
  log('üìã –í—ã–∑–æ–≤ getSponsorTasks() - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º RichAds –æ—Ñ—Ñ–µ—Ä—ã');
  try {
    return await getRichAdsTasks();
  } catch (error) {
    logError(error, '–û—à–∏–±–∫–∞ –≤ getSponsorTasks');
    return [];
  }
}

function getDailyTasks() {
  return [
    {
      id: 'daily_farm',
      title: '–§–∞—Ä–º–µ—Ä –¥–Ω—è',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 5 —Ñ–∞—Ä–º–æ–≤ –∑–∞ –¥–µ–Ω—å',
      target: 5,
      reward: 25
    },
    {
      id: 'daily_bonus',
      title: '–ë–æ–Ω—É—Å –¥–Ω—è',
      description: '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
      target: 1,
      reward: 15
    },
    {
      id: 'daily_exchange',
      title: '–¢—Ä–µ–π–¥–µ—Ä –¥–Ω—è',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 3 –æ–±–º–µ–Ω–∞ Stars',
      target: 3,
      reward: 30
    }
  ];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
async function updateDailyTaskProgress(user, taskType, amount = 1) {
  try {
    const today = new Date().toDateString();
    const userTasks = user.tasks?.dailyTasks || {};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–π –¥–µ–Ω—å)
    const lastReset = user.lastDailyTasksReset;
    const shouldReset = !lastReset || lastReset.toDateString() !== today;
    
    if (shouldReset) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
      await db.collection('users').updateOne(
        { id: user.id },
        { 
          $set: { 
            'tasks.dailyTasks': {},
            lastDailyTasksReset: new Date(),
            updatedAt: new Date()
          }
        }
      );
      user.tasks = user.tasks || {};
      user.tasks.dailyTasks = {};
      user.lastDailyTasksReset = new Date();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    const currentProgress = userTasks[taskType]?.progress || 0;
    const newProgress = currentProgress + amount;
    
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          [`tasks.dailyTasks.${taskType}.progress`]: newProgress,
          [`tasks.dailyTasks.${taskType}.lastUpdated`]: new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    if (!user.tasks) user.tasks = {};
    if (!user.tasks.dailyTasks) user.tasks.dailyTasks = {};
    user.tasks.dailyTasks[taskType] = {
      progress: newProgress,
      lastUpdated: new Date()
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
async function claimDailyTaskReward(ctx, user, taskId) {
  try {
    const dailyTasks = getDailyTasks();
    const task = dailyTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      return;
    }
    
    const userTasks = user.tasks?.dailyTasks || {};
    const userTask = userTasks[taskId] || {};
    const progress = userTask.progress || 0;
    const isClaimed = userTask.claimed || false;
    
    if (progress < task.target) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
      return;
    }
    
    if (isClaimed) {
      await ctx.answerCbQuery('‚ùå –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞!');
      return;
    }
    
    // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnuStarsoins: task.reward,
          totalEarnedMagnuStarsoins: task.reward,
          experience: Math.floor(task.reward * 5),
          'tasks.completedTasks': 1,
          'tasks.totalTaskEarnings': task.reward
        },
        $set: { 
          [`tasks.dailyTasks.${taskId}.claimed`]: true,
          [`tasks.dailyTasks.${taskId}.claimedAt`]: new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await getUser(user.id);
    if (updatedUser) {
      const levelResult = await checkAndUpdateLevel(updatedUser);
      if (levelResult.levelUp) {
        log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ ${levelResult.newLevel}!`);
      }
    }
    
    await ctx.answerCbQuery(`üéÅ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! +${task.reward} Stars`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    await showDailyTasks(ctx, updatedUser || user);
    
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã');
  }
}

async function checkTaskCompletion(ctx, user, task) {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true (–∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
  return true;
}

// ==================== –†–ê–ù–ì–ò ====================
async function showRanksMenu(ctx, user) {
  try {
    log(`‚öîÔ∏è –ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–∞
    await debugRankProgress(user);
    
    const rankProgress = await getRankProgress(user);
    const ranks = getRankRequirements();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üéØ –ü–æ–∫–∞–∑ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, {
      level: user.level,
      rankProgress,
      currentRank: rankProgress.current,
      nextRank: rankProgress.next,
      isMax: rankProgress.isMax
    });
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')]
    ]);
    
    let message = `‚öîÔ∏è *–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤*\n\n`;
    message += `üéØ *–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥:* ${rankProgress.current.name}\n`;
    message += `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${user.level || 1}\n\n`;
    
    if (!rankProgress.isMax) {
      message += `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–Ω–≥—É:*\n`;
      message += `‚îú –¢–µ–∫—É—â–∏–π: ${rankProgress.current.name}\n`;
      message += `‚îú –°–ª–µ–¥—É—é—â–∏–π: ${rankProgress.next.name}\n`;
      message += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: ${rankProgress.progress}%\n`;
      message += `‚îî –û—Å—Ç–∞–ª–æ—Å—å: ${rankProgress.remaining} —É—Ä–æ–≤–Ω–µ–π\n\n`;
    } else {
      message += `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞!*\n\n`;
    }
    
    message += `üìã *–í—Å–µ —Ä–∞–Ω–≥–∏:*\n\n`;
    
    ranks.forEach((rank, index) => {
      const isCurrent = rank.level === rankProgress.current.level;
      const isUnlocked = user.level >= rank.level;
      const status = isCurrent ? 'üéØ' : (isUnlocked ? '‚úÖ' : 'üîí');
      
      message += `${status} *${rank.name}*\n`;
      message += `‚îú –£—Ä–æ–≤–µ–Ω—å: ${rank.level}\n`;
      message += `‚îî –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: ${rank.requirement}\n\n`;
    });
    
    message += `üí° *–ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —Ä–∞–Ω–≥:*\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —Ñ–∞—Ä–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞\n`;
    message += `‚îú –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–π–Ω–µ—Ä –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n`;
    message += `‚îî –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n`;
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–∞–Ω–≥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–Ω–≥–æ–≤');
  }
}

// ==================== –¢–ò–¢–£–õ–´ ====================
function getTitlesList(user) {
  const farStarsount = user.farm?.farStarsount || 0;
  const minerTotal = user.miner?.totalMined || 0;
  const streak = user.dailyBonus?.streak || 0;
  const level = user.level || 1;
  const stars = user.stars || 0;
  const totalStars = user.totalEarnedStars || 0;
  const referrals = user.referralsCount || 0;
  const achievements = user.achievementsCount || 0;
  const isAdmin = user.isAdmin || false;

  const definitions = [
    // –û–±—ã—á–Ω—ã–µ (5)
    { id: 'novice', name: 'üå± –ù–æ–≤–∏—á–æ–∫', rarity: '–û–±—ã—á–Ω—ã–π', conditionText: '–¢–∏—Ç—É–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', unlocked: true, minerBonus: 1.0 },
    { id: 'starter', name: 'üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π', rarity: '–û–±—ã—á–Ω—ã–π', conditionText: '–£—Ä–æ–≤–µ–Ω—å 3 –∏–ª–∏ 500 Stars', unlocked: level >= 3 || stars >= 500, minerBonus: 1.1 },
    { id: 'skilled', name: 'üéØ –û–ø—ã—Ç–Ω—ã–π', rarity: '–û–±—ã—á–Ω—ã–π', conditionText: '–£—Ä–æ–≤–µ–Ω—å 10 –∏–ª–∏ 50 —Ñ–∞—Ä–º–æ–≤', unlocked: level >= 10 || farStarsount >= 50, minerBonus: 1.2 },
    { id: 'master', name: '‚ú® –ú–∞—Å—Ç–µ—Ä', rarity: '–û–±—ã—á–Ω—ã–π', conditionText: '–£—Ä–æ–≤–µ–Ω—å 25 –∏–ª–∏ 10 000 Stars', unlocked: level >= 25 || stars >= 10000, minerBonus: 1.3 },
    { id: 'expert', name: 'üí´ –≠–∫—Å–ø–µ—Ä—Ç', rarity: '–û–±—ã—á–Ω—ã–π', conditionText: '–£—Ä–æ–≤–µ–Ω—å 50 –∏–ª–∏ 10 000 Stars –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', unlocked: level >= 50 || totalStars >= 10000, minerBonus: 1.4 },

    // –†–µ–¥–∫–∏–µ (3)
    { id: 'pro', name: 'üåü –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', rarity: '–†–µ–¥–∫–∏–π', conditionText: '100 000 Stars –∏–ª–∏ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', unlocked: stars >= 100000 || referrals >= 10, minerBonus: 1.5 },
    { id: 'champion', name: 'üèÜ –ß–µ–º–ø–∏–æ–Ω', rarity: '–†–µ–¥–∫–∏–π', conditionText: '–£—Ä–æ–≤–µ–Ω—å 75 –∏–ª–∏ 10 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π', unlocked: level >= 75 || achievements >= 10, minerBonus: 1.6 },
    { id: 'legend', name: 'üëë –õ–µ–≥–µ–Ω–¥–∞', rarity: '–†–µ–¥–∫–∏–π', conditionText: '1 000 000 Stars', unlocked: stars >= 1000000 || totalStars >= 1000000, minerBonus: 1.7 },

    // –°–µ–∫—Ä–µ—Ç–Ω—ã–µ (3)
    { id: 'stealth', name: 'üïµÔ∏è –°–∫—Ä—ã—Ç–Ω—ã–π', rarity: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π', conditionText: '–°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ 14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', unlocked: streak >= 14, minerBonus: 1.8 },
    { id: 'tactician', name: 'üß† –¢–∞–∫—Ç–∏–∫', rarity: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π', conditionText: '100 —Ñ–∞—Ä–º–æ–≤ –∏ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', unlocked: farStarsount >= 100 && referrals >= 5, minerBonus: 1.9 },
    { id: 'chronos', name: '‚è≥ –£—Å–µ—Ä–¥–Ω—ã–π', rarity: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π', conditionText: '–ù–∞–º–∞–π–Ω–∏—Ç—å 5 000 Stars', unlocked: minerTotal >= 5000, minerBonus: 2.0 },

    // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ (3)
    { id: 'immortal', name: 'üî• –ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', conditionText: '1 000 000 Stars –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', unlocked: totalStars >= 1000000, minerBonus: 2.2 },
    { id: 'dragon', name: 'üêâ –î—Ä–∞–∫–æ–Ω', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', conditionText: '100 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', unlocked: referrals >= 100, minerBonus: 2.4 },
    { id: 'god', name: '‚ö° –ë–æ–≥', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', conditionText: '–£—Ä–æ–≤–µ–Ω—å 100 –∏ 50 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π', unlocked: level >= 100 && achievements >= 50, minerBonus: 2.5 },

    // –ê–¥–º–∏–Ω—Å–∫–∏–µ (3)
    { id: 'moderator', name: 'üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', rarity: '–ê–¥–º–∏–Ω—Å–∫–∏–π', conditionText: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤', unlocked: isAdmin, minerBonus: 3.0 },
    { id: 'administrator', name: '‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', rarity: '–ê–¥–º–∏–Ω—Å–∫–∏–π', conditionText: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', unlocked: isAdmin, minerBonus: 3.5 },
    { id: 'owner', name: 'üëë –í–ª–∞–¥–µ–ª–µ—Ü', rarity: '–ê–¥–º–∏–Ω—Å–∫–∏–π', conditionText: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤', unlocked: isAdmin, minerBonus: 4.0 }
  ];

  return definitions;
}

async function syncUserTitles(user) {
  try {
    const definitions = getTitlesList(user);
    const ownedSet = new Set(user.titles || []);
    const toAdd = definitions.filter(t => t.unlocked && !ownedSet.has(t.name)).map(t => t.name);

    if (toAdd.length > 0) {
      await db.collection('users').updateOne(
        { id: user.id },
        { $addToSet: { titles: { $each: toAdd } }, $set: { updatedAt: new Date() } }
      );
      user.titles = Array.from(new Set([...(user.titles || []), ...toAdd]));
      setCachedUser(user.id, user);
    }

    if (!user.mainTitle || !user.titles.includes(user.mainTitle)) {
      user.mainTitle = 'üå± –ù–æ–≤–∏—á–æ–∫';
      await db.collection('users').updateOne(
        { id: user.id },
        { $set: { mainTitle: user.mainTitle, updatedAt: new Date() } }
      );
      setCachedUser(user.id, user);
    }

    return { definitions, toAdd };
  } catch (error) {
    logError(error, '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return { definitions: getTitlesList(user), toAdd: [] };
  }
}

async function showTitlesMenu(ctx, user) {
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { definitions } = await syncUserTitles(user);
  const total = definitions.length;
  const owned = (user.titles || []).length;

  let message = `üéñ *–¢–∏—Ç—É–ª—ã*\n\n`;
  message += `üëë –ì–ª–∞–≤–Ω—ã–π —Ç–∏—Ç—É–ª: ${user.mainTitle}\n`;
  message += `üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: \`${owned}/${total}\`\n\n`;
  message += `üìú *–°–ø–∏—Å–æ–∫ —Ç–∏—Ç—É–ª–æ–≤:*\n`;

  for (const t of definitions) {
    const has = (user.titles || []).includes(t.name);
    const status = has ? '‚úÖ' : (t.rarity === '–°–µ–∫—Ä–µ—Ç–Ω—ã–π' ? '‚ùî' : 'üîí');
    const titleName = has ? t.name : (t.rarity === '–°–µ–∫—Ä–µ—Ç–Ω—ã–π' ? '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏—Ç—É–ª' : t.name);
    message += `${status} ${titleName} ‚Äî ${t.rarity}${has ? '' : ` (—É—Å–ª–æ–≤–∏–µ: ${t.conditionText})`}\n`;
  }

  const buttons = [
    [Markup.button.callback('üß≠ –°–º–µ–Ω–∏—Ç—å —Ç–∏—Ç—É–ª', 'titles_select')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ];

  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: Markup.inlineKeyboard(buttons).reply_markup
  });
}
async function showTitlesSelectMenu(ctx, user) {
  const definitions = getTitlesList(user);
  const ownedDefs = definitions.filter(d => (user.titles || []).includes(d.name));

  // –§–æ–ª–ª–±–µ–∫ –¥–ª—è —Ç–∏—Ç—É–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö
  const extraOwned = (user.titles || [])
    .filter(n => !ownedDefs.some(d => d.name === n))
    .map(n => ({ id: 'name_' + Buffer.from(n, 'utf8').toString('base64'), name: n }));

  const items = [...ownedDefs.map(d => ({ id: d.id, name: d.name })), ...extraOwned];

  let message = `üéñ *–í—ã–±–æ—Ä —Ç–∏—Ç—É–ª–∞*\n\n`;
  message += `–¢–µ–∫—É—â–∏–π: ${user.mainTitle}\n\n`;
  message += `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ç—É–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:`;

  const rows = [];
  for (const item of items) {
    rows.push([Markup.button.callback(item.name, `set_title_${item.id}`)]);
  }
  rows.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'titles')]);

  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: Markup.inlineKeyboard(rows).reply_markup
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∏—Ç—É–ª–æ–≤ –∏ —Ä–∞–Ω–≥–æ–≤
let afterActions = [];
afterActions.push(() => {
  bot.action('titles', async (ctx) => {
    try {
      const user = await getUser(ctx.from.id);
      if (!user) return;
      await showTitlesMenu(ctx, user);
    } catch (error) {
      logError(error, '–¢–∏—Ç—É–ª—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
    }
  });

  bot.action('ranks', async (ctx) => {
    try {
      const user = await getUser(ctx.from.id);
      if (!user) return;
      await showRanksMenu(ctx, user);
    } catch (error) {
      logError(error, '–†–∞–Ω–≥–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
    }
  });

  bot.action('titles_select', async (ctx) => {
    try {
      const user = await getUser(ctx.from.id);
      if (!user) return;
      await showTitlesSelectMenu(ctx, user);
    } catch (error) {
      logError(error, '–¢–∏—Ç—É–ª—ã –≤—ã–±–æ—Ä (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
    }
  });

  bot.action(/^(set_title_)\S+/, async (ctx) => {
    try {
      const data = ctx.callbackQuery?.data || '';
      const rawId = data.replace('set_title_', '');

      const user = await getUser(ctx.from.id);
      if (!user) return;

      const definitions = getTitlesList(user);
      let selectedName = null;

      const byId = definitions.find(d => d.id === rawId);
      if (byId) {
        selectedName = byId.name;
      } else if (rawId.startsWith('name_')) {
        const b64 = rawId.substring(5);
        try {
          selectedName = Buffer.from(b64, 'base64').toString('utf8');
        } catch (e) {
          selectedName = null;
        }
      }

      if (!selectedName) {
        await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏—Ç—É–ª', { show_alert: true });
        return;
      }

      if (!(user.titles || []).includes(selectedName)) {
        await ctx.answerCbQuery('üîí –≠—Ç–æ—Ç —Ç–∏—Ç—É–ª –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω', { show_alert: true });
        return;
      }

      await db.collection('users').updateOne(
        { id: user.id },
        { $set: { mainTitle: selectedName, updatedAt: new Date() } }
      );
      user.mainTitle = selectedName;
      setCachedUser(user.id, user);

      await ctx.answerCbQuery('‚úÖ –¢–∏—Ç—É–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      await showTitlesMenu(ctx, user);
    } catch (error) {
      logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏—Ç—É–ª–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∏—Ç—É–ª–∞', { show_alert: true });
    }
  });
});
// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–π–Ω–∏–Ω–≥–∞
app.get('/test-mining', async (req, res) => {
    try {
        const currentSeason = getCurrentMiningSeason();
        const users = await db.collection('users').find({
            $or: [
                { 'miningStats.lastReward': { $exists: true } },
                { 'miners': { $exists: true, $ne: [] } }
            ]
        }).toArray();
        
        const testUser = users[0];
        if (testUser) {
            const userWithMining = initializeNewMiningSystem(testUser);
            const totalSpeed = calculateTotalMiningSpeed(userWithMining);
            
            res.json({
                status: 'mining-test',
                currentSeason,
                totalUsers: users.length,
                testUser: {
                    id: testUser.id,
                    miners: userWithMining.miners?.length || 0,
                    totalSpeed,
                    miningStats: userWithMining.miningStats
                },
                config: {
                    MINING_REWARD_INTERVAL: config.MINING_REWARD_INTERVAL,
                    MINING_ACTIVE_CLICK_BONUS: config.MINING_ACTIVE_CLICK_BONUS
                }
            });
        } else {
            res.json({
                status: 'mining-test',
                error: 'No users found',
                totalUsers: 0
            });
        }
    } catch (error) {
        res.status(500).json({
            status: 'error',
            error: error.message
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–π–Ω–∏–Ω–≥–∞
app.get('/force-mining', async (req, res) => {
    try {
        console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–π–Ω–∏–Ω–≥–∞...');
        await processMinerRewards();
        res.json({
            status: 'success',
            message: 'Mining processing completed',
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            error: error.message
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/force-save-all', async (req, res) => {
    try {
        console.log('üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        const users = await db.collection('users').find({}).toArray();
        let savedCount = 0;
        
        for (const user of users) {
            try {
                await forceSaveUser(user);
                savedCount++;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
            }
        }
        
        res.json({
            status: 'success',
            message: `Saved ${savedCount} users`,
            totalUsers: users.length,
            savedCount,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            error: error.message
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.get('/db-status', async (req, res) => {
    try {
        const users = await db.collection('users').find({}).toArray();
        const usersWithMiners = users.filter(u => u.miners && u.miners.length > 0);
        const usersWithMiningStats = users.filter(u => u.miningStats);
        
        res.json({
            status: 'success',
            totalUsers: users.length,
            usersWithMiners: usersWithMiners.length,
            usersWithMiningStats: usersWithMiningStats.length,
            sampleUser: users[0] ? {
                id: users[0].id,
                magnuStarsoins: users[0].magnuStarsoins,
                stars: users[0].stars,
                miners: users[0].miners?.length || 0,
                hasMiningStats: !!users[0].miningStats,
                lastReward: users[0].miningStats?.lastReward
            } : null,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            error: error.message
        });
    }
});

// ==================== –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê ====================
const bot = new Telegraf(config.BOT_TOKEN);
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
if (typeof afterActions !== 'undefined' && Array.isArray(afterActions)) {
  for (const fn of afterActions) {
    try {
      fn();
    } catch (e) {
      logError(e, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤');
    }
  }
}
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
if (typeof afterActions !== 'undefined' && Array.isArray(afterActions)) {
  for (const fn of afterActions) {
    try {
      fn();
    } catch (e) {
      logError(e, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤');
    }
  }
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  try {
    console.log('üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', ctx.from.id);
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /start:', {
      id: ctx.from.id,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
      lastName: ctx.from.last_name,
      startPayload: ctx.startPayload
    });
    
    console.log(`üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    const user = await getUser(ctx.from.id, ctx);
    if (!user) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø–æ–ª—É—á–µ–Ω:`, {
      level: user.level,
      magnuStarsoins: user.magnuStarsoins,
      stars: user.stars,
      banned: user.banned
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    let isSubscribed = false;
    try {
      isSubscribed = await checkSubscription(ctx);
      console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${ctx.from.id}:`, { isSubscribed });
    } catch (subscriptionError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, subscriptionError);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
      isSubscribed = true;
    }
    
    if (!isSubscribed) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª`);
      try {
        await showSubscriptionMessage(ctx);
      } catch (subscriptionMessageError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, subscriptionMessageError);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await showMainMenuStart(ctx, user);
      }
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const startPayload = ctx.startPayload;
    if (startPayload && startPayload !== user.id.toString()) {
      console.log(`üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${ctx.from.id} –æ—Ç ${startPayload}`);
      console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`, {
        userId: ctx.from.id,
        referrerId: startPayload,
        currentReferrer: user.referrerId
      });
      await handleReferral(user.id, parseInt(startPayload));
    } else {
      console.log(`‚ÑπÔ∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    }
    
    // –î–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏—Å–ø–æ–ª—å–∑—É–µ–º ctx.reply –≤–º–µ—Å—Ç–æ editMessageText
    console.log(`üì± –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    await showMainMenuStart(ctx, user);
    
    console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, error);
    console.log(`–û—à–∏–±–∫–∞ –≤ /start:`, {
      userId: ctx.from.id,
      error: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    try {
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    } catch (replyError) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}:`, replyError);
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
bot.command('webapp', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ WebApp
    const webappEnabled = process.env.WEBAPP_ENABLED === 'true';
    const adminOnly = process.env.WEBAPP_ADMIN_ONLY === 'true';
    const isAdmin = config.ADMIN_IDS.includes(user.id);

    if (!webappEnabled) {
      await ctx.reply('üöß WebApp –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    if (adminOnly && !isAdmin) {
      await ctx.reply('üîí WebApp –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º WebApp –∫–Ω–æ–ø–∫—É
    const webappUrl = process.env.WEBAPP_URL || `https://${process.env.RAILWAY_STATIC_URL || 'your-app.railway.app'}/webapp`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.webApp('üéÆ –û—Ç–∫—Ä—ã—Ç—å WebApp', webappUrl)]
    ]);

    await ctx.reply(
      'üéÆ *Magnum Stars WebApp*\n\n' +
      '‚ú® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n' +
      '‚ö° –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–±–æ—Ç–∞\n' +
      'üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π UX\n\n' +
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å WebApp:',
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );

  } catch (error) {
    logError(error, 'WebApp –∫–æ–º–∞–Ω–¥–∞');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp');
  }
});

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π
async function handleAdminSearchUser(ctx, user, text) {
  try {
    let targetUser;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username
    if (text.startsWith('@')) {
      const username = text.substring(1);
      targetUser = await db.collection('users').findOne({ username: username });
    } else {
      const userId = parseInt(text);
      if (isNaN(userId)) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ @username');
        return;
      }
      targetUser = await db.collection('users').findOne({ id: userId });
    }
    
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin_ban_${targetUser.id}`),
        Markup.button.callback('‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin_unban_${targetUser.id}`)
      ],
      [
        Markup.button.callback('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', `admin_balance_${targetUser.id}`),
        Markup.button.callback('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `admin_stats_${targetUser.id}`)
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    const message = 
      `üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n` +
      `üÜî *ID:* \`${targetUser.id}\`\n` +
      `üë§ *–ò–º—è:* ${targetUser.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* ${targetUser.createdAt ? targetUser.createdAt.toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
      `‚è∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:* ${targetUser.lastSeen ? targetUser.lastSeen.toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å: \`${targetUser.level || 1}\`\n` +
      `‚îú –û–ø—ã—Ç: \`${targetUser.experience || 0}\`\n` +
      `‚îú Stars: \`${formatNumber(targetUser.magnuStarsoins || 0)}\`\n` +
      `‚îú Stars: \`${formatNumber(targetUser.stars || 0)}\`\n` +
      `‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${targetUser.referralsCount || 0}\`\n` +
      `‚îî –°—Ç–∞—Ç—É—Å: ${targetUser.banned ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}

async function handleAdminBanUser(ctx, user, text) {
  try {
    const userId = parseInt(text);
    if (isNaN(userId)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ');
      return;
    }
    
    const targetUser = await db.collection('users').findOne({ id: userId });
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    if (targetUser.banned) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: userId },
      { $set: { banned: true, bannedAt: new Date(), bannedBy: user.id, updatedAt: new Date() } }
    );
    
    await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}
async function handleAdminUnbanUser(ctx, user, text) {
  try {
    const userId = parseInt(text);
    if (isNaN(userId)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ');
      return;
    }
    
    const targetUser = await db.collection('users').findOne({ id: userId });
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    if (!targetUser.banned) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: userId },
      { $unset: { banned: "", bannedAt: "", bannedBy: "" }, $set: { updatedAt: new Date() } }
    );
    
    await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}



async function handleAdminSetBonusBase(ctx, user, text) {
  try {
    const newBonus = parseFloat(text);
    if (isNaN(newBonus) || newBonus < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'DAILY_BONUS_BASE' },
      { $set: { value: newBonus, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.DAILY_BONUS_BASE = newBonus;
    
    await ctx.reply(`‚úÖ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newBonus} Magnum Coins`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(user.id);
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–∞');
  }
}

async function handleAdminSetMinerReward(ctx, user, text) {
  try {
    const newReward = parseFloat(text);
    if (isNaN(newReward) || newReward < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'MINER_REWARD_PER_MINUTE' },
      { $set: { value: newReward, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.MINER_REWARD_PER_MINUTE = newReward;
    
    await ctx.reply(`‚úÖ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –º–∞–π–Ω–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newReward} Stars –≤ –º–∏–Ω—É—Ç—É`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(user.id);
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞');
  }
}
async function handleAdminSetReferralReward(ctx, user, text) {
  try {
    const newReward = parseFloat(text);
    if (isNaN(newReward) || newReward < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'REFERRAL_REWARD' },
      { $set: { value: newReward, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.REFERRAL_REWARD = newReward;
    
    await ctx.reply(`‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newReward} Stars`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(user.id);
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
  }
}
async function handleAdminSetSubscriptionChannel(ctx, user, text) {
  try {
    let channel = text.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞
    if (!channel.startsWith('@') && !channel.startsWith('https://t.me/')) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @channel –∏–ª–∏ https://t.me/channel');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'REQUIRED_CHANNEL' },
      { $set: { value: channel, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.REQUIRED_CHANNEL = channel;
    
    await ctx.reply(`‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${channel}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(user.id);
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏');
  }
}
// ==================== –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò ====================
async function handleCreateSupportTicket(ctx, user, text) {
  try {
    logFunction('handleCreateSupportTicket', user.id, { textLength: text.length });
    log(`üÜò –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (text.length < 10) {
      await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).');
      return;
    }
    
    if (text.length > 1000) {
      await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const ticket = {
      id: Date.now() + Math.random().toString(36).substr(2, 9),
      userId: user.id,
      username: user.username,
      firstName: user.firstName,
      status: 'new', // new, in_progress, answered, closed
      priority: 'normal', // low, normal, high, urgent
      subject: text.substring(0, 100) + (text.length > 100 ? '...' : ''),
      description: text,
      createdAt: new Date(),
      updatedAt: new Date(),
      adminResponse: null,
      adminId: null,
      responseTime: null
    };
    
    logDebug(`–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ –ë–î`, {
      ticketId: ticket.id,
      userId: user.id,
      status: ticket.status,
      subject: ticket.subject
    });
    
    await db.collection('supportTickets').insertOne(ticket);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          'support.ticketsCount': 1
        },
        $set: { 
          'support.lastTicket': new Date(),
          adminState: null,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const supportChannel = config.SUPPORT_CHANNEL;
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å', `support_answer_${ticket.id}`),
        Markup.button.callback('‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', `support_progress_${ticket.id}`)
      ],
      [
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `support_reject_${ticket.id}`),
        Markup.button.callback('üîí –ó–∞–∫—Ä—ã—Ç—å', `support_close_${ticket.id}`)
      ]
    ]);
    
    const supportMessage = 
      `üÜò *–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticket.id}\`\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${getDisplayName(user)}\n` +
      `üì± *Username:* ${user.username ? '@' + user.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üÜî *User ID:* \`${user.id}\`\n` +
      `üìÖ *–î–∞—Ç–∞:* ${ticket.createdAt.toLocaleString('ru-RU')}\n` +
      `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${user.level || 1}\n` +
      `üí∞ *Stars:* ${formatNumber(user.magnuStarsoins || 0)}\n` +
      `‚≠ê *Stars:* ${formatNumber(user.stars || 0)}\n\n` +
      `üìù *–ü—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${text}\n\`\`\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    if (supportChannel) {
      try {
        await ctx.telegram.sendMessage(supportChannel, supportMessage, {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        });
        
        log(`‚úÖ –¢–∏–∫–µ—Ç ${ticket.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ${supportChannel}`);
      } catch (error) {
        logError(error, `–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∏–∫–µ—Ç–∞ ${ticket.id} –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏`);
        logDebug(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª`, {
          channel: supportChannel,
          ticketId: ticket.id,
          error: error.message
        });
      }
    } else {
      log(`‚ö†Ô∏è –ö–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ç–∏–∫–µ—Ç ${ticket.id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'support')]
    ]);
    
    const userMessage = 
      `‚úÖ *–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticket.id}\`\n` +
      `üìù *–í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${text}\n\`\`\`\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* 5-30 –º–∏–Ω—É—Ç\n\n` +
      `üìã *–ß—Ç–æ –¥–∞–ª—å—à–µ:*\n` +
      `‚Ä¢ –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à —Ç–∏–∫–µ—Ç\n` +
      `‚Ä¢ –û—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n` +
      `‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n` +
      `üí° *–°–æ–≤–µ—Ç:* –ü–æ–∫–∞ –∂–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç–∞, –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å FAQ - –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–º —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!`;
    
    await ctx.reply(userMessage, {
      parse_mode: 'Markdown',
      reply_markup: userKeyboard.reply_markup
    });
    
    log(`‚úÖ –¢–∏–∫–µ—Ç ${ticket.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
  } catch (error) {
    logError(error, `–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    logDebug(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞`, {
      userId: user.id,
      text: text,
      error: error.message,
      stack: error.stack
    });
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
async function handleAdminAnswerTicket(ctx, user, text) {
  try {
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: ${text.length}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ adminState
    const ticketId = user.adminState.replace('answering_ticket_', '');
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç ${ticketId}`);
    
    if (text.length < 5) {
      await ctx.reply('‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.');
      return;
    }
    
    if (text.length > 2000) {
      await ctx.reply('‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const ticket = await db.collection('supportTickets').findOne({ id: ticketId });
    if (!ticket) {
      await ctx.reply('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç —Å –æ—Ç–≤–µ—Ç–æ–º –∞–¥–º–∏–Ω–∞
    const responseTime = Date.now() - ticket.createdAt.getTime();
    await db.collection('supportTickets').updateOne(
      { id: ticketId },
      { 
        $set: { 
          status: 'answered',
          adminResponse: text,
          adminId: user.id,
          responseTime: responseTime,
          updatedAt: new Date()
        }
      }
    );
    
    console.log(`–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:`, {
      ticketId: ticketId,
      adminId: user.id,
      responseLength: text.length,
      responseTime: responseTime
    });
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      const userMessage = 
        `‚úÖ *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ç–∏–∫–µ—Ç*\n\n` +
        `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
        `üìù *–í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${ticket.description}\n\`\`\`\n\n` +
        `üë®‚Äçüíº *–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n\`\`\`\n${text}\n\`\`\`\n\n` +
        `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* ${Math.floor(responseTime / 1000 / 60)} –º–∏–Ω—É—Ç\n\n` +
        `üí° –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.`;
      
      await ctx.telegram.sendMessage(ticket.userId, userMessage, {
        parse_mode: 'Markdown'
      });
      
      console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}:`, error);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const supportChannel = '@magnumsupported';
    const message = 
      `‚úÖ *–¢–∏–∫–µ—Ç –æ—Ç–≤–µ—á–µ–Ω*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üì± *Username:* ${ticket.username ? '@' + ticket.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üÜî *User ID:* \`${ticket.userId}\`\n` +
      `üìÖ *–î–∞—Ç–∞:* ${ticket.createdAt.toLocaleString('ru-RU')}\n` +
      `üë®‚Äçüíº *–ê–¥–º–∏–Ω:* ${user.firstName || user.username || user.id}\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* ${Math.floor(responseTime / 1000 / 60)} –º–∏–Ω—É—Ç\n\n` +
      `üìù *–ü—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${ticket.description}\n\`\`\`\n\n` +
      `‚úÖ *–û—Ç–≤–µ—Ç:*\n\`\`\`\n${text}\n\`\`\`\n\n` +
      `‚úÖ *–°—Ç–∞—Ç—É—Å:* –û—Ç–≤–µ—á–µ–Ω`;
    
    try {
      await ctx.telegram.sendMessage(supportChannel, message, {
        parse_mode: 'Markdown'
      });
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏:`, error);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(user.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    const adminKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')]
    ]);
    
    const adminMessage = 
      `‚úÖ *–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üìù *–û—Ç–≤–µ—Ç:*\n\`\`\`\n${text}\n\`\`\`\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* ${Math.floor(responseTime / 1000 / 60)} –º–∏–Ω—É—Ç\n\n` +
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –≤–∞—à –æ—Ç–≤–µ—Ç.`;
    
    await ctx.reply(adminMessage, {
      parse_mode: 'Markdown',
      reply_markup: adminKeyboard.reply_markup
    });
    
    console.log(`‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç ${ticketId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ ${user.id} –Ω–∞ —Ç–∏–∫–µ—Ç:`, error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
// ==================== –í–´–î–ê–ß–ê –†–ê–ù–ì–ê ====================
async function handleAdminGiveRank(ctx, user, text) {
  try {
    log(`‚≠ê –ê–¥–º–∏–Ω ${user.id} –≤—ã–¥–∞–µ—Ç —Ä–∞–Ω–≥: "${text}"`);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    const parts = text.trim().split(/\s+/);
    if (parts.length < 2) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ID –£–†–û–í–ï–ù–¨\n\nüí° –ü—Ä–∏–º–µ—Ä: 123456789 50');
      return;
    }
    
    const targetUserId = parseInt(parts[0]);
    const newLevel = parseInt(parts[1]);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!targetUserId || targetUserId <= 0) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
      return;
    }
    
    if (!newLevel || newLevel <= 0 || newLevel > 1000) {
      await ctx.reply('‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000!');
      return;
    }
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const targetUser = await db.collection('users').findOne({ id: targetUserId });
    if (!targetUser) {
      await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
      return;
    }
    
    const oldLevel = targetUser.level || 1;
    const oldRank = getRankByLevel(oldLevel);
    const newRank = getRankByLevel(newLevel);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: targetUserId },
      { 
        $set: { 
          level: newLevel,
          experience: 0,
          experienceToNextLevel: calculateExperienceToNextLevel(newLevel),
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(targetUserId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_ranks')]
    ]);
    
    await ctx.reply(
      `‚úÖ *–†–∞–Ω–≥ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω!*\n\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${getDisplayName(targetUser)} (ID: ${targetUserId})\n` +
      `üìä *–ò–∑–º–µ–Ω–µ–Ω–∏—è:*\n` +
      `‚îú –°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å: \`${oldLevel}\` (${oldRank})\n` +
      `‚îú –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: \`${newLevel}\` (${newRank})\n` +
      `‚îî –û–ø—ã—Ç: —Å–±—Ä–æ—à–µ–Ω –¥–æ 0\n\n` +
      `üìÖ –í—ã–¥–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n\n` +
      `üéØ –†–∞–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    log(`‚úÖ –†–∞–Ω–≥ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –∞–¥–º–∏–Ω–æ–º ${user.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}: ${oldLevel} ‚Üí ${newLevel}`);
    
  } catch (error) {
    logError(error, `–í—ã–¥–∞—á–∞ —Ä–∞–Ω–≥–∞ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–∞–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// ==================== –°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–®–ò–ë–ö–ê–• ====================
async function handleBugReport(ctx, user, text) {
  try {
    log(`üêõ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ: "${text}"`);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const bugReport = {
      userId: user.id,
      userFirstName: user.firstName,
      userUsername: user.username,
      report: text,
      timestamp: new Date(),
      status: 'new',
      reviewed: false
    };
    
    await db.collection('bugReports').insertOne(bugReport);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    const adminIds = await getAdminIds();
    for (const adminId of adminIds) {
      try {
        await ctx.telegram.sendMessage(
          adminId,
          `üêõ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ!*\n\n` +
          `üë§ *–û—Ç:* ${getDisplayName(user)} (ID: ${user.id})\n` +
          `üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${text}\n` +
          `üìÖ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}\n\n` +
          `üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ü–µ–Ω–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ!`,
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        logError(error, `–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ${adminId}`);
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'support')]
    ]);
    
    await ctx.reply(
      `‚úÖ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!*\n\n` +
      `üìù –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n` +
      `"${text}"\n\n` +
      `üí∞ *–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:*\n` +
      `‚îú –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
      `‚îú –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É\n` +
      `‚îî –†–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏\n\n` +
      `üìß –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
    
  } catch (error) {
    logError(error, `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
// ==================== –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ú–û–ö–û–î–û–í ====================
async function handleAdminCreatePromocode(ctx, user, text) {
  try {
    log(`üé´ –ê–¥–º–∏–Ω ${user.id} —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥: "${text}"`);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    const parts = text.trim().split(/\s+/);
    if (parts.length < 3) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ö–û–î –ù–ê–ì–†–ê–î–ê –ê–ö–¢–ò–í–ê–¶–ò–ò\n\nüí° –ü—Ä–∏–º–µ—Ä: WELCOME 100 50');
      return;
    }
    
    const code = parts[0].toUpperCase();
    const reward = parseFloat(parts[1]);
    const maxActivations = parseInt(parts[2]);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!code || code.length < 3) {
      await ctx.reply('‚ùå –ö–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞!');
      return;
    }
    
    if (!reward || reward <= 0) {
      await ctx.reply('‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!');
      return;
    }
    
    if (!maxActivations || maxActivations <= 0 || maxActivations > 10000) {
      await ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10000!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
    const existingPromocode = await db.collection('promocodes').findOne({ code: code });
    if (existingPromocode) {
      await ctx.reply(`‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ "${code}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    const promocode = {
      code: code,
      reward: reward,
      maxActivations: maxActivations,
      activations: 0,
      totalActivations: 0,
      totalRewards: 0,
      isActive: true,
      createdAt: new Date(),
      createdBy: user.id,
      activationsHistory: []
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.collection('promocodes').insertOne(promocode);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_promocodes')]
    ]);
    
    await ctx.reply(
      `‚úÖ *–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n` +
      `üé´ –ö–æ–¥: \`${code}\`\n` +
      `üí∞ –ù–∞–≥—Ä–∞–¥–∞: \`${formatNumber(reward)}\` Stars\n` +
      `üìä –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: \`${maxActivations}\`\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleString('ru-RU')}\n\n` +
      `üéØ –ü—Ä–æ–º–æ–∫–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç magnumtapchat
    try {
      const chatNotification = `üéâ *–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω!*\n\n` +
        `üé´ –ö–æ–¥: \`${code}\`\n` +
        `üèÖ –†–µ–¥–∫–æ—Å—Ç—å: –û–±—ã—á–Ω—ã–π\n` +
        `üíé –ù–∞–≥—Ä–∞–¥—ã:\n` +
        `‚îú üí∞ Stars: +${formatNumber(reward)}\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `‚îú üîÑ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxActivations}\n` +
        `‚îú ‚úÖ –£–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: 0\n` +
        `‚îî ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${maxActivations}\n\n` +
        `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}\n` +
        `‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: –ë–µ—Å—Å—Ä–æ—á–Ω–æ\n\n` +
        `‚ö° –£—Å–ø–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã –ø–µ—Ä–≤—ã–º!`;

      await bot.telegram.sendMessage(config.PROMO_NOTIFICATIONS_CHAT, chatNotification, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [Markup.button.url('üéÆ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ', `https://t.me/${config.BOT_USERNAME}`)]
          ]
        }
      });

      log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ ${code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç`);
    } catch (notifyError) {
      logError(notifyError, `–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ ${code}`);
    }

    log(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ ${code} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–æ–º ${user.id}, –Ω–∞–≥—Ä–∞–¥–∞: ${reward} Stars, –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxActivations}`);
    
  } catch (error) {
    logError(error, `–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// ==================== –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ú–û–ö–û–î–û–í –ü–û –¢–ò–ü–ê–ú ====================

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ Stars
async function handleAdminCreatePromoStars(ctx, user, text) {
  try {
    log(`üí∞ –ê–¥–º–∏–Ω ${user.id} —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á Stars: "${text}"`);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
    const parts = text.trim().split(/\s+/);
    if (parts.length < 2) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–ê–ì–†–ê–î–ê –ê–ö–¢–ò–í–ê–¶–ò–ò\n\nüí° –ü—Ä–∏–º–µ—Ä: 100 50');
      return;
    }
    
    const reward = parseFloat(parts[0]);
    const maxActivations = parseInt(parts[1]);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    let code;
    let attempts = 0;
    do {
      code = generateKey();
      attempts++;
      if (attempts > 10) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }
    } while (await db.collection('promocodes').findOne({ code: code }));
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    if (!reward || reward <= 0) {
      await ctx.reply('‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!');
      return;
    }
    
    if (!maxActivations || maxActivations <= 0 || maxActivations > 10000) {
      await ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10000!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
    const existingPromocode = await db.collection('promocodes').findOne({ code: code });
    if (existingPromocode) {
      await ctx.reply(`‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ "${code}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    const promocode = {
      code: code,
      reward: reward,
      rewardType: 'Stars',
      maxActivations: maxActivations,
      activations: 0,
      totalActivations: 0,
      totalRewards: 0,
      isActive: true,
      createdAt: new Date(),
      createdBy: user.id,
      activationsHistory: []
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.collection('promocodes').insertOne(promocode);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_promocodes')]
    ]);
    
    await ctx.reply(
      `‚úÖ *–ö–ª—é—á Stars —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n` +
      `üîë –ö–ª—é—á: \`${code}\`\n` +
      `üí∞ –ù–∞–≥—Ä–∞–¥–∞: \`${formatNumber(reward)}\` Stars\n` +
      `üìä –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: \`${maxActivations}\`\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleString('ru-RU')}\n\n` +
      `üéØ –ö–ª—é—á –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    log(`‚úÖ –ö–ª—é—á Stars ${code} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–æ–º ${user.id}, –Ω–∞–≥—Ä–∞–¥–∞: ${reward} Stars, –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxActivations}`);
    
  } catch (error) {
    logError(error, `–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ Stars –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ Stars
async function handleAdminCreatePromoStars(ctx, user, text) {
  try {
    log(`‚≠ê –ê–¥–º–∏–Ω ${user.id} —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á Stars: "${text}"`);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
    const parts = text.trim().split(/\s+/);
    if (parts.length < 2) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–ê–ì–†–ê–î–ê –ê–ö–¢–ò–í–ê–¶–ò–ò\n\nüí° –ü—Ä–∏–º–µ—Ä: 50 25');
      return;
    }
    
    const reward = parseFloat(parts[0]);
    const maxActivations = parseInt(parts[1]);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    let code;
    let attempts = 0;
    do {
      code = generateKey();
      attempts++;
      if (attempts > 10) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }
    } while (await db.collection('promocodes').findOne({ code: code }));
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    if (!reward || reward <= 0) {
      await ctx.reply('‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!');
      return;
    }
    
    if (!maxActivations || maxActivations <= 0 || maxActivations > 10000) {
      await ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10000!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
    const existingPromocode = await db.collection('promocodes').findOne({ code: code });
    if (existingPromocode) {
      await ctx.reply(`‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ "${code}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    const promocode = {
      code: code,
      reward: reward,
      rewardType: 'stars',
      maxActivations: maxActivations,
      activations: 0,
      totalActivations: 0,
      totalRewards: 0,
      isActive: true,
      createdAt: new Date(),
      createdBy: user.id,
      activationsHistory: []
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.collection('promocodes').insertOne(promocode);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_promocodes')]
    ]);
    
    await ctx.reply(
      `‚úÖ *–ö–ª—é—á Stars —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n` +
      `üîë –ö–ª—é—á: \`${code}\`\n` +
      `‚≠ê –ù–∞–≥—Ä–∞–¥–∞: \`${formatNumber(reward)}\` Stars\n` +
      `üìä –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: \`${maxActivations}\`\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleString('ru-RU')}\n\n` +
      `üéØ –ö–ª—é—á –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç magnumtapchat
    try {
      const chatNotification = `üéâ *–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω!*\n\n` +
        `üé´ –ö–æ–¥: \`${code}\`\n` +
        `üèÖ –†–µ–¥–∫–æ—Å—Ç—å: Stars\n` +
        `üíé –ù–∞–≥—Ä–∞–¥—ã:\n` +
        `‚îú ‚≠ê Stars: +${formatNumber(reward)}\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `‚îú üîÑ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxActivations}\n` +
        `‚îú ‚úÖ –£–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: 0\n` +
        `‚îî ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${maxActivations}\n\n` +
        `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}\n` +
        `‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: –ë–µ—Å—Å—Ä–æ—á–Ω–æ\n\n` +
        `‚ö° –£—Å–ø–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã –ø–µ—Ä–≤—ã–º!`;

      await bot.telegram.sendMessage(config.PROMO_NOTIFICATIONS_CHAT, chatNotification, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [Markup.button.url('üéÆ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ', `https://t.me/${config.BOT_USERNAME}`)]
          ]
        }
      });

      log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ Stars –ø—Ä–æ–º–æ–∫–æ–¥–µ ${code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç`);
    } catch (notifyError) {
      logError(notifyError, `–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ Stars –ø—Ä–æ–º–æ–∫–æ–¥–µ ${code}`);
    }

    log(`‚úÖ –ö–ª—é—á Stars ${code} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–æ–º ${user.id}, –Ω–∞–≥—Ä–∞–¥–∞: ${reward} Stars, –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxActivations}`);
    
  } catch (error) {
    logError(error, `–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ Stars –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å —Ç–∏—Ç—É–ª–æ–º
async function handleAdminCreatePromoTitle(ctx, user, text) {
  try {
    log(`üëë –ê–¥–º–∏–Ω ${user.id} —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á —Å —Ç–∏—Ç—É–ª–æ–º: "${text}"`);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
    const parts = text.trim().split(/\s+/);
    if (parts.length < 2) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¢–ò–¢–£–õ –ê–ö–¢–ò–í–ê–¶–ò–ò\n\nüí° –ü—Ä–∏–º–µ—Ä: üëë –õ–µ–≥–µ–Ω–¥–∞ 10');
      return;
    }
    
    const title = parts.slice(0, -1).join(' '); // –í—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
    const maxActivations = parseInt(parts[parts.length - 1]);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    let code;
    let attempts = 0;
    do {
      code = generateKey();
      attempts++;
      if (attempts > 10) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }
    } while (await db.collection('promocodes').findOne({ code: code }));
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    if (!title || title.length < 2) {
      await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞!');
      return;
    }
    
    if (!maxActivations || maxActivations <= 0 || maxActivations > 10000) {
      await ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10000!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
    const existingPromocode = await db.collection('promocodes').findOne({ code: code });
    if (existingPromocode) {
      await ctx.reply(`‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ "${code}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    const promocode = {
      code: code,
      reward: title,
      rewardType: 'title',
      maxActivations: maxActivations,
      activations: 0,
      totalActivations: 0,
      totalRewards: 0,
      isActive: true,
      createdAt: new Date(),
      createdBy: user.id,
      activationsHistory: []
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.collection('promocodes').insertOne(promocode);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_promocodes')]
    ]);
    
    await ctx.reply(
      `‚úÖ *–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∏—Ç—É–ª–æ–º —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n` +
      `üé´ –ö–æ–¥: \`${code}\`\n` +
      `üëë –¢–∏—Ç—É–ª: \`${title}\`\n` +
      `üìä –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: \`${maxActivations}\`\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleString('ru-RU')}\n\n` +
      `üéØ –ü—Ä–æ–º–æ–∫–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç magnumtapchat
    try {
      const chatNotification = `üéâ *–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω!*\n\n` +
        `üé´ –ö–æ–¥: \`${code}\`\n` +
        `üèÖ –†–µ–¥–∫–æ—Å—Ç—å: –¢–∏—Ç—É–ª\n` +
        `üíé –ù–∞–≥—Ä–∞–¥—ã:\n` +
        `‚îú üëë –¢–∏—Ç—É–ª: ${title}\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `‚îú üîÑ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxActivations}\n` +
        `‚îú ‚úÖ –£–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: 0\n` +
        `‚îî ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${maxActivations}\n\n` +
        `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}\n` +
        `‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: –ë–µ—Å—Å—Ä–æ—á–Ω–æ\n\n` +
        `‚ö° –£—Å–ø–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã –ø–µ—Ä–≤—ã–º!`;

      await bot.telegram.sendMessage(config.PROMO_NOTIFICATIONS_CHAT, chatNotification, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [Markup.button.url('üéÆ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ', `https://t.me/${config.BOT_USERNAME}`)]
          ]
        }
      });

      log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ —Å —Ç–∏—Ç—É–ª–æ–º ${code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç`);
    } catch (notifyError) {
      logError(notifyError, `–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ —Å —Ç–∏—Ç—É–ª–æ–º ${code}`);
    }

    log(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∏—Ç—É–ª–æ–º ${code} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–æ–º ${user.id}, —Ç–∏—Ç—É–ª: ${title}, –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxActivations}`);
    
  } catch (error) {
    logError(error, `–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å —Ç–∏—Ç—É–ª–æ–º –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å —Å—É–Ω–¥—É–∫–æ–º
async function handleAdminCreatePromoChest(ctx, user, text, chestType) {
  try {
    const chestEmojis = {
      'common': 'üü¢',
      'rare': 'üîµ', 
      'epic': 'üü£',
      'legendary': 'üü°'
    };
    
    const chestNames = {
      'common': '–æ–±—ã—á–Ω—ã–º —Å—É–Ω–¥—É–∫–æ–º',
      'rare': '—Ä–µ–¥–∫–∏–º —Å—É–Ω–¥—É–∫–æ–º',
      'epic': '—ç–ø–∏—á–µ—Å–∫–∏–º —Å—É–Ω–¥—É–∫–æ–º', 
      'legendary': '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–º —Å—É–Ω–¥—É–∫–æ–º'
    };
    
    log(`${chestEmojis[chestType]} –ê–¥–º–∏–Ω ${user.id} —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Å ${chestNames[chestType]}: "${text}"`);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
    const parts = text.trim().split(/\s+/);
    if (parts.length < 1) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ê–ö–¢–ò–í–ê–¶–ò–ò\n\nüí° –ü—Ä–∏–º–µ—Ä: 100`);
      return;
    }
    
    const maxActivations = parseInt(parts[0]);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    let code;
    let attempts = 0;
    do {
      code = generateKey();
      attempts++;
      if (attempts > 10) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }
    } while (await db.collection('promocodes').findOne({ code: code }));
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    if (!maxActivations || maxActivations <= 0 || maxActivations > 10000) {
      await ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10000!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
    const existingPromocode = await db.collection('promocodes').findOne({ code: code });
    if (existingPromocode) {
      await ctx.reply(`‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ "${code}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ —Å —Å—É–Ω–¥—É–∫–æ–º
    const promocode = {
      code: code,
      rewardType: 'chest',
      chestType: chestType,
      maxActivations: maxActivations,
      activations: 0,
      totalActivations: 0,
      totalRewards: 0,
      isActive: true,
      createdAt: new Date(),
      createdBy: user.id,
      activationsHistory: []
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.collection('promocodes').insertOne(promocode);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_promocodes')]
    ]);
    
    await ctx.reply(
      `‚úÖ *–ö–ª—é—á —Å ${chestNames[chestType]} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n` +
      `üîë –ö–ª—é—á: \`${code}\`\n` +
      `${chestEmojis[chestType]} –¢–∏–ø —Å—É–Ω–¥—É–∫–∞: ${chestType.charAt(0).toUpperCase() + chestType.slice(1)}\n` +
      `üìä –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: \`${maxActivations}\`\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleString('ru-RU')}\n\n` +
      `üéØ –ö–ª—é—á –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç magnumtapchat
    try {
      const rarityNames = {
        'common': '–û–±—ã—á–Ω—ã–π',
        'rare': '–†–µ–¥–∫–∏–π',
        'epic': '–≠–ø–∏—á–µ—Å–∫–∏–π',
        'legendary': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
      };

      const chatNotification = `üéâ *–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω!*\n\n` +
        `üé´ –ö–æ–¥: \`${code}\`\n` +
        `üèÖ –†–µ–¥–∫–æ—Å—Ç—å: ${rarityNames[chestType]}\n` +
        `üíé –ù–∞–≥—Ä–∞–¥—ã:\n` +
        `‚îú ${chestEmojis[chestType]} ${chestType.charAt(0).toUpperCase() + chestType.slice(1)} —Å—É–Ω–¥—É–∫\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `‚îú üîÑ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxActivations}\n` +
        `‚îú ‚úÖ –£–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: 0\n` +
        `‚îî ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${maxActivations}\n\n` +
        `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}\n` +
        `‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: –ë–µ—Å—Å—Ä–æ—á–Ω–æ\n\n` +
        `‚ö° –£—Å–ø–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã –ø–µ—Ä–≤—ã–º!`;

      await bot.telegram.sendMessage(config.PROMO_NOTIFICATIONS_CHAT, chatNotification, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [Markup.button.url('üéÆ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ', `https://t.me/${config.BOT_USERNAME}`)]
          ]
        }
      });

      log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É–Ω–¥—É–∫–µ ${code} (${chestType}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç`);
    } catch (notifyError) {
      logError(notifyError, `–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—É–Ω–¥—É–∫–µ ${code}`);
    }

    log(`‚úÖ –ö–ª—é—á —Å ${chestNames[chestType]} ${code} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–æ–º ${user.id}, –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxActivations}`);
    
  } catch (error) {
    logError(error, `–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å —Å—É–Ω–¥—É–∫–æ–º –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// ==================== –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–û–í ====================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π
async function handleAdminCreatePostWithButton(ctx, user, text) {
  try {
    log(`üìù –ê–¥–º–∏–Ω ${user.id} —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π: "${text}"`);

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    userCache.delete(user.id);

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    const parts = text.split('---').map(part => part.trim());
    if (parts.length !== 3) {
      await ctx.reply(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "---"\n\n` +
        `üìã –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n` +
        `‚îú –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\n` +
        `‚îú ---\n` +
        `‚îú –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏\n` +
        `‚îú ---\n` +
        `‚îî URL –∫–Ω–æ–ø–∫–∏\n\n` +
        `üí° –ü—Ä–∏–º–µ—Ä:\n` +
        `‚îú –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!\n` +
        `‚îú ---\n` +
        `‚îú –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞\n` +
        `‚îú ---\n` +
        `‚îî https://t.me/magnumtap_bot`
      );
      return;
    }

    const [postText, buttonText, buttonUrl] = parts;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!postText || postText.length < 10) {
      await ctx.reply('‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤!');
      return;
    }

    if (!buttonText || buttonText.length < 1) {
      await ctx.reply('‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!');
      return;
    }

    if (!buttonUrl || !buttonUrl.match(/^https?:\/\/.+/)) {
      await ctx.reply('‚ùå URL –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://!');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
    if (!config.REQUIRED_CHANNEL || !config.REQUIRED_CHANNEL.startsWith('@')) {
      await ctx.reply('‚ùå –ö–∞–Ω–∞–ª @magnumtap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—Å—Ç–∞
    const postKeyboard = Markup.inlineKeyboard([
      [Markup.button.url(buttonText, buttonUrl)]
    ]);

    // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
    try {
      const channelMessage = await ctx.telegram.sendMessage(
        config.REQUIRED_CHANNEL,
        postText,
        {
          parse_mode: 'Markdown',
          reply_markup: postKeyboard.reply_markup,
          disable_web_page_preview: true
        }
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await db.collection('adminPosts').insertOne({
        type: 'with_button',
        postText: postText,
        buttonText: buttonText,
        buttonUrl: buttonUrl,
        channelId: config.REQUIRED_CHANNEL,
        messageId: channelMessage.message_id,
        createdBy: user.id,
        createdAt: new Date()
      });

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –µ—â–µ', 'admin_create_post_with_button')],
        [Markup.button.callback('üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')]
      ]);

      await ctx.reply(
        `‚úÖ *–ü–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!*\n\n` +
        `üìù –¢–µ–∫—Å—Ç: ${postText.substring(0, 50)}${postText.length > 50 ? '...' : ''}\n` +
        `üîò –ö–Ω–æ–ø–∫–∞: ${buttonText}\n` +
        `üîó URL: ${buttonUrl}\n` +
        `üì¢ –ö–∞–Ω–∞–ª: ${config.REQUIRED_CHANNEL}\n` +
        `üÜî ID —Å–æ–æ–±—â–µ–Ω–∏—è: \`${channelMessage.message_id}\`\n\n` +
        `üéØ –ü–æ—Å—Ç –≥–æ—Ç–æ–≤ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

      log(`‚úÖ –ü–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º ${user.id} –≤ –∫–∞–Ω–∞–ª ${config.REQUIRED_CHANNEL}, ID: ${channelMessage.message_id}`);

    } catch (channelError) {
      logError(channelError, `–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª ${config.REQUIRED_CHANNEL}`);
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª ${config.REQUIRED_CHANNEL}!\n\n` +
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n` +
        `‚îú –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n` +
        `‚îú –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n` +
        `‚îî –ö–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`
      );
    }

  } catch (error) {
    logError(error, `–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
async function handleAdminCreatePostNoButton(ctx, user, text) {
  try {
    log(`üìù –ê–¥–º–∏–Ω ${user.id} —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏: "${text}"`);

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    userCache.delete(user.id);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!text || text.length < 10) {
      await ctx.reply('‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤!');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
    if (!config.REQUIRED_CHANNEL || !config.REQUIRED_CHANNEL.startsWith('@')) {
      await ctx.reply('‚ùå –ö–∞–Ω–∞–ª @magnumtap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!');
      return;
    }

    // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
    try {
      const channelMessage = await ctx.telegram.sendMessage(
        config.REQUIRED_CHANNEL,
        text,
        {
          parse_mode: 'Markdown',
          disable_web_page_preview: true
        }
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await db.collection('adminPosts').insertOne({
        type: 'no_button',
        postText: text,
        channelId: config.REQUIRED_CHANNEL,
        messageId: channelMessage.message_id,
        createdBy: user.id,
        createdAt: new Date()
      });

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –µ—â–µ', 'admin_create_post_no_button')],
        [Markup.button.callback('üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')]
      ]);

      await ctx.reply(
        `‚úÖ *–ü–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!*\n\n` +
        `üìù –¢–µ–∫—Å—Ç: ${text.substring(0, 50)}${text.length > 50 ? '...' : ''}\n` +
        `üì¢ –ö–∞–Ω–∞–ª: ${config.REQUIRED_CHANNEL}\n` +
        `üÜî ID —Å–æ–æ–±—â–µ–Ω–∏—è: \`${channelMessage.message_id}\`\n\n` +
        `üéØ –ü–æ—Å—Ç –≥–æ—Ç–æ–≤ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );

      log(`‚úÖ –ü–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º ${user.id} –≤ –∫–∞–Ω–∞–ª ${config.REQUIRED_CHANNEL}, ID: ${channelMessage.message_id}`);

    } catch (channelError) {
      logError(channelError, `–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª ${config.REQUIRED_CHANNEL}`);
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª ${config.REQUIRED_CHANNEL}!\n\n` +
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n` +
        `‚îú –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n` +
        `‚îú –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n` +
        `‚îî –ö–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`
      );
    }

  } catch (error) {
    logError(error, `–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// ==================== –°–ò–°–¢–ï–ú–ê –°–£–ù–î–£–ö–û–í ====================
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ —Å—É–Ω–¥—É–∫–∞
function generateChestReward() {
  const random = Math.random();
  
  // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å—É–Ω–¥—É–∫–æ–≤
  if (random < 0.6) {
    // üü¢ –û–±—ã—á–Ω—ã–π —Å—É–Ω–¥—É–∫ (60%)
    const isStars = Math.random() < 0.7; // 70% —à–∞–Ω—Å –Ω–∞ Stars, 30% –Ω–∞ Stars
    
    if (isStars) {
      return {
        level: '–û–±—ã—á–Ω—ã–π',
        emoji: 'üü¢',
        magnuStarsoins: Math.floor(Math.random() * 1000) + 1, // 1-1000 Stars
        stars: 0,
        description: '–û–±—ã—á–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã (Stars)'
      };
    } else {
      return {
        level: '–û–±—ã—á–Ω—ã–π',
        emoji: 'üü¢',
        magnuStarsoins: 0,
        stars: Math.floor(Math.random() * 5) + 1, // 1-5 Stars
        description: '–û–±—ã—á–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã (Stars)'
      };
    }
  } else if (random < 0.85) {
    // üîµ –†–µ–¥–∫–∏–π —Å—É–Ω–¥—É–∫ (25%)
    return {
      level: '–†–µ–¥–∫–∏–π',
      emoji: 'üîµ',
      magnuStarsoins: Math.floor(Math.random() * 100) + 50, // 50-150 Stars
      stars: Math.floor(Math.random() * 50) + 25, // 25-75 Stars
      minerBonus: Math.floor(Math.random() * 2) + 1, // 1-3 –º–∞–π–Ω–µ—Ä–∞
      description: '–†–µ–¥–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Å –º–∞–π–Ω–µ—Ä–∞–º–∏'
    };
  } else if (random < 0.96) {
    // üü£ –≠–ø–∏—á–µ—Å–∫–∏–π —Å—É–Ω–¥—É–∫ (4% - —É–º–µ–Ω—å—à–µ–Ω–æ —Å 10%)
    return {
      level: '–≠–ø–∏—á–µ—Å–∫–∏–π',
      emoji: 'üü£',
      magnuStarsoins: Math.floor(Math.random() * 200) + 100, // 100-300 Stars
      stars: Math.floor(Math.random() * 100) + 50, // 50-150 Stars
      title: getRandomEpicTitle(),
      multiplier: 1.5,
      description: '–≠–ø–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Å —Ç–∏—Ç—É–ª–æ–º'
    };
  } else {
    // üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—É–Ω–¥—É–∫ (2% - —É–º–µ–Ω—å—à–µ–Ω–æ —Å 5%)
    return {
      level: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π',
      emoji: 'üü°',
      magnuStarsoins: Math.floor(Math.random() * 500) + 300, // 300-800 Stars
      stars: Math.floor(Math.random() * 200) + 100, // 100-300 Stars
      minerBonus: Math.floor(Math.random() * 3) + 2, // 2-5 –º–∞–π–Ω–µ—Ä–æ–≤
      title: getRandomLegendaryTitle(),
      multiplier: 2.0,
      description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã'
    };
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ø–∏—á–µ—Å–∫–æ–≥–æ —Ç–∏—Ç—É–ª–∞
function getRandomEpicTitle() {
  const epicTitles = [
    '‚ö° –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π',
    'üî• –û–≥–Ω–µ–Ω–Ω—ã–π',
    '‚ùÑÔ∏è –õ–µ–¥—è–Ω–æ–π',
    'üå™Ô∏è –í–∏—Ö—Ä–µ–≤–æ–π',
    '‚öîÔ∏è –í–æ–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π',
    'üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∏–∫',
    'üéØ –°–Ω–∞–π–ø–µ—Ä',
    'üöÄ –†–∞–∫–µ—Ç—á–∏–∫'
  ];
  return epicTitles[Math.floor(Math.random() * epicTitles.length)];
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞
function getRandomLegendaryTitle() {
  const legendaryTitles = [
    'üëë –ö–æ—Ä–æ–ª—å',
    'üë∏ –ö–æ—Ä–æ–ª–µ–≤–∞',
    'üêâ –î—Ä–∞–∫–æ–Ω',
    '‚ö° –ì—Ä–æ–º–æ–≤–µ—Ä–∂–µ—Ü',
    'üåü –ó–≤–µ–∑–¥–æ—á–µ—Ç',
    'üåô –õ—É–Ω–Ω—ã–π',
    '‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω—ã–π',
    'üíé –ê–ª–º–∞–∑–Ω—ã–π'
  ];
  return legendaryTitles[Math.floor(Math.random() * legendaryTitles.length)];
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ —Å—É–Ω–¥—É–∫–∞
function formatChestReward(reward) {
  let text = '';
  
  if (reward.magnuStarsoins > 0) {
    text += `üí∞ Stars: +${formatNumber(reward.magnuStarsoins)}\n`;
  }
  
  if (reward.stars > 0) {
    text += `‚≠ê Stars: +${formatNumber(reward.stars)}\n`;
  }
  
  if (reward.minerBonus > 0) {
    text += `‚õèÔ∏è –ú–∞–π–Ω–µ—Ä—ã: +${reward.minerBonus} —à—Ç.\n`;
  }
  
  if (reward.title) {
    text += `üëë –¢–∏—Ç—É–ª: ${reward.title}\n`;
  }
  
  if (reward.multiplier) {
    text += `üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${reward.multiplier}\n`;
  }
  
  return text.trim();
}

// ==================== –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–†–û–ú–û–ö–û–î–û–í ====================
async function handleUserEnterPromocode(ctx, user, text) {
  try {
    log(`üé´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥: "${text}"`);
    
    const code = text.trim().toUpperCase();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
    if (!code || code.length < 3) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞! –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    const dailyPromocodes = user.dailyPromocodes || [];
    const todayPromocodes = dailyPromocodes.filter(p => {
      const promoDate = new Date(p.date);
      return promoDate >= today && promoDate < tomorrow;
    });
    
    if (todayPromocodes.length >= 10) {
      await ctx.reply('‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (10/10). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    const usedPromocodes = user.usedPromocodes || [];
    if (usedPromocodes.includes(code)) {
      await ctx.reply('‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!');
      return;
    }
    
    // –ò—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const promocode = await db.collection('promocodes').findOne({ 
      code: code, 
      isActive: true 
    });
    
    if (!promocode) {
      await ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (promocode.expiresAt && new Date(promocode.expiresAt) < new Date()) {
      await ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    if (promocode.maxActivations && promocode.activations >= promocode.maxActivations) {
      await ctx.reply('‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω!');
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã
    let reward = 0;
    let rewardType = 'Stars';
    let chestReward = null;
    
    if (promocode.rewardType === 'chest') {
      // –ù–æ–≤—ã–π —Ç–∏–ø - –ø—Ä–æ–º–æ–∫–æ–¥ —Å —Å—É–Ω–¥—É–∫–æ–º
      chestReward = generateChestReward();
      rewardType = 'chest';
    } else {
      // –°—Ç–∞—Ä—ã–π —Ç–∏–ø - –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
      reward = promocode.reward || 0;
      rewardType = promocode.rewardType || 'Stars';
    }
    
    let updateData = {
      $push: { 
        usedPromocodes: code
      },
      $unset: { adminState: "" },
      $set: { updatedAt: new Date() }
    };
    
    if (rewardType === 'chest') {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–Ω–¥—É–∫–µ
      updateData.$push.dailyPromocodes = {
        code: code,
        date: new Date(),
        reward: chestReward,
        chestLevel: chestReward.level
      };
      
      // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ —Å—É–Ω–¥—É–∫–∞
      if (chestReward.magnuStarsoins > 0) {
        updateData.$inc = {
          ...updateData.$inc,
          magnuStarsoins: chestReward.magnuStarsoins,
          totalEarnedMagnuStarsoins: chestReward.magnuStarsoins,
          experience: Math.floor(chestReward.magnuStarsoins * 5)
        };
      }
      
      if (chestReward.stars > 0) {
        updateData.$inc = {
          ...updateData.$inc,
          stars: chestReward.stars,
          totalEarnedStars: chestReward.stars,
          experience: Math.floor(chestReward.stars * 10)
        };
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏—Ç—É–ª –µ—Å–ª–∏ –µ—Å—Ç—å
      if (chestReward.title) {
        updateData.$set.title = chestReward.title;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
      if (chestReward.minerBonus > 0) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–¥–∞—á–∏ –º–∞–π–Ω–µ—Ä–æ–≤
        updateData.$inc = {
          ...updateData.$inc,
          experience: chestReward.minerBonus * 25
        };
      }
    } else {
      // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
      if (rewardType === 'Stars') {
        updateData.$inc = {
          magnuStarsoins: reward,
          totalEarnedMagnuStarsoins: reward,
          experience: Math.floor(reward * 5)
        };
      } else if (rewardType === 'stars') {
        updateData.$inc = {
          stars: reward,
          totalEarnedStars: reward,
          experience: Math.floor(reward * 10)
        };
      } else if (rewardType === 'title') {
        updateData.$set.title = reward;
        updateData.$inc = {
          experience: 50
        };
      }
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      updateData
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await db.collection('promocodes').updateOne(
      { _id: promocode._id },
      { 
        $inc: { 
          activations: 1,
          totalActivations: 1,
          totalRewards: reward
        },
        $push: { 
          activationsHistory: {
            userId: user.id,
            username: user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            activatedAt: new Date(),
            reward: reward
          }
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await getUser(user.id);
    if (updatedUser) {
      const levelResult = await checkAndUpdateLevel(updatedUser);
      if (levelResult.levelUp) {
        log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ ${levelResult.newLevel}!`);
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if (config.PROMO_NOTIFICATIONS_CHAT) {
      try {
        let rewardText = '';
        if (rewardType === 'Stars') {
          rewardText = `üí∞ –ù–∞–≥—Ä–∞–¥–∞: \`${formatNumber(reward)}\` Stars`;
        } else if (rewardType === 'stars') {
          rewardText = `‚≠ê –ù–∞–≥—Ä–∞–¥–∞: \`${formatNumber(reward)}\` Stars`;
        } else if (rewardType === 'title') {
          rewardText = `üëë –ù–∞–≥—Ä–∞–¥–∞: \`${reward}\``;
        }
        
        const notificationMessage = 
          `üé´ *–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞!*\n\n` +
          `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
          `üÜî ID: \`${user.id}\`\n` +
          `üé´ –ü—Ä–æ–º–æ–∫–æ–¥: \`${code}\`\n` +
          `${rewardText}\n` +
          `üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
        
        await bot.telegram.sendMessage(config.PROMO_NOTIFICATIONS_CHAT, notificationMessage, {
          parse_mode: 'Markdown'
        });
      } catch (notifyError) {
        logError(notifyError, '–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    let notificationText = '';
    
    if (rewardType === 'chest') {
      const rewardText = formatChestReward(chestReward);
      notificationText = `üéâ ${chestReward.emoji} ${chestReward.level} —Å—É–Ω–¥—É–∫!\n${rewardText}`;
    } else {
      if (rewardType === 'Stars') {
        notificationText = `üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${formatNumber(reward)} Stars!`;
      } else if (rewardType === 'stars') {
        notificationText = `‚≠ê –ü–æ–ª—É—á–µ–Ω–æ ${formatNumber(reward)} Stars!`;
      } else if (rewardType === 'title') {
        notificationText = `üëë –ü–æ–ª—É—á–µ–Ω —Ç–∏—Ç—É–ª "${reward}"!`;
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
    await ctx.answerCbQuery(notificationText, { show_alert: true });
    
    let logReward = '';
    if (rewardType === 'chest') {
      logReward = `${chestReward.level} —Å—É–Ω–¥—É–∫`;
    } else if (rewardType === 'Stars') {
      logReward = `${reward} Stars`;
    } else if (rewardType === 'stars') {
      logReward = `${reward} Stars`;
    } else if (rewardType === 'title') {
      logReward = `—Ç–∏—Ç—É–ª "${reward}"`;
    }
    log(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ ${code} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}, –Ω–∞–≥—Ä–∞–¥–∞: ${logReward}`);
    
  } catch (error) {
    logError(error, `–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
async function handleUserEnterPromocodeText(ctx, user, text) {
  try {
    log(`üé´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º: "${text}"`);
    
    const code = text.trim().toUpperCase();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
    if (!code || code.length < 3) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞! –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    const dailyPromocodes = user.dailyPromocodes || [];
    const todayPromocodes = dailyPromocodes.filter(p => {
      const promoDate = new Date(p.date);
      return promoDate >= today && promoDate < tomorrow;
    });
    
    if (todayPromocodes.length >= 10) {
      await ctx.reply('‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (10/10). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    const usedPromocodes = user.usedPromocodes || [];
    if (usedPromocodes.includes(code)) {
      await ctx.reply('‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!');
      return;
    }
    
    // –ò—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const promocode = await db.collection('promocodes').findOne({ 
      code: code, 
      isActive: true 
    });
    
    if (!promocode) {
      await ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (promocode.expiresAt && new Date(promocode.expiresAt) < new Date()) {
      await ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    if (promocode.maxActivations && promocode.activations >= promocode.maxActivations) {
      await ctx.reply('‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω!');
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã
    let reward = 0;
    let rewardType = 'Stars';
    let chestReward = null;
    
    if (promocode.rewardType === 'chest') {
      // –ù–æ–≤—ã–π —Ç–∏–ø - –ø—Ä–æ–º–æ–∫–æ–¥ —Å —Å—É–Ω–¥—É–∫–æ–º
      chestReward = generateChestReward();
      rewardType = 'chest';
    } else {
      // –°—Ç–∞—Ä—ã–π —Ç–∏–ø - –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
      reward = promocode.reward || 0;
      rewardType = promocode.rewardType || 'Stars';
    }
    
    let updateData = {
      $push: { 
        usedPromocodes: code
      },
      $unset: { adminState: "" },
      $set: { updatedAt: new Date() }
    };
    
    if (rewardType === 'chest') {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–Ω–¥—É–∫–µ
      updateData.$push.dailyPromocodes = {
        code: code,
        date: new Date(),
        reward: chestReward,
        chestLevel: chestReward.level
      };
      
      // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ —Å—É–Ω–¥—É–∫–∞
      if (chestReward.magnuStarsoins > 0) {
        updateData.$inc = {
          ...updateData.$inc,
          magnuStarsoins: chestReward.magnuStarsoins,
          totalEarnedMagnuStarsoins: chestReward.magnuStarsoins,
          experience: Math.floor(chestReward.magnuStarsoins * 5)
        };
      }
      
      if (chestReward.stars > 0) {
        updateData.$inc = {
          ...updateData.$inc,
          stars: chestReward.stars,
          totalEarnedStars: chestReward.stars,
          experience: Math.floor(chestReward.stars * 10)
        };
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏—Ç—É–ª –µ—Å–ª–∏ –µ—Å—Ç—å
      if (chestReward.title) {
        updateData.$set.title = chestReward.title;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
      if (chestReward.minerBonus > 0) {
        updateData.$inc = {
          ...updateData.$inc,
          experience: chestReward.minerBonus * 25
        };
      }
    } else {
      // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
      if (rewardType === 'Stars') {
        updateData.$inc = {
          magnuStarsoins: reward,
          totalEarnedMagnuStarsoins: reward,
          experience: Math.floor(reward * 5)
        };
      } else if (rewardType === 'stars') {
        updateData.$inc = {
          stars: reward,
          totalEarnedStars: reward,
          experience: Math.floor(reward * 10)
        };
      } else if (rewardType === 'title') {
        updateData.$set.title = reward;
        updateData.$inc = {
          experience: 50
        };
      }
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      updateData
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await db.collection('promocodes').updateOne(
      { _id: promocode._id },
      { 
        $inc: { 
          activations: 1,
          totalActivations: 1,
          totalRewards: rewardType === 'chest' ? (chestReward.magnuStarsoins || 0) + (chestReward.stars || 0) : reward
        },
        $push: { 
          activationsHistory: {
            userId: user.id,
            username: user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            activatedAt: new Date(),
            reward: rewardType === 'chest' ? chestReward : reward
          }
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await getUser(user.id);
    if (updatedUser) {
      const levelResult = await checkAndUpdateLevel(updatedUser);
      if (levelResult.levelUp) {
        log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ ${levelResult.newLevel}!`);
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if (config.PROMO_NOTIFICATIONS_CHAT) {
      try {
        let rewardText = '';
        if (rewardType === 'chest') {
          rewardText = `üéÅ ${chestReward.level} —Å—É–Ω–¥—É–∫`;
        } else if (rewardType === 'Stars') {
          rewardText = `üí∞ –ù–∞–≥—Ä–∞–¥–∞: \`${formatNumber(reward)}\` Stars`;
        } else if (rewardType === 'stars') {
          rewardText = `‚≠ê –ù–∞–≥—Ä–∞–¥–∞: \`${formatNumber(reward)}\` Stars`;
        } else if (rewardType === 'title') {
          rewardText = `üëë –ù–∞–≥—Ä–∞–¥–∞: \`${reward}\``;
        }
        
        const notificationMessage = 
          `üé´ *–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞!*\n\n` +
          `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
          `üÜî ID: \`${user.id}\`\n` +
          `üé´ –ü—Ä–æ–º–æ–∫–æ–¥: \`${code}\`\n` +
          `${rewardText}\n` +
          `üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
        
        await bot.telegram.sendMessage(config.PROMO_NOTIFICATIONS_CHAT, notificationMessage, {
          parse_mode: 'Markdown'
        });
      } catch (notifyError) {
        logError(notifyError, '–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
    let notificationText = '';
    
    if (rewardType === 'chest') {
      const rewardText = formatChestReward(chestReward);
      notificationText = `üéâ ${chestReward.emoji} ${chestReward.level} —Å—É–Ω–¥—É–∫!\n${rewardText}`;
    } else {
      if (rewardType === 'Stars') {
        notificationText = `üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${formatNumber(reward)} Stars!`;
      } else if (rewardType === 'stars') {
        notificationText = `‚≠ê –ü–æ–ª—É—á–µ–Ω–æ ${formatNumber(reward)} Stars!`;
      } else if (rewardType === 'title') {
        notificationText = `üëë –ü–æ–ª—É—á–µ–Ω —Ç–∏—Ç—É–ª "${reward}"!`;
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await ctx.reply(notificationText);
    
    let logReward = '';
    if (rewardType === 'chest') {
      logReward = `${chestReward.level} —Å—É–Ω–¥—É–∫`;
    } else if (rewardType === 'Stars') {
      logReward = `${reward} Stars`;
    } else if (rewardType === 'stars') {
      logReward = `${reward} Stars`;
    } else if (rewardType === 'title') {
      logReward = `—Ç–∏—Ç—É–ª "${reward}"`;
    }
    log(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ ${code} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}, –Ω–∞–≥—Ä–∞–¥–∞: ${logReward}`);
    
  } catch (error) {
    logError(error, `–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// ==================== FAQ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================


bot.action('faq_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `‚õèÔ∏è *FAQ - –ú–∞–π–Ω–µ—Ä*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞–π–Ω–µ—Ä?*\n` +
      `–ú–∞–π–Ω–µ—Ä - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Stars. –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞–≥—Ä–∞–¥—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.\n\n` +
      `*‚ùì –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä?*\n` +
      `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–§–∞—Ä–º" ‚Üí "‚õèÔ∏è –ú–∞–π–Ω–µ—Ä" –∏ –Ω–∞–∂–º–∏—Ç–µ "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä".\n\n` +
      `*‚ùì –ö–∞–∫ —á–∞—Å—Ç–æ –º–∞–π–Ω–µ—Ä –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞–≥—Ä–∞–¥—ã?*\n` +
      `–ú–∞–π–Ω–µ—Ä –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞–≥—Ä–∞–¥—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.\n\n` +
          `*‚ùì –°–∫–æ–ª—å–∫–æ Stars —è –ø–æ–ª—É—á–∞—é –æ—Ç –º–∞–π–Ω–µ—Ä–∞?*\n` +
    `–ù–∞–≥—Ä–∞–¥–∞ –º–∞–π–Ω–µ—Ä–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:\n` +
    `‚Ä¢ –ö—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞ Stars\n` +
    `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤\n` +
    `‚Ä¢ –£—Ä–æ–≤–Ω—è –≤–∞—à–µ–≥–æ –º–∞–π–Ω–µ—Ä–∞\n\n` +
      `*‚ùì –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä?*\n` +
      `–ú–∞–π–Ω–µ—Ä –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –ø–æ—Ç—Ä–∞—Ç–∏–≤ Stars. –£–ª—É—á—à–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞–≥—Ä–∞–¥—ã.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞–π–Ω–µ—Ä–∞?*\n` +
      `–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 2x –æ–∑–Ω–∞—á–∞–µ—Ç –¥–≤–æ–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É.\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä?*\n` +
      `–î–∞, –º–∞–π–Ω–µ—Ä –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä".\n\n` +
      `*‚ùì –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∞–π–Ω–µ—Ä–∞?*\n` +
      `–ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∞–π–Ω–µ—Ä –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã, –Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –ú–∞–π–Ω–µ—Ä');
  }
});
bot.action('faq_bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üéÅ *FAQ - –ë–æ–Ω—É—Å—ã*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å?*\n` +
      `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å - —ç—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å. –ë–æ–Ω—É—Å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º –ø–æ–¥—Ä—è–¥.\n\n` +
      `*‚ùì –ö–∞–∫ —á–∞—Å—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å?*\n` +
      `–ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞. –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –¥–µ–Ω—å, —Å–µ—Ä–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤?*\n` +
      `–°–µ—Ä–∏—è - —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥, –∫–æ–≥–¥–∞ –≤—ã –∑–∞–±–∏—Ä–∞–ª–∏ –±–æ–Ω—É—Å. –ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ —Å–µ—Ä–∏—è, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞.\n\n` +
      `*‚ùì –°–∫–æ–ª—å–∫–æ Magnum Coins –≤ –±–æ–Ω—É—Å–µ?*\n` +
      `–ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${config.DAILY_BONUS_BASE || 10} Magnum Coins. –° –∫–∞–∂–¥—ã–º –¥–Ω–µ–º —Å–µ—Ä–∏–∏ –Ω–∞–≥—Ä–∞–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.\n\n` +
      `*‚ùì –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è?*\n` +
      `–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –¥–µ–Ω—å, —Å–µ—Ä–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ 1, –∏ –Ω–∞–≥—Ä–∞–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –±–∞–∑–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.\n\n` +
      `*‚ùì –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–Ω—É—Å–æ–≤?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "–ë–æ–Ω—É—Å—ã" ‚Üí "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "–ë–æ–Ω—É—Å—ã" ‚Üí "üî• –°–µ—Ä–∏—è" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –∏ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –ë–æ–Ω—É—Å—ã');
  }
});
bot.action('faq_exchange', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üíé *FAQ - –û–±–º–µ–Ω*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±–º–µ–Ω?*\n` +
      `–û–±–º–µ–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Stars –≤ Stars –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É.\n\n` +
      `*‚ùì –ö–∞–∫–æ–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞?*\n` +
      `–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 1 Magnum Coin = 1 Star (1:1).\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ —Å—É–º–º—ã –º–æ–∂–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å?*\n` +
      `–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º—ã: 10, 50, 100, 500, 1000, 5000 Stars.\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –æ–±–º–µ–Ω—è—Ç—å Stars –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ Stars?*\n` +
      `–ù–µ—Ç, –æ–±–º–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É: Stars ‚Üí Stars.\n\n` +
      `*‚ùì –ï—Å—Ç—å –ª–∏ –∫–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–±–º–µ–Ω?*\n` +
      `–ù–µ—Ç, –æ–±–º–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ –∫—É—Ä—Å—É 1:1.\n\n` +
      `*‚ùì –ó–∞—á–µ–º –Ω—É–∂–Ω—ã Stars?*\n` +
      `Stars –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –±–æ—Ç–µ.\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–±–º–µ–Ω?*\n` +
      `–ù–µ—Ç, –æ–±–º–µ–Ω –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –û–±–º–µ–Ω');
  }
});

bot.action('faq_promocodes', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üé´ *FAQ - –ü—Ä–æ–º–æ–∫–æ–¥—ã*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã?*\n` +
      `–ü—Ä–æ–º–æ–∫–æ–¥—ã - —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –±–æ–Ω—É—Å–Ω—ã–µ Stars –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n\n` +
      `*‚ùì –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?*\n` +
      `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "üé´ –ü—Ä–æ–º–æ–∫–æ–¥" ‚Üí "üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á" –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥.\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–∞—é—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã?*\n` +
      `–ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–∞—é—Ç Stars. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑?*\n` +
      `–ù–µ—Ç, –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç.\n\n` +
      `*‚ùì –ß—Ç–æ –µ—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n` +
      `–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n\n` +
      `*‚ùì –ì–¥–µ –≤–∑—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã?*\n` +
      `–ü—Ä–æ–º–æ–∫–æ–¥—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ –±–æ—Ç–∞ –∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.\n\n` +
      `*‚ùì –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "üé´ –ü—Ä–æ–º–æ–∫–æ–¥" ‚Üí "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞?*\n` +
      `–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ - —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥. –ö–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –ø—Ä–æ–º–æ–∫–æ–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –ü—Ä–æ–º–æ–∫–æ–¥—ã');
  }
});

bot.action('faq_referrals', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üë• *FAQ - –†–µ—Ñ–µ—Ä–∞–ª—ã*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?*\n` +
      `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –≤ –±–æ—Ç–∞.\n\n` +
      `*‚ùì –ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞?*\n` +
      `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã" ‚Üí "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É.\n\n` +
      `*‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞?*\n` +
      `–ö–æ–≥–¥–∞ –¥—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤?*\n` +
      `–ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${config.REFERRAL_REWARD || 10} Stars.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —É—Ä–æ–≤–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤?*\n` +
      `–£—Ä–æ–≤–Ω–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n` +
      `‚Ä¢ 1-5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –ù–æ–≤–∏—á–æ–∫\n` +
      `‚Ä¢ 6-15 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –û–ø—ã—Ç–Ω—ã–π\n` +
      `‚Ä¢ 16-30 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –≠–∫—Å–ø–µ—Ä—Ç\n` +
      `‚Ä¢ 31+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –ú–∞—Å—Ç–µ—Ä\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤?*\n` +
      `–ù–µ—Ç, —Ä–µ—Ñ–µ—Ä–∞–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n` +
      `*‚ùì –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã" ‚Üí "üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞?*\n` +
      `–í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ —É—Ä–æ–≤–µ–Ω—å.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –†–µ—Ñ–µ—Ä–∞–ª—ã');
  }
});

bot.action('faq_achievements', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üèÜ *FAQ - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?*\n` +
      `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –±–æ—Ç–µ.\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?*\n` +
      `‚Ä¢ –§–∞—Ä–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞—Ä–º–æ–≤\n` +
      `‚Ä¢ –ú–∞–π–Ω–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –∑–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–∞–π–Ω–µ—Ä–∞\n` +
      `‚Ä¢ –ë–æ–Ω—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –∑–∞ —Å–µ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤\n` +
      `‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n` +
      `‚Ä¢ –û–±–º–µ–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –∑–∞ –æ–±–º–µ–Ω—ã –≤–∞–ª—é—Ç\n` +
      `‚Ä¢ –û–±—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –∑–∞ –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n` +
      `*‚ùì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?*\n` +
      `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—É—á–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π. –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?*\n` +
      `–ó–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–∞—é—Ç—Å—è Stars. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n\n` +
      `*‚ùì –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è" ‚Üí "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º.\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?*\n` +
      `–ù–µ—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è" ‚Üí "üéÅ –ù–∞–≥—Ä–∞–¥—ã" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã.\n\n` +
      `*‚ùì –ö–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å?*\n` +
      `–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è');
  }
});

bot.action('faq_tasks', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üìã *FAQ - –ó–∞–¥–∞–Ω–∏—è*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏—è?*\n` +
      `–ó–∞–¥–∞–Ω–∏—è - —ç—Ç–æ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ Stars –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –∑–∞–¥–∞–Ω–∏—è?*\n` +
      `‚Ä¢ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã, –∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤\n` +
      `‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è - —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏\n` +
      `‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏\n\n` +
      `*‚ùì –ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ?*\n` +
      `1. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "üìã –ó–∞–¥–∞–Ω–∏—è" ‚Üí "üéØ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ"\n` +
      `2. –ù–∞–∂–º–∏—Ç–µ "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å"\n` +
      `3. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n` +
      `4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"\n\n` +
      `*‚ùì –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è?*\n` +
      `–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π. –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É".\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è?*\n` +
      `–ó–∞–¥–∞–Ω–∏—è –¥–∞—é—Ç Stars. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è.\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑?*\n` +
      `–ù–µ—Ç, –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "üìã –ó–∞–¥–∞–Ω–∏—è" ‚Üí "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n` +
      `*‚ùì –ß—Ç–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n` +
      `–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞. –ò–Ω–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –ó–∞–¥–∞–Ω–∏—è');
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
bot.action('support', async (ctx) => {
  try {
    logFunction('bot.action.support', ctx.from.id);
    log(`üÜò –ó–∞–ø—Ä–æ—Å –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
    const user = await getUser(ctx.from.id);
    if (!user) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} –¥–ª—è –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏`);
      return;
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç', 'contact_support')],
      [Markup.button.callback('‚ùì FAQ', 'support_faq')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')]
    ]);
    
    const message = 
      `üÜò *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n` +
      `üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n\n` +
      `üìã *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:*\n\n` +
      `üìù *–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç* - –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç\n` +
      `‚ùì *FAQ* - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:*\n` +
      `‚îî –¢–∏–∫–µ—Ç: –¥–æ 2 —á–∞—Å–æ–≤\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id} –ø–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏`);
    
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
bot.action('contact_support', async (ctx) => {
  try {
    logFunction('bot.action.contact_support', ctx.from.id);
    log(`üÜò –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
    const user = await getUser(ctx.from.id);
    if (!user) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞`);
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'creating_support_ticket', updatedAt: new Date() } }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
    userCache.delete(user.id);
    
    logDebug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω adminState –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, { adminState: 'creating_support_ticket' });
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'support')]
    ]);
    
    const message = 
      `üÜò *–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n` +
      `–í–∞—à ID: \`${user.id}\`\n\n` +
      `üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n` +
      `*–ü—Ä–∏–º–µ—Ä:*\n` +
      `"–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å, –ø–∏—à–µ—Ç –æ—à–∏–±–∫–∞"\n\n` +
      `‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –±—ã—Å—Ç—Ä–µ–µ.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id} –ø–æ–∫–∞–∑–∞–Ω–∞ —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞`);
    
  } catch (error) {
    logError(error, `–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    logDebug(`–û—à–∏–±–∫–∞ –≤ contact_support`, {
      userId: ctx.from.id,
      error: error.message,
      stack: error.stack
    });
  }
});
// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–ù–ê–õ–ê –ü–û–î–î–ï–†–ñ–ö–ò ====================
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
bot.action(/^support_answer_(.+)$/, async (ctx) => {
  try {
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${ctx.from.id} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç ${ctx.match[1]}`);
    
    const ticketId = ctx.match[1];
    const admin = await getUser(ctx.from.id);
    
    if (!admin || !isAdmin(admin.id)) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
    await db.collection('users').updateOne(
      { id: admin.id },
      { $set: { adminState: `answering_ticket_${ticketId}`, updatedAt: new Date() } }
    );
    
    console.log(`üíæ adminState —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ë–î –¥–ª—è –∞–¥–º–∏–Ω–∞ ${admin.id}: answering_ticket_${ticketId}`);
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã adminState –æ–±–Ω–æ–≤–∏–ª—Å—è
    userCache.delete(admin.id);
    console.log(`üóëÔ∏è –ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${admin.id} –æ—á–∏—â–µ–Ω`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', `support_cancel_${ticketId}`)],
      [Markup.button.url('üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –±–æ—Ç–æ–º', `https://t.me/${(await bot.telegram.getMe()).username}`)]
    ]);
    
    const message = 
      `‚úÖ *–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n\n` +
      `üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º:\n\n` +
      `üí° *–°–æ–≤–µ—Ç—ã:*\n` +
      `‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã\n` +
      `‚Ä¢ –î–∞–π—Ç–µ —á–µ—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç\n` +
      `‚Ä¢ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∑–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n` +
      `‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º, –∞ –Ω–µ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    try {
      const personalMessage = 
        `‚úÖ *–§–æ—Ä–º–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç*\n\n` +
        `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n\n` +
        `üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n\n` +
        `üí° *–°–æ–≤–µ—Ç—ã:*\n` +
        `‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã\n` +
        `‚Ä¢ –î–∞–π—Ç–µ —á–µ—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç\n` +
        `‚Ä¢ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∑–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n` +
        `‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ!`;
      
      await ctx.telegram.sendMessage(admin.id, personalMessage, {
        parse_mode: 'Markdown'
      });
      
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${admin.id} –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ${admin.id}:`, error);
    }
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω—É ${ctx.from.id} –ø–æ–∫–∞–∑–∞–Ω–∞ —Ñ–æ—Ä–º–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç ${ticketId}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç ${ctx.match[1]} –∞–¥–º–∏–Ω–æ–º ${ctx.from.id}:`, error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
bot.action(/^support_progress_(.+)$/, async (ctx) => {
  try {
    console.log(`‚è≥ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ" –¥–ª—è —Ç–∏–∫–µ—Ç–∞ ${ctx.match[1]}`);
    
    const ticketId = ctx.match[1];
    const admin = await getUser(ctx.from.id);
    
    if (!admin || !isAdmin(admin.id)) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
    await db.collection('supportTickets').updateOne(
      { id: ticketId },
      { 
        $set: { 
          status: 'in_progress',
          adminId: admin.id,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const ticket = await db.collection('supportTickets').findOne({ id: ticketId });
    if (ticket) {
      try {
        await ctx.telegram.sendMessage(ticket.userId, 
          `‚è≥ *–í–∞—à —Ç–∏–∫–µ—Ç –≤–∑—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É*\n\n` +
          `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
          `üìù *–ü—Ä–æ–±–ª–µ–º–∞:* ${ticket.subject}\n\n` +
          `‚è∞ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.\n` +
          `üìß –û—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!`
        );
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}:`, error);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å', `support_answer_${ticketId}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `support_reject_${ticketId}`)
      ],
      [
        Markup.button.callback('üîí –ó–∞–∫—Ä—ã—Ç—å', `support_close_${ticketId}`)
      ]
    ]);
    
    const message = 
      `‚è≥ *–¢–∏–∫–µ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket?.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üì± *Username:* ${ticket?.username ? '@' + ticket.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üÜî *User ID:* \`${ticket?.userId}\`\n` +
      `üìÖ *–î–∞—Ç–∞:* ${ticket?.createdAt?.toLocaleString('ru-RU')}\n` +
      `üë®‚Äçüíº *–ê–¥–º–∏–Ω:* ${admin.firstName || admin.username || admin.id}\n\n` +
      `üìù *–ü—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${ticket?.description}\n\`\`\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    await ctx.answerCbQuery('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ ${ticketId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ" –¥–ª—è —Ç–∏–∫–µ—Ç–∞ ${ctx.match[1]}:`, error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
bot.action(/^support_reject_(.+)$/, async (ctx) => {
  try {
    console.log(`‚ùå –ê–¥–º–∏–Ω ${ctx.from.id} –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —Ç–∏–∫–µ—Ç ${ctx.match[1]}`);
    
    const ticketId = ctx.match[1];
    const admin = await getUser(ctx.from.id);
    
    if (!admin || !isAdmin(admin.id)) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
    await db.collection('supportTickets').updateOne(
      { id: ticketId },
      { 
        $set: { 
          status: 'rejected',
          adminId: admin.id,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const ticket = await db.collection('supportTickets').findOne({ id: ticketId });
    if (ticket) {
      try {
        await ctx.telegram.sendMessage(ticket.userId, 
          `‚ùå *–í–∞—à —Ç–∏–∫–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n` +
          `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
          `üìù *–ü—Ä–æ–±–ª–µ–º–∞:* ${ticket.subject}\n\n` +
          `‚ö†Ô∏è –í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n` +
          `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.`
        );
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}:`, error);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    const message = 
      `‚ùå *–¢–∏–∫–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket?.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üì± *Username:* ${ticket?.username ? '@' + ticket.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üÜî *User ID:* \`${ticket?.userId}\`\n` +
      `üìÖ *–î–∞—Ç–∞:* ${ticket?.createdAt?.toLocaleString('ru-RU')}\n` +
      `üë®‚Äçüíº *–ê–¥–º–∏–Ω:* ${admin.firstName || admin.username || admin.id}\n\n` +
      `üìù *–ü—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${ticket?.description}\n\`\`\`\n\n` +
      `‚ùå *–°—Ç–∞—Ç—É—Å:* –û—Ç–∫–ª–æ–Ω–µ–Ω`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown'
    });
    
    await ctx.answerCbQuery('‚úÖ –¢–∏–∫–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    console.log(`‚úÖ –¢–∏–∫–µ—Ç ${ticketId} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º ${ctx.from.id}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ ${ctx.match[1]}:`, error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
bot.action(/^support_close_(.+)$/, async (ctx) => {
  try {
    console.log(`üîí –ê–¥–º–∏–Ω ${ctx.from.id} –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç ${ctx.match[1]}`);
    
    const ticketId = ctx.match[1];
    const admin = await getUser(ctx.from.id);
    
    if (!admin || !isAdmin(admin.id)) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
    await db.collection('supportTickets').updateOne(
      { id: ticketId },
      { 
        $set: { 
          status: 'closed',
          adminId: admin.id,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const ticket = await db.collection('supportTickets').findOne({ id: ticketId });
    if (ticket) {
      try {
        await ctx.telegram.sendMessage(ticket.userId, 
          `üîí *–í–∞—à —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç*\n\n` +
          `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
          `üìù *–ü—Ä–æ–±–ª–µ–º–∞:* ${ticket.subject}\n\n` +
          `‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\n` +
          `üí° –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.`
        );
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}:`, error);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    const message = 
      `üîí *–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket?.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üì± *Username:* ${ticket?.username ? '@' + ticket.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üÜî *User ID:* \`${ticket?.userId}\`\n` +
      `üìÖ *–î–∞—Ç–∞:* ${ticket?.createdAt?.toLocaleString('ru-RU')}\n` +
      `üë®‚Äçüíº *–ê–¥–º–∏–Ω:* ${admin.firstName || admin.username || admin.id}\n\n` +
      `üìù *–ü—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${ticket?.description}\n\`\`\`\n\n` +
      `üîí *–°—Ç–∞—Ç—É—Å:* –ó–∞–∫—Ä—ã—Ç`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown'
    });
    
    await ctx.answerCbQuery('‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç');
    console.log(`‚úÖ –¢–∏–∫–µ—Ç ${ticketId} –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–æ–º ${ctx.from.id}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ ${ctx.match[1]}:`, error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
bot.action(/^support_cancel_(.+)$/, async (ctx) => {
  try {
    console.log(`üîô –ê–¥–º–∏–Ω ${ctx.from.id} –æ—Ç–º–µ–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç ${ctx.match[1]}`);
    
    const ticketId = ctx.match[1];
    const admin = await getUser(ctx.from.id);
    
    if (!admin || !isAdmin(admin.id)) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: admin.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(admin.id);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Ç–∏–∫–µ—Ç–∞
    const ticket = await db.collection('supportTickets').findOne({ id: ticketId });
    if (ticket) {
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å', `support_answer_${ticketId}`),
          Markup.button.callback('‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', `support_progress_${ticketId}`)
        ],
        [
          Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `support_reject_${ticketId}`),
          Markup.button.callback('üîí –ó–∞–∫—Ä—ã—Ç—å', `support_close_${ticketId}`)
        ]
      ]);
      
      const message = 
        `üÜò *–¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n` +
        `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
        `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `üì± *Username:* ${ticket.username ? '@' + ticket.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üÜî *User ID:* \`${ticket.userId}\`\n` +
        `üìÖ *–î–∞—Ç–∞:* ${ticket.createdAt.toLocaleString('ru-RU')}\n` +
        `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${ticket.level || 1}\n` +
        `üí∞ *Stars:* ${formatNumber(ticket.magnuStarsoins || 0)}\n` +
        `‚≠ê *Stars:* ${formatNumber(ticket.stars || 0)}\n\n` +
        `üìù *–ü—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${ticket.description}\n\`\`\`\n\n` +
        `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    }
    await ctx.answerCbQuery('‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ');
    console.log(`‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç ${ticketId} –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º ${ctx.from.id}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç ${ctx.match[1]}:`, error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ —Å–≤—è–∑–∏
bot.action('support_telegram', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'contact_support')]
    ]);
    
    const message = 
      `üìß *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ Telegram*\n\n` +
      `–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ Telegram:\n\n` +
      `üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* @magnum_support\n` +
      `üì± *–ö–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏:* @magnumtap\n\n` +
      `üí¨ *–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å:*\n` +
      `1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É @magnum_support\n` +
      `2. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n` +
      `3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID: \`${user.id}\`\n\n` +
      `üìã *–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:*\n` +
      `‚Ä¢ –í–∞—à ID: \`${user.id}\`\n` +
      `‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n` +
      `‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* 5-15 –º–∏–Ω—É—Ç`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram');
  }
});

bot.action('support_whatsapp', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'contact_support')]
    ]);
    
    const message = 
      `üì± *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ WhatsApp*\n\n` +
      `–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ WhatsApp:\n\n` +
      `üìû *–ù–æ–º–µ—Ä:* +7 (999) 123-45-67\n` +
      `üí¨ *WhatsApp:* https://wa.me/79991234567\n\n` +
      `üí¨ *–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å:*\n` +
      `1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É WhatsApp\n` +
      `2. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n` +
      `3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID: \`${user.id}\`\n\n` +
      `üìã *–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:*\n` +
      `‚Ä¢ –í–∞—à ID: \`${user.id}\`\n` +
      `‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n` +
      `‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* 10-30 –º–∏–Ω—É—Ç`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ WhatsApp');
  }
});

bot.action('support_email', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'contact_support')]
    ]);
    
    const message = 
      `üìß *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ Email*\n\n` +
      `–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ Email:\n\n` +
      `üìß *Email:* support@magnumtap.com\n` +
      `üìß *–¢–µ–º–∞ –ø–∏—Å—å–º–∞:* –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Magnum Bot\n\n` +
      `üìù *–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞:*\n` +
      `‚Ä¢ –í–∞—à ID: \`${user.id}\`\n` +
      `‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${getDisplayName(user)}\n` +
      `‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n` +
      `‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n\n` +
      `üìã *–ü—Ä–∏–º–µ—Ä –ø–∏—Å—å–º–∞:*\n` +
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n` +
      `–ú–æ–π ID: ${user.id}\n` +
      `–ü—Ä–æ–±–ª–µ–º–∞: [–æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É]\n\n` +
      `–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n` +
      `${getDisplayName(user)}\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* 1-24 —á–∞—Å–∞`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Email');
  }
});

// FAQ
bot.action('support_faq', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí∞ –ë–æ–Ω—É—Å—ã', 'faq_bonus')],
      [Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥', 'faq_mining')],
      [Markup.button.callback('üìà –ë–∏—Ä–∂–∞', 'faq_exchange')],
      [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'faq_referrals')],
      [Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'faq_tasks')],
      [Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'faq_achievements')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support')]
    ]);
    
    const message = 
      `‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)*\n\n` +
      `üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n` +
      `üí∞ *–ë–æ–Ω—É—Å—ã* - –í–æ–ø—Ä–æ—Å—ã –æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö\n` +
      `‚õèÔ∏è *–ú–∞–π–Ω–∏–Ω–≥* - –í–æ–ø—Ä–æ—Å—ã –æ —Å–∏—Å—Ç–µ–º–µ –º–∞–π–Ω–∏–Ω–≥–∞\n` +
      `üìà *–ë–∏—Ä–∂–∞* - –í–æ–ø—Ä–æ—Å—ã –æ–± –æ–±–º–µ–Ω–µ –≤–∞–ª—é—Ç\n` +
      `üë• *–†–µ—Ñ–µ—Ä–∞–ª—ã* - –í–æ–ø—Ä–æ—Å—ã –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ\n` +
      `üìã *–ó–∞–¥–∞–Ω–∏—è* - –í–æ–ø—Ä–æ—Å—ã –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π\n` +
      `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è* - –í–æ–ø—Ä–æ—Å—ã –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö\n\n` +
      `üí° –ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ');
  }
});

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ü–û–ù–°–û–†–°–ö–ò–• –ó–ê–î–ê–ù–ò–ô ====================

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
bot.action(/^approve_screenshot_(\d+)_(\d+)$/, async (ctx) => {
  try {
    const userId = parseInt(ctx.match[1]);
    const taskId = parseInt(ctx.match[2]);
    
    const user = await getUser(userId);
    if (!user) {
      await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const sponsorTasks = getSponsorTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    await db.collection('users').updateOne(
      { id: userId },
      { 
        $set: { 
          [`tasks.sponsorTasks.${taskId}.completed`]: true,
          [`tasks.sponsorTasks.${taskId}.completedAt`]: new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(userId);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await ctx.telegram.sendMessage(userId, 
        `‚úÖ *–°–∫—Ä–∏–Ω—à–æ—Ç –æ–¥–æ–±—Ä–µ–Ω!*\n\n` +
        `üéØ –ó–∞–¥–∞–Ω–∏–µ: ${task.title}\n` +
        `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} ${task.rewardType === 'stars' ? '‚≠ê Stars' : 'Stars'}\n\n` +
        `üéÅ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞–¥–∞–Ω–∏—è"!`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      logError(error, `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞`);
    }
    
    await ctx.answerCbQuery('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–¥–æ–±—Ä–µ–Ω');
    await ctx.editMessageReplyMarkup({
      inline_keyboard: [
        [Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ', 'approved')]
      ]
    });
    
  } catch (error) {
    logError(error, '–û–¥–æ–±—Ä–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
bot.action(/^reject_screenshot_(\d+)_(\d+)$/, async (ctx) => {
  try {
    const userId = parseInt(ctx.match[1]);
    const taskId = parseInt(ctx.match[2]);
    
    const user = await getUser(userId);
    if (!user) {
      await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const sponsorTasks = getSponsorTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await db.collection('users').updateOne(
      { id: userId },
      { 
        $unset: { 
          [`tasks.sponsorTasks.${taskId}.screenshot`]: "",
          [`tasks.sponsorTasks.${taskId}.screenshotFileId`]: "",
          [`tasks.sponsorTasks.${taskId}.screenshotAt`]: ""
        },
        $set: { 
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(userId);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await ctx.telegram.sendMessage(userId, 
        `‚ùå *–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n` +
        `üéØ –ó–∞–¥–∞–Ω–∏–µ: ${task.title}\n` +
        `üìù –ü—Ä–∏—á–∏–Ω–∞: –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n\n` +
        `üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—â–µ —Ä–∞–∑ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞–¥–∞–Ω–∏—è"`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      logError(error, `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞`);
    }
    
    await ctx.answerCbQuery('‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    await ctx.editMessageReplyMarkup({
      inline_keyboard: [
        [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', 'rejected')]
      ]
    });
    
  } catch (error) {
    logError(error, '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å –ø—Ä–∏—á–∏–Ω–æ–π
bot.action(/^reject_reason_(\d+)_(\d+)_(.+)$/, async (ctx) => {
  try {
    const userId = parseInt(ctx.match[1]);
    const taskId = parseInt(ctx.match[2]);
    const reason = ctx.match[3];
    
    const user = await getUser(userId);
    if (!user) {
      await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const sponsorTasks = getSponsorTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    const reasonText = {
      'not_subscribed': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª',
      'blurry': '–ù–µ—á–µ—Ç–∫–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç',
      'wrong_channel': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª',
      'too_fast': '–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ'
    }[reason] || '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º';
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await db.collection('users').updateOne(
      { id: userId },
      { 
        $unset: { 
          [`tasks.sponsorTasks.${taskId}.screenshot`]: "",
          [`tasks.sponsorTasks.${taskId}.screenshotFileId`]: "",
          [`tasks.sponsorTasks.${taskId}.screenshotAt`]: ""
        },
        $set: { 
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(userId);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await ctx.telegram.sendMessage(userId, 
        `‚ùå *–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n` +
        `üéØ –ó–∞–¥–∞–Ω–∏–µ: ${task.title}\n` +
        `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reasonText}\n\n` +
        `üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—â–µ —Ä–∞–∑ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞–¥–∞–Ω–∏—è"`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      logError(error, `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞`);
    }
    
    await ctx.answerCbQuery(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${reasonText}`);
    await ctx.editMessageReplyMarkup({
      inline_keyboard: [
        [Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${reasonText}`, 'rejected_with_reason')]
      ]
    });
    
  } catch (error) {
    logError(error, '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.action('main_menu', async (ctx) => {
  try {
    logFunction('bot.action.main_menu', ctx.from.id);
    log(`üè† –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
    const user = await getUser(ctx.from.id);
    if (!user) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é`);
      return;
    }
    
    logDebug(`–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, {
      level: user.level,
      magnuStarsoins: user.magnuStarsoins,
      stars: user.stars,
      isAdmin: isAdmin(user.id)
    });
    
    await showMainMenu(ctx, user);
    log(`‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}`);
    
  } catch (error) {
    logError(error, `–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    logDebug(`–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é`, {
      userId: ctx.from.id,
      error: error.message,
      stack: error.stack
    });
  }
});

// –†–æ–∞–¥–º–∞–ø
bot.action('roadmap', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await ctx.answerCbQuery('–°–∫–æ—Ä–æ...');
  } catch (error) {
    logError(error, '–†–æ–∞–¥–º–∞–ø (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});
bot.action('roadmap_q4_2025', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showRoadmapQ4_2025(ctx, user);
  } catch (error) {
    logError(error, '–†–æ–∞–¥–º–∞–ø Q4 2025 (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('roadmap_q1_2026', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showRoadmapQ1_2026(ctx, user);
  } catch (error) {
    logError(error, '–†–æ–∞–¥–º–∞–ø Q1 2026 (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('roadmap_q2_2026', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showRoadmapQ2_2026(ctx, user);
  } catch (error) {
    logError(error, '–†–æ–∞–¥–º–∞–ø Q2 2026 (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('roadmap_q3_2026', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showRoadmapQ3_2026(ctx, user);
  } catch (error) {
    logError(error, '–†–æ–∞–¥–º–∞–ø Q3 2026 (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});



bot.action('roadmap_suggestions', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showRoadmapSuggestions(ctx, user);
  } catch (error) {
    logError(error, '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–æ–∞–¥–º–∞–ø–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –ú–∞–π–Ω–∏–Ω–≥
bot.action('miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (isAdmin(user.id)) {
      // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
      await showMinerMenu(ctx, user);
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await ctx.answerCbQuery('–§–∞–∑–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ');
    }
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞');
  }
});

bot.action('start_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await startMiner(ctx, user);
  } catch (error) {
    logError(error, '–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('stop_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await stopMiner(ctx, user);
  } catch (error) {
    logError(error, '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('upgrade_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMinerUpgrade(ctx, user);
  } catch (error) {
    logError(error, '–£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('miner_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMinerStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('miner_season_info', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMinerSeasonInfo(ctx, user);
  } catch (error) {
    logError(error, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–µ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});
bot.action('confirm_miner_upgrade', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await upgradeMiner(ctx, user);
  } catch (error) {
    logError(error, '–£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–∞–π–Ω–∏–Ω–≥–∞
bot.action('miner_shop', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMinerShop(ctx, user, 0);
  } catch (error) {
    logError(error, '–ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É –º–∞–π–Ω–µ—Ä–æ–≤
bot.action(/^miner_shop_(\d+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const minerIndex = parseInt(ctx.match[1]);
    await showMinerShop(ctx, user, minerIndex);
  } catch (error) {
    logError(error, '–ù–∞–≤–∏–≥–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –º–∞–π–Ω–µ—Ä–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏–º–∏—Ç–∞ –ø–æ–∫—É–ø–∫–∏
bot.action('miner_shop_limit', async (ctx) => {
  try {
    await ctx.answerCbQuery('‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–∫—É–ø–∫–∏ (5 –º–∞–π–Ω–µ—Ä–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)');
  } catch (error) {
    logError(error, '–õ–∏–º–∏—Ç –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞ —É–¥–∞–ª–µ–Ω

bot.action('miner_leaderboard', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMinerLeaderboard(ctx, user);
  } catch (error) {
    logError(error, '–†–µ–π—Ç–∏–Ω–≥ –º–∞–π–Ω–∏–Ω–≥–∞');
  }
});

bot.action('miner_leaderboard_total', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMinerLeaderboardTotal(ctx, user);
  } catch (error) {
    logError(error, '–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –º–∞–π–Ω–∏–Ω–≥–∞');
  }
});

bot.action('miner_leaderboard_season', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMinerLeaderboardSeason(ctx, user);
  } catch (error) {
    logError(error, '–°–µ–∑–æ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –º–∞–π–Ω–∏–Ω–≥–∞');
  }
});

bot.action('miner_upgrades', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if (!isAdmin(user.id)) {
      await ctx.answerCbQuery('üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!');
      return;
    }
    
    await showMinerUpgrades(ctx, user);
  } catch (error) {
    logError(error, '–ê–ø–≥—Ä–µ–π–¥—ã –º–∞–π–Ω–µ—Ä–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤
bot.action(/^buy_miner_(.+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const minerType = ctx.match[1];
    const result = await buyMiner(user, minerType);
    
    await ctx.answerCbQuery(result.message);
    
    if (result.success) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω
      await showMinerShop(ctx, user);
    }
  } catch (error) {
    logError(error, '–ü–æ–∫—É–ø–∫–∞ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–æ–≤
bot.action(/^upgrade_miner_(.+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!config.ADMIN_IDS.includes(user.id)) {
      await ctx.answerCbQuery('üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
      return;
    }
    
    const minerType = ctx.match[1];
    const result = await upgradeMiner(user, minerType);
    
    await ctx.answerCbQuery(result.message);
    
    if (result.success) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∞–ø–≥—Ä–µ–π–¥–æ–≤
      await showMinerUpgrades(ctx, user);
    }
  } catch (error) {
    logError(error, '–ê–ø–≥—Ä–µ–π–¥ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞');
  }
});

bot.action('insufficient_funds', async (ctx) => {
  try {
    await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è!');
  } catch (error) {
    logError(error, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});


// –û–±–º–µ–Ω
bot.action('exchange', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if (!isAdmin(user.id)) {
      await ctx.answerCbQuery('üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!');
      return;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    userCache.delete(ctx.from.id);
    statsCache.delete('reserve');
    
    await showExchangeMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –æ–±–º–µ–Ω–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –æ–±–º–µ–Ω–∞
bot.action('exchange_custom_Stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã Stars
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'exchange_custom_Stars', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'exchange')]
    ]);
    
    await ctx.editMessageText(
      `ü™ô *–í–≤–æ–¥ —Å—É–º–º—ã –æ–±–º–µ–Ω–∞ Magnum Coins ‚Üí Stars*\n\n` +
      `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: \`${formatNumber(user.magnuStarsoins)}\` ü™ô Magnum Coins\n\n` +
      `üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É Magnum Coins –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ Stars:`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–í–≤–æ–¥ —Å—É–º–º—ã Stars –¥–ª—è –æ–±–º–µ–Ω–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã');
  }
});

bot.action('exchange_custom_stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã Stars
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'exchange_custom_stars', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const exchangeRate = await calculateExchangeRate();
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'exchange')]
    ]);
    
    await ctx.editMessageText(
      `‚≠ê *–í–≤–æ–¥ —Å—É–º–º—ã –æ–±–º–µ–Ω–∞ Stars ‚Üí Magnum Coins*\n\n` +
      `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: \`${formatNumber(user.stars)}\` ‚≠ê Stars\n` +
      `üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 Stars = \`${exchangeRate.toFixed(6)}\` ü™ô Magnum Coins\n\n` +
      `üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É Stars –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ Magnum Coins:`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–í–≤–æ–¥ —Å—É–º–º—ã Stars –¥–ª—è –æ–±–º–µ–Ω–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã');
  }
});


bot.action('exchange_all', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const amount = Math.floor(user.magnuStarsoins);
    if (amount <= 0) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç Stars –¥–ª—è –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    await performExchange(ctx, user, amount);
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω –≤—Å–µ—Ö Stars');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–∏—Ä–∂–∏
bot.action('exchange_chart', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeChart(ctx, user);
  } catch (error) {
    logError(error, '–ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
  }
});

bot.action('exchange_history', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeHistory(ctx, user);
  } catch (error) {
    logError(error, '–ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
  }
});

bot.action('exchange_settings', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeSettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
});

bot.action('exchange_news', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeNews(ctx, user);
  } catch (error) {
    logError(error, '–ù–æ–≤–æ—Å—Ç–∏ –±–∏—Ä–∂–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π');
  }
});

bot.action('exchange_refresh', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    userCache.delete(user.id);
    statsCache.delete('reserve');
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showExchangeMenu(ctx, updatedUser);
      await ctx.answerCbQuery('‚úÖ –ë–∏—Ä–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    }
  } catch (error) {
    logError(error, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏—Ä–∂–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫—É—Ä—Å–∞
bot.action('chart_24h', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeChart(ctx, user);
  } catch (error) {
    logError(error, '–ì—Ä–∞—Ñ–∏–∫ 24 —á–∞—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
  }
});

bot.action('chart_7d', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeChart(ctx, user);
  } catch (error) {
    logError(error, '–ì—Ä–∞—Ñ–∏–∫ 7 –¥–Ω–µ–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
  }
});

bot.action('chart_30d', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeChart(ctx, user);
  } catch (error) {
    logError(error, '–ì—Ä–∞—Ñ–∏–∫ 30 –¥–Ω–µ–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
  }
});

bot.action('chart_all', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeChart(ctx, user);
  } catch (error) {
    logError(error, '–ì—Ä–∞—Ñ–∏–∫ –≤—Å–µ –≤—Ä–µ–º—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤
bot.action('history_all', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeHistory(ctx, user);
  } catch (error) {
    logError(error, '–í—Å–µ –æ–±–º–µ–Ω—ã');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
  }
});

bot.action('history_profit', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeHistory(ctx, user);
  } catch (error) {
    logError(error, '–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ –æ–±–º–µ–Ω—ã');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
  }
});

bot.action('history_loss', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeHistory(ctx, user);
  } catch (error) {
    logError(error, '–£–±—ã—Ç–æ—á–Ω—ã–µ –æ–±–º–µ–Ω—ã');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
  }
});

bot.action('history_dates', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeHistory(ctx, user);
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω—ã –ø–æ –¥–∞—Ç–∞–º');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂–∏
bot.action('exchange_notifications', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await ctx.answerCbQuery('üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!');
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
});

bot.action('exchange_auto', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await ctx.answerCbQuery('üìä –ê–≤—Ç–æ–æ–±–º–µ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!');
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–º–µ–Ω–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ–±–º–µ–Ω–∞');
  }
});
bot.action('exchange_limits', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await ctx.answerCbQuery('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!');
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏–º–∏—Ç–æ–≤');
  }
});

bot.action('exchange_security', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await ctx.answerCbQuery('üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!');
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –±–∏—Ä–∂–∏
bot.action('news_analytics', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await ctx.answerCbQuery('üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!');
  } catch (error) {
    logError(error, '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
  }
});
bot.action('news_reports', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await ctx.answerCbQuery('üìä –û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!');
  } catch (error) {
    logError(error, '–û—Ç—á–µ—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤');
  }
});

bot.action('news_updates', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await ctx.answerCbQuery('üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!');
  } catch (error) {
    logError(error, '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
  }
});

bot.action('news_latest', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await ctx.answerCbQuery('üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!');
  } catch (error) {
    logError(error, '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π');
  }
});

// –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
bot.action('withdrawal', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showWithdrawalMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
bot.action('withdrawal_Stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await ctx.answerCbQuery('üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  } catch (error) {
    logError(error, '–í—ã–≤–æ–¥ Stars (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('withdrawal_stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    if (user.stars < 50) {
      await ctx.answerCbQuery('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 50 Stars');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'withdrawing_stars', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'withdrawal')]
    ]);
    
    await ctx.editMessageText(
      `‚≠ê *–í—ã–≤–æ–¥ Stars*\n\n` +
      `üíé –î–æ—Å—Ç—É–ø–Ω–æ: ${formatNumber(user.stars)} Stars\n` +
      `üí∏ –ö–æ–º–∏—Å—Å–∏—è: 5%\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 15, 50, 100\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ú–∏–Ω–∏–º—É–º 50 Stars!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–í—ã–≤–æ–¥ Stars');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ Stars');
  }
});

bot.action('withdrawal_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const withdrawal = user.withdrawal || { withdrawalCount: 0, totalWithdrawn: 0 };
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'withdrawal')]
    ]);
    
    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤*\n\n` +
      `üí∞ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${withdrawal.withdrawalCount}\n` +
      `‚îú –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: ${formatNumber(withdrawal.totalWithdrawn)} Stars\n` +
      `‚îî –°—Ä–µ–¥–Ω–∏–π –≤—ã–≤–æ–¥: ${withdrawal.withdrawalCount > 0 ? formatNumber(withdrawal.totalWithdrawn / withdrawal.withdrawalCount) : '0.00'} Stars\n\n` +
      `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥: 5%\n` +
      `‚îú üöß –í—ã–≤–æ–¥ Stars: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n` +
      `‚îú –ú–∏–Ω–∏–º—É–º Stars: 50\n` +
      `‚îî –û–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ 24 —á–∞—Å–æ–≤`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–æ–≤');
  }
});

bot.action('withdrawal_history', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'withdrawal')]
    ]);
    
    const message = 
      `üìã *–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤*\n\n` +
      `üìù –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n` +
      `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚îú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö\n` +
      `‚îú –í—Å–µ –≤—ã–≤–æ–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é\n` +
      `‚îî –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤');
  }
});

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è - —É–¥–∞–ª–µ–Ω—ã

// –†–µ—Ñ–µ—Ä–∞–ª—ã
bot.action('referrals', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralsMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});

bot.action('referral_link', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralLink(ctx, user);
  } catch (error) {
    logError(error, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞');
  }
});
bot.action('referral_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});
bot.action('referral_rewards', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralRewards(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});
bot.action('referral_list', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralList(ctx, user);
  } catch (error) {
    logError(error, '–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});

bot.action('copy_referral_link', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const botUsername = (await ctx.telegram.getMe()).username;
    const referralLink = `https://t.me/${botUsername}?start=${user.id}`;
    
    await ctx.answerCbQuery('üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    await ctx.reply(`üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\`${referralLink}\``, { parse_mode: 'Markdown' });
  } catch (error) {
    logError(error, '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏');
  }
});

// –ü—Ä–æ—Ñ–∏–ª—å
bot.action('profile', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showProfileMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è');
  }
});

bot.action('settings_notifications', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showNotificationSettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
});
bot.action('settings_privacy', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showPrivacySettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
  }
});

bot.action('settings_language', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showLanguageSettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞');
  }
});

bot.action('settings_reset', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showResetSettings(ctx, user);
  } catch (error) {
    logError(error, '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
});

// –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.action('toggle_notifications', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await toggleNotificationSetting(ctx, user);
  } catch (error) {
    logError(error, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
});

bot.action('toggle_privacy', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await togglePrivacySetting(ctx, user);
  } catch (error) {
    logError(error, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
  }
});

bot.action('set_language_ru', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await setLanguage(ctx, user, 'ru');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ RU');
  }
});

bot.action('set_language_en', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await setLanguage(ctx, user, 'en');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ EN');
  }
});

bot.action('confirm_reset', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await resetUserSettings(ctx, user);
  } catch (error) {
    logError(error, '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});
// –ó–∞–¥–∞–Ω–∏—è - —É–¥–∞–ª–µ–Ω—ã

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π - —É–¥–∞–ª–µ–Ω—ã






// –ë–æ–Ω—É—Å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.action('bonus_user', async (ctx) => {
  try {
    await ctx.answerCbQuery('üöß –°–∫–æ—Ä–æ...');
  } catch (error) {
    logError(error, '–ë–æ–Ω—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
});

bot.action('claim_bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await claimBonus(ctx, user);
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('bonus_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showBonusStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('bonus_streak', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showBonusStreak(ctx, user);
  } catch (error) {
    logError(error, '–°–µ—Ä–∏—è –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});



bot.action('bonus_cooldown', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const bonus = user.dailyBonus;
    const now = Date.now();
    const lastBonus = bonus.lastBonus ? bonus.lastBonus.getTime() : 0;
    const timeSince = now - lastBonus;
    const dayInMs = 24 * 60 * 60 * 1000;
    
    if (timeSince < dayInMs) {
      const remaining = dayInMs - timeSince;
      await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(Math.floor(remaining / 1000))} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞!`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
      startBonusCountdown(ctx, user, Math.floor(remaining / 1000));
    } else {
      // –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω —É–∂–µ –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
      await updateBonusMenu(ctx, user);
    }
  } catch (error) {
    logError(error, '–ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞');
  }
});
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
bot.action('check_subscription', async (ctx) => {
  try {
    const isSubscribed = await checkSubscription(ctx);
    if (isSubscribed) {
      const user = await getUser(ctx.from.id);
      if (!user) return;
      
      await showMainMenu(ctx, user);
    } else {
      await showSubscriptionMessage(ctx);
    }
  } catch (error) {
    logError(error, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const user = await getUser(ctx.from.id);
    if (user) {
      await showMainMenu(ctx, user);
    }
  }
});
// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
bot.action('admin', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminPanel(ctx, user);
  } catch (error) {
    logError(error, '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});
bot.action('admin_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_users', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminUsers(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_balance', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminBalance(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
bot.action('admin_search_user', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'searching_user', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_users')]
    ]);
    
    await ctx.editMessageText(
      `üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 123456789\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});
bot.action('admin_top_users', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminTopUsers(ctx, user);
  } catch (error) {
    logError(error, '–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
});
bot.action('admin_ban_user', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'banning_user', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_users')]
    ]);
    
    await ctx.editMessageText(
      `üö´ *–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 123456789\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});

bot.action('admin_unban_user', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'unbanning_user', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_users')]
    ]);
    
    await ctx.editMessageText(
      `‚úÖ *–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 123456789\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏
bot.action('admin_add_magnum', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'adding_magnum', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_balance')]
    ]);
    
    await ctx.editMessageText(
      `‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n\n` +
      `üí° *–§–æ—Ä–º–∞—Ç:* ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 123456789 1000\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Stars');
  }
});

bot.action('admin_remove_magnum', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'removing_magnum', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_balance')]
    ]);
    
    await ctx.editMessageText(
      `‚ûñ *–£–¥–∞–ª–µ–Ω–∏–µ Stars*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n\n` +
      `üí° *–§–æ—Ä–º–∞—Ç:* ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 123456789 1000\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–£–¥–∞–ª–µ–Ω–∏–µ Stars');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Stars');
  }
});

bot.action('admin_add_stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'adding_stars', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_balance')]
    ]);
    
    await ctx.editMessageText(
      `‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n\n` +
      `üí° *–§–æ—Ä–º–∞—Ç:* ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 123456789 1000\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Stars');
  }
});

bot.action('admin_remove_stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'removing_stars', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_balance')]
    ]);
    
    await ctx.editMessageText(
      `‚ûñ *–£–¥–∞–ª–µ–Ω–∏–µ Stars*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n\n` +
      `üí° *–§–æ—Ä–º–∞—Ç:* ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 123456789 1000\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–£–¥–∞–ª–µ–Ω–∏–µ Stars');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Stars');
  }
});

bot.action('admin_posts', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminPosts(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});
bot.action('admin_promocodes', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminPromocodes(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_settings', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminSettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏
bot.action('admin_titles', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminTitles(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏');
  }
});

bot.action('admin_give_title', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'giving_title', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_titles')]
    ]);
    
    await ctx.editMessageText(
      `‚ûï –í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞:\n\n` +
      `üí° –§–æ—Ä–º–∞—Ç: ID –ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–∏—Ç—É–ª–∞\n` +
      `üí° –ü—Ä–∏–º–µ—Ä: 123456789 üå± –ù–æ–≤–∏—á–æ–∫\n\n` +
      `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã:\n` +
      `‚îú üå± –ù–æ–≤–∏—á–æ–∫\n` +
      `‚îú üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π\n` +
      `‚îú üéØ –û–ø—ã—Ç–Ω—ã–π\n` +
      `‚îú ‚ú® –ú–∞—Å—Ç–µ—Ä\n` +
      `‚îú üí´ –≠–∫—Å–ø–µ—Ä—Ç\n` +
      `‚îú üåü –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª\n` +
      `‚îú üëë –õ–µ–≥–µ–Ω–¥–∞\n` +
      `‚îú üïµÔ∏è –°–∫—Ä—ã—Ç–Ω—ã–π\n` +
      `‚îú üß† –¢–∞–∫—Ç–∏–∫\n` +
      `‚îú ‚è≥ –£—Å–µ—Ä–¥–Ω—ã–π\n` +
      `‚îú üî• –ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π\n` +
      `‚îú üêâ –î—Ä–∞–∫–æ–Ω\n` +
      `‚îú ‚ö° –ë–æ–≥\n` +
      `‚îú üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä\n` +
      `‚îú ‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n` +
      `‚îî üëë –í–ª–∞–¥–µ–ª–µ—Ü`,
      {
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ç–∏—Ç—É–ª–∞');
  }
});

bot.action('admin_remove_title', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'removing_title', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_titles')]
    ]);
    
    await ctx.editMessageText(
      `‚ûñ –ó–∞–±–æ—Ä —Ç–∏—Ç—É–ª–∞\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞:\n\n` +
      `üí° –§–æ—Ä–º–∞—Ç: ID –ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–∏—Ç—É–ª–∞\n` +
      `üí° –ü—Ä–∏–º–µ—Ä: 123456789 üå± –ù–æ–≤–∏—á–æ–∫\n\n` +
      `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ï—Å–ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Ç–∏—Ç—É–ª, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π!`,
      {
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ó–∞–±–æ—Ä —Ç–∏—Ç—É–ª–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–±–æ—Ä–∞ —Ç–∏—Ç—É–ª–∞');
  }
});

bot.action('admin_ranks', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminRanksMenu(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞–º–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞–º–∏');
  }
});

bot.action('admin_give_rank', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'giving_rank', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_ranks')]
    ]);
    
    await ctx.editMessageText(
      `‚≠ê –í—ã–¥–∞—á–∞ —Ä–∞–Ω–≥–∞\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ä–æ–≤–µ–Ω—å:\n\n` +
      `üí° –§–æ—Ä–º–∞—Ç: ID –£—Ä–æ–≤–µ–Ω—å\n` +
      `üí° –ü—Ä–∏–º–µ—Ä: 123456789 50\n\n` +
      `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–Ω–≥–∏:\n` +
      `‚îú 1-4: üå± –ù–æ–≤–∏—á–æ–∫\n` +
      `‚îú 5-9: ‚öîÔ∏è –ë–æ–µ—Ü\n` +
      `‚îú 10-19: üèπ –õ—É—á–Ω–∏–∫\n` +
      `‚îú 20-34: üõ°Ô∏è –†—ã—Ü–∞—Ä—å\n` +
      `‚îú 35-49: ‚öîÔ∏è –í–æ–∏–Ω\n` +
      `‚îú 50-74: ü¶∏ –ì–µ—Ä–æ–π\n` +
      `‚îú 75-99: üèÜ –õ–µ–≥–µ–Ω–¥–∞\n` +
      `‚îî 100+: üëë –ò–º–ø–µ—Ä–∞—Ç–æ—Ä\n\n` +
      `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –£—Ä–æ–≤–µ–Ω—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`,
      {
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–í—ã–¥–∞—á–∞ —Ä–∞–Ω–≥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–∞–Ω–≥–∞');
  }
});

bot.action('admin_ranks_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminRanksStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–Ω–≥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–Ω–≥–æ–≤');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–Ω–≥–æ–≤
async function showAdminRanksStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–Ω–≥–æ–≤
    const ranksStats = await db.collection('users').aggregate([
      {
        $group: {
          _id: {
            $switch: {
              branches: [
                { case: { $lt: ['$level', 5] }, then: 'üå± –ù–æ–≤–∏—á–æ–∫ (1-4)' },
                { case: { $lt: ['$level', 10] }, then: '‚öîÔ∏è –ë–æ–µ—Ü (5-9)' },
                { case: { $lt: ['$level', 20] }, then: 'üèπ –õ—É—á–Ω–∏–∫ (10-19)' },
                { case: { $lt: ['$level', 35] }, then: 'üõ°Ô∏è –†—ã—Ü–∞—Ä—å (20-34)' },
                { case: { $lt: ['$level', 50] }, then: '‚öîÔ∏è –í–æ–∏–Ω (35-49)' },
                { case: { $lt: ['$level', 75] }, then: 'ü¶∏ –ì–µ—Ä–æ–π (50-74)' },
                { case: { $lt: ['$level', 100] }, then: 'üèÜ –õ–µ–≥–µ–Ω–¥–∞ (75-99)' }
              ],
              default: 'üëë –ò–º–ø–µ—Ä–∞—Ç–æ—Ä (100+)'
            }
          },
          count: { $sum: 1 }
        }
      },
      { $sort: { '_id': 1 } }
    ]).toArray();
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_ranks')]
    ]);
    
    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–Ω–≥–æ–≤*\n\n`;
    
    if (ranksStats.length > 0) {
      message += `üìà *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–Ω–≥–∞–º:*\n\n`;
      
      ranksStats.forEach((rank, index) => {
        message += `${rank._id}: \`${rank.count}\` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`;
      });
      
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const totalUsers = ranksStats.reduce((sum, rank) => sum + rank.count, 0);
      const maxRank = ranksStats.reduce((max, rank) => rank.count > max.count ? rank : max, ranksStats[0]);
      
      message += `\nüìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
      message += `‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${totalUsers}\`\n`;
      message += `‚îú –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ä–∞–Ω–≥: \`${maxRank._id}\` (\`${maxRank.count}\`)\n`;
      message += `‚îî –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ: \`${((maxRank.count / totalUsers) * 100).toFixed(1)}%\`\n`;
    } else {
      message += `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–Ω–≥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
    }
    
    message += `\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–Ω–≥–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–Ω–≥–æ–≤');
  }
}

bot.action('admin_titles_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏—Ç—É–ª–æ–≤
    const users = await db.collection('users').find({}).toArray();
    const titleStats = {};
    
    users.forEach(u => {
      const titles = u.titles || [];
      titles.forEach(title => {
        titleStats[title] = (titleStats[title] || 0) + 1;
      });
    });
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_titles')]
    ]);
    
    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏—Ç—É–ª–æ–≤*\n\n`;
    message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${users.length}\`\n\n`;
    
    if (Object.keys(titleStats).length > 0) {
      message += `üèÜ *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–æ–≤:*\n`;
      Object.entries(titleStats)
        .sort(([,a], [,b]) => b - a)
        .forEach(([title, count]) => {
          const percentage = ((count / users.length) * 100).toFixed(1);
          message += `‚îú ${title}: \`${count}\` (${percentage}%)\n`;
        });
    } else {
      message += `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∏—Ç—É–ª–∞—Ö`;
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏—Ç—É–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∏—Ç—É–ª–æ–≤');
  }
});

bot.action('admin_sync_titles', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∏—Ç—É–ª—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await db.collection('users').find({}).toArray();
    let synced = 0;
    
    for (const u of users) {
      try {
        await syncUserTitles(u);
        synced++;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∏—Ç—É–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${u.id}:`, error);
      }
    }
    
    await ctx.answerCbQuery(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–∏—Ç—É–ª–æ–≤ –¥–ª—è ${synced} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`);
    await showAdminTitles(ctx, user);
  } catch (error) {
    logError(error, '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∏—Ç—É–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∏—Ç—É–ª–æ–≤');
  }
});

bot.action('admin_cache', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à–∏
    userCache.clear();
    statsCache.clear();
    
    await ctx.answerCbQuery('‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω!');
    await showAdminPanel(ctx, user);
  } catch (error) {
    logError(error, '–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞');
  }
});

bot.action('admin_reserve', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminReserve(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º');
  }
});

bot.action('admin_debug_ranks', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminDebugRanks(ctx, user);
  } catch (error) {
    logError(error, '–û—Ç–ª–∞–¥–∫–∞ —Ä–∞–Ω–≥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–Ω–≥–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
bot.action('admin_voting', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminVoting(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º');
  }
});

bot.action('admin_voting_create', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminVotingCreate(ctx, user);
  } catch (error) {
    logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
  }
});

bot.action('admin_voting_active', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminVotingActive(ctx, user);
  } catch (error) {
    logError(error, '–ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π');
  }
});

bot.action('admin_voting_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminVotingStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

bot.action('admin_voting_settings', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminVotingSettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
});



bot.action('admin_voting_delete', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminVotingDelete(ctx, user);
  } catch (error) {
    logError(error, '–£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∏—è');
  }
});
bot.action('admin_voting_history', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminVotingHistory(ctx, user);
  } catch (error) {
    logError(error, '–ò—Å—Ç–æ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏');
  }
});

bot.action('admin_test_progress', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminTestProgress(ctx, user);
  } catch (error) {
    logError(error, '–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
  }
});

bot.action('admin_force_level_check', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminForceLevelCheck(ctx, user);
  } catch (error) {
    logError(error, '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è');
  }
});

bot.action('admin_add_experience', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminAddExperience(ctx, user);
  } catch (error) {
    logError(error, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞');
  }
});
bot.action('admin_reserve_add_Stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'adding_reserve_Stars', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_reserve')]
    ]);
    
    await ctx.editMessageText(
      `‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars –≤ —Ä–µ–∑–µ—Ä–≤*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 1000, 5000, 10000\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars –≤ —Ä–µ–∑–µ—Ä–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_reserve_remove_Stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'removing_reserve_Stars', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_reserve')]
    ]);
    
    await ctx.editMessageText(
      `‚ûñ *–£–¥–∞–ª–µ–Ω–∏–µ Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 1000, 5000, 10000\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–£–¥–∞–ª–µ–Ω–∏–µ Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});
bot.action('admin_reserve_add_stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'adding_reserve_stars', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_reserve')]
    ]);
    
    await ctx.editMessageText(
      `‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars –≤ —Ä–µ–∑–µ—Ä–≤*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 1000, 5000, 10000\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars –≤ —Ä–µ–∑–µ—Ä–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_reserve_remove_stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'removing_reserve_stars', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_reserve')]
    ]);
    
    await ctx.editMessageText(
      `‚ûñ *–£–¥–∞–ª–µ–Ω–∏–µ Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 1000, 5000, 10000\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–£–¥–∞–ª–µ–Ω–∏–µ Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º
bot.action('admin_reserve_update_rate', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à —Ä–µ–∑–µ—Ä–≤–∞
    statsCache.delete('reserve');
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const newRate = await calculateExchangeRate();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
    await db.collection('exchangeHistory').insertOne({
      type: 'rate_update',
      rate: newRate,
      timestamp: new Date(),
      magnuStarsoinsReserve: reserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS,
      starsReserve: reserve?.stars || config.INITIAL_RESERVE_STARS,
      reason: 'admin_force_update',
      adminId: user.id
    });
    
    await ctx.answerCbQuery(`‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${newRate.toFixed(6)} Stars –∑–∞ 1 Stars`);
    await showAdminReserve(ctx, user);
  } catch (error) {
    logError(error, '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞');
  }
});

bot.action('admin_reserve_rate_details', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∑–µ—Ä–≤
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const magnuStarsoinsReserve = reserve?.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS;
    const starsReserve = reserve?.stars || config.INITIAL_RESERVE_STARS;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    const exchangeRate = await calculateExchangeRate();
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
    const ratio = magnuStarsoinsReserve / starsReserve;
    const logRatio = ratio > 1 ? Math.log(ratio) / Math.log(10) : 0;
    const multiplier = ratio <= 1 ? Math.max(0.1, ratio) : Math.max(0.1, Math.min(50, 1 + logRatio * 2));
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_reserve')]
    ]);
    
    const message = 
      `üìä *–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞*\n\n` +
      `üí∞ *–†–µ–∑–µ—Ä–≤—ã:*\n` +
      `‚îú ü™ô Magnum Coins: \`${formatNumber(magnuStarsoinsReserve)}\`\n` +
      `‚îî ‚≠ê Stars: \`${formatNumber(starsReserve)}\`\n\n` +
      `üìà *–†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞:*\n` +
      `‚îú –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: \`${ratio.toFixed(4)}\`\n` +
      `‚îú –õ–æ–≥–∞—Ä–∏—Ñ–º: \`${logRatio.toFixed(4)}\`\n` +
      `‚îú –ú–Ω–æ–∂–∏—Ç–µ–ª—å: \`${multiplier.toFixed(4)}\`\n` +
      `‚îú –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: \`${config.BASE_EXCHANGE_RATE}\`\n` +
      `‚îî –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å: \`${exchangeRate.toFixed(6)}\`\n\n` +
      `üí° *–õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:*\n` +
      `‚îú –ü—Ä–∏ ratio ‚â§ 1: –ª–∏–Ω–µ–π–Ω–∞—è —à–∫–∞–ª–∞\n` +
      `‚îú –ü—Ä–∏ ratio > 1: –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞\n` +
      `‚îî –õ–∏–º–∏—Ç—ã: 0.1 ‚â§ –º–Ω–æ–∂–∏—Ç–µ–ª—å ‚â§ 50`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∫—É—Ä—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π
bot.action('admin_exchange_commission', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminExchangeCommission(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–µ–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π');
  }
});

bot.action('admin_commission_increase', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const newCommission = Math.min(config.EXCHANGE_COMMISSION + 0.5, 10); // –ú–∞–∫—Å–∏–º—É–º 10%
    config.EXCHANGE_COMMISSION = newCommission;
    
    await ctx.answerCbQuery(`‚úÖ –ö–æ–º–∏—Å—Å–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ ${newCommission}%`);
    await showAdminExchangeCommission(ctx, user);
  } catch (error) {
    logError(error, '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_commission_decrease', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const newCommission = Math.max(config.EXCHANGE_COMMISSION - 0.5, 0); // –ú–∏–Ω–∏–º—É–º 0%
    config.EXCHANGE_COMMISSION = newCommission;
    
    await ctx.answerCbQuery(`‚úÖ –ö–æ–º–∏—Å—Å–∏—è —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ ${newCommission}%`);
    await showAdminExchangeCommission(ctx, user);
  } catch (error) {
    logError(error, '–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_commission_set', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_commission', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_exchange_commission')]
    ]);
    
    await ctx.editMessageText(
      `üéØ *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –æ–±–º–µ–Ω–∞*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (–æ—Ç 0 –¥–æ 10):\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 2.5, 5.0, 7.5\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});
bot.action('admin_commission_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–º–µ–Ω–æ–≤
    const totalExchanges = await db.collection('users').aggregate([
      { $group: { _id: null, total: { $sum: '$exchange.totalExchanges' } } }
    ]).toArray();
    
    const totalExchanged = await db.collection('users').aggregate([
      { $group: { _id: null, total: { $sum: '$exchange.totalExchanged' } } }
    ]).toArray();
    
    const totalExchangesCount = totalExchanges.length > 0 ? totalExchanges[0].total : 0;
    const totalExchangedAmount = totalExchanged.length > 0 ? totalExchanged[0].total : 0;
    const totalCommission = (totalExchangedAmount * config.EXCHANGE_COMMISSION) / 100;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_exchange_commission')]
    ]);
    
    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–π*\n\n` +
      `üí∞ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ –æ–±–º–µ–Ω–æ–≤: \`${totalExchangesCount}\`\n` +
      `‚îú –í—Å–µ–≥–æ –æ–±–º–µ–Ω–µ–Ω–æ: \`${formatNumber(totalExchangedAmount)}\` Stars\n` +
      `‚îú –¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: \`${config.EXCHANGE_COMMISSION}%\`\n` +
      `‚îî –í—Å–µ–≥–æ –∫–æ–º–∏—Å—Å–∏–π: \`${formatNumber(totalCommission)}\` Stars\n\n` +
      `üìà *–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n` +
      `‚îú –°—Ä–µ–¥–Ω–∏–π –æ–±–º–µ–Ω: \`${totalExchangesCount > 0 ? formatNumber(totalExchangedAmount / totalExchangesCount) : '0.00'}\` Stars\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è: \`${totalExchangesCount > 0 ? formatNumber(totalCommission / totalExchangesCount) : '0.00'}\` Stars\n` +
      `‚îî –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏: \`${config.EXCHANGE_COMMISSION}%\`\n\n` +
      `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚îú –í—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞\n` +
      `‚îî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏ –≤—ã–≤–æ–¥–∞
bot.action('admin_withdrawal_commission', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminWithdrawalCommission(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–µ–π –≤—ã–≤–æ–¥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_withdrawal_commission_increase', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–∏—Å—Å–∏—é
    const currentCommission = config.WITHDRAWAL_COMMISSION || 5.0;
    const newCommission = Math.min(15, currentCommission + 1); // –ú–∞–∫—Å–∏–º—É–º 15%

    await db.collection('config').updateOne(
      { key: 'WITHDRAWAL_COMMISSION' },
      { $set: { value: newCommission } },
      { upsert: true }
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.WITHDRAWAL_COMMISSION = newCommission;

    await ctx.answerCbQuery(`‚úÖ –ö–æ–º–∏—Å—Å–∏—è –≤—ã–≤–æ–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ ${newCommission}%`);
    await showAdminWithdrawalCommission(ctx, user);
  } catch (error) {
    logError(error, '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –≤—ã–≤–æ–¥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_withdrawal_commission_decrease', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–∏—Å—Å–∏—é
    const currentCommission = config.WITHDRAWAL_COMMISSION || 5.0;
    const newCommission = Math.max(0, currentCommission - 1); // –ú–∏–Ω–∏–º—É–º 0%

    await db.collection('config').updateOne(
      { key: 'WITHDRAWAL_COMMISSION' },
      { $set: { value: newCommission } },
      { upsert: true }
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.WITHDRAWAL_COMMISSION = newCommission;

    await ctx.answerCbQuery(`‚úÖ –ö–æ–º–∏—Å—Å–∏—è –≤—ã–≤–æ–¥–∞ —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ ${newCommission}%`);
    await showAdminWithdrawalCommission(ctx, user);
  } catch (error) {
    logError(error, '–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –≤—ã–≤–æ–¥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_withdrawal_commission_set', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_withdrawal_commission', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_withdrawal_commission')]
    ]);
    
    await ctx.editMessageText(
      `üéØ *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –≤—ã–≤–æ–¥–∞*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (–æ—Ç 0 –¥–æ 10):\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 3.0, 5.0, 7.5\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –≤—ã–≤–æ–¥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_withdrawal_commission_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–≤–æ–¥–æ–≤
    const totalWithdrawals = await db.collection('withdrawalRequests').countDocuments();
    const pendingWithdrawals = await db.collection('withdrawalRequests').countDocuments({ status: 'pending' });
    const approvedWithdrawals = await db.collection('withdrawalRequests').countDocuments({ status: 'approved' });
    const rejectedWithdrawals = await db.collection('withdrawalRequests').countDocuments({ status: 'rejected' });
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_withdrawal_commission')]
    ]);
    
    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–π –≤—ã–≤–æ–¥–∞*\n\n` +
      `üí∞ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: \`${totalWithdrawals}\`\n` +
      `‚îú –û–∂–∏–¥–∞—é—Ç: \`${pendingWithdrawals}\`\n` +
      `‚îú –û–¥–æ–±—Ä–µ–Ω–æ: \`${approvedWithdrawals}\`\n` +
      `‚îú –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: \`${rejectedWithdrawals}\`\n` +
      `‚îî –¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: \`5%\`\n\n` +
      `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è –≤–∑–∏–º–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n` +
      `‚îî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–π –≤—ã–≤–æ–¥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_promocodes_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    const promocodes = await db.collection('promocodes').find({}).toArray();
    const totalPromocodes = promocodes.length;
    const activePromocodes = promocodes.filter(p => p.isActive && (!p.expiresAt || p.expiresAt > new Date())).length;
    const expiredPromocodes = promocodes.filter(p => p.expiresAt && p.expiresAt <= new Date()).length;
    const totalActivations = promocodes.reduce((sum, p) => sum + (p.totalActivations || 0), 0);
    const totalRewards = promocodes.reduce((sum, p) => sum + (p.totalRewards || 0), 0);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_promocodes')]
    ]);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è–º–∏
    const activeKeys = promocodes.filter(p => p.isActive && p.activations < p.maxActivations);
    const activeKeysList = activeKeys.slice(0, 10).map(p => {
      const remaining = p.maxActivations - p.activations;
      const rewardType = p.rewardType || 'Stars';
      const rewardText = rewardType === 'Stars' ? `${p.reward} Stars` : 
                        rewardType === 'stars' ? `${p.reward} ‚≠ê` :
                        rewardType === 'title' ? p.title : '–°—É–Ω–¥—É–∫';
      return `üîë \`${p.code}\` - ${rewardText} (${remaining}/${p.maxActivations})`;
    }).join('\n');

    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π*\n\n` +
      `üîë *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: \`${totalPromocodes}\`\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: \`${activePromocodes}\`\n` +
      `‚îú –ò—Å—Ç–µ–∫—à–∏—Ö: \`${expiredPromocodes}\`\n` +
      `‚îú –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: \`${totalActivations}\`\n` +
      `‚îî –í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: \`${formatNumber(totalRewards)}\` Stars\n\n` +
      `üìà *–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n` +
      `‚îú –°—Ä–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: \`${totalPromocodes > 0 ? (totalActivations / totalPromocodes).toFixed(1) : '0'}\`\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${totalActivations > 0 ? formatNumber(totalRewards / totalActivations) : '0.00'}\` Stars\n` +
      `‚îî –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`${totalPromocodes > 0 ? ((activePromocodes / totalPromocodes) * 100).toFixed(1) : '0'}%\`\n\n` +
      `üîë *–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ (—Ç–æ–ø-10):*\n` +
      `${activeKeysList || '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π'}\n\n` +
      `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚îú –ö–ª—é—á–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (12 —Å–∏–º–≤–æ–ª–æ–≤)\n` +
      `‚îú –ö–∞–∂–¥—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑\n` +
      `‚îî –ò—Å—Ç–µ–∫—à–∏–µ –∫–ª—é—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
  }
});

// –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
bot.action('admin_posts_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_posts')]]);
    const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤*\n\n–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.`;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_broadcast', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user || !isAdmin(user.id)) return;
    await db.collection('users').updateOne({ id: user.id }, { $set: { adminState: 'broadcasting', updatedAt: new Date() } });
    await ctx.reply('üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
  } catch (error) { logError(error, '–†–∞—Å—Å—ã–ª–∫–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_create_promocode', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); 
    if (!user || !isAdmin(user.id)) return;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üü¢ –û–±—ã—á–Ω—ã–π —Å—É–Ω–¥—É–∫', 'create_promo_common'),
        Markup.button.callback('üîµ –†–µ–¥–∫–∏–π —Å—É–Ω–¥—É–∫', 'create_promo_rare')
      ],
      [
        Markup.button.callback('üü£ –≠–ø–∏—á–µ—Å–∫–∏–π —Å—É–Ω–¥—É–∫', 'create_promo_epic'),
        Markup.button.callback('üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—É–Ω–¥—É–∫', 'create_promo_legendary')
      ],
      [
        Markup.button.callback('üí∞ Stars', 'create_promo_Stars'),
        Markup.button.callback('‚≠ê Stars', 'create_promo_stars')
      ],
      [
        Markup.button.callback('üëë –¢–∏—Ç—É–ª', 'create_promo_title'),
        Markup.button.callback('üé´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π', 'create_promo_custom')
      ],
      [
        Markup.button.callback('üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–Ω–¥—É–∫–æ–≤', 'show_chest_contents'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—É–Ω–¥—É–∫–æ–≤', 'chest_statistics')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_promocodes')]
    ]);
    
    await ctx.editMessageText(
      `üîë *–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞*\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–ª—é—á–∞:\n\n` +
      `üéÅ *–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—É–Ω–¥—É–∫–æ–≤:*\n` +
      `üü¢ **–û–±—ã—á–Ω—ã–π —Å—É–Ω–¥—É–∫** - –±–∞–∑–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n` +
      `üîµ **–†–µ–¥–∫–∏–π —Å—É–Ω–¥—É–∫** - –Ω–∞–≥—Ä–∞–¥—ã + –º–∞–π–Ω–µ—Ä—ã\n` +
      `üü£ **–≠–ø–∏—á–µ—Å–∫–∏–π —Å—É–Ω–¥—É–∫** - –Ω–∞–≥—Ä–∞–¥—ã + —Ç–∏—Ç—É–ª + –º–Ω–æ–∂–∏—Ç–µ–ª—å\n` +
      `üü° **–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—É–Ω–¥—É–∫** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n\n` +
      `üí∞ **Stars** - –Ω–∞–≥—Ä–∞–¥–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö\n` +
      `‚≠ê **Stars** - –Ω–∞–≥—Ä–∞–¥–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö\n` +
      `üëë **–¢–∏—Ç—É–ª** - –≤—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞\n` +
      `üé´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π** - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã:`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) { logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ —Ç–∏–ø–∞–º
bot.action('create_promo_Stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); 
    if (!user || !isAdmin(user.id)) return;
    
    await db.collection('users').updateOne(
      { id: user.id }, 
      { $set: { adminState: 'creating_promo_Stars', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    await ctx.editMessageText(
      `üí∞ *–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ Stars*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n` +
      `**–ù–ê–ì–†–ê–î–ê –ê–ö–¢–ò–í–ê–¶–ò–ò**\n\n` +
      `üí° –ü—Ä–∏–º–µ—Ä: 100 50\n\n` +
      `üìã –ì–¥–µ:\n` +
      `‚îú –ù–ê–ì–†–ê–î–ê - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars\n` +
      `‚îî –ê–ö–¢–ò–í–ê–¶–ò–ò - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n\n` +
      `üîë –ö–ª—é—á –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (12 —Å–∏–º–≤–æ–ª–æ–≤)\n\n` +
      `üéØ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) { logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ Stars (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('create_promo_stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); 
    if (!user || !isAdmin(user.id)) return;
    
    await db.collection('users').updateOne(
      { id: user.id }, 
      { $set: { adminState: 'creating_promo_stars', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    await ctx.editMessageText(
      `‚≠ê *–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ Stars*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n` +
      `**–ù–ê–ì–†–ê–î–ê –ê–ö–¢–ò–í–ê–¶–ò–ò**\n\n` +
      `üí° –ü—Ä–∏–º–µ—Ä: 50 25\n\n` +
      `üìã –ì–¥–µ:\n` +
      `‚îú –ù–ê–ì–†–ê–î–ê - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars\n` +
      `‚îî –ê–ö–¢–ò–í–ê–¶–ò–ò - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n\n` +
      `üîë –ö–ª—é—á –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (12 —Å–∏–º–≤–æ–ª–æ–≤)\n\n` +
      `üéØ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) { logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ Stars (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('create_promo_title', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); 
    if (!user || !isAdmin(user.id)) return;
    
    await db.collection('users').updateOne(
      { id: user.id }, 
      { $set: { adminState: 'creating_promo_title', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_create_promocode')]
    ]);
    
    await ctx.editMessageText(
      `üëë *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å —Ç–∏—Ç—É–ª–æ–º*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n` +
      `**–ö–û–î –¢–ò–¢–£–õ –ê–ö–¢–ò–í–ê–¶–ò–ò**\n\n` +
      `üí° –ü—Ä–∏–º–µ—Ä: LEGEND üëë –õ–µ–≥–µ–Ω–¥–∞ 10\n\n` +
      `üìã –ì–¥–µ:\n` +
      `‚îú –ö–û–î - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (3+ —Å–∏–º–≤–æ–ª–æ–≤)\n` +
      `‚îú –¢–ò–¢–£–õ - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞\n` +
      `‚îî –ê–ö–¢–ò–í–ê–¶–ò–ò - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n\n` +
      `üéØ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:`,
      { 
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) { logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ Title (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('create_promo_custom', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); 
    if (!user || !isAdmin(user.id)) return;
    
    await db.collection('users').updateOne(
      { id: user.id }, 
      { $set: { adminState: 'creating_promocode', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_create_promocode')]
    ]);
    
    await ctx.editMessageText(
      `üé´ *–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n` +
      `**–ö–û–î –ù–ê–ì–†–ê–î–ê –¢–ò–ü –ê–ö–¢–ò–í–ê–¶–ò–ò**\n\n` +
      `üí° –ü—Ä–∏–º–µ—Ä—ã:\n` +
      `‚îú WELCOME 100 Stars 50\n` +
      `‚îú STARS50 50 stars 25\n` +
      `‚îî LEGEND üëë –õ–µ–≥–µ–Ω–¥–∞ 10\n\n` +
      `üìã –ì–¥–µ:\n` +
      `‚îú –ö–û–î - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞\n` +
      `‚îú –ù–ê–ì–†–ê–î–ê - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞\n` +
      `‚îú –¢–ò–ü - Stars, stars, –∏–ª–∏ title\n` +
      `‚îî –ê–ö–¢–ò–í–ê–¶–ò–ò - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n\n` +
      `üéØ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:`,
      { 
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) { logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ú–û–ö–û–î–û–í –° –°–£–ù–î–£–ö–ê–ú–ò ====================

// –û–±—ã—á–Ω—ã–π —Å—É–Ω–¥—É–∫
bot.action('create_promo_common', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); 
    if (!user || !isAdmin(user.id)) return;
    
    await db.collection('users').updateOne(
      { id: user.id }, 
      { $set: { adminState: 'creating_promo_common', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_create_promocode')]
    ]);
    
    await ctx.editMessageText(
      `üü¢ *–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å –æ–±—ã—á–Ω—ã–º —Å—É–Ω–¥—É–∫–æ–º*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:\n\n` +
      `**–ê–ö–¢–ò–í–ê–¶–ò–ò**\n\n` +
      `üí° –ü—Ä–∏–º–µ—Ä: 100\n\n` +
      `üìã –ì–¥–µ:\n` +
      `‚îî –ê–ö–¢–ò–í–ê–¶–ò–ò - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n\n` +
      `üîë –ö–ª—é—á –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (12 —Å–∏–º–≤–æ–ª–æ–≤)\n\n` +
      `üéÅ *–ù–∞–≥—Ä–∞–¥—ã –æ–±—ã—á–Ω–æ–≥–æ —Å—É–Ω–¥—É–∫–∞:*\n` +
      `‚îú 10-60 Stars\n` +
      `‚îî 5-25 Stars\n\n` +
      `üéØ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:`,
      { 
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) { logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

// –†–µ–¥–∫–∏–π —Å—É–Ω–¥—É–∫
bot.action('create_promo_rare', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); 
    if (!user || !isAdmin(user.id)) return;
    
    await db.collection('users').updateOne(
      { id: user.id }, 
      { $set: { adminState: 'creating_promo_rare', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_create_promocode')]
    ]);
    
    await ctx.editMessageText(
      `üîµ *–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å —Ä–µ–¥–∫–∏–º —Å—É–Ω–¥—É–∫–æ–º*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:\n\n` +
      `**–ê–ö–¢–ò–í–ê–¶–ò–ò**\n\n` +
      `üí° –ü—Ä–∏–º–µ—Ä: 50\n\n` +
      `üìã –ì–¥–µ:\n` +
      `‚îî –ê–ö–¢–ò–í–ê–¶–ò–ò - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n\n` +
      `üîë –ö–ª—é—á –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (12 —Å–∏–º–≤–æ–ª–æ–≤)\n\n` +
      `üéÅ *–ù–∞–≥—Ä–∞–¥—ã —Ä–µ–¥–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞:*\n` +
      `‚îú 50-150 Stars\n` +
      `‚îú 25-75 Stars\n` +
      `‚îî 1-3 –º–∞–π–Ω–µ—Ä–∞\n\n` +
      `üéØ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:`,
      { 
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) { logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Ä–µ–¥–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

// –≠–ø–∏—á–µ—Å–∫–∏–π —Å—É–Ω–¥—É–∫
bot.action('create_promo_epic', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); 
    if (!user || !isAdmin(user.id)) return;
    
    await db.collection('users').updateOne(
      { id: user.id }, 
      { $set: { adminState: 'creating_promo_epic', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_create_promocode')]
    ]);
    
    await ctx.editMessageText(
      `üü£ *–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å —ç–ø–∏—á–µ—Å–∫–∏–º —Å—É–Ω–¥—É–∫–æ–º*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:\n\n` +
      `**–ê–ö–¢–ò–í–ê–¶–ò–ò**\n\n` +
      `üí° –ü—Ä–∏–º–µ—Ä: 25\n\n` +
      `üìã –ì–¥–µ:\n` +
      `‚îî –ê–ö–¢–ò–í–ê–¶–ò–ò - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n\n` +
      `üîë –ö–ª—é—á –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (12 —Å–∏–º–≤–æ–ª–æ–≤)\n\n` +
      `üéÅ *–ù–∞–≥—Ä–∞–¥—ã —ç–ø–∏—á–µ—Å–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞:*\n` +
      `‚îú 100-300 Stars\n` +
      `‚îú 50-150 Stars\n` +
      `‚îú –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–∏—Ç—É–ª\n` +
      `‚îî –ú–Ω–æ–∂–∏—Ç–µ–ª—å x1.5\n\n` +
      `üéØ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:`,
      { 
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) { logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —ç–ø–∏—á–µ—Å–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

// –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—É–Ω–¥—É–∫
bot.action('create_promo_legendary', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); 
    if (!user || !isAdmin(user.id)) return;
    
    await db.collection('users').updateOne(
      { id: user.id }, 
      { $set: { adminState: 'creating_promo_legendary', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_create_promocode')]
    ]);
    
    await ctx.editMessageText(
      `üü° *–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–º —Å—É–Ω–¥—É–∫–æ–º*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:\n\n` +
      `**–ê–ö–¢–ò–í–ê–¶–ò–ò**\n\n` +
      `üí° –ü—Ä–∏–º–µ—Ä: 10\n\n` +
      `üìã –ì–¥–µ:\n` +
      `‚îî –ê–ö–¢–ò–í–ê–¶–ò–ò - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n\n` +
      `üîë –ö–ª—é—á –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (12 —Å–∏–º–≤–æ–ª–æ–≤)\n\n` +
      `üéÅ *–ù–∞–≥—Ä–∞–¥—ã –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Å—É–Ω–¥—É–∫–∞:*\n` +
      `‚îú 300-800 Stars\n` +
      `‚îú 100-300 Stars\n` +
      `‚îú 2-5 –º–∞–π–Ω–µ—Ä–æ–≤\n` +
      `‚îú –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ç–∏—Ç—É–ª\n` +
      `‚îî –ú–Ω–æ–∂–∏—Ç–µ–ª—å x2.0\n\n` +
      `üéØ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:`,
      { 
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) { logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_mass_give', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user || !isAdmin(user.id)) return;
    await db.collection('users').updateOne({ id: user.id }, { $set: { adminState: 'mass_give', updatedAt: new Date() } });
    await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å–æ–≤—É—é –≤—ã–¥–∞—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "stars 100" –∏–ª–∏ "Stars 50"):');
  } catch (error) { logError(error, '–ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});
bot.action('admin_mining_seasons', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminMiningSeasons(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞–º–∏ –º–∞–π–Ω–∏–Ω–≥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏');
  }
});

bot.action('admin_season_start', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'season_start', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_mining_seasons')]
    ]);
    
    await ctx.editMessageText(
      `üöÄ *–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞*\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n` +
      `‚îú –°–±—Ä–æ—Å–∏—Ç —Å–µ–∑–æ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n` +
      `‚îú –£–≤–µ–ª–∏—á–∏—Ç –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞ –Ω–∞ 1\n` +
      `‚îú –£–≤–µ–ª–∏—á–∏—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ 10%\n` +
      `‚îî –°–æ—Ö—Ä–∞–Ω–∏—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n` +
      `üí° *–í–≤–µ–¥–∏—Ç–µ "–ü–û–î–¢–í–ï–†–î–ò–¢–¨" –¥–ª—è –∑–∞–ø—É—Å–∫–∞:*`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ó–∞–ø—É—Å–∫ —Å–µ–∑–æ–Ω–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ–∑–æ–Ω–∞');
  }
});

bot.action('admin_season_end', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const currentSeason = getCurrentMiningSeason();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ —Å–µ–∑–æ–Ω–∞
    const topPlayers = await db.collection('users')
      .find({ 'miningStats.seasonMinedStars': { $exists: true } })
      .sort({ 'miningStats.seasonMinedStars': -1 })
      .limit(50)
      .toArray();
    
    let message = `‚èπÔ∏è *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ ${currentSeason.season}*\n\n`;
    message += `üìä *–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ —Å–µ–∑–æ–Ω–∞:*\n`;
    
    for (let i = 0; i < Math.min(10, topPlayers.length); i++) {
      const player = topPlayers[i];
      const position = i + 1;
      const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : 'üèÖ';
      message += `${emoji} ${player.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${formatNumber(player.miningStats?.seasonMinedStars || 0)} Stars\n`;
    }
    
    message += `\nüí° *–ù–∞–≥—Ä–∞–¥—ã –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*\n`;
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üèÜ –í—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã', 'admin_season_rewards'),
        Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 'admin_season_reset')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_mining_seasons')]
    ]);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞');
  }
});

bot.action('admin_season_rewards', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const currentSeason = getCurrentMiningSeason();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ —Å–µ–∑–æ–Ω–∞
    const topPlayers = await db.collection('users')
      .find({ 'miningStats.seasonMinedStars': { $exists: true } })
      .sort({ 'miningStats.seasonMinedStars': -1 })
      .limit(50)
      .toArray();
    
    let message = `üèÜ *–í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥ —Å–µ–∑–æ–Ω–∞ ${currentSeason.season}*\n\n`;
    message += `üìä *–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:*\n`;
    
    let totalRewardsStars = 0;
    
    for (let i = 0; i < Math.min(10, topPlayers.length); i++) {
      const player = topPlayers[i];
      const position = i + 1;
      const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : 'üèÖ';
      
      let rewardStars = 0;
      
      if (position === 1) {
        rewardStars = config.SEASON_REWARDS.top1.stars;
      } else if (position <= 3) {
        rewardStars = config.SEASON_REWARDS.top3.stars;
      } else if (position <= 10) {
        rewardStars = config.SEASON_REWARDS.top10.stars;
      }
      
      totalRewardsStars += rewardStars;
      totalRewardsStars += rewardStars;
      
      message += `${emoji} ${player.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: +${formatNumber(rewardStars)} Stars +${rewardStars} ‚≠ê\n`;
    }
    
    message += `\nüí∞ *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥:*\n`;
    message += `‚îú Stars: \`${formatNumber(totalRewardsStars)}\`\n`;
    message += `‚îî Stars: \`${totalRewardsStars}\`\n\n`;
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –í—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã', 'admin_season_rewards_confirm'),
        Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö', 'admin_season_rewards_full')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_mining_seasons')]
    ]);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥ —Å–µ–∑–æ–Ω–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥');
  }
});

bot.action('admin_season_rewards_confirm', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const currentSeason = getCurrentMiningSeason();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ —Å–µ–∑–æ–Ω–∞
    const topPlayers = await db.collection('users')
      .find({ 'miningStats.seasonMinedStars': { $exists: true } })
      .sort({ 'miningStats.seasonMinedStars': -1 })
      .limit(50)
      .toArray();
    
    let issuedCount = 0;
    let totalRewardsStars = 0;
    
    for (let i = 0; i < topPlayers.length; i++) {
      const player = topPlayers[i];
      const position = i + 1;
      
      let rewardStars = 0;
      
      if (position === 1) {
        rewardStars = config.SEASON_REWARDS.top1.stars;
      } else if (position <= 3) {
        rewardStars = config.SEASON_REWARDS.top3.stars;
      } else if (position <= 10) {
        rewardStars = config.SEASON_REWARDS.top10.stars;
      } else if (position <= 50) {
        rewardStars = config.SEASON_REWARDS.top50.magnuStarsoins;
        rewardStars = config.SEASON_REWARDS.top50.stars;
      }
      
      if (rewardStars > 0 || rewardStars > 0) {
        await db.collection('users').updateOne(
          { id: player.id },
          {
            $inc: {
              magnuStarsoins: rewardStars,
              stars: rewardStars,
              'miningStats.seasonRewardsStars': rewardStars,
              'miningStats.seasonRewardsStars': rewardStars
            }
          }
        );
        
        totalRewardsStars += rewardStars;
        totalRewardsStars += rewardStars;
        issuedCount++;
      }
    }
    
    const message = 
      `‚úÖ *–ù–∞–≥—Ä–∞–¥—ã —Å–µ–∑–æ–Ω–∞ ${currentSeason.season} –≤—ã–¥–∞–Ω—ã!*\n\n` +
      `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç:*\n` +
      `‚îú –ò–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã: \`${issuedCount}\`\n` +
      `‚îú –í—ã–¥–∞–Ω–æ Stars: \`${formatNumber(totalRewardsStars)}\`\n` +
      `‚îî –í—ã–¥–∞–Ω–æ Stars: \`${totalRewardsStars}\`\n\n` +
      `üéâ *–°–µ–∑–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!*`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', 'admin_mining_seasons')]
    ]);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    await ctx.answerCbQuery('‚úÖ –ù–∞–≥—Ä–∞–¥—ã –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    logError(error, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥ —Å–µ–∑–æ–Ω–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥');
  }
});

bot.action('admin_season_reset', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'season_reset', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_mining_seasons')]
    ]);
    
    await ctx.editMessageText(
      `üîÑ *–°–±—Ä–æ—Å —Å–µ–∑–æ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n` +
      `‚îú –°–±—Ä–æ—Å–∏—Ç —Å–µ–∑–æ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤\n` +
      `‚îú –û–±–Ω—É–ª–∏—Ç —Å–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n` +
      `‚îú –°–æ—Ö—Ä–∞–Ω–∏—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n` +
      `‚îî –ù–ï –∏–∑–º–µ–Ω–∏—Ç –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞\n\n` +
      `üí° *–í–≤–µ–¥–∏—Ç–µ "–°–ë–†–û–°–ò–¢–¨" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:*`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–°–±—Ä–æ—Å —Å–µ–∑–æ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

bot.action('admin_season_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const currentSeason = getCurrentMiningSeason();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∑–æ–Ω–∞
    const seasonStats = await db.collection('users').aggregate([
      { $match: { 'miningStats.seasonMinedStars': { $exists: true } } },
      { 
        $group: { 
          _id: null, 
          totalStars: { $sum: '$miningStats.seasonMinedStars' },
          totalStars: { $sum: '$miningStats.seasonMinedStars' },
          avgStars: { $avg: '$miningStats.seasonMinedStars' },
          avgStars: { $avg: '$miningStats.seasonMinedStars' },
          players: { $sum: 1 }
        } 
      }
    ]).toArray();
    
    const stats = seasonStats[0] || { totalStars: 0, totalStars: 0, avgStars: 0, avgStars: 0, players: 0 };
    
    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∑–æ–Ω–∞ ${currentSeason.season}*\n\n` +
      `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏:*\n` +
      `‚îú –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: \`${stats.players}\`\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤: \`${stats.players}\`\n` +
      `‚îî –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`${((stats.players / 100) * 100).toFixed(1)}%\`\n\n` +
      `üí∞ *–î–æ–±—ã—á–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ Stars: \`${formatNumber(stats.totalStars)}\`\n` +
      `‚îú –í—Å–µ–≥–æ Stars: \`${formatNumber(stats.totalStars)}\`\n` +
      `‚îú –°—Ä–µ–¥–Ω–µ–µ Stars/–∏–≥—Ä–æ–∫: \`${formatNumber(stats.avgStars)}\`\n` +
      `‚îî –°—Ä–µ–¥–Ω–µ–µ Stars/–∏–≥—Ä–æ–∫: \`${formatNumber(stats.avgStars)}\`\n\n` +
      `üìÖ *–í—Ä–µ–º—è —Å–µ–∑–æ–Ω–∞:*\n` +
      `‚îú –î–µ–Ω—å —Å–µ–∑–æ–Ω–∞: \`${currentSeason.dayInSeason}/${config.MINING_SEASON_DURATION}\`\n` +
      `‚îú –î–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞: \`${currentSeason.daysUntilNextSeason}\`\n` +
      `‚îî –ú–Ω–æ–∂–∏—Ç–µ–ª—å: \`${currentSeason.multiplier}x\``;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_mining_seasons')]
    ]);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∑–æ–Ω–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

bot.action('admin_miner_levels', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const dist = await db.collection('users').aggregate([
      { $match: { 'miner.level': { $exists: true } } },
      { $group: { _id: '$miner.level', cnt: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]).toArray();
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_miner_settings')]]);
    let message = `‚öôÔ∏è *–£—Ä–æ–≤–Ω–∏ –º–∞–π–Ω–µ—Ä–∞*`+"\n\n";
    if (dist.length === 0) message += `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.`; else dist.forEach(d => { message += `–£—Ä–æ–≤–µ–Ω—å ${d._id}: \`${d.cnt}\``+"\n"; });
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–£—Ä–æ–≤–Ω–∏ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_referral_bonuses', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_referral_settings')]]);
    const message = `üèÜ *–ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*`+"\n\n"+`–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.REFERRAL_BONUS}\` Stars.`;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_referral_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const agg = await db.collection('users').aggregate([
      { $group: { _id: null, totalRef: { $sum: { $ifNull: ['$referralsCount', 0] } }, totalEarn: { $sum: { $ifNull: ['$totalReferralEarnings', 0] } }, users: { $sum: 1 } } }
    ]).toArray();
    const g = agg[0] || { totalRef: 0, totalEarn: 0, users: 0 };
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_referral_settings')]]);
    const message = `üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*`+"\n\n"+
      `‚îú –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${g.totalRef}\``+"\n"+
      `‚îú –°—É–º–º–∞—Ä–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: \`${formatNumber(g.totalEarn)}\` Stars`+"\n"+
      `‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${g.users}\``;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_bonus_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const agg = await db.collection('users').aggregate([
      { $group: { _id: null, avgStreak: { $avg: { $ifNull: ['$dailyBonus.streak', 0] } }, maxStreak: { $max: { $ifNull: ['$dailyBonus.streak', 0] } }, gotToday: { $sum: { $cond: [{ $gte: ['$dailyBonus.lastBonus', new Date(Date.now() - 24*60*60*1000)] }, 1, 0] } } } }
    ]).toArray();
    const g = agg[0] || { avgStreak: 0, maxStreak: 0, gotToday: 0 };
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]]);
    const message = `üéÅ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤*`+"\n\n"+
      `‚îú –°—Ä–µ–¥–Ω—è—è —Å–µ—Ä–∏—è: \`${(g.avgStreak || 0).toFixed(1)}\``+"\n"+
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: \`${g.maxStreak || 0}\``+"\n"+
      `‚îî –ü–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ 24—á: \`${g.gotToday}\``;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_bonus_series', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]]);
    const message = `üî• *–°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤*`+"\n\n"+`–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞. –°–µ—Ä–∏—è —Ä–∞—Å—Ç–µ—Ç –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–∏—è—Ö.`;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_cooldowns', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminCooldowns(ctx, user);
  } catch (error) {
    logError(error, '–ö—É–ª–¥–∞—É–Ω—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤');
  }
});



bot.action('admin_daily_bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_bonus_base', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_settings')]
    ]);
    
    await ctx.editMessageText(
      `üéÅ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞*\n\n` +
      `üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä—ã:*\n` +
      `‚îú 1 (1 –º–æ–Ω–µ—Ç–∞)\n` +
      `‚îú 5 (5 –º–æ–Ω–µ—Ç)\n` +
      `‚îú 10 (10 –º–æ–Ω–µ—Ç)\n` +
      `‚îî 50 (50 –º–æ–Ω–µ—Ç)\n\n` +
      `‚ö†Ô∏è *–¢–µ–∫—É—â–∏–π –±–æ–Ω—É—Å:* \`${config.DAILY_BONUS_BASE}\` Stars\n\n` +
      `üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–∞');
  }
});

bot.action('admin_miner_settings', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_miner_reward', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_settings')]
    ]);
    
    await ctx.editMessageText(
      `‚õèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞*\n\n` +
      `üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∏–Ω—É—Ç—É:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä—ã:*\n` +
      `‚îú 0.01 (1 —Ü–µ–Ω—Ç –≤ –º–∏–Ω—É—Ç—É)\n` +
      `‚îú 0.1 (10 —Ü–µ–Ω—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç—É)\n` +
      `‚îú 1.0 (1 –º–æ–Ω–µ—Ç–∞ –≤ –º–∏–Ω—É—Ç—É)\n` +
      `‚îî 10.0 (10 –º–æ–Ω–µ—Ç –≤ –º–∏–Ω—É—Ç—É)\n\n` +
      `‚ö†Ô∏è *–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* \`${config.MINER_REWARD_PER_MINUTE}\` Stars/–º–∏–Ω\n\n` +
      `üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã');
  }
});

bot.action('admin_referral_settings', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_referral_reward', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_settings')]
    ]);
    
    await ctx.editMessageText(
      `üë• *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã*\n\n` +
      `üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä—ã:*\n` +
      `‚îú 10 (10 –º–æ–Ω–µ—Ç)\n` +
      `‚îú 50 (50 –º–æ–Ω–µ—Ç)\n` +
      `‚îú 100 (100 –º–æ–Ω–µ—Ç)\n` +
      `‚îî 500 (500 –º–æ–Ω–µ—Ç)\n\n` +
      `‚ö†Ô∏è *–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* \`${config.REFERRAL_REWARD}\` Stars\n\n` +
      `üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã');
  }
});



bot.action('admin_cooldown_bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_cooldowns')]]);
    const message = `üéÅ *–ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞*`+"\n\n"+`–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ 24 —á–∞—Å–∞.`;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_cooldown_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_cooldowns')]]);
    const message = `‚õèÔ∏è *–ö—É–ª–¥–∞—É–Ω –º–∞–π–Ω–µ—Ä–∞*`+"\n\n"+`–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –∑–∞–¥–∞—á–µ–π –±–æ—Ç–∞.`;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–ö—É–ª–¥–∞—É–Ω –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_cooldown_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_cooldowns')]]);
    const message = `‚è±Ô∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤*`+"\n\n"+

      `‚îú –ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞: \`24—á\``+"\n"+
      `‚îî –ü–µ—Ä–∏–æ–¥ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞: \`30–º\``;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

// –ü—Ä–æ–º–æ–∫–æ–¥
bot.action('promocode', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showPromocodeMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
  }
});

bot.action('enter_promocode', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'entering_promocode', updatedAt: new Date() } }
    );
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'promocode')]
    ]);
    
    await ctx.editMessageText(
      `üé´ *–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n` +
      `üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* WELCOME2024\n\n` +
      `‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n` +
      `‚îú –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑\n` +
      `‚îú –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º\n` +
      `‚îî –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å—Ç–µ–∫—à–∏–º\n\n` +
      `üéØ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
  }
});

bot.action('promocode_history', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const used = user.usedPromocodes || [];
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'promocode')]]);
    let message = `üìú *–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤*`+"\n\n";
    message += used.length === 0 ? '–í—ã –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã.' : used.map((c, i) => `${i + 1}. ${c}`).join('\n');
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});
bot.action('admin_reset_db', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    if (!config.ADMIN_IDS.includes(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å', 'admin_reset_db_confirm'),
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'admin')
      ]
    ]);
    
    await ctx.editMessageText(
      `üóëÔ∏è *–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö*\n\n` +
      `‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n` +
      `üî¥ *–ß—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:*\n` +
      `‚îú üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n` +
      `‚îú üí∞ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã\n` +
      `‚îú üè¶ –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏\n` +
      `‚îú üìä –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
      `‚îú üé´ –í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã\n` +
      `‚îú üìù –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤\n` +
      `‚îú üó≥Ô∏è –í—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n` +
      `‚îî üìã –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
      `üîÑ *–ß—Ç–æ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:*\n` +
      `‚îú üè¶ –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏\n` +
      `‚îú ‚öôÔ∏è –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n` +
      `‚îî üìä –ü—É—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
      `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º!\n\n` +
      `üéØ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é —Å–±—Ä–æ—Å–∞ –ë–î');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Å–±—Ä–æ—Å–∞');
  }
});

bot.action('admin_reset_db_confirm', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    if (!config.ADMIN_IDS.includes(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await ctx.editMessageText('üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await resetDatabase();
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')]
    ]);
    
    await ctx.editMessageText(
      `‚úÖ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!*\n\n` +
      `üóëÔ∏è *–£–¥–∞–ª–µ–Ω–æ:*\n` +
      `‚îú üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n` +
      `‚îú üí∞ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã\n` +
      `‚îú üè¶ –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏\n` +
      `‚îú üìä –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
      `‚îú üé´ –í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã\n` +
      `‚îú üìù –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤\n` +
      `‚îú üó≥Ô∏è –í—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n` +
      `‚îî üìã –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
      `üîÑ *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:*\n` +
      `‚îú üè¶ –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏\n` +
      `‚îú ‚öôÔ∏è –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n` +
      `‚îî üìä –ü—É—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
      `üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —á–∏—Å—Ç–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
bot.action('admin_referral_reward', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !config.ADMIN_IDS.includes(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_referral_reward', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_referral_settings')]
    ]);
    
    await ctx.editMessageText(
      `üí∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n` +
      `üìä *–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* \`${config.REFERRAL_REWARD}\` Stars\n\n` +
      `üí° *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É:*\n` +
      `‚îú –ú–∏–Ω–∏–º—É–º: \`1\` Stars\n` +
      `‚îú –ú–∞–∫—Å–∏–º—É–º: \`1000\` Stars\n` +
      `‚îî –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: \`5-50\` Stars\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
  console.log('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', {
    updateType: ctx.updateType,
    userId: ctx.from?.id,
    chatId: ctx.chat?.id,
    messageId: ctx.message?.message_id,
    callbackData: ctx.callbackQuery?.data,
    error: err.message,
    stack: err.stack
  });
});
// ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async function startBot() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ Magnum Stars Bot...');
    
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
      BOT_TOKEN: process.env.BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      MONGODB_URI: process.env.MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      PORT: process.env.PORT || 3000,
      NODE_ENV: process.env.NODE_ENV || 'development'
    });
    
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await connectDB();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // [–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ] –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∏—Ä–∂–∏ (24—á –∫—É—Ä—Å)
    try {
      const items = await db.collection('config').find({ key: { $in: ['EXCHANGE_RATE_24H','LAST_RATE_UPDATE'] } }).toArray();
      const map = {};
      for (const it of items) map[it.key] = it.value;
      if (typeof map.EXCHANGE_RATE_24H === 'number') exchangeRate24h = map.EXCHANGE_RATE_24H;
      if (map.LAST_RATE_UPDATE) lastRateUpdate = new Date(map.LAST_RATE_UPDATE);
      console.log('üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∏—Ä–∂–∏', { exchangeRate24h, lastRateUpdate });
    } catch (e) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∏—Ä–∂–∏:', e.message);
    }
    
    console.log('‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤...');
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:', {
      minerRewardsInterval: '30 –º–∏–Ω—É—Ç',
      cacheCleanupInterval: '5 –º–∏–Ω—É—Ç',
      userCacheTTL: config.USER_CACHE_TTL,
      statsCacheTTL: config.STATS_CACHE_TTL
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–π–Ω–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    setInterval(() => {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–π–Ω–∏–Ω–≥–∞...');
      processMinerRewards();
    }, 2 * 60 * 1000); // 2 –º–∏–Ω—É—Ç—ã
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–π–Ω–∏–Ω–≥–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    console.log('üöÄ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–π–Ω–∏–Ω–≥–∞...');
    processMinerRewards();
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    setInterval(() => {
      const now = Date.now();
      let userCacheCleared = 0;
      let statsCacheCleared = 0;
      
      for (const [key, value] of userCache.entries()) {
        if (now - value.timestamp > config.USER_CACHE_TTL) {
          userCache.delete(key);
          userCacheCleared++;
        }
      }
      
      for (const [key, value] of statsCache.entries()) {
        if (now - value.timestamp > config.STATS_CACHE_TTL) {
          statsCache.delete(key);
          statsCacheCleared++;
        }
      }
      
      if (userCacheCleared > 0 || statsCacheCleared > 0) {
        console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${userCacheCleared}, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ${statsCacheCleared}`);
      }
    }, 10 * 60 * 1000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ WebApp
    // [–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è] –£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç fs ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–π 'fs'
    const webappEnabled = process.env.WEBAPP_ENABLED === 'true'; // [–ò–∑–º–µ–Ω–µ–Ω–∏–µ] –£–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∞–º–∏ WebApp —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const webappPath = path.join(__dirname, 'webapp');
    const indexPath = path.join(webappPath, 'index.html');
    const stylesPath = path.join(webappPath, 'styles.css');
    const scriptPath = path.join(webappPath, 'script.js');
    
    if (webappEnabled) {
        console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ WebApp...');
        console.log(`üìÅ –ü—É—Ç—å –∫ WebApp: ${webappPath}`);
        console.log(`üìÑ index.html: ${fs.existsSync(indexPath) ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        console.log(`üé® styles.css: ${fs.existsSync(stylesPath) ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        console.log(`‚ö° script.js: ${fs.existsSync(scriptPath) ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
    }
    
    console.log('üåê –ó–∞–ø—É—Å–∫ Express —Å–µ—Ä–≤–µ—Ä–∞...');
    app.listen(PORT, () => {
      console.log(`‚úÖ Express —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });
    
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...');
    const botInfo = await bot.telegram.getMe();
    console.log('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', botInfo);
    // [–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (Telegraf)
    await bot.launch();
    
    console.log('üöÄ Magnum Stars Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞
    setInterval(() => {
      cleanupInvalidCache();
    }, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    
    console.log('üßπ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Magnum Stars Bot:', error);
    process.exit(1);
  }
}
// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–¢–û–ì–†–ê–§–ò–ô ====================
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π
bot.on('photo', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    if (user.adminState && user.adminState.startsWith('sending_screenshot_')) {
      const taskId = user.adminState.replace('sending_screenshot_', '');
      await handleScreenshotUpload(ctx, user, parseInt(taskId));
    }
  } catch (error) {
    logError(error, '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
  }
});

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================
// –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ, –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
bot.on('text', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) {
      return;
    }
    
    const text = ctx.message.text;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è adminState
    if (user.adminState) {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} —Å adminState:`, {
        adminState: user.adminState,
        text: text,
        textLength: text.length,
        isAdmin: isAdmin(user.id)
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user.adminState === 'creating_support_ticket') {
        console.log(`üÜò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: "${text}"`);
        await handleCreateSupportTicket(ctx, user, text);
        return;
      } else if (user.adminState && user.adminState.startsWith('answering_ticket_')) {
        console.log(`üìù –ê–¥–º–∏–Ω ${ctx.from.id} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç: "${text}"`);
        await handleAdminAnswerTicket(ctx, user, text);
        return;
      } else if (user.adminState === 'entering_promocode') {
        console.log(`üé´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤–≤–æ–¥–∏—Ç –ø—Ä–æ–º–æ–∫–æ–¥: "${text}"`);
        await handleUserEnterPromocodeText(ctx, user, text);
        return;
      } else if (user.adminState === 'exchange_custom_Stars') {
        console.log(`ü™ô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É Stars –¥–ª—è –æ–±–º–µ–Ω–∞: "${text}"`);
        await handleExchangeCustomStars(ctx, user, text);
        return;
      } else if (user.adminState === 'exchange_custom_stars') {
        console.log(`‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É Stars –¥–ª—è –æ–±–º–µ–Ω–∞: "${text}"`);
        await handleExchangeCustomStars(ctx, user, text);
        return;
      } else if (user.adminState === 'withdrawing_Stars') {
        console.log(`üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É Stars –¥–ª—è –≤—ã–≤–æ–¥–∞: "${text}"`);
        await handleWithdrawalStars(ctx, user, text);
        return;
      } else if (user.adminState === 'withdrawing_stars') {
        console.log(`‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É Stars –¥–ª—è –≤—ã–≤–æ–¥–∞: "${text}"`);
        await handleWithdrawalStars(ctx, user, text);
        return;
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
      if (isAdmin(user.id)) {
        if (user.adminState === 'searching_user') {
          console.log(`üîç –ê–¥–º–∏–Ω ${ctx.from.id} –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${text}"`);
          await handleAdminSearchUser(ctx, user, text);
        } else if (user.adminState === 'banning_user') {
          console.log(`üö´ –ê–¥–º–∏–Ω ${ctx.from.id} –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${text}"`);
          await handleAdminBanUser(ctx, user, text);
        } else if (user.adminState === 'unbanning_user') {
          console.log(`‚úÖ –ê–¥–º–∏–Ω ${ctx.from.id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${text}"`);
          await handleAdminUnbanUser(ctx, user, text);
        } else if (user.adminState === 'setting_farm_reward') {
          console.log(`üåæ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É —Ñ–∞—Ä–º–∞: "${text}"`);
          await handleAdminSetFarmReward(ctx, user, text);
        } else if (user.adminState === 'setting_farm_cooldown') {
          console.log(`‚è∞ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞: "${text}"`);
          await handleAdminSetFarStarsooldown(ctx, user, text);
        } else if (user.adminState === 'setting_bonus_base') {
          console.log(`üéÅ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å: "${text}"`);
          await handleAdminSetBonusBase(ctx, user, text);
        } else if (user.adminState === 'setting_miner_reward') {
          console.log(`‚õèÔ∏è –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –º–∞–π–Ω–µ—Ä–∞: "${text}"`);
          await handleAdminSetMinerReward(ctx, user, text);
        } else if (user.adminState === 'setting_referral_reward') {
          console.log(`üë• –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É: "${text}"`);
          await handleAdminSetReferralReward(ctx, user, text);
        } else if (user.adminState === 'setting_subscription_channel') {
          console.log(`üì¢ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏: "${text}"`);
          await handleAdminSetSubscriptionChannel(ctx, user, text);
        } else if (user.adminState === 'creating_post_with_button') {
          console.log(`üìù –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π: "${text}"`);
          await handleAdminCreatePostWithButton(ctx, user, text);
        } else if (user.adminState === 'creating_post_no_button') {
          console.log(`üìù –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏: "${text}"`);
          await handleAdminCreatePostNoButton(ctx, user, text);
        } else if (user.adminState === 'creating_promocode') {
          console.log(`üé´ –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥: "${text}"`);
          await handleAdminCreatePromocode(ctx, user, text);
        } else if (user.adminState === 'creating_promo_Stars') {
          console.log(`üí∞ –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ Stars: "${text}"`);
          await handleAdminCreatePromoStars(ctx, user, text);
        } else if (user.adminState === 'creating_promo_stars') {
          console.log(`‚≠ê –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ Stars: "${text}"`);
          await handleAdminCreatePromoStars(ctx, user, text);
        } else if (user.adminState === 'creating_promo_title') {
          console.log(`üëë –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∏—Ç—É–ª–æ–º: "${text}"`);
          await handleAdminCreatePromoTitle(ctx, user, text);
        } else if (user.adminState === 'creating_promo_common') {
          console.log(`üü¢ –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á —Å –æ–±—ã—á–Ω—ã–º —Å—É–Ω–¥—É–∫–æ–º: "${text}"`);
          await handleAdminCreatePromoChest(ctx, user, text, 'common');
        } else if (user.adminState === 'creating_promo_rare') {
          console.log(`üîµ –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á —Å —Ä–µ–¥–∫–∏–º —Å—É–Ω–¥—É–∫–æ–º: "${text}"`);
          await handleAdminCreatePromoChest(ctx, user, text, 'rare');
        } else if (user.adminState === 'creating_promo_epic') {
          console.log(`üü£ –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á —Å —ç–ø–∏—á–µ—Å–∫–∏–º —Å—É–Ω–¥—É–∫–æ–º: "${text}"`);
          await handleAdminCreatePromoChest(ctx, user, text, 'epic');
        } else if (user.adminState === 'creating_promo_legendary') {
          console.log(`üü° –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á —Å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–º —Å—É–Ω–¥—É–∫–æ–º: "${text}"`);
          await handleAdminCreatePromoChest(ctx, user, text, 'legendary');
        } else if (user.adminState === 'reporting_bug') {
          console.log(`üêõ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ: "${text}"`);
          await handleBugReport(ctx, user, text);
        } else if (user.adminState === 'giving_rank') {
          console.log(`‚≠ê –ê–¥–º–∏–Ω ${ctx.from.id} –≤—ã–¥–∞–µ—Ç —Ä–∞–Ω–≥: "${text}"`);
          await handleAdminGiveRank(ctx, user, text);
        } else if (user.adminState === 'adding_reserve_Stars') {
          console.log(`‚ûï –ê–¥–º–∏–Ω ${ctx.from.id} –¥–æ–±–∞–≤–ª—è–µ—Ç Stars –≤ —Ä–µ–∑–µ—Ä–≤: "${text}"`);
          await handleAdminAddReserveStars(ctx, user, text);
        } else if (user.adminState === 'removing_reserve_Stars') {
          console.log(`‚ûñ –ê–¥–º–∏–Ω ${ctx.from.id} —É–±–∏—Ä–∞–µ—Ç Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞: "${text}"`);
          await handleAdminRemoveReserveStars(ctx, user, text);
        } else if (user.adminState === 'adding_reserve_stars') {
          console.log(`‚ûï –ê–¥–º–∏–Ω ${ctx.from.id} –¥–æ–±–∞–≤–ª—è–µ—Ç Stars –≤ —Ä–µ–∑–µ—Ä–≤: "${text}"`);
          await handleAdminAddReserveStars(ctx, user, text);
        } else if (user.adminState === 'removing_reserve_stars') {
          console.log(`‚ûñ –ê–¥–º–∏–Ω ${ctx.from.id} —É–±–∏—Ä–∞–µ—Ç Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞: "${text}"`);
          await handleAdminRemoveReserveStars(ctx, user, text);
        } else if (user.adminState === 'setting_commission') {
          console.log(`üí∏ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é: "${text}"`);
          await handleAdminSetCommission(ctx, user, text);
        } else if (user.adminState === 'setting_withdrawal_commission') {
          console.log(`üí∞ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –≤—ã–≤–æ–¥–∞: "${text}"`);
          await handleAdminSetWithdrawalCommission(ctx, user, text);
        } else if (user.adminState === 'giving_title') {
          console.log(`üëë –ê–¥–º–∏–Ω ${ctx.from.id} –≤—ã–¥–∞–µ—Ç —Ç–∏—Ç—É–ª: "${text}"`);
          await handleAdminGiveTitle(ctx, user, text);
        } else if (user.adminState === 'removing_title') {
          console.log(`üëë –ê–¥–º–∏–Ω ${ctx.from.id} –∑–∞–±–∏—Ä–∞–µ—Ç —Ç–∏—Ç—É–ª: "${text}"`);
          await handleAdminRemoveTitle(ctx, user, text);
        } else if (user.adminState === 'broadcasting') {
          console.log(`üì¢ –ê–¥–º–∏–Ω ${ctx.from.id} —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`);
          const cursor = db.collection('users').find({}, { projection: { id: 1 } });
          let sent = 0, errors = 0;
          while (await cursor.hasNext()) {
            const u = await cursor.next();
            try { await ctx.telegram.sendMessage(u.id, text); sent++; } catch (e) { errors++; }
          }
          await db.collection('users').updateOne({ id: user.id }, { $unset: { adminState: '' } });
          await ctx.reply(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}, –æ—à–∏–±–æ–∫: ${errors}`);
        } else if (user.adminState === 'season_start') {
          console.log(`üöÄ –ê–¥–º–∏–Ω ${ctx.from.id} –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω: "${text}"`);
          if (text.trim().toUpperCase() === '–ü–û–î–¢–í–ï–†–î–ò–¢–¨') {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ–∑–æ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            await db.collection('users').updateMany(
              { 'miningStats.seasonMinedStars': { $exists: true } },
              {
                $set: {
                  'miningStats.seasonMinedStars': 0,
                  'miningStats.seasonMinedStars': 0,
                  'miningStats.seasonRewardsStars': 0,
                  'miningStats.seasonRewardsStars': 0,
                  updatedAt: new Date()
                }
              }
            );
            
            await db.collection('users').updateOne({ id: user.id }, { $unset: { adminState: '' } });
            await ctx.reply(`‚úÖ –ù–æ–≤—ã–π —Å–µ–∑–æ–Ω –∑–∞–ø—É—â–µ–Ω! –°–µ–∑–æ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.`);
          } else {
            await ctx.reply('‚ùå –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ–∑–æ–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ "–ü–û–î–¢–í–ï–†–î–ò–¢–¨"');
          }
        } else if (user.adminState === 'season_reset') {
          console.log(`üîÑ –ê–¥–º–∏–Ω ${ctx.from.id} —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–µ–∑–æ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: "${text}"`);
          if (text.trim().toUpperCase() === '–°–ë–†–û–°–ò–¢–¨') {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ–∑–æ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            await db.collection('users').updateMany(
              { 'miningStats.seasonMinedStars': { $exists: true } },
              {
                $set: {
                  'miningStats.seasonMinedStars': 0,
                  'miningStats.seasonMinedStars': 0,
                  'miningStats.seasonRewardsStars': 0,
                  'miningStats.seasonRewardsStars': 0,
                  updatedAt: new Date()
                }
              }
            );
            
            await db.collection('users').updateOne({ id: user.id }, { $unset: { adminState: '' } });
            await ctx.reply(`‚úÖ –°–µ–∑–æ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!`);
          } else {
            await ctx.reply('‚ùå –î–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–°–ë–†–û–°–ò–¢–¨"');
          }
        } else if (user.adminState === 'mass_give') {
          console.log(`üí∞ –ê–¥–º–∏–Ω ${ctx.from.id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é –≤—ã–¥–∞—á—É: "${text}"`);
          const parts = text.trim().split(/\s+/);
          if (parts.length < 2) { await ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: "stars 100" –∏–ª–∏ "Stars 50"'); return; }
          const type = parts[0].toLowerCase();
          const amount = parseFloat(parts[1]);
          if (!['stars','Stars'].includes(type) || !isFinite(amount)) { await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'); return; }
          const inc = type === 'stars' ? { stars: amount, totalEarnedStars: Math.max(amount, 0) } : { magnuStarsoins: amount, totalEarnedMagnuStarsoins: Math.max(amount, 0) };
          await db.collection('users').updateMany({}, { $inc: inc, $set: { updatedAt: new Date() } });
          await db.collection('users').updateOne({ id: user.id }, { $unset: { adminState: '' } });
          await ctx.reply(`‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${type} ${amount}`);
        } else {
          console.log(`‚ÑπÔ∏è –ê–¥–º–∏–Ω ${ctx.from.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º adminState: "${text}"`);
          await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
        }
      } else {
        console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º adminState: "${text}"`);
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
      }
    } else {
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç adminState
      if (isAdmin(user.id)) {
        console.log(`‚ÑπÔ∏è –ê–¥–º–∏–Ω ${ctx.from.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –Ω–æ adminState –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: "${text}"`);
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
      } else {
        console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –Ω–æ adminState –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: "${text}"`);
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
      }
    }
    
    console.log(`‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${ctx.from.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${ctx.from.id}:`, error);
    console.log(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:`, {
      userId: ctx.from.id,
      text: ctx.message.text,
      error: error.message,
      stack: error.stack
    });
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
bot.action(/^approve_(.+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !config.ADMIN_IDS.includes(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const requestId = ctx.match[1];
    
    log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å ID: ${requestId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ requestId —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º ObjectId
    if (!isValidObjectId(requestId)) {
      log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç requestId: ${requestId}`);
      await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const withdrawalRequest = await db.collection('withdrawalRequests').findOne({ _id: new ObjectId(requestId) });
    
    if (!withdrawalRequest) {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    if (withdrawalRequest.status !== 'pending') {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    await db.collection('withdrawalRequests').updateOne(
      { _id: new ObjectId(requestId) },
      { 
        $set: { 
          status: 'approved',
          approvedBy: user.id,
          approvedAt: new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await bot.telegram.sendMessage(
        withdrawalRequest.userId,
        `‚úÖ *–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!*\n\n` +
        `üí∞ *–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:*\n` +
        `‚îú –°—É–º–º–∞: ${formatNumber(withdrawalRequest.amount)} ${withdrawalRequest.currency === 'magnum_coins' ? 'Magnum Coins' : 'Stars'}\n` +
        `‚îú –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(withdrawalRequest.amount * 0.05)} ${withdrawalRequest.currency === 'magnum_coins' ? 'Magnum Coins' : 'Stars'}\n` +
        `‚îú –ö –≤—ã–ø–ª–∞—Ç–µ: ${formatNumber(withdrawalRequest.amount * 0.95)} ${withdrawalRequest.currency === 'magnum_coins' ? 'Magnum Coins' : 'Stars'}\n` +
        `‚îî –°—Ç–∞—Ç—É—Å: ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ\n\n` +
        `üìÖ *–î–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è:* ${new Date().toLocaleString('ru-RU')}\n` +
        `üÜî *–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #${requestId}\n\n` +
        `üí≥ –í—ã–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${withdrawalRequest.userId}: ${error.message}`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ', 'withdrawal_approved')]
    ]);
    
    await ctx.editMessageText(
      ctx.callbackQuery.message.text + '\n\n‚úÖ *–û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*\nüìÖ *–î–∞—Ç–∞:* ' + new Date().toLocaleString('ru-RU'),
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    await ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞');
    
    log(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${requestId} –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${user.id}`);
    
  } catch (error) {
    logError(error, '–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏');
  }
});

bot.action(/^reject_(.+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !config.ADMIN_IDS.includes(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const requestId = ctx.match[1];
    
    log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å ID: ${requestId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ requestId —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º ObjectId
    if (!isValidObjectId(requestId)) {
      log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç requestId: ${requestId}`);
      await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const withdrawalRequest = await db.collection('withdrawalRequests').findOne({ _id: new ObjectId(requestId) });
    
    if (!withdrawalRequest) {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    if (withdrawalRequest.status !== 'pending') {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', `reject_${requestId}:funds`),
        Markup.button.callback('üö´ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', `reject_${requestId}:suspicious`)
      ],
      [
        Markup.button.callback('üö´ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª', `reject_${requestId}:rules`),
        Markup.button.callback('üö´ –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', `reject_${requestId}:invalid_data`)
      ],
      [
        Markup.button.callback('üö´ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞—è–≤–∫–∏', `reject_${requestId}:too_frequent`),
        Markup.button.callback('üö´ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', `reject_${requestId}:technical`)
      ],
      [
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', `cancel_${requestId}`)
      ]
    ]);
    
    await ctx.editMessageText(
      ctx.callbackQuery.message.text + '\n\n‚ùå *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:*',
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
    
  } catch (error) {
    logError(error, '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏');
  }
});

bot.action(/^reject_(.+):(.+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !config.ADMIN_IDS.includes(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const requestId = ctx.match[1];
    const reason = ctx.match[2];
    
    log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å ID: ${requestId}, –ø—Ä–∏—á–∏–Ω–∞: ${reason}`);
    
    log(`üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π ObjectId: ${requestId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ requestId —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º ObjectId
    if (!isValidObjectId(requestId)) {
      log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç requestId: ${requestId}`);
      await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const withdrawalRequest = await db.collection('withdrawalRequests').findOne({ _id: new ObjectId(requestId) });
    
    if (!withdrawalRequest) {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    if (withdrawalRequest.status !== 'pending') {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã
    const reasonTexts = {
      'funds': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–µ–∑–µ—Ä–≤–µ',
      'suspicious': '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      'rules': '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
      'invalid_data': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      'too_frequent': '–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥',
      'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞'
    };
    
    const reasonText = reasonTexts[reason] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    await db.collection('withdrawalRequests').updateOne(
      { _id: new ObjectId(requestId) },
      { 
        $set: { 
          status: 'rejected',
          rejectedBy: user.id,
          rejectedAt: new Date(),
          rejectionReason: reasonText,
          updatedAt: new Date()
        }
      }
    );
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const currencyField = withdrawalRequest.currency === 'magnum_coins' ? 'magnuStarsoins' : 'stars';
    await db.collection('users').updateOne(
      { id: withdrawalRequest.userId },
      { 
        $inc: { [currencyField]: withdrawalRequest.amount },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(withdrawalRequest.userId);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const commission = withdrawalRequest.amount * 0.05;
      const amountAfterCommission = withdrawalRequest.amount * 0.95;
      
      await bot.telegram.sendMessage(
        withdrawalRequest.userId,
        `‚ùå *–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n\n` +
        `${withdrawalRequest.currency === 'magnum_coins' ? 'üí∞' : '‚≠ê'} *–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:*\n` +
        `‚îú –°—É–º–º–∞: ${formatNumber(withdrawalRequest.amount)} ${withdrawalRequest.currency === 'magnum_coins' ? 'Magnum Coins' : 'Stars'}\n` +
        `‚îú –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(commission)} ${withdrawalRequest.currency === 'magnum_coins' ? 'Magnum Coins' : 'Stars'}\n` +
        `‚îú –ö –ø–æ–ª—É—á–µ–Ω–∏—é: ${formatNumber(amountAfterCommission)} ${withdrawalRequest.currency === 'magnum_coins' ? 'Magnum Coins' : 'Stars'}\n` +
        `‚îî –°—Ç–∞—Ç—É—Å: ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n\n` +
        `üö´ *–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:* ${reasonText}\n` +
        `üìÖ *–î–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:* ${new Date().toLocaleString('ru-RU')}\n` +
        `üÜî *–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #${requestId}\n\n` +
        `üí° –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${withdrawalRequest.userId}: ${error.message}`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', 'withdrawal_rejected')]
    ]);
    
    await ctx.editMessageText(
      ctx.callbackQuery.message.text + '\n\n‚ùå *–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*\nüö´ *–ü—Ä–∏—á–∏–Ω–∞:* ' + reasonText,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
    
    log(`‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${requestId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${user.id}, –ø—Ä–∏—á–∏–Ω–∞: ${reasonText}`);
    
  } catch (error) {
    logError(error, '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å –ø—Ä–∏—á–∏–Ω–æ–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏');
  }
});

bot.action(/^cancel_(.+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !config.ADMIN_IDS.includes(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const requestId = ctx.match[1];
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_${requestId}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${requestId}`)
      ]
    ]);
    
    // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ –≤—ã–±–æ—Ä–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    const originalText = ctx.callbackQuery.message.text.replace('\n\n‚ùå *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:*', '');
    
    await ctx.editMessageText(
      originalText + '\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
    
  } catch (error) {
    logError(error, '–û—Ç–º–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ Stars
async function handleWithdrawalStars(ctx, user, text) {
  try {
    log(`‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} —Å–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ Stars: "${text}"`);
    log(`üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤: WITHDRAWAL_CHANNEL=${config.WITHDRAWAL_CHANNEL}, SUPPORT_CHANNEL=${config.SUPPORT_CHANNEL}`);
    
    const amount = parseFloat(text);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
          if (isNaN(amount) || amount < 50) {
      await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 50 Stars');
      return;
    }
    
    if (amount > user.stars) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars! –£ –≤–∞—Å: ${formatNumber(user.stars)} Stars`);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    const withdrawalRequest = {
      userId: user.id,
      username: user.username,
      firstName: user.firstName,
      amount: amount,
      currency: 'stars',
      status: 'pending',
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    const result = await db.collection('withdrawalRequests').insertOne(withdrawalRequest);
    const requestId = result.insertedId;
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { stars: -amount },
        $unset: { adminState: "" }, 
        $set: { updatedAt: new Date() } 
      }
    );
    userCache.delete(user.id);
    
    log(`üí∞ –°–ø–∏—Å–∞–Ω–æ ${amount} Stars —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç
    log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞ –≤—ã–ø–ª–∞—Ç: ${config.WITHDRAWAL_CHANNEL}`);
    if (config.WITHDRAWAL_CHANNEL) {
      try {
        const keyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_${requestId}`),
            Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${requestId}`)
          ]
        ]);
        
        const message = 
          `üí∞ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ Stars*\n\n` +
          `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*\n` +
          `‚îú ID: \`${user.id}\`\n` +
          `‚îú –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
          `‚îú Username: ${user.username ? '@' + user.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `‚îî –ë–∞–ª–∞–Ω—Å: ${formatNumber(user.stars)} Stars\n\n` +
          `üí∏ *–ó–∞—è–≤–∫–∞:*\n` +
          `‚îú –°—É–º–º–∞: ${formatNumber(amount)} Stars\n` +
          `‚îú –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(amount * 0.05)} Stars (5%)\n` +
          `‚îú –ö –≤—ã–ø–ª–∞—Ç–µ: ${formatNumber(amount * 0.95)} Stars\n` +
          `‚îî –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}\n\n` +
          `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        
        await bot.telegram.sendMessage(config.WITHDRAWAL_CHANNEL, message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        });
        
        log(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª ${config.WITHDRAWAL_CHANNEL}`);
      } catch (channelError) {
        logError(channelError, `–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª ${config.WITHDRAWAL_CHANNEL}`);
      }
    }
    
    await ctx.reply(
      `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${formatNumber(amount)} Stars —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
      `üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ:*\n` +
      `‚îú –°—É–º–º–∞: ${formatNumber(amount)} Stars\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(amount * 0.05)} Stars (5%)\n` +
      `‚îú –ö –≤—ã–ø–ª–∞—Ç–µ: ${formatNumber(amount * 0.95)} Stars\n` +
      `‚îî –û–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ 24 —á–∞—Å–æ–≤\n\n` +
      `üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏.`
    );
    
    log(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ Stars —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
  } catch (error) {
    logError(error, `–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (uncaughtException):', error);
  console.log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ uncaughtException:', {
    error: error.message,
    stack: error.stack,
    timestamp: new Date().toISOString(),
    memoryUsage: process.memoryUsage(),
    uptime: process.uptime()
  });
  process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  console.log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ unhandledRejection:', {
    reason: reason,
    promise: promise,
    timestamp: new Date().toISOString(),
    memoryUsage: process.memoryUsage(),
    uptime: process.uptime()
  });
  process.exit(1);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
bot.action('admin_create_post_with_button', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'creating_post_with_button', updatedAt: new Date() } }
    );

    userCache.delete(user.id);

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_posts')]
    ]);

    await ctx.editMessageText(
      `üìù *–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π*\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n` +
      `üìã *–§–æ—Ä–º–∞—Ç:*\n` +
      `‚îú –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\n` +
      `‚îú ---\n` +
      `‚îú –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏\n` +
      `‚îú ---\n` +
      `‚îî URL –∫–Ω–æ–ø–∫–∏\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:*\n` +
      `‚îú –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!\n` +
      `‚îú ---\n` +
      `‚îú –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞\n` +
      `‚îú ---\n` +
      `‚îî https://t.me/magnumtap_bot\n\n` +
      `‚ö†Ô∏è –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @magnumtap`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_create_post_no_button', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'creating_post_no_button', updatedAt: new Date() } }
    );

    userCache.delete(user.id);

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_posts')]
    ]);

    await ctx.editMessageText(
      `üìù *–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏*\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞.\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:*\n` +
      `‚îú –ù–æ–≤–æ—Å—Ç–∏ Magnum Stars\n` +
      `‚îú –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞!\n` +
      `‚îî –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n` +
      `‚ö†Ô∏è –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @magnumtap`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—É–Ω–¥—É–∫–æ–≤
bot.action('show_chest_contents', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) return;

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üü¢ –û–±—ã—á–Ω—ã–π', 'show_chest_common'),
        Markup.button.callback('üîµ –†–µ–¥–∫–∏–π', 'show_chest_rare')
      ],
      [
        Markup.button.callback('üü£ –≠–ø–∏—á–µ—Å–∫–∏–π', 'show_chest_epic'),
        Markup.button.callback('üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', 'show_chest_legendary')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_create_promocode')]
    ]);

    await ctx.editMessageText(
      `üìã *–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–Ω–¥—É–∫–æ–≤*\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—É–Ω–¥—É–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥:\n\n` +
      `üéÅ *–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è:*\n` +
      `‚îú üü¢ –û–±—ã—á–Ω—ã–π: 60%\n` +
      `‚îú üîµ –†–µ–¥–∫–∏–π: 25%\n` +
      `‚îú üü£ –≠–ø–∏—á–µ—Å–∫–∏–π: 11%\n` +
      `‚îî üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π: 4%\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—É–Ω–¥—É–∫–∞:`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—É–Ω–¥—É–∫–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—É–Ω–¥—É–∫–æ–≤
bot.action('show_chest_common', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) return;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'show_chest_contents')]
    ]);

    await ctx.editMessageText(
      `üü¢ *–û–±—ã—á–Ω—ã–π —Å—É–Ω–¥—É–∫*\n\n` +
      `üíé *–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n` +
      `‚îú üí∞ Stars: 1-1000\n` +
      `‚îî ‚≠ê Stars: 1-5\n\n` +
      `üìä *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n` +
      `‚îú –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è: 60%\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: ~250 Stars\n` +
      `‚îî –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\n\n` +
      `üéØ –≠—Ç–æ—Ç —Å—É–Ω–¥—É–∫ –¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ã—á–Ω–æ–≥–æ —Å—É–Ω–¥—É–∫–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('show_chest_rare', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) return;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'show_chest_contents')]
    ]);

    await ctx.editMessageText(
      `üîµ *–†–µ–¥–∫–∏–π —Å—É–Ω–¥—É–∫*\n\n` +
      `üíé *–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n` +
      `‚îú üí∞ Stars: 50-150\n` +
      `‚îú ‚≠ê Stars: 25-75\n` +
      `‚îî ‚õèÔ∏è –ú–∞–π–Ω–µ—Ä—ã: 1-3 —à—Ç.\n\n` +
      `üìä *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n` +
      `‚îú –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è: 25%\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: ~500 Stars\n` +
      `‚îî –°–æ–¥–µ—Ä–∂–∏—Ç –º–∞–π–Ω–µ—Ä—ã –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞\n\n` +
      `üéØ –≠—Ç–æ—Ç —Å—É–Ω–¥—É–∫ –¥–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –º–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–¥–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('show_chest_epic', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) return;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'show_chest_contents')]
    ]);

    await ctx.editMessageText(
      `üü£ *–≠–ø–∏—á–µ—Å–∫–∏–π —Å—É–Ω–¥—É–∫*\n\n` +
      `üíé *–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n` +
      `‚îú üí∞ Stars: 100-300\n` +
      `‚îú ‚≠ê Stars: 50-150\n` +
      `‚îú üëë –¢–∏—Ç—É–ª: –°–ª—É—á–∞–π–Ω—ã–π —ç–ø–∏—á–µ—Å–∫–∏–π\n` +
      `‚îî üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x1.5\n\n` +
      `üìä *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n` +
      `‚îú –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è: 11%\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: ~800 Stars\n` +
      `‚îî –î–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–∏—Ç—É–ª –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å\n\n` +
      `üéØ –≠—Ç–æ—Ç —Å—É–Ω–¥—É–∫ –¥–∞–µ—Ç —Ü–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–∏—Ç—É–ª.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ü—Ä–æ—Å–º–æ—Ç—Ä —ç–ø–∏—á–µ—Å–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('show_chest_legendary', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) return;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'show_chest_contents')]
    ]);

    await ctx.editMessageText(
      `üü° *–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—É–Ω–¥—É–∫*\n\n` +
      `üíé *–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n` +
      `‚îú üí∞ Stars: 300-800\n` +
      `‚îú ‚≠ê Stars: 100-300\n` +
      `‚îú ‚õèÔ∏è –ú–∞–π–Ω–µ—Ä—ã: 2-5 —à—Ç.\n` +
      `‚îú üëë –¢–∏—Ç—É–ª: –°–ª—É—á–∞–π–Ω—ã–π –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π\n` +
      `‚îî üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x2.0\n\n` +
      `üìä *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n` +
      `‚îú –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è: 4%\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: ~1500 Stars\n` +
      `‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö\n\n` +
      `üéØ –≠—Ç–æ—Ç —Å—É–Ω–¥—É–∫ –¥–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Å—É–Ω–¥—É–∫–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—É–Ω–¥—É–∫–æ–≤
bot.action('chest_statistics', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) return;

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—É–Ω–¥—É–∫–∞–º
    const chestPromocodes = await db.collection('promocodes').find({
      rewardType: 'chest',
      isActive: true
    }).toArray();

    let commonCount = 0, rareCount = 0, epicCount = 0, legendaryCount = 0;
    let totalActivations = 0, totalRewards = 0;

    for (const promo of chestPromocodes) {
      switch (promo.chestType) {
        case 'common': commonCount++; break;
        case 'rare': rareCount++; break;
        case 'epic': epicCount++; break;
        case 'legendary': legendaryCount++; break;
      }
      totalActivations += promo.totalActivations || 0;
      totalRewards += promo.totalRewards || 0;
    }

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'chest_statistics')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_create_promocode')]
    ]);

    await ctx.editMessageText(
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—É–Ω–¥—É–∫–æ–≤*\n\n` +
      `üéÅ *–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏:*\n` +
      `‚îú üü¢ –û–±—ã—á–Ω—ã–µ: \`${commonCount}\`\n` +
      `‚îú üîµ –†–µ–¥–∫–∏–µ: \`${rareCount}\`\n` +
      `‚îú üü£ –≠–ø–∏—á–µ—Å–∫–∏–µ: \`${epicCount}\`\n` +
      `‚îî üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ: \`${legendaryCount}\`\n\n` +
      `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú üîÑ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: \`${formatNumber(totalActivations)}\`\n` +
      `‚îú üí∞ –í—ã–¥–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥: \`${formatNumber(totalRewards)}\`\n` +
      `‚îî üìä –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${totalActivations > 0 ? Math.round(totalRewards / totalActivations) : 0}\` Stars\n\n` +
      `üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—É–Ω–¥—É–∫–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();
