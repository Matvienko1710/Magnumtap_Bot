require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { MongoClient, ObjectId } = require('mongodb');
const http = require('http');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É–¥–∞–ª–µ–Ω - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
log('üöÄ –ó–∞–ø—É—Å–∫ Magnum Stars Bot...');
log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.BOT_TOKEN) {
  logError(new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω'), '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

if (!process.env.MONGODB_URI) {
  logError(new Error('MONGODB_URI –Ω–µ –Ω–∞–π–¥–µ–Ω'), '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');

const config = {
  BOT_TOKEN: process.env.BOT_TOKEN,
  MONGODB_URI: process.env.MONGODB_URI,
  ADMIN_IDS: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())) : [],
  SUPPORT_CHANNEL: process.env.SUPPORT_CHANNEL,
  WITHDRAWAL_CHANNEL: process.env.WITHDRAWAL_CHANNEL,
  REQUIRED_CHANNEL: process.env.REQUIRED_CHANNEL,
  REQUIRED_BOT_LINK: process.env.REQUIRED_BOT_LINK || 'https://t.me/ReferalStarsRobot?start=6587897295',
  FIRESTARS_BOT_LINK: process.env.FIRESTARS_BOT_LINK || 'https://t.me/firestars_rbot?start=6587897295',
  FARMIK_BOT_LINK: process.env.FARMIK_BOT_LINK || 'https://t.me/farmikstars_bot?start=6587897295',
  BASKET_BOT_LINK: process.env.BASKET_BOT_LINK || 'https://t.me/basket_gift_bot?start=6587897295',
  PRIVATE_CHANNEL_LINK: process.env.PRIVATE_CHANNEL_LINK || 'https://t.me/+4BUF9S_rLZw3NDQ6',
  PROMO_NOTIFICATIONS_CHAT: process.env.PROMO_NOTIFICATIONS_CHAT,
  BOT_PHOTO_URL: process.env.BOT_PHOTO_URL,
  
  // –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  INITIAL_STARS: 100,
  INITIAL_MAGNUM_COINS: 0,
  FARM_COOLDOWN: 10, // —Å–µ–∫—É–Ω–¥—ã
  FARM_BASE_REWARD: 0.01,
  DAILY_BONUS_BASE: 3,
  REFERRAL_BONUS: 50,
  MINER_REWARD_PER_HOUR: 0.1,
  EXCHANGE_COMMISSION: 2.5,
  MIN_WITHDRAWAL: 100,
  MAX_WITHDRAWAL: 10000,
  
  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  USER_CACHE_TTL: 30000,
  STATS_CACHE_TTL: 120000,
  
  // Rate limiting
  RATE_LIMIT_WINDOW: 60000,
  RATE_LIMIT_MAX_REQUESTS: 30,
  
  // –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏
  INITIAL_RESERVE_STARS: 1000000,
  INITIAL_RESERVE_MAGNUM_COINS: 1000000
};

// ==================== HTTP –°–ï–†–í–ï–† –î–õ–Ø HEALTH CHECK ====================
let server;
const PORT = process.env.PORT || 3000;

function startHttpServer() {
  log(`üîß –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`);
  
  server = http.createServer((req, res) => {
    log(`üì° HTTP –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.url}`);
    
    if (req.url === '/' && req.method === 'GET') {
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ 
        status: 'ok', 
        message: 'Magnum Stars Bot is running',
        timestamp: new Date().toISOString()
      }));
      log('‚úÖ Health check –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } else {
      res.writeHead(404, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ error: 'Not found' }));
      log('‚ùå 404 –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    }
  });

  server.listen(PORT, () => {
    log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  });
  
  server.on('error', (error) => {
    logError(error, 'HTTP —Å–µ—Ä–≤–µ—Ä');
  });
}

// ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
let db;
let client;

async function connectDB() {
  try {
    log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    client = new MongoClient(config.MONGODB_URI);
    await client.connect();
    log('üîå MongoDB –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
    db = client.db();
    log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    await db.collection('users').createIndex({ id: 1 }, { unique: true });
    await db.collection('users').createIndex({ username: 1 });
    await db.collection('users').createIndex({ 'miner.active': 1 });
    await db.collection('users').createIndex({ lastSeen: -1 });
    await db.collection('users').createIndex({ referrerId: 1 });
    
    await db.collection('promocodes').createIndex({ code: 1 }, { unique: true });
    await db.collection('promocodes').createIndex({ isActive: 1 });
    await db.collection('promocodes').createIndex({ expiresAt: 1 });
    
    await db.collection('withdrawalRequests').createIndex({ userId: 1 });
    await db.collection('withdrawalRequests').createIndex({ status: 1 });
    await db.collection('withdrawalRequests').createIndex({ createdAt: -1 });
    
    await db.collection('supportTickets').createIndex({ userId: 1 });
    await db.collection('supportTickets').createIndex({ status: 1 });
    await db.collection('supportTickets').createIndex({ createdAt: -1 });
    
    await db.collection('taskChecks').createIndex({ userId: 1 });
    await db.collection('taskChecks').createIndex({ status: 1 });
    await db.collection('taskChecks').createIndex({ createdAt: -1 });
    
    await db.collection('dailyTasks').createIndex({ userId: 1 });
    await db.collection('dailyTasks').createIndex({ date: 1 });
    await db.collection('dailyTasks').createIndex({ completed: 1 });
    
    await db.collection('exchangeHistory').createIndex({ userId: 1 });
    await db.collection('exchangeHistory').createIndex({ timestamp: -1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    try {
      await db.collection('reserve').createIndex({ currency: 1 }, { unique: true });
    } catch (error) {
      if (error.code === 11000) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏, —É–¥–∞–ª—è–µ–º –∏—Ö –∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞–Ω–æ–≤–æ
        log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–∑–µ—Ä–≤–µ...');
        await db.collection('reserve').deleteMany({ currency: null });
        await db.collection('reserve').createIndex({ currency: 1 }, { unique: true });
      } else {
        throw error;
      }
    }
    
    log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    log('üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞...');
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤
    await initializeReserve();
    log('‚úÖ –†–µ–∑–µ—Ä–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    logError(error, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');
    process.exit(1);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞
async function initializeReserve() {
  try {
    // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    await db.collection('reserve').deleteMany({ currency: null });
    
    let reserve = await db.collection('reserve').findOne({ currency: 'main' });
    
    if (!reserve) {
      reserve = {
        currency: 'main',
        stars: config.INITIAL_RESERVE_STARS,
        magnumCoins: config.INITIAL_RESERVE_MAGNUM_COINS,
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      await db.collection('reserve').insertOne(reserve);
      log('üí∞ –†–µ–∑–µ—Ä–≤ –≤–∞–ª—é—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          } else {
        log('üí∞ –†–µ–∑–µ—Ä–≤ –≤–∞–ª—é—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
  } catch (error) {
    logError(error, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞');
  }
}

// ==================== –ö–ï–®–ò–†–û–í–ê–ù–ò–ï ====================
const userCache = new Map();
const statsCache = new Map();

function getCachedUser(id) {
  const cached = userCache.get(id);
  if (cached && (Date.now() - cached.timestamp) < config.USER_CACHE_TTL) {
    return cached.user;
  }
  return null;
}

function setCachedUser(id, user) {
  userCache.set(id, { user, timestamp: Date.now() });
}

function getCachedStats(key) {
  const cached = statsCache.get(key);
  if (cached && (Date.now() - cached.timestamp) < config.STATS_CACHE_TTL) {
    return cached.data;
  }
  return null;
}

function setCachedStats(key, data) {
  statsCache.set(key, { data, timestamp: Date.now() });
}

// ==================== –£–¢–ò–õ–ò–¢–´ ====================
function formatNumber(num) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ num —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
  if (num === null || num === undefined || isNaN(num)) {
    return '0.00';
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  num = Number(num);
  
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  }
  return num.toFixed(2);
}

function formatTime(seconds) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ seconds —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
  if (seconds === null || seconds === undefined || isNaN(seconds)) {
    return '0—Å';
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  seconds = Number(seconds);
  
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;
  
  if (hours > 0) {
    return `${hours}—á ${minutes}–º ${secs}—Å`;
  } else if (minutes > 0) {
    return `${minutes}–º ${secs}—Å`;
  }
  return `${secs}—Å`;
}

function getUserRank(user) {
  const stars = user.stars || 0;
  if (stars >= 1000000) return 'üëë –õ–µ–≥–µ–Ω–¥–∞';
  if (stars >= 500000) return 'üíé –ê–ª–º–∞–∑';
  if (stars >= 100000) return 'üèÜ –ß–µ–º–ø–∏–æ–Ω';
  if (stars >= 50000) return '‚≠ê –ó–≤–µ–∑–¥–∞';
  if (stars >= 10000) return 'üåü –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª';
  if (stars >= 5000) return 'üí´ –≠–∫—Å–ø–µ—Ä—Ç';
  if (stars >= 1000) return '‚ú® –ú–∞—Å—Ç–µ—Ä';
  if (stars >= 500) return 'üéØ –û–ø—ã—Ç–Ω—ã–π';
  if (stars >= 100) return 'üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π';
  return 'üå± –ù–æ–≤–∏—á–æ–∫';
}

function isAdmin(userId) {
  return config.ADMIN_IDS.includes(userId);
}

// ==================== –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function ensureUserFields(user) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  if (!user.statistics) {
    user.statistics = {
      joinDate: user.createdAt || new Date(),
      lastSeen: new Date(),
      totalSessions: 1,
      totalActions: 0,
      favoriteAction: null
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–µ—Ä–º—É
  if (!user.farm) {
    user.farm = {
      lastFarm: null,
      farmCount: 0,
      totalFarmEarnings: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–π–Ω–µ—Ä
  if (!user.miner) {
    user.miner = {
      active: false,
      level: 1,
      efficiency: 1,
      lastReward: null,
      totalMined: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
  if (!user.dailyBonus) {
    user.dailyBonus = {
      lastBonus: null,
      streak: 0,
      maxStreak: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–º–µ–Ω
  if (!user.exchange) {
    user.exchange = {
      totalExchanged: 0,
      exchangeCount: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
  if (!user.withdrawal) {
    user.withdrawal = {
      totalWithdrawn: 0,
      withdrawalCount: 0,
      pendingAmount: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è
  if (!user.tasks) {
    user.tasks = {
      dailyTasks: [],
      sponsorTasks: [],
      lastDailyTasksReset: null,
      completedTasksCount: 0,
      totalTaskRewards: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
  if (!user.support) {
    user.support = {
      ticketsCount: 0,
      lastTicket: null
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  if (!user.settings) {
    user.settings = {
      notifications: true,
      language: 'ru',
      theme: 'default'
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  if (!user.achievements) {
    user.achievements = [];
  }
  
  if (!user.achievementsCount) {
    user.achievementsCount = 0;
  }
  
  if (!user.achievementsProgress) {
    user.achievementsProgress = {};
  }
  
  if (!user.titles) {
    user.titles = ['üå± –ù–æ–≤–∏—á–æ–∫'];
  }
  
  if (!user.mainTitle) {
    user.mainTitle = 'üå± –ù–æ–≤–∏—á–æ–∫';
  }
  
  if (!user.referrals) {
    user.referrals = [];
  }
  
  if (!user.referralsCount) {
    user.referralsCount = 0;
  }
  
  if (!user.totalReferralEarnings) {
    user.totalReferralEarnings = 0;
  }
  
  if (!user.totalEarnedStars) {
    user.totalEarnedStars = user.stars || 0;
  }
  
  if (!user.totalEarnedMagnumCoins) {
    user.totalEarnedMagnumCoins = user.magnumCoins || 0;
  }
  
  if (!user.level) {
    user.level = 1;
  }
  
  if (!user.experience) {
    user.experience = 0;
  }
  
  if (!user.experienceToNextLevel) {
    user.experienceToNextLevel = 100;
  }
  
  if (!user.rank) {
    user.rank = getUserRank(user);
  }
  
  if (!user.referralCode) {
    user.referralCode = generateReferralCode();
  }
  
  return user;
}

async function getUser(id, ctx = null) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = getCachedUser(id);
    if (cached) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (cached.banned) {
        if (ctx) {
          await ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }
        return null;
      }
      return cached;
    }

    let user = await db.collection('users').findOne({ id: id });
    
    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = {
        id: id,
        username: ctx?.from?.username || null,
        firstName: ctx?.from?.first_name || null,
        lastName: ctx?.from?.last_name || null,
        stars: config.INITIAL_STARS,
        magnumCoins: config.INITIAL_MAGNUM_COINS,
        totalEarnedStars: config.INITIAL_STARS,
        totalEarnedMagnumCoins: config.INITIAL_MAGNUM_COINS,
        level: 1,
        experience: 0,
        experienceToNextLevel: 100,
        rank: getUserRank({ stars: config.INITIAL_STARS }),
        mainTitle: 'üå± –ù–æ–≤–∏—á–æ–∫',
        titles: ['üå± –ù–æ–≤–∏—á–æ–∫'],
        achievements: [],
        achievementsCount: 0,
        achievementsProgress: {},
        referralCode: generateReferralCode(),
        referrerId: null,
        referrals: [],
        referralsCount: 0,
        totalReferralEarnings: 0,
        farm: {
          lastFarm: null,
          farmCount: 0,
          totalFarmEarnings: 0
        },
        miner: {
          active: false,
          level: 1,
          efficiency: 1,
          lastReward: null,
          totalMined: 0
        },
        dailyBonus: {
          lastBonus: null,
          streak: 0,
          maxStreak: 0
        },
        exchange: {
          totalExchanged: 0,
          exchangeCount: 0
        },
        withdrawal: {
          totalWithdrawn: 0,
          withdrawalCount: 0,
          pendingAmount: 0
        },
        tasks: {
          dailyTasks: [],
          sponsorTasks: [],
          lastDailyTasksReset: null,
          completedTasksCount: 0,
          totalTaskRewards: 0
        },
        support: {
          ticketsCount: 0,
          lastTicket: null
        },
        settings: {
          notifications: true,
          language: 'ru',
          theme: 'default'
        },
        statistics: {
          joinDate: new Date(),
          lastSeen: new Date(),
          totalSessions: 1,
          totalActions: 0,
          favoriteAction: null
        },
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      await db.collection('users').insertOne(user);
      log(`üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username || user.id}`);
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (user.banned) {
        if (ctx) {
          await ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }
        return null;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
      user = ensureUserFields(user);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      user.statistics.lastSeen = new Date();
      user.statistics.totalSessions = (user.statistics.totalSessions || 0) + 1;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await db.collection('users').updateOne(
        { id: id },
        { 
          $set: { 
            ...user,
            updatedAt: new Date()
          }
        }
      );
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    setCachedUser(id, user);
    return user;
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return null;
  }
}

function generateReferralCode() {
  return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// ==================== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ====================
async function checkSubscription(ctx) {
  try {
    if (!config.REQUIRED_CHANNEL) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (!config.REQUIRED_CHANNEL.startsWith('@') && !config.REQUIRED_CHANNEL.startsWith('https://t.me/')) {
      return true;
    }
    
    const member = await ctx.telegram.getChatMember(config.REQUIRED_CHANNEL, ctx.from.id);
    return ['creator', 'administrator', 'member'].includes(member.status);
  } catch (error) {
    logError(error, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏');
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    return true;
  }
}

async function showSubscriptionMessage(ctx) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  if (!config.REQUIRED_CHANNEL || (!config.REQUIRED_CHANNEL.startsWith('@') && !config.REQUIRED_CHANNEL.startsWith('https://t.me/'))) {
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const user = await getUser(ctx.from.id);
    if (user) {
      await showMainMenu(ctx, user);
    }
    return;
  }
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', config.REQUIRED_CHANNEL)],
    [Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'check_subscription')]
  ]);
  
  await ctx.reply(
    `üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n` +
    `üì¢ –ö–∞–Ω–∞–ª: ${config.REQUIRED_CHANNEL}\n\n` +
    `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"`,
    keyboard
  );
}

// ==================== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ====================
async function handleReferral(userId, referrerId) {
  try {
    if (userId === referrerId) return;
    
    const user = await getUser(userId);
    if (user.referrerId) return; // –£–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä
    
    const referrer = await getUser(referrerId);
    if (!referrer) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: userId },
      { 
        $set: { 
          referrerId: referrerId,
          updatedAt: new Date()
        }
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    await db.collection('users').updateOne(
      { id: referrerId },
      { 
        $inc: { 
          referralsCount: 1,
          totalReferralEarnings: config.REFERRAL_BONUS,
          magnumCoins: config.REFERRAL_BONUS,
          totalEarnedMagnumCoins: config.REFERRAL_BONUS
        },
        $push: { referrals: userId },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(userId);
    userCache.delete(referrerId);
    
    log(`üë• –†–µ—Ñ–µ—Ä–∞–ª: ${userId} -> ${referrerId}`);
  } catch (error) {
    logError(error, '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
  }
}

// ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================
async function showMainMenu(ctx, user) {
  const rank = getUserRank(user);
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
  const buttons = [
    [
      Markup.button.callback('üåæ –§–∞—Ä–º', 'farm')
    ],
    [
      Markup.button.callback('üí± –û–±–º–µ–Ω', 'exchange'),
      Markup.button.callback('üí∞ –í—ã–≤–æ–¥', 'withdrawal')
    ],
    [
      Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus'),
      Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'tasks')
    ],
    [
      Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements'),
      Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')
    ],
    [
      Markup.button.callback('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support'),
      Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')
    ]
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (isAdmin(user.id)) {
    buttons.push([
      Markup.button.callback('üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')
    ]);
  }
  
  const keyboard = Markup.inlineKeyboard(buttons);
  
  const message = 
    `üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!*\n\n` +
    `üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n` +
    `‚îú ID: \`${user.id}\`\n` +
    `‚îú –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
    `‚îú –£—Ä–æ–≤–µ–Ω—å: ${user.level}\n` +
    `‚îú –†–∞–Ω–≥: ${rank}\n` +
    `‚îî –¢–∏—Ç—É–ª: ${user.mainTitle}\n\n` +
    `üíé *–ë–∞–ª–∞–Ω—Å:*\n` +
    `‚îú ‚≠ê Stars: \`${formatNumber(user.stars)}\`\n` +
    `‚îî ü™ô Magnum Coins: \`${formatNumber(user.magnumCoins)}\`\n\n` +
    `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
    `‚îú –û–ø—ã—Ç: \`${user.experience}/${user.experienceToNextLevel}\`\n` +
    `‚îú –†–µ—Ñ–µ—Ä–∞–ª—ã: \`${user.referralsCount}\`\n` +
    `‚îî –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: \`${user.achievementsCount}\`\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

async function showMainMenuStart(ctx, user) {
  const rank = getUserRank(user);
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
  const buttons = [
    [
      Markup.button.callback('üåæ –§–∞—Ä–º', 'farm')
    ],
    [
      Markup.button.callback('üí± –û–±–º–µ–Ω', 'exchange'),
      Markup.button.callback('üí∞ –í—ã–≤–æ–¥', 'withdrawal')
    ],
    [
      Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus'),
      Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'tasks')
    ],
    [
      Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements'),
      Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')
    ],
    [
      Markup.button.callback('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support'),
      Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')
    ]
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (isAdmin(user.id)) {
    buttons.push([
      Markup.button.callback('üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')
    ]);
  }
  
  const keyboard = Markup.inlineKeyboard(buttons);
  
  const message = 
    `üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!*\n\n` +
    `üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n` +
    `‚îú ID: \`${user.id}\`\n` +
    `‚îú –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
    `‚îú –£—Ä–æ–≤–µ–Ω—å: ${user.level}\n` +
    `‚îú –†–∞–Ω–≥: ${rank}\n` +
    `‚îî –¢–∏—Ç—É–ª: ${user.mainTitle}\n\n` +
    `üíé *–ë–∞–ª–∞–Ω—Å:*\n` +
    `‚îú ‚≠ê Stars: \`${formatNumber(user.stars)}\`\n` +
    `‚îî ü™ô Magnum Coins: \`${formatNumber(user.magnumCoins)}\`\n\n` +
    `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
    `‚îú –û–ø—ã—Ç: \`${user.experience}/${user.experienceToNextLevel}\`\n` +
    `‚îú –†–µ—Ñ–µ—Ä–∞–ª—ã: \`${user.referralsCount}\`\n` +
    `‚îî –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: \`${user.achievementsCount}\`\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

// ==================== –ú–ê–ô–ù–ò–ù–ì ====================
async function showMinerMenu(ctx, user) {
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –º–∞–π–Ω–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
  if (!user.miner) {
    user.miner = {
      active: false,
      level: 1,
      efficiency: 1,
      lastReward: null,
      totalMined: 0
    };
  }
  
  const miner = user.miner;
  const isActive = miner.active || false;
  const efficiency = miner.efficiency || 1;
  const rewardPerHour = config.MINER_REWARD_PER_HOUR * efficiency;
  
  let statusText = isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
  let lastRewardText = '';
  
  if (miner.lastReward) {
    const timeSince = Math.floor((Date.now() - miner.lastReward.getTime()) / 1000);
    if (timeSince < 3600) {
      const remaining = 3600 - timeSince;
      lastRewardText = `\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${formatTime(remaining)}`;
    }
  }
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        isActive ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä',
        isActive ? 'stop_miner' : 'start_miner'
      )
    ],
    [
      Markup.button.callback('‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä', 'upgrade_miner'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'miner_stats')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `‚õèÔ∏è *–ú–∞–π–Ω–µ—Ä*\n\n` +
    `üìä *–°—Ç–∞—Ç—É—Å:* ${statusText}\n` +
    `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${miner.level}\n` +
    `‚ö° *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${efficiency}x\n` +
    `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(rewardPerHour)} Stars\n` +
    `üíé *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:* ${formatNumber(miner.totalMined)} Stars${lastRewardText}\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

async function startMiner(ctx, user) {
  try {
    log(`‚õèÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (user.miner.active) {
      log(`‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!');
      return;
    }
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'miner.active': true,
          'miner.lastReward': new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚úÖ –ú–∞–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å Stars –∫–∞–∂–¥—ã–π —á–∞—Å.');
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    await updateMinerMenu(ctx, { ...user, miner: { ...user.miner, active: true } });
  } catch (error) {
    logError(error, '–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞');
  }
}

async function stopMiner(ctx, user) {
  try {
    log(`‚èπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (!user.miner.active) {
      log(`‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      return;
    }
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'miner.active': false,
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚èπÔ∏è –ú–∞–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    await updateMinerMenu(ctx, { ...user, miner: { ...user.miner, active: false } });
  } catch (error) {
    logError(error, '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–π–Ω–µ—Ä–∞');
  }
}

// ==================== –§–ê–†–ú ====================
async function showFarmMenu(ctx, user) {
  const farm = user.farm;
  const now = Date.now();
  const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
  const timeSince = Math.floor((now - lastFarm) / 1000);
  const cooldown = config.FARM_COOLDOWN;
  
  const canFarm = timeSince >= cooldown;
  const remainingTime = canFarm ? 0 : cooldown - timeSince;
  
  const baseReward = config.FARM_BASE_REWARD;
  const bonus = Math.min(user.level * 0.1, 2); // –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å
  const totalReward = baseReward + bonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canFarm ? 'üåæ –§–∞—Ä–º–∏—Ç—å' : `‚è≥ ${formatTime(remainingTime)}`,
        canFarm ? 'do_farm' : 'farm_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'farm_stats'),
      Markup.button.callback('üéØ –ë–æ–Ω—É—Å—ã', 'farm_bonuses')
    ],
    [
      Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä', 'miner')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üåæ *–§–∞—Ä–º*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canFarm ? 'üü¢ –ì–æ—Ç–æ–≤' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Magnum Coins\n` +
    `üéØ *–ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å:* +${formatNumber(bonus)} Magnum Coins\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Magnum Coins\n` +
    `üìä *–í—Å–µ–≥–æ —Ñ–∞—Ä–º–æ–≤:* ${farm.farmCount}\n` +
    `üíé *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${formatNumber(farm.totalFarmEarnings)} Magnum Coins\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

async function doFarm(ctx, user) {
  try {
    log(`üåæ –ü–æ–ø—ã—Ç–∫–∞ —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const farm = user.farm;
    const now = Date.now();
    const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
    const timeSince = Math.floor((now - lastFarm) / 1000);
    const cooldown = config.FARM_COOLDOWN;
    
    log(`‚è∞ –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞—Ä–º–∞: ${timeSince}—Å, –∫—É–ª–¥–∞—É–Ω: ${cooldown}—Å`);
    
    if (timeSince < cooldown) {
      const remaining = cooldown - timeSince;
      log(`‚è≥ –ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}—Å`);
      await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(remaining)} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞—Ä–º–æ–º!`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞
      setTimeout(async () => {
        try {
          const updatedUser = await getUser(ctx.from.id);
          if (updatedUser) {
            await updateFarmMenu(ctx, updatedUser);
            log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞`);
          }
        } catch (error) {
          logError(error, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞');
        }
      }, remaining * 1000);
      
      return;
    }
    
    const baseReward = config.FARM_BASE_REWARD;
    const bonus = Math.min(user.level * 0.1, 2);
    const totalReward = baseReward + bonus;
    
    log(`üí∞ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã: –±–∞–∑–æ–≤–∞—è ${baseReward}, –±–æ–Ω—É—Å ${bonus}, –∏—Ç–æ–≥–æ ${totalReward} Magnum Coins`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnumCoins: totalReward,
          totalEarnedMagnumCoins: totalReward,
          experience: Math.floor(totalReward * 10),
          'farm.farmCount': 1,
          'farm.totalFarmEarnings': totalReward,
          'statistics.totalActions': 1
        },
        $set: { 
          'farm.lastFarm': new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –§–∞—Ä–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalReward} Magnum Coins`);
    await ctx.answerCbQuery(
      `üåæ –§–∞—Ä–º –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber(totalReward)} Magnum Coins`
    );
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ñ–∞—Ä–º–∞
    await updateFarmMenu(ctx, { ...user, farm: { ...farm, lastFarm: new Date() } });
  } catch (error) {
    logError(error, '–§–∞—Ä–º');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ñ–∞—Ä–º–∞');
  }
}

// ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–†–ú–ê ====================
async function showFarmStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const farm = user.farm;
    const now = Date.now();
    const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
    const timeSince = Math.floor((now - lastFarm) / 1000);
    const cooldown = config.FARM_COOLDOWN;
    
    const canFarm = timeSince >= cooldown;
    const remainingTime = canFarm ? 0 : cooldown - timeSince;
    
    const baseReward = config.FARM_BASE_REWARD;
    const bonus = Math.min(user.level * 0.1, 2);
    const totalReward = baseReward + bonus;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          canFarm ? 'üåæ –§–∞—Ä–º–∏—Ç—å' : `‚è≥ ${formatTime(remainingTime)}`,
          canFarm ? 'do_farm' : 'farm_cooldown'
        )
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'farm_stats'),
        Markup.button.callback('üéØ –ë–æ–Ω—É—Å—ã', 'farm_bonuses')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'farm')]
    ]);
    
    const message = 
      `üåæ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞—Ä–º–∞*\n\n` +
      `üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ —Ñ–∞—Ä–º–æ–≤: \`${farm.farmCount || 0}\`\n` +
      `‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(farm.totalFarmEarnings || 0)}\` Magnum Coins\n` +
      `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${farm.farmCount > 0 ? formatNumber((farm.totalFarmEarnings || 0) / farm.farmCount) : '0.00'}\` Magnum Coins\n\n` +
      `‚è∞ *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*\n` +
      `‚îú –°—Ç–∞—Ç—É—Å: ${canFarm ? 'üü¢ –ì–æ—Ç–æ–≤' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${formatNumber(baseReward)}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å: \`+${formatNumber(bonus)}\` Magnum Coins\n` +
      `‚îî –ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞: \`${formatNumber(totalReward)}\` Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞—Ä–º–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

// ==================== –ë–û–ù–£–°–´ –§–ê–†–ú–ê ====================
async function showFarmBonuses(ctx, user) {
  try {
    log(`üéØ –ü–æ–∫–∞–∑ –±–æ–Ω—É—Å–æ–≤ —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const farm = user.farm;
    const now = Date.now();
    const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
    const timeSince = Math.floor((now - lastFarm) / 1000);
    const cooldown = config.FARM_COOLDOWN;
    
    const canFarm = timeSince >= cooldown;
    const remainingTime = canFarm ? 0 : cooldown - timeSince;
    
    const baseReward = config.FARM_BASE_REWARD;
    const bonus = Math.min(user.level * 0.1, 2);
    const totalReward = baseReward + bonus;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          canFarm ? 'üåæ –§–∞—Ä–º–∏—Ç—å' : `‚è≥ ${formatTime(remainingTime)}`,
          canFarm ? 'do_farm' : 'farm_cooldown'
        )
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'farm_stats'),
        Markup.button.callback('üéØ –ë–æ–Ω—É—Å—ã', 'farm_bonuses')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'farm')]
    ]);
    
    const message = 
      `üéØ *–ë–æ–Ω—É—Å—ã —Ñ–∞—Ä–º–∞*\n\n` +
      `üí∞ *–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤:*\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${formatNumber(baseReward)}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å: \`+${formatNumber(bonus)}\` Magnum Coins\n` +
      `‚îî –ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞: \`${formatNumber(totalReward)}\` Magnum Coins\n\n` +
      `üìà *–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –±–æ–Ω—É—Å—ã:*\n` +
      `‚îú –ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞\n` +
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: \`+2.00\` Magnum Coins\n` +
      `‚îî –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: \`${user.level || 1}\`\n\n` +
      `‚è∞ *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*\n` +
      `‚îú –°—Ç–∞—Ç—É—Å: ${canFarm ? 'üü¢ –ì–æ—Ç–æ–≤' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
      `‚îî ${canFarm ? '–ú–æ–∂–µ—Ç–µ —Ñ–∞—Ä–º–∏—Ç—å!' : `–û—Å—Ç–∞–ª–æ—Å—å: ${formatTime(remainingTime)}`}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –±–æ–Ω—É—Å–æ–≤ —Ñ–∞—Ä–º–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–Ω—É—Å–æ–≤');
  }
}

// ==================== –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° ====================
async function updateMinerMenu(ctx, user) {
  try {
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –º–∞–π–Ω–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (!user.miner) {
      log(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      user.miner = {
        active: false,
        level: 1,
        efficiency: 1,
        lastReward: null,
        totalMined: 0
      };
    }
  
  const miner = user.miner;
  const isActive = miner.active || false;
  const efficiency = miner.efficiency || 1;
  const rewardPerHour = config.MINER_REWARD_PER_HOUR * efficiency;
  
  let statusText = isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
  let lastRewardText = '';
  
  if (miner.lastReward) {
    const timeSince = Math.floor((Date.now() - miner.lastReward.getTime()) / 1000);
    if (timeSince < 3600) {
      const remaining = 3600 - timeSince;
      lastRewardText = `\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${formatTime(remaining)}`;
    }
  }
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        isActive ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä',
        isActive ? 'stop_miner' : 'start_miner'
      )
    ],
    [
      Markup.button.callback('‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä', 'upgrade_miner'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'miner_stats')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `‚õèÔ∏è *–ú–∞–π–Ω–µ—Ä*\n\n` +
    `üìä *–°—Ç–∞—Ç—É—Å:* ${statusText}\n` +
    `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${miner.level}\n` +
    `‚ö° *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${efficiency}x\n` +
    `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(rewardPerHour)} Stars\n` +
    `üíé *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:* ${formatNumber(miner.totalMined)} Stars${lastRewardText}\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
    log(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    log(`‚úÖ –ú–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    log(`üîÑ Fallback: –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await showMinerMenu(ctx, user);
  }
}

async function updateFarmMenu(ctx, user) {
  try {
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const farm = user.farm;
    const now = Date.now();
    const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
    const timeSince = Math.floor((now - lastFarm) / 1000);
    const cooldown = config.FARM_COOLDOWN;
  
  const canFarm = timeSince >= cooldown;
  const remainingTime = canFarm ? 0 : cooldown - timeSince;
  
  const baseReward = config.FARM_BASE_REWARD;
  const bonus = Math.min(user.level * 0.1, 2);
  const totalReward = baseReward + bonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canFarm ? 'üåæ –§–∞—Ä–º–∏—Ç—å' : `‚è≥ ${formatTime(remainingTime)}`,
        canFarm ? 'do_farm' : 'farm_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'farm_stats'),
      Markup.button.callback('üéØ –ë–æ–Ω—É—Å—ã', 'farm_bonuses')
    ],
    [
      Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä', 'miner')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üåæ *–§–∞—Ä–º*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canFarm ? 'üü¢ –ì–æ—Ç–æ–≤' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Magnum Coins\n` +
    `üéØ *–ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å:* +${formatNumber(bonus)} Magnum Coins\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Magnum Coins\n` +
    `üìä *–í—Å–µ–≥–æ —Ñ–∞—Ä–º–æ–≤:* ${farm.farmCount}\n` +
    `üíé *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${formatNumber(farm.totalFarmEarnings)} Magnum Coins\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
    log(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    log(`‚úÖ –ú–µ–Ω—é —Ñ–∞—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    log(`üîÑ Fallback: –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await showFarmMenu(ctx, user);
  }
}

async function showBonusMenu(ctx, user) {
  const bonus = user.dailyBonus;
  const now = new Date();
  const lastBonus = bonus.lastBonus;
  
  let canClaim = false;
  let timeUntilNext = 0;
  
  if (!lastBonus) {
    canClaim = true;
  } else {
    const timeSince = now.getTime() - lastBonus.getTime();
    const dayInMs = 24 * 60 * 60 * 1000;
    
    if (timeSince >= dayInMs) {
      canClaim = true;
    } else {
      timeUntilNext = dayInMs - timeSince;
    }
  }
  
  const baseReward = config.DAILY_BONUS_BASE;
  const streakBonus = Math.min(bonus.streak * 0.5, 5);
  const totalReward = baseReward + streakBonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(timeUntilNext / 1000))}`,
        canClaim ? 'claim_bonus' : 'bonus_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'bonus_stats'),
      Markup.button.callback('üî• –°–µ—Ä–∏—è', 'bonus_streak')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canClaim ? 'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Magnum Coins\n` +
    `üî• *–ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏:* +${formatNumber(streakBonus)} Magnum Coins\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Magnum Coins\n` +
    `üìä *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:* ${bonus.streak} –¥–Ω–µ–π\n` +
    `üèÜ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è:* ${bonus.maxStreak} –¥–Ω–µ–π\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

async function updateBonusMenu(ctx, user) {
  try {
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const now = new Date();
    const lastBonus = bonus.lastBonus;
  
  let canClaim = false;
  let timeUntilNext = 0;
  
  if (!lastBonus) {
    canClaim = true;
  } else {
    const timeSince = now.getTime() - lastBonus.getTime();
    const dayInMs = 24 * 60 * 60 * 1000;
    
    if (timeSince >= dayInMs) {
      canClaim = true;
    } else {
      timeUntilNext = dayInMs - timeSince;
    }
  }
  
  const baseReward = config.DAILY_BONUS_BASE;
  const streakBonus = Math.min(bonus.streak * 0.5, 5);
  const totalReward = baseReward + streakBonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(timeUntilNext / 1000))}`,
        canClaim ? 'claim_bonus' : 'bonus_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'bonus_stats'),
      Markup.button.callback('üî• –°–µ—Ä–∏—è', 'bonus_streak')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canClaim ? 'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Magnum Coins\n` +
    `üî• *–ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏:* +${formatNumber(streakBonus)} Magnum Coins\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Magnum Coins\n` +
    `üìä *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:* ${bonus.streak} –¥–Ω–µ–π\n` +
    `üèÜ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è:* ${bonus.maxStreak} –¥–Ω–µ–π\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
    log(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    log(`‚úÖ –ú–µ–Ω—é –±–æ–Ω—É—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    log(`üîÑ Fallback: –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await showBonusMenu(ctx, user);
  }
}

async function claimBonus(ctx, user) {
  try {
    log(`üéÅ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const now = new Date();
    const lastBonus = bonus.lastBonus;
    
    if (lastBonus) {
      const timeSince = now.getTime() - lastBonus.getTime();
      const dayInMs = 24 * 60 * 60 * 1000;
      
      log(`‚è∞ –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞: ${Math.floor(timeSince / 1000)}—Å`);
      
          if (timeSince < dayInMs) {
      const remaining = dayInMs - timeSince;
      log(`‚è≥ –ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Å—Ç–∞–ª–æ—Å—å: ${Math.floor(remaining / 1000)}—Å`);
      await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(Math.floor(remaining / 1000))} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞!`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞
      setTimeout(async () => {
        try {
          const updatedUser = await getUser(ctx.from.id);
          if (updatedUser) {
            await updateBonusMenu(ctx, updatedUser);
            log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞`);
          }
        } catch (error) {
          logError(error, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞');
        }
      }, remaining);
      
      return;
    }
    }
    
    const baseReward = config.DAILY_BONUS_BASE;
    const streakBonus = Math.min(bonus.streak * 0.5, 5);
    const totalReward = baseReward + streakBonus;
    
    log(`üí∞ –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞: –±–∞–∑–æ–≤–∞—è ${baseReward}, —Å–µ—Ä–∏—è ${bonus.streak}, –±–æ–Ω—É—Å —Å–µ—Ä–∏–∏ ${streakBonus}, –∏—Ç–æ–≥–æ ${totalReward} Stars`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ª–∏ –¥–µ–Ω—å
    let newStreak = bonus.streak + 1;
    if (lastBonus) {
      const timeSince = now.getTime() - lastBonus.getTime();
      const twoDaysInMs = 2 * 24 * 60 * 60 * 1000;
      if (timeSince > twoDaysInMs) {
        newStreak = 1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é
        log(`üîÑ –°–±—Ä–æ—Å —Å–µ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} (–ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å)`);
      }
    }
    
    log(`üìà –ù–æ–≤–∞—è —Å–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤: ${newStreak}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnumCoins: totalReward,
          totalEarnedMagnumCoins: totalReward,
          experience: Math.floor(totalReward * 5),
          'statistics.totalActions': 1
        },
        $set: { 
          'dailyBonus.lastBonus': now,
          'dailyBonus.streak': newStreak,
          'dailyBonus.maxStreak': Math.max(newStreak, bonus.maxStreak),
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalReward} Magnum Coins, —Å–µ—Ä–∏—è: ${newStreak} –¥–Ω–µ–π`);
    await ctx.answerCbQuery(
      `üéÅ –ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω! –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber(totalReward)} Magnum Coins, —Å–µ—Ä–∏—è: ${newStreak} –¥–Ω–µ–π`
    );
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±–æ–Ω—É—Å–∞
    await updateBonusMenu(ctx, { ...user, dailyBonus: { ...bonus, lastBonus: now, streak: newStreak } });
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞');
  }
}

// ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–ù–£–°–ê ====================
async function showBonusStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const totalEarned = bonus.totalEarned || 0;
    const claimedCount = bonus.claimedCount || 0;
    const maxStreak = bonus.maxStreak || 0;
    const currentStreak = bonus.streak || 0;
    
    const averageReward = claimedCount > 0 ? totalEarned / claimedCount : 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'bonus')]
    ]);
    
    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤*\n\n` +
      `üí∞ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: \`${claimedCount}\`\n` +
      `‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarned)}\` Magnum Coins\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${formatNumber(averageReward)}\` Magnum Coins\n` +
      `‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: \`${maxStreak}\` –¥–Ω–µ–π\n\n` +
      `üî• *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:*\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Ä–∏—è: \`${currentStreak}\` –¥–Ω–µ–π\n` +
      `‚îî –†–µ–∫–æ—Ä–¥–Ω–∞—è —Å–µ—Ä–∏—è: \`${maxStreak}\` –¥–Ω–µ–π\n\n` +
      `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å:*\n` +
      `‚îú –î–æ 7 –¥–Ω–µ–π: \`${Math.min(currentStreak, 7)}/7\`\n` +
      `‚îú –î–æ 30 –¥–Ω–µ–π: \`${Math.min(currentStreak, 30)}/30\`\n` +
      `‚îî –î–æ 100 –¥–Ω–µ–π: \`${Math.min(currentStreak, 100)}/100\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

async function showBonusStreak(ctx, user) {
  try {
    log(`üî• –ü–æ–∫–∞–∑ —Å–µ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const currentStreak = bonus.streak || 0;
    const maxStreak = bonus.maxStreak || 0;
    const lastBonus = bonus.lastBonus;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
    let timeUntilNext = 0;
    if (lastBonus) {
      const now = new Date();
      const timeSince = now.getTime() - lastBonus.getTime();
      const dayInMs = 24 * 60 * 60 * 1000;
      timeUntilNext = Math.max(0, dayInMs - timeSince);
    }
    
    const canClaim = timeUntilNext === 0;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(timeUntilNext / 1000))}`,
          canClaim ? 'claim_bonus' : 'bonus_cooldown'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'bonus')]
    ]);
    
    const message = 
      `üî• *–°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤*\n\n` +
      `üìä *–í–∞—à–∞ —Å–µ—Ä–∏—è:*\n` +
      `‚îú –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: \`${currentStreak}\` –¥–Ω–µ–π\n` +
      `‚îú –†–µ–∫–æ—Ä–¥–Ω–∞—è —Å–µ—Ä–∏—è: \`${maxStreak}\` –¥–Ω–µ–π\n` +
      `‚îî –°—Ç–∞—Ç—É—Å: ${canClaim ? 'üü¢ –ú–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞:*\n` +
      `‚îî ${canClaim ? '–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω!' : formatTime(Math.floor(timeUntilNext / 1000))}\n\n` +
      `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–µ—Ä–∏–∏:*\n` +
      `‚îú 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${currentStreak >= 7 ? '‚úÖ' : '‚ùå'}\n` +
      `‚îú 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${currentStreak >= 30 ? '‚úÖ' : '‚ùå'}\n` +
      `‚îî 100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${currentStreak >= 100 ? '‚úÖ' : '‚ùå'}\n\n` +
      `üí° *–°–æ–≤–µ—Ç:* –ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ —Å–µ—Ä–∏—è, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å!\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å–µ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–µ—Ä–∏–∏');
  }
}

// ==================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====================
async function showAdminPanel(ctx, user) {
  try {
    log(`üë®‚Äçüíº –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'admin_stats'),
        Markup.button.callback('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'admin_users')
      ],
      [
        Markup.button.callback('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏', 'admin_balance'),
        Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', 'admin_settings')
      ],
      [
        Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast'),
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞', 'admin_cache')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üë®‚Äçüíº *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*\n\n` +
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n` +
      `üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n` +
      `‚îú üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
      `‚îú üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –ø–æ–∏—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n` +
      `‚îú üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤\n` +
      `‚îú ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è\n` +
      `‚îú üì¢ –†–∞—Å—Å—ã–ª–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n` +
      `‚îî üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ - –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
  }
}

async function showAdminStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const totalUsers = await db.collection('users').countDocuments();
    const activeUsers = await db.collection('users').countDocuments({
      'lastSeen': { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
    });
    const newUsersToday = await db.collection('users').countDocuments({
      'createdAt': { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º
    const totalMagnumCoins = await db.collection('users').aggregate([
      { $group: { _id: null, total: { $sum: '$magnumCoins' } } }
    ]).toArray();
    
    const totalStars = await db.collection('users').aggregate([
      { $group: { _id: null, total: { $sum: '$stars' } } }
    ]).toArray();
    
    const totalMagnum = totalMagnumCoins.length > 0 ? totalMagnumCoins[0].total : 0;
    const totalStarsAmount = totalStars.length > 0 ? totalStars[0].total : 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n` +
      `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n` +
      `‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${totalUsers}\`\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: \`${activeUsers}\`\n` +
      `‚îî –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: \`${newUsersToday}\`\n\n` +
      `üí∞ *–≠–∫–æ–Ω–æ–º–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ Magnum Coins: \`${formatNumber(totalMagnum)}\`\n` +
      `‚îî –í—Å–µ–≥–æ Stars: \`${formatNumber(totalStarsAmount)}\`\n\n` +
      `üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`${Math.round((activeUsers / totalUsers) * 100)}%\`\n` +
      `‚îî –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –¥–µ–Ω—å: \`${newUsersToday}\` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

async function showAdminUsers(ctx, user) {
  try {
    log(`üë• –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_search_user'),
        Markup.button.callback('üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin_top_users')
      ],
      [
        Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 'admin_ban_user'),
        Markup.button.callback('‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 'admin_unban_user')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n` +
      `üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –Ω–∞–π—Ç–∏ –ø–æ ID\n` +
      `‚îú üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏\n` +
      `‚îú üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø\n` +
      `‚îî ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø\n\n` +
      `üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
  }
}

async function showAdminBalance(ctx, user) {
  try {
    log(`üí∞ –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Magnum Coins', 'admin_add_magnum'),
        Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Magnum Coins', 'admin_remove_magnum')
      ],
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Stars', 'admin_add_stars'),
        Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Stars', 'admin_remove_stars')
      ],
      [
        Markup.button.callback('üí∞ –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞', 'admin_mass_give'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤', 'admin_balance_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏*\n\n` +
      `üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú ‚ûï –î–æ–±–∞–≤–∏—Ç—å Magnum Coins - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n` +
      `‚îú ‚ûñ –£–±—Ä–∞—Ç—å Magnum Coins - —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n` +
      `‚îú ‚ûï –î–æ–±–∞–≤–∏—Ç—å Stars - –≤—ã–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã\n` +
      `‚îú ‚ûñ –£–±—Ä–∞—Ç—å Stars - —Å–ø–∏—Å–∞—Ç—å –∑–≤–µ–∑–¥—ã\n` +
      `‚îú üí∞ –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ - –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n` +
      `‚îî üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã!\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏');
  }
}

async function showAdminSettings(ctx, user) {
  try {
    log(`‚öôÔ∏è –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üéØ –ù–∞–≥—Ä–∞–¥—ã —Ñ–∞—Ä–º–∞', 'admin_farm_rewards'),
        Markup.button.callback('‚è∞ –ö—É–ª–¥–∞—É–Ω—ã', 'admin_cooldowns')
      ],
      [
        Markup.button.callback('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 'admin_daily_bonus'),
        Markup.button.callback('‚õèÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–π–Ω–µ—Ä–∞', 'admin_miner_settings')
      ],
      [
        Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', 'admin_referral_settings'),
        Markup.button.callback('üì¢ –ö–∞–Ω–∞–ª—ã –ø–æ–¥–ø–∏—Å–∫–∏', 'admin_subscription_channels')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n` +
      `üîß *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú üéØ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —Ñ–∞—Ä–º–∞: \`${config.FARM_BASE_REWARD}\` Magnum Coins\n` +
      `‚îú ‚è∞ –ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞: \`${config.FARM_COOLDOWN}\` —Å–µ–∫—É–Ω–¥\n` +
      `‚îú üéÅ –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å: \`${config.DAILY_BONUS_BASE}\` Magnum Coins\n` +
      `‚îú ‚õèÔ∏è –ù–∞–≥—Ä–∞–¥–∞ –º–∞–π–Ω–µ—Ä–∞: \`${config.MINER_REWARD_PER_HOUR}\` Magnum Coins/—á–∞—Å\n` +
      `‚îú üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.REFERRAL_REWARD}\` Magnum Coins\n` +
      `‚îî üì¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: \`${config.REQUIRED_CHANNEL || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

async function showAdminFarmRewards(ctx, user) {
  try {
    log(`üéØ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–¥ —Ñ–∞—Ä–º–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É', 'admin_farm_reward_increase'),
        Markup.button.callback('‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É', 'admin_farm_reward_decrease')
      ],
      [
        Markup.button.callback('üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', 'admin_farm_reward_set'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä–∞–¥', 'admin_farm_reward_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üéØ *–ù–∞–≥—Ä–∞–¥—ã —Ñ–∞—Ä–º–∞*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.FARM_BASE_REWARD}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å: \`${Math.min(user.level * 0.1, 2)}\` Magnum Coins\n` +
      `‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.FARM_BASE_REWARD + 2}\` Magnum Coins\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ —Ñ–∞—Ä–º–æ–≤: \`${user.farm?.farmCount || 0}\`\n` +
      `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞—Ä–º–æ–º: \`${formatNumber(user.farm?.totalFarmEarnings || 0)}\` Magnum Coins\n` +
      `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${user.farm?.farmCount > 0 ? formatNumber((user.farm?.totalFarmEarnings || 0) / user.farm?.farmCount) : '0.00'}\` Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥ —Ñ–∞—Ä–º–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–¥ —Ñ–∞—Ä–º–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–¥');
  }
}

async function showAdminCooldowns(ctx, user) {
  try {
    log(`‚è∞ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ª–¥–∞—É–Ω–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚è∞ –ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞', 'admin_cooldown_farm'),
        Markup.button.callback('üéÅ –ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞', 'admin_cooldown_bonus')
      ],
      [
        Markup.button.callback('‚õèÔ∏è –ö—É–ª–¥–∞—É–Ω –º–∞–π–Ω–µ—Ä–∞', 'admin_cooldown_miner'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤', 'admin_cooldown_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `‚è∞ *–ö—É–ª–¥–∞—É–Ω—ã*\n\n` +
      `‚è≥ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –§–∞—Ä–º: \`${config.FARM_COOLDOWN}\` —Å–µ–∫—É–Ω–¥ (\`${Math.floor(config.FARM_COOLDOWN / 60)}\` –º–∏–Ω—É—Ç)\n` +
      `‚îú –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: \`24\` —á–∞—Å–∞\n` +
      `‚îî –ú–∞–π–Ω–µ—Ä: \`60\` –º–∏–Ω—É—Ç\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n` +
      `‚îú –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Ñ–∞—Ä–º–∞–º–∏: \`${user.farm?.farmCount > 1 ? Math.floor(config.FARM_COOLDOWN / 60) : '–ù/–î'}\` –º–∏–Ω—É—Ç\n` +
      `‚îú –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º: ${user.farm?.lastFarm ? user.farm.lastFarm.toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞'}\n` +
      `‚îî –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–Ω—É—Å: ${user.dailyBonus?.lastBonus ? user.dailyBonus.lastBonus.toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞'}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ª–¥–∞—É–Ω–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ª–¥–∞—É–Ω–æ–≤');
  }
}

async function showAdminDailyBonus(ctx, user) {
  try {
    log(`üéÅ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üí∞ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞', 'admin_bonus_base'),
        Markup.button.callback('üî• –ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏', 'admin_bonus_streak')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤', 'admin_bonus_stats'),
        Markup.button.callback('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–∏–∏', 'admin_bonus_series')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.DAILY_BONUS_BASE}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é: \`+0.5\` Magnum Coins –∑–∞ –¥–µ–Ω—å\n` +
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å —Å–µ—Ä–∏–∏: \`5\` Magnum Coins\n` +
      `‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.DAILY_BONUS_BASE + 5}\` Magnum Coins\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
      `‚îú –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: \`${user.dailyBonus?.streak || 0}\` –¥–Ω–µ–π\n` +
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: \`${user.dailyBonus?.maxStreak || 0}\` –¥–Ω–µ–π\n` +
      `‚îú –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: \`${user.dailyBonus?.claimedCount || 0}\`\n` +
      `‚îî –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ–Ω—É—Å–∞–º–∏: \`${formatNumber(user.dailyBonus?.totalEarned || 0)}\` Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ–Ω—É—Å–∞');
  }
}

async function showAdminMinerSettings(ctx, user) {
  try {
    log(`‚õèÔ∏è –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —á–∞—Å', 'admin_miner_reward'),
        Markup.button.callback('‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 'admin_miner_efficiency')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞', 'admin_miner_stats'),
        Markup.button.callback('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π', 'admin_miner_levels')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `‚õèÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–π–Ω–µ—Ä–∞*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —á–∞—Å: \`${config.MINER_REWARD_PER_HOUR}\` Magnum Coins\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`1.0\`\n` +
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`5.0\`\n` +
      `‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.MINER_REWARD_PER_HOUR * 5}\` Magnum Coins/—á–∞—Å\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å –º–∞–π–Ω–µ—Ä–∞: \`${user.miner?.level || 1}\`\n` +
      `‚îú –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`${user.miner?.efficiency || 1.0}\`\n` +
      `‚îú –°—Ç–∞—Ç—É—Å: ${user.miner?.active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n` +
      `‚îú –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ: \`${formatNumber(user.miner?.totalMined || 0)}\` Magnum Coins\n` +
      `‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: ${user.miner?.lastReward ? user.miner.lastReward.toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞'}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–π–Ω–µ—Ä–∞');
  }
}

async function showAdminReferralSettings(ctx, user) {
  try {
    log(`üë• –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞', 'admin_referral_reward'),
        Markup.button.callback('üèÜ –ë–æ–Ω—É—Å—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'admin_referral_bonuses')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', 'admin_referral_stats'),
        Markup.button.callback('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π', 'admin_referral_levels')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: \`${config.REFERRAL_REWARD}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`50\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`100\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ 25 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`250\` Magnum Coins\n` +
      `‚îî –ë–æ–Ω—É—Å –∑–∞ 50 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`500\` Magnum Coins\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
      `‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${user.referralsCount || 0}\`\n` +
      `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(user.referralsEarnings || 0)}\` Magnum Coins\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å: \`${getReferralLevel(user.referralsCount || 0)}\`\n` +
      `‚îî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: \`${user.referralCode}\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
}

async function showAdminSubscriptionChannels(ctx, user) {
  try {
    log(`üì¢ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', 'admin_subscription_add'),
        Markup.button.callback('‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', 'admin_subscription_remove')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫', 'admin_subscription_stats'),
        Markup.button.callback('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏', 'admin_subscription_check')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üì¢ *–ö–∞–Ω–∞–ª—ã –ø–æ–¥–ø–∏—Å–∫–∏*\n\n` +
      `üì∫ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: \`${config.REQUIRED_CHANNEL || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\`\n` +
      `‚îú –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${config.REQUIRED_CHANNEL ? 'üü¢ –í–∫–ª—é—á–µ–Ω–∞' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n` +
      `‚îî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: \`–ü—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏\`\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${await db.collection('users').countDocuments()}\`\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${await db.collection('users').countDocuments({ 'lastSeen': { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } })}\`\n` +
      `‚îî –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: \`${Math.round((await db.collection('users').countDocuments({ 'lastSeen': { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } })) / (await db.collection('users').countDocuments()) * 100)}%\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏');
  }
}

async function showAdminTopUsers(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    const topByLevel = await db.collection('users').find().sort({ level: -1 }).limit(10).toArray();
    const topByMagnumCoins = await db.collection('users').find().sort({ magnumCoins: -1 }).limit(10).toArray();
    const topByStars = await db.collection('users').find().sort({ stars: -1 }).limit(10).toArray();
    const topByReferrals = await db.collection('users').find().sort({ referralsCount: -1 }).limit(10).toArray();
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚≠ê –ü–æ —É—Ä–æ–≤–Ω—é', 'admin_top_level'),
        Markup.button.callback('ü™ô –ü–æ Magnum Coins', 'admin_top_magnum')
      ],
      [
        Markup.button.callback('üíé –ü–æ Stars', 'admin_top_stars'),
        Markup.button.callback('üë• –ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', 'admin_top_referrals')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    let message = `üìä *–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é
    message += `‚≠ê *–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é:*\n`;
    topByLevel.forEach((user, index) => {
      message += `${index + 1}. ID: \`${user.id}\` - –£—Ä–æ–≤–µ–Ω—å: \`${user.level}\`\n`;
    });
    
    message += `\nü™ô *–¢–æ–ø –ø–æ Magnum Coins:*\n`;
    topByMagnumCoins.forEach((user, index) => {
      message += `${index + 1}. ID: \`${user.id}\` - \`${formatNumber(user.magnumCoins)}\` MC\n`;
    });
    
    message += `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
}

async function showAdminSearchUser(ctx, user) {
  try {
    log(`üîç –ü–æ–∫–∞–∑ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    const message = 
      `üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n` +
      `‚îú –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç\n` +
      `‚îú ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
      `‚îî –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* \`123456789\` –∏–ª–∏ \`@username\`\n\n` +
      `üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    user.adminState = 'searching_user';
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'searching_user', updatedAt: new Date() } }
    );
    
    log(`‚úÖ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–∏—Å–∫–∞');
  }
}

async function showAdminBanUser(ctx, user) {
  try {
    log(`üö´ –ü–æ–∫–∞–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    const message = 
      `üö´ *–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n` +
      `‚îú –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n` +
      `‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n` +
      `‚îî –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!\n\n` +
      `üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    user.adminState = 'banning_user';
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'banning_user', updatedAt: new Date() } }
    );
    
    log(`‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
  }
}

async function showAdminUnbanUser(ctx, user) {
  try {
    log(`‚úÖ –ü–æ–∫–∞–∑ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    const message = 
      `‚úÖ *–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n` +
      `‚îú –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n` +
      `‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n` +
      `‚îî –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è\n\n` +
      `üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    user.adminState = 'unbanning_user';
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'unbanning_user', updatedAt: new Date() } }
    );
    
    log(`‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
  }
}

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ê–ô–ù–ï–†–ê ====================
async function processMinerRewards() {
  try {
    const now = new Date();
    const hourAgo = new Date(now.getTime() - 60 * 60 * 1000);
    
    const activeMiners = await db.collection('users').find({
      'miner.active': true,
      'miner.lastReward': { $lt: hourAgo }
    }).toArray();
    
    for (const user of activeMiners) {
      const reward = config.MINER_REWARD_PER_HOUR * user.miner.efficiency;
      
      await db.collection('users').updateOne(
        { id: user.id },
        { 
          $inc: { 
            magnumCoins: reward,
            totalEarnedMagnumCoins: reward,
            experience: Math.floor(reward * 5),
            'miner.totalMined': reward
          },
          $set: { 
            'miner.lastReward': now,
            updatedAt: new Date()
          }
        }
      );
      
      userCache.delete(user.id);
      log(`‚õèÔ∏è –ú–∞–π–Ω–µ—Ä –Ω–∞–≥—Ä–∞–¥–∞: ${user.id} +${reward} Magnum Coins`);
    }
  } catch (error) {
    logError(error, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–µ—Ä–∞');
  }
}

// ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================
function log(message, type = 'INFO') {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [${type}] ${message}`;
  console.log(logMessage);
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
function logError(error, context = '') {
  const timestamp = new Date().toISOString();
  const errorMessage = `[${timestamp}] [ERROR] ${context}: ${error.message}`;
  console.error(errorMessage);
  if (error.stack) {
    console.error(`[${timestamp}] [ERROR] Stack: ${error.stack}`);
  }
}

// ==================== –û–ë–ú–ï–ù ====================
async function showExchangeMenu(ctx, user) {
  try {
    log(`üí± –ü–æ–∫–∞–∑ –º–µ–Ω—é –æ–±–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const exchangeRate = 1; // 1 Magnum Coin = 1 Star
    const maxExchange = Math.floor(user.magnumCoins);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('ü™ô 10 Magnum Coins ‚Üí 10 Stars', 'exchange_10'),
        Markup.button.callback('ü™ô 50 Magnum Coins ‚Üí 50 Stars', 'exchange_50')
      ],
      [
        Markup.button.callback('ü™ô 100 Magnum Coins ‚Üí 100 Stars', 'exchange_100'),
        Markup.button.callback('ü™ô 500 Magnum Coins ‚Üí 500 Stars', 'exchange_500')
      ],
      [
        Markup.button.callback('ü™ô –í—Å–µ Magnum Coins', 'exchange_all'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º–µ–Ω–æ–≤', 'exchange_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üí± *–û–±–º–µ–Ω –≤–∞–ª—é—Ç*\n\n` +
      `üí∞ *–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:*\n` +
      `‚îú ü™ô Magnum Coins: \`${formatNumber(user.magnumCoins)}\`\n` +
      `‚îî ‚≠ê Stars: \`${formatNumber(user.stars)}\`\n\n` +
      `üí± *–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:*\n` +
      `‚îú 1 Magnum Coin = 1 Star\n` +
      `‚îî –ö–æ–º–∏—Å—Å–∏—è: 0%\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º–µ–Ω–æ–≤:*\n` +
      `‚îú –í—Å–µ–≥–æ –æ–±–º–µ–Ω–æ–≤: \`${user.exchange?.totalExchanges || 0}\`\n` +
      `‚îî –í—Å–µ–≥–æ –æ–±–º–µ–Ω–µ–Ω–æ: \`${formatNumber(user.exchange?.totalExchanged || 0)}\` Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –æ–±–º–µ–Ω–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –æ–±–º–µ–Ω–∞');
  }
}

async function performExchange(ctx, user, amount) {
  try {
    log(`üí± –ü–æ–ø—ã—Ç–∫–∞ –æ–±–º–µ–Ω–∞ ${amount} Magnum Coins –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (amount > user.magnumCoins) {
      log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins –¥–ª—è –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    if (amount <= 0) {
      log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnumCoins: -amount,
          stars: amount,
          'exchange.totalExchanges': 1,
          'exchange.totalExchanged': amount,
          'statistics.totalActions': 1
        },
        $set: { 
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${amount} Magnum Coins ‚Üí ${amount} Stars`);
    await ctx.answerCbQuery(
      `‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω! ${formatNumber(amount)} Magnum Coins ‚Üí ${formatNumber(amount)} Stars`
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –æ–±–º–µ–Ω–∞
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showExchangeMenu(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω –≤–∞–ª—é—Ç');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞');
  }
}

// ==================== –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ====================
async function showAchievementsMenu(ctx, user) {
  try {
    log(`üèÜ –ü–æ–∫–∞–∑ –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = getAchievementsList(user);
    
    const completedAchievements = achievements.filter(a => a.condition);
    const totalAchievements = achievements.length;
    const completionRate = Math.round((completedAchievements.length / totalAchievements) * 100);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', 'achievements_progress'),
        Markup.button.callback('üéÅ –ù–∞–≥—Ä–∞–¥—ã', 'achievements_rewards')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    let message = `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n`;
    message += `üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å:* ${completedAchievements.length}/${totalAchievements} (${completionRate}%)\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const recentAchievements = achievements.slice(0, 5);
    message += `üéØ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n`;
    
    recentAchievements.forEach((achievement, index) => {
      const status = achievement.condition ? '‚úÖ' : '‚ùå';
      message += `${status} ${achievement.title}\n`;
      if (index < 4) message += `‚îî ${achievement.description}\n\n`;
    });
    
    if (achievements.length > 5) {
      message += `\n... –∏ –µ—â–µ ${achievements.length - 5} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n`;
    }
    
    message += `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }
}

function getAchievementsList(user) {
  return [
          {
        id: 'first_farm',
        title: 'üåæ –ü–µ—Ä–≤—ã–π —Ñ–∞—Ä–º',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∞—Ä–º',
        condition: user.farm?.farmCount >= 1,
        progress: user.farm?.farmCount || 0,
        target: 1,
        reward: '10 Magnum Coins'
      },
      {
        id: 'farm_master',
        title: 'üëë –ú–∞—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 100 —Ñ–∞—Ä–º–æ–≤',
        condition: user.farm?.farmCount >= 100,
        progress: user.farm?.farmCount || 0,
        target: 100,
        reward: '500 Magnum Coins'
      },
      {
        id: 'magnum_collector',
        title: 'ü™ô –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä Magnum',
        description: '–ù–∞–∫–æ–ø–∏—Ç–µ 1000 Magnum Coins',
        condition: user.magnumCoins >= 1000,
        progress: user.magnumCoins || 0,
        target: 1000,
        reward: '200 Magnum Coins'
      },
      {
        id: 'exchange_trader',
        title: 'üí± –¢—Ä–µ–π–¥–µ—Ä',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 50 –æ–±–º–µ–Ω–æ–≤',
        condition: user.exchange?.totalExchanges >= 50,
        progress: user.exchange?.totalExchanges || 0,
        target: 50,
        reward: '300 Magnum Coins'
      },
      {
        id: 'level_10',
        title: '‚≠ê –£—Ä–æ–≤–µ–Ω—å 10',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è',
        condition: user.level >= 10,
        progress: user.level || 1,
        target: 10,
        reward: '100 Magnum Coins'
      },
      {
        id: 'level_50',
        title: '‚≠ê‚≠ê –£—Ä–æ–≤–µ–Ω—å 50',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 50 —É—Ä–æ–≤–Ω—è',
        condition: user.level >= 50,
        progress: user.level || 1,
        target: 50,
        reward: '1000 Magnum Coins'
      },
      {
        id: 'referral_king',
        title: 'üë• –ö–æ—Ä–æ–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
        description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
        condition: user.referralsCount >= 10,
        progress: user.referralsCount || 0,
        target: 10,
        reward: '400 Magnum Coins'
      },
      {
        id: 'daily_streak',
        title: 'üî• –°–µ—Ä–∏—è –¥–Ω–µ–π',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        condition: user.dailyBonus?.streak >= 7,
        progress: user.dailyBonus?.streak || 0,
        target: 7,
        reward: '150 Magnum Coins'
      }
  ];
}

async function showAchievementsProgress(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const achievements = getAchievementsList(user);
    const completedAchievements = achievements.filter(a => a.condition);
    const totalAchievements = achievements.length;
    const completionRate = Math.round((completedAchievements.length / totalAchievements) * 100);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º', 'achievements')]
    ]);
    
    let message = `üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π*\n\n`;
    message += `üìà *–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:* ${completedAchievements.length}/${totalAchievements} (${completionRate}%)\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    message += `üéØ *–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n\n`;
    
    achievements.forEach((achievement, index) => {
      const status = achievement.condition ? '‚úÖ' : 'üîÑ';
      const progressPercent = Math.min(Math.round((achievement.progress / achievement.target) * 100), 100);
      const progressBar = createProgressBar(progressPercent);
      
      message += `${status} *${achievement.title}*\n`;
      message += `‚îî ${achievement.description}\n`;
      message += `‚îî –ü—Ä–æ–≥—Ä–µ—Å—Å: \`${achievement.progress}/${achievement.target}\` (${progressPercent}%)\n`;
      message += `‚îî ${progressBar}\n\n`;
    });
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
  }
}

async function showAchievementsRewards(ctx, user) {
  try {
    log(`üéÅ –ü–æ–∫–∞–∑ –Ω–∞–≥—Ä–∞–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const achievements = getAchievementsList(user);
    const completedAchievements = achievements.filter(a => a.condition);
    const totalRewards = completedAchievements.reduce((sum, a) => {
      const rewardAmount = parseInt(a.reward.split(' ')[0]);
      return sum + rewardAmount;
    }, 0);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º', 'achievements')]
    ]);
    
    let message = `üéÅ *–ù–∞–≥—Ä–∞–¥—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π*\n\n`;
    message += `üí∞ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: \`${completedAchievements.length}\`\n`;
    message += `‚îú –í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: \`${totalRewards} Magnum Coins\`\n`;
    message += `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${completedAchievements.length > 0 ? Math.round(totalRewards / completedAchievements.length) : 0} Magnum Coins\`\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    message += `üèÜ *–ù–∞–≥—Ä–∞–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n\n`;
    
    const categories = {
      'üåæ –§–∞—Ä–º': achievements.filter(a => a.id.includes('farm')),
      'ü™ô Magnum Coins': achievements.filter(a => a.id.includes('magnum')),
      'üí± –û–±–º–µ–Ω': achievements.filter(a => a.id.includes('exchange')),
      '‚≠ê –£—Ä–æ–≤–Ω–∏': achievements.filter(a => a.id.includes('level')),
      'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã': achievements.filter(a => a.id.includes('referral')),
      'üî• –°–µ—Ä–∏–∏': achievements.filter(a => a.id.includes('daily'))
    };
    
    Object.entries(categories).forEach(([category, categoryAchievements]) => {
      if (categoryAchievements.length > 0) {
        const completed = categoryAchievements.filter(a => a.condition);
        const totalReward = completed.reduce((sum, a) => {
          const rewardAmount = parseInt(a.reward.split(' ')[0]);
          return sum + rewardAmount;
        }, 0);
        
        message += `*${category}:*\n`;
        message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ: \`${completed.length}/${categoryAchievements.length}\`\n`;
        message += `‚îî –ù–∞–≥—Ä–∞–¥—ã: \`${totalReward} Magnum Coins\`\n\n`;
      }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Å–∞–º—ã—Ö —Ü–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const valuableAchievements = achievements
      .filter(a => !a.condition)
      .sort((a, b) => {
        const rewardA = parseInt(a.reward.split(' ')[0]);
        const rewardB = parseInt(b.reward.split(' ')[0]);
        return rewardB - rewardA;
      })
      .slice(0, 3);
    
    if (valuableAchievements.length > 0) {
      message += `üíé *–°–∞–º—ã–µ —Ü–µ–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ:*\n`;
      valuableAchievements.forEach((achievement, index) => {
        const rewardAmount = parseInt(achievement.reward.split(' ')[0]);
        message += `${index + 1}. ${achievement.title} - \`${achievement.reward}\`\n`;
      });
      message += `\n`;
    }
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞–≥—Ä–∞–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≥—Ä–∞–¥');
  }
}

function createProgressBar(percent) {
  const filled = Math.round(percent / 10);
  const empty = 10 - filled;
  return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
}

// ==================== –†–ï–§–ï–†–ê–õ–´ ====================
async function showReferralsMenu(ctx, user) {
  try {
    log(`üë• –ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', 'referral_link'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'referral_stats')
      ],
      [
        Markup.button.callback('üéÅ –ù–∞–≥—Ä–∞–¥—ã', 'referral_rewards'),
        Markup.button.callback('üë• –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', 'referral_list')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\n` +
      `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${user.referralsCount || 0}\`\n` +
      `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(user.referralsEarnings || 0)}\` Magnum Coins\n` +
      `‚îî –£—Ä–æ–≤–µ–Ω—å: \`${getReferralLevel(user.referralsCount || 0)}\`\n\n` +
      `üí∞ *–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n` +
      `‚îú –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: \`${config.REFERRAL_REWARD || 10}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`50\` Magnum Coins\n` +
      `‚îî –ë–æ–Ω—É—Å –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`100\` Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
}

async function showReferralLink(ctx, user) {
  try {
    log(`üîó –ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const botUsername = (await ctx.telegram.getMe()).username;
    const referralLink = `https://t.me/${botUsername}?start=${user.id}`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.url('üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É', referralLink),
        Markup.button.callback('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 'copy_referral_link')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'referrals')]
    ]);
    
    const message = 
      `üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞*\n\n` +
      `üìù *–°—Å—ã–ª–∫–∞:*\n` +
      `\`${referralLink}\`\n\n` +
      `üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n` +
      `‚îú –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º\n` +
      `‚îú –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω—É—Ç –≤–∞—à–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏\n` +
      `‚îî –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n` +
      `üí∞ *–ù–∞–≥—Ä–∞–¥–∞:* \`${config.REFERRAL_REWARD || 10}\` Magnum Coins –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏');
  }
}

async function showReferralStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const referrals = await db.collection('users').find(
      { referrerId: user.id },
      { projection: { id: 1, firstName: 1, username: 1, level: 1, createdAt: 1 } }
    ).toArray();
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'referrals')]
    ]);
    
    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n`;
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚îú –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${user.referralsCount || 0}\`\n`;
    message += `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(user.referralsEarnings || 0)}\` Magnum Coins\n`;
    message += `‚îú –£—Ä–æ–≤–µ–Ω—å: \`${getReferralLevel(user.referralsCount || 0)}\`\n`;
    message += `‚îî –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${referrals.length > 0 ? Math.round(referrals.reduce((sum, r) => sum + (r.level || 1), 0) / referrals.length) : 0}\`\n\n`;
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–∏–º –±–æ–Ω—É—Å–∞–º
    const nextBonus5 = 5 - (user.referralsCount || 0);
    const nextBonus10 = 10 - (user.referralsCount || 0);
    
    message += `üéØ *–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –±–æ–Ω—É—Å–∞–º:*\n`;
    if (nextBonus5 > 0) {
      message += `‚îú –î–æ –±–æ–Ω—É—Å–∞ –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${nextBonus5}\` —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
    } else {
      message += `‚îú ‚úÖ –ë–æ–Ω—É—Å –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω\n`;
    }
    
    if (nextBonus10 > 0) {
      message += `‚îî –î–æ –±–æ–Ω—É—Å–∞ –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${nextBonus10}\` —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
    } else {
      message += `‚îî ‚úÖ –ë–æ–Ω—É—Å –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω\n`;
    }
    
    message += `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

async function showReferralRewards(ctx, user) {
  try {
    log(`üéÅ –ü–æ–∫–∞–∑ –Ω–∞–≥—Ä–∞–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'referrals')]
    ]);
    
    const referralReward = config.REFERRAL_REWARD || 10;
    const totalEarnings = user.referralsEarnings || 0;
    const referralsCount = user.referralsCount || 0;
    
    let message = `üéÅ *–ù–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n`;
    
    // –¢–µ–∫—É—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
    message += `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n`;
    message += `‚îú –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: \`${referralReward}\` Stars\n`;
    message += `‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarnings)}\` Stars\n`;
    message += `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${referralsCount > 0 ? Math.round(totalEarnings / referralsCount) : 0}\` Stars\n\n`;
    
    // –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤
    message += `üèÜ *–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤:*\n`;
    message += `‚îú 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`50\` Magnum Coins (–±–æ–Ω—É—Å)\n`;
    message += `‚îú 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`100\` Magnum Coins (–±–æ–Ω—É—Å)\n`;
    message += `‚îú 25 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`250\` Magnum Coins (–±–æ–Ω—É—Å)\n`;
    message += `‚îî 50 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`500\` Magnum Coins (–±–æ–Ω—É—Å)\n\n`;
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –±–æ–Ω—É—Å–∞–º
    message += `üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n`;
    const bonuses = [
      { count: 5, reward: 50, achieved: referralsCount >= 5 },
      { count: 10, reward: 100, achieved: referralsCount >= 10 },
      { count: 25, reward: 250, achieved: referralsCount >= 25 },
      { count: 50, reward: 500, achieved: referralsCount >= 50 }
    ];
    
    bonuses.forEach(bonus => {
      const status = bonus.achieved ? '‚úÖ' : 'üîÑ';
      const progress = bonus.achieved ? 
        `–í—ã–ø–æ–ª–Ω–µ–Ω–æ!` : 
        `–û—Å—Ç–∞–ª–æ—Å—å: ${bonus.count - referralsCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`;
      
      message += `${status} ${bonus.count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - \`${bonus.reward}\` Stars\n`;
      message += `‚îî ${progress}\n\n`;
    });
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞–≥—Ä–∞–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≥—Ä–∞–¥');
  }
}

function getReferralLevel(referralsCount) {
  if (referralsCount >= 50) return 'üëë –õ–µ–≥–µ–Ω–¥–∞';
  if (referralsCount >= 25) return '‚≠ê –ú–∞—Å—Ç–µ—Ä';
  if (referralsCount >= 10) return 'üî• –≠–∫—Å–ø–µ—Ä—Ç';
  if (referralsCount >= 5) return 'üíé –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª';
  if (referralsCount >= 1) return 'üå± –ù–æ–≤–∏—á–æ–∫';
  return 'üî∞ –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤';
}

async function showReferralList(ctx, user) {
  try {
    log(`üë• –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const referrals = await db.collection('users').find(
      { referrerId: user.id },
      { 
        projection: { 
          id: 1, 
          firstName: 1, 
          username: 1, 
          level: 1, 
          createdAt: 1,
          stars: 1,
          magnumCoins: 1
        },
        sort: { createdAt: -1 }
      }
    ).toArray();
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'referrals')]
    ]);
    
    let message = `üë• *–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n`;
    
    if (referrals.length === 0) {
      message += `üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n`;
      message += `üí° *–ö–∞–∫ –ø—Ä–∏–≤–ª–µ—á—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n`;
      message += `‚îú –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π\n`;
      message += `‚îú –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –¥—Ä—É–∑—å—è–º –æ –±–æ—Ç–µ\n`;
      message += `‚îî –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n`;
    } else {
      message += `üìä *–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:* \`${referrals.length}\`\n\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const recentReferrals = referrals.slice(0, 10);
      message += `üë§ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:*\n\n`;
      
      recentReferrals.forEach((referral, index) => {
        const daysAgo = Math.floor((Date.now() - referral.createdAt.getTime()) / (1000 * 60 * 60 * 24));
        const timeText = daysAgo === 0 ? '—Å–µ–≥–æ–¥–Ω—è' : daysAgo === 1 ? '–≤—á–µ—Ä–∞' : `${daysAgo} –¥–Ω. –Ω–∞–∑–∞–¥`;
        
        message += `${index + 1}. ${referral.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n`;
        message += `‚îú ID: \`${referral.id}\`\n`;
        message += `‚îú –£—Ä–æ–≤–µ–Ω—å: \`${referral.level || 1}\`\n`;
        message += `‚îú –ë–∞–ª–∞–Ω—Å: \`${formatNumber(referral.stars || 0)}\` Stars\n`;
        message += `‚îú Magnum Coins: \`${formatNumber(referral.magnumCoins || 0)}\`\n`;
        message += `‚îî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${timeText}\n\n`;
      });
      
      if (referrals.length > 10) {
        message += `... –∏ –µ—â–µ \`${referrals.length - 10}\` —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n`;
      }
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const activeReferrals = referrals.filter(r => r.level > 1);
      const totalReferralStars = referrals.reduce((sum, r) => sum + (r.stars || 0), 0);
      const totalReferralMagnum = referrals.reduce((sum, r) => sum + (r.magnumCoins || 0), 0);
      
      message += `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: \`${activeReferrals.length}\`\n`;
      message += `‚îú –í—Å–µ–≥–æ Stars —É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${formatNumber(totalReferralStars)}\`\n`;
      message += `‚îî –í—Å–µ–≥–æ Magnum Coins —É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${formatNumber(totalReferralMagnum)}\`\n\n`;
    }
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
}

// ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
async function showSettingsMenu(ctx, user) {
  try {
    log(`‚öôÔ∏è –ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'settings_notifications'),
        Markup.button.callback('üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', 'settings_privacy')
      ],
      [
        Markup.button.callback('üåê –Ø–∑—ã–∫', 'settings_language'),
        Markup.button.callback('üîÑ –°–±—Ä–æ—Å', 'settings_reset')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n` +
      `üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* ${settings.notifications !== false ? 'üü¢ –í–∫–ª—é—á–µ–Ω—ã' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã'}\n` +
      `üîí *–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:* ${settings.privacy !== false ? 'üü¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : 'üî¥ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è'}\n` +
      `üåê *–Ø–∑—ã–∫:* ${settings.language === 'en' ? 'üá∫üá∏ English' : 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'}\n\n` +
      `üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

async function showNotificationSettings(ctx, user) {
  try {
    log(`üîî –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const notificationsEnabled = settings.notifications !== false;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          notificationsEnabled ? 'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üü¢ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
          'toggle_notifications'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')]
    ]);
    
    const message = 
      `üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n` +
      `üì± *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:* ${notificationsEnabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω—ã' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n` +
      `üìã *–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–∞—Ä–º–µ\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞–π–Ω–∏–Ω–≥–µ\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–∞—Ö\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö\n` +
      `‚îî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö\n\n` +
      `üí° *–ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:*\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∞\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –º–∞–π–Ω–µ—Ä–∞\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö\n` +
      `‚îî –î—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
}

async function showPrivacySettings(ctx, user) {
  try {
    log(`üîí –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const privacyEnabled = settings.privacy !== false;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          privacyEnabled ? 'üî¥ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å' : 'üü¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å',
          'toggle_privacy'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')]
    ]);
    
    const message = 
      `üîí *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏*\n\n` +
      `üõ°Ô∏è *–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:* ${privacyEnabled ? 'üü¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : 'üî¥ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è'}\n\n` +
      `üìä *–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:*\n` +
      `‚îú –í–∞—à ID –≤–∏–¥–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n` +
      `‚îú –ò–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å –≤–∏–¥–µ–Ω –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º\n` +
      `‚îî –ë–∞–ª–∞–Ω—Å—ã —Å–∫—Ä—ã—Ç—ã\n\n` +
      `üîí *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:*\n` +
      `‚îú ID —Å–∫—Ä—ã—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n` +
      `‚îú –ò–º—è —Å–∫—Ä—ã—Ç–æ –≤ —Å–ø–∏—Å–∫–∞—Ö\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å —Å–∫—Ä—ã—Ç\n` +
      `‚îî –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
  }
}

async function showLanguageSettings(ctx, user) {
  try {
    log(`üåê –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const currentLanguage = settings.language || 'ru';
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          currentLanguage === 'ru' ? '‚úÖ üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
          'set_language_ru'
        ),
        Markup.button.callback(
          currentLanguage === 'en' ? '‚úÖ üá∫üá∏ English' : 'üá∫üá∏ English',
          'set_language_en'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')]
    ]);
    
    const message = 
      `üåê *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞*\n\n` +
      `üó£Ô∏è *–¢–µ–∫—É—â–∏–π —è–∑—ã–∫:* ${currentLanguage === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∫üá∏ English'}\n\n` +
      `üìù *–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:*\n\n` +
      `üá∑üá∫ *–†—É—Å—Å–∫–∏–π:*\n` +
      `‚îú –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n` +
      `‚îú –í—Å–µ –º–µ–Ω—é –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n` +
      `‚îî –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üá∫üá∏ *English:*\n` +
      `‚îú Full English language support\n` +
      `‚îú All menus and messages in English\n` +
      `‚îî Recommended for English-speaking users\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞');
  }
}

async function showResetSettings(ctx, user) {
  try {
    log(`üîÑ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–±—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'confirm_reset'),
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')
      ]
    ]);
    
    const message = 
      `üîÑ *–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫*\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n` +
      `üóëÔ∏è *–ß—Ç–æ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ:*\n` +
      `‚îú –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n` +
      `‚îú –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏\n` +
      `‚îú –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n` +
      `‚îî –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
      `‚úÖ *–ß—Ç–æ –ù–ï –±—É–¥–µ—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ:*\n` +
      `‚îú –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–≥—Ä–µ\n` +
      `‚îú –ë–∞–ª–∞–Ω—Å—ã (Stars, Magnum Coins)\n` +
      `‚îú –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã\n` +
      `‚îî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É—Ä–æ–≤–µ–Ω—å\n\n` +
      `üí° *–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:*\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã\n` +
      `‚îú –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π\n` +
      `‚îî –Ø–∑—ã–∫ –±—É–¥–µ—Ç —Ä—É—Å—Å–∫–∏–π\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–±—Ä–æ—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–±—Ä–æ—Å–∞');
  }
}

async function toggleNotificationSetting(ctx, user) {
  try {
    log(`üîî –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const newNotificationState = settings.notifications === false ? true : false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'settings.notifications': newNotificationState,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    const status = newNotificationState ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã';
    log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    await ctx.answerCbQuery(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status}!`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showNotificationSettings(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

async function togglePrivacySetting(ctx, user) {
  try {
    log(`üîí –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const newPrivacyState = settings.privacy === false ? true : false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'settings.privacy': newPrivacyState,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    const status = newPrivacyState ? '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : '—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è';
    log(`‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${status} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    await ctx.answerCbQuery(`‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: ${status}!`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showPrivacySettings(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

async function setLanguage(ctx, user, language) {
  try {
    log(`üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ ${language} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'settings.language': language,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    const langName = language === 'ru' ? '—Ä—É—Å—Å–∫–∏–π' : 'English';
    log(`‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${langName} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    await ctx.answerCbQuery(`‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${langName}!`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showLanguageSettings(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞');
  }
}

async function resetUserSettings(ctx, user) {
  try {
    log(`üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'settings': {
            notifications: true,
            privacy: true,
            language: 'ru'
          },
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    await ctx.answerCbQuery('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showSettingsMenu(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

// ==================== –ó–ê–î–ê–ù–ò–Ø ====================
async function showTasksMenu(ctx, user) {
  try {
    log(`üìã –ü–æ–∫–∞–∑ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const tasks = user.tasks || {};
    const completedTasks = tasks.completedTasks || 0;
    const totalEarnings = tasks.totalTaskEarnings || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üéØ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è', 'tasks_sponsor'),
        Markup.button.callback('üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', 'tasks_daily')
      ],
      [
        Markup.button.callback('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', 'tasks_progress'),
        Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'tasks_achievements')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üìã *–°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π*\n\n` +
      `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: \`${completedTasks}\`\n` +
      `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarnings)}\` Stars\n` +
      `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${completedTasks > 0 ? formatNumber(totalEarnings / completedTasks) : '0.00'}\` Stars\n\n` +
      `üéØ *–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:*\n` +
      `‚îú üéØ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è (–ø–æ–¥–ø–∏—Å–∫–∏, –∑–∞–ø—É—Å–∫–∏ –±–æ—Ç–æ–≤)\n` +
      `‚îú üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (—Ñ–∞—Ä–º, –º–∞–π–Ω–∏–Ω–≥, –±–æ–Ω—É—Å—ã)\n` +
      `‚îî üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏)\n\n` +
      `üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π:*\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π');
  }
}

async function showSponsorTasks(ctx, user) {
  try {
    log(`üéØ –ü–æ–∫–∞–∑ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = getSponsorTasks();
    const userTasks = user.tasks?.sponsorTasks || {};
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks')]
    ]);
    
    let message = `üéØ *–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è*\n\n`;
    message += `üí∞ *–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!*\n\n`;
    
    sponsorTasks.forEach((task, index) => {
      const isCompleted = userTasks[task.id]?.completed || false;
      const isClaimed = userTasks[task.id]?.claimed || false;
      const status = isCompleted ? (isClaimed ? '‚úÖ' : 'üéÅ') : 'üîÑ';
      
      message += `${status} *${task.title}*\n`;
      message += `‚îú ${task.description}\n`;
      message += `‚îú –ù–∞–≥—Ä–∞–¥–∞: \`${task.reward}\` Magnum Coins\n`;
      message += `‚îî –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${task.difficulty}\n\n`;
    });
    
    message += `üí° *–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:*\n`;
    message += `‚îú –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n`;
    message += `‚îú –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"\n`;
    message += `‚îî –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!\n\n`;
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π');
  }
}

async function showSponsorTaskDetails(ctx, user, taskId) {
  try {
    log(`üéØ –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ${taskId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = getSponsorTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    const userTasks = user.tasks?.sponsorTasks || {};
    const userTask = userTasks[taskId] || {};
    const isCompleted = userTask.completed || false;
    const isClaimed = userTask.claimed || false;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.url('üîó –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', task.url),
        Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', `verify_sponsor_${taskId}`)
      ]
    ]);
    
    if (isCompleted && !isClaimed) {
      keyboard.reply_markup.inline_keyboard.push([
        Markup.button.callback('üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É', `claim_sponsor_${taskId}`)
      ]);
    }
    
    keyboard.reply_markup.inline_keyboard.push([
      Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks_sponsor')
    ]);
    
    let message = `üéØ *${task.title}*\n\n`;
    message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${task.description}\n\n`;
    message += `üí∞ *–ù–∞–≥—Ä–∞–¥–∞:* \`${task.reward}\` Magnum Coins\n`;
    message += `‚≠ê *–°–ª–æ–∂–Ω–æ—Å—Ç—å:* ${task.difficulty}\n`;
    message += `‚è∞ *–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${task.estimatedTime}\n\n`;
    
    if (task.requirements) {
      message += `üìã *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*\n`;
      task.requirements.forEach(req => {
        message += `‚îú ${req}\n`;
      });
      message += `\n`;
    }
    
    if (isCompleted) {
      message += `‚úÖ *–°—Ç–∞—Ç—É—Å:* –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
      if (isClaimed) {
        message += `üéÅ *–ù–∞–≥—Ä–∞–¥–∞:* –ü–æ–ª—É—á–µ–Ω–∞\n`;
      } else {
        message += `üéÅ *–ù–∞–≥—Ä–∞–¥–∞:* –ì–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é\n`;
      }
    } else {
      message += `üîÑ *–°—Ç–∞—Ç—É—Å:* –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
    }
    
    message += `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞–Ω–∏—è');
  }
}

async function verifySponsorTask(ctx, user, taskId) {
  try {
    log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ${taskId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = getSponsorTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    const userTasks = user.tasks?.sponsorTasks || {};
    const userTask = userTasks[taskId] || {};
    
    if (userTask.completed) {
      await ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
      return;
    }
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    const isCompleted = await checkTaskCompletion(ctx, user, task);
    
    if (isCompleted) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await db.collection('users').updateOne(
        { id: user.id },
        { 
          $set: { 
            [`tasks.sponsorTasks.${taskId}.completed`]: true,
            [`tasks.sponsorTasks.${taskId}.completedAt`]: new Date(),
            updatedAt: new Date()
          }
        }
      );
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à
      userCache.delete(user.id);
      
      log(`‚úÖ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ ${taskId} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}`);
      await ctx.answerCbQuery(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} Magnum Coins`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è
      const updatedUser = await getUser(ctx.from.id);
      if (updatedUser) {
        await showSponsorTaskDetails(ctx, updatedUser, taskId);
      }
    } else {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.');
    }
  } catch (error) {
    logError(error, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è');
  }
}

async function claimSponsorTask(ctx, user, taskId) {
  try {
    log(`üéÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ${taskId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = getSponsorTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    const userTasks = user.tasks?.sponsorTasks || {};
    const userTask = userTasks[taskId] || {};
    
    if (!userTask.completed) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
      return;
    }
    
    if (userTask.claimed) {
      await ctx.answerCbQuery('‚ùå –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞');
      return;
    }
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnumCoins: task.reward,
          'tasks.completedTasks': 1,
          'tasks.totalTaskEarnings': task.reward
        },
        $set: { 
          [`tasks.sponsorTasks.${taskId}.claimed`]: true,
          [`tasks.sponsorTasks.${taskId}.claimedAt`]: new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    log(`üéÅ –ù–∞–≥—Ä–∞–¥–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ${taskId} –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}: ${task.reward} Magnum Coins`);
    await ctx.answerCbQuery(`üéÅ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! +${task.reward} Magnum Coins`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showSponsorTaskDetails(ctx, updatedUser, taskId);
    }
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã');
  }
}

async function showDailyTasks(ctx, user) {
  try {
    log(`üìÖ –ü–æ–∫–∞–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const dailyTasks = getDailyTasks();
    const userTasks = user.tasks?.dailyTasks || {};
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks')]
    ]);
    
    let message = `üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*\n\n`;
    message += `üîÑ *–≠—Ç–∏ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!*\n\n`;
    
    dailyTasks.forEach((task, index) => {
      const userTask = userTasks[task.id] || {};
      const progress = userTask.progress || 0;
      const isCompleted = progress >= task.target;
      const isClaimed = userTask.claimed || false;
      const status = isCompleted ? (isClaimed ? '‚úÖ' : 'üéÅ') : 'üîÑ';
      
      message += `${status} *${task.title}*\n`;
      message += `‚îú ${task.description}\n`;
      message += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: \`${progress}/${task.target}\`\n`;
      message += `‚îú –ù–∞–≥—Ä–∞–¥–∞: \`${task.reward}\` Magnum Coins\n`;
      message += `‚îî ${isCompleted ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}\n\n`;
    });
    
    message += `üí° *–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:*\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –æ–±—ã—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ\n`;
    message += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n`;
    message += `‚îú –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É\n`;
    message += `‚îî –ó–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n`;
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
  }
}

async function showTasksProgress(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const tasks = user.tasks || {};
    const completedTasks = tasks.completedTasks || 0;
    const totalEarnings = tasks.totalTaskEarnings || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks')]
    ]);
    
    let message = `üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π*\n\n`;
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: \`${completedTasks}\`\n`;
    message += `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarnings)}\` Magnum Coins\n`;
    message += `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${completedTasks > 0 ? formatNumber(totalEarnings / completedTasks) : '0.00'}\` Magnum Coins\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    const sponsorTasks = tasks.sponsorTasks || {};
    const dailyTasks = tasks.dailyTasks || {};
    
    const completedSponsor = Object.values(sponsorTasks).filter(t => t.completed).length;
    const completedDaily = Object.values(dailyTasks).filter(t => t.claimed).length;
    
    message += `üéØ *–ü–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π:*\n`;
    message += `‚îú –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ: \`${completedSponsor}\` –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
    message += `‚îú –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ: \`${completedDaily}\` –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
    message += `‚îî –í—Å–µ–≥–æ: \`${completedSponsor + completedDaily}\` –∑–∞–¥–∞–Ω–∏–π\n\n`;
    
    // –ù–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    message += `üèÜ *–ù–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n`;
    
    const allTasks = [];
    Object.entries(sponsorTasks).forEach(([id, task]) => {
      if (task.claimedAt) {
        allTasks.push({ ...task, type: 'sponsor', id });
      }
    });
    Object.entries(dailyTasks).forEach(([id, task]) => {
      if (task.claimedAt) {
        allTasks.push({ ...task, type: 'daily', id });
      }
    });
    
    const recentTasks = allTasks
      .sort((a, b) => new Date(b.claimedAt) - new Date(a.claimedAt))
      .slice(0, 5);
    
    if (recentTasks.length > 0) {
      recentTasks.forEach((task, index) => {
        const daysAgo = Math.floor((Date.now() - task.claimedAt.getTime()) / (1000 * 60 * 60 * 24));
        const timeText = daysAgo === 0 ? '—Å–µ–≥–æ–¥–Ω—è' : daysAgo === 1 ? '–≤—á–µ—Ä–∞' : `${daysAgo} –¥–Ω. –Ω–∞–∑–∞–¥`;
        
        message += `${index + 1}. ${task.type === 'sponsor' ? 'üéØ' : 'üìÖ'} –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
        message += `‚îî ${timeText}\n\n`;
      });
    } else {
      message += `–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n\n`;
    }
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getSponsorTasks() {
  return [
    {
      id: 1,
      title: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª',
      description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª',
      reward: 50,
      difficulty: '‚≠ê –õ–µ–≥–∫–æ–µ',
      estimatedTime: '1 –º–∏–Ω—É—Ç–∞',
      url: 'https://t.me/magnumstars',
      requirements: [
        '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @magnumstars',
        '–û—Å—Ç–∞–Ω—å—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º 24 —á–∞—Å–∞'
      ]
    },
    {
      id: 2,
      title: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
      description: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞',
      reward: 100,
      difficulty: '‚≠ê‚≠ê –°—Ä–µ–¥–Ω–µ–µ',
      estimatedTime: '2 –º–∏–Ω—É—Ç—ã',
      url: 'https://t.me/partner_bot',
      requirements: [
        '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ @partner_bot',
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É /start',
        '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–æ—Ç–µ'
      ]
    },
    {
      id: 3,
      title: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π',
      description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 3 –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à –±–æ—Ç',
      reward: 200,
      difficulty: '‚≠ê‚≠ê‚≠ê –°–ª–æ–∂–Ω–æ–µ',
      estimatedTime: '10 –º–∏–Ω—É—Ç',
      url: 'https://t.me/magnumstars',
      requirements: [
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É 3 –¥—Ä—É–∑—å—è–º',
        '–î—Ä—É–∑—å—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—Ç—É',
        '–ö–∞–∂–¥—ã–π –¥—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ'
      ]
    }
  ];
}

function getDailyTasks() {
  return [
    {
      id: 'daily_farm',
      title: '–§–∞—Ä–º–µ—Ä –¥–Ω—è',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 5 —Ñ–∞—Ä–º–æ–≤ –∑–∞ –¥–µ–Ω—å',
      target: 5,
      reward: 25
    },
    {
      id: 'daily_bonus',
      title: '–ë–æ–Ω—É—Å –¥–Ω—è',
      description: '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
      target: 1,
      reward: 15
    },
    {
      id: 'daily_exchange',
      title: '–¢—Ä–µ–π–¥–µ—Ä –¥–Ω—è',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 3 –æ–±–º–µ–Ω–∞ Magnum Coins',
      target: 3,
      reward: 30
    }
  ];
}

async function checkTaskCompletion(ctx, user, task) {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true (–∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
  return true;
}

// ==================== –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê ====================
const bot = new Telegraf(config.BOT_TOKEN);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  try {
    const user = await getUser(ctx.from.id, ctx);
    if (!user) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const isSubscribed = await checkSubscription(ctx);
    if (!isSubscribed) {
      await showSubscriptionMessage(ctx);
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const startPayload = ctx.startPayload;
    if (startPayload && startPayload !== user.id.toString()) {
      await handleReferral(user.id, parseInt(startPayload));
    }
    
    // –î–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏—Å–ø–æ–ª—å–∑—É–µ–º ctx.reply –≤–º–µ—Å—Ç–æ editMessageText
    await showMainMenuStart(ctx, user);
  } catch (error) {
    logError(error, '–ö–æ–º–∞–Ω–¥–∞ /start');
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–π
bot.on('text', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) return;
    
    const text = ctx.message.text;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if (user.adminState === 'searching_user') {
      await handleAdminSearchUser(ctx, user, text);
    } else if (user.adminState === 'banning_user') {
      await handleAdminBanUser(ctx, user, text);
    } else if (user.adminState === 'unbanning_user') {
      await handleAdminUnbanUser(ctx, user, text);
    } else if (user.adminState === 'setting_farm_reward') {
      await handleAdminSetFarmReward(ctx, user, text);
    } else if (user.adminState === 'setting_farm_cooldown') {
      await handleAdminSetFarmCooldown(ctx, user, text);
    } else if (user.adminState === 'setting_bonus_base') {
      await handleAdminSetBonusBase(ctx, user, text);
    } else if (user.adminState === 'setting_miner_reward') {
      await handleAdminSetMinerReward(ctx, user, text);
    } else if (user.adminState === 'setting_referral_reward') {
      await handleAdminSetReferralReward(ctx, user, text);
    } else if (user.adminState === 'setting_subscription_channel') {
      await handleAdminSetSubscriptionChannel(ctx, user, text);
    }
  } catch (error) {
    logError(error, '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞');
  }
});

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π
async function handleAdminSearchUser(ctx, user, text) {
  try {
    let targetUser;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username
    if (text.startsWith('@')) {
      const username = text.substring(1);
      targetUser = await db.collection('users').findOne({ username: username });
    } else {
      const userId = parseInt(text);
      if (isNaN(userId)) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ @username');
        return;
      }
      targetUser = await db.collection('users').findOne({ id: userId });
    }
    
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin_ban_${targetUser.id}`),
        Markup.button.callback('‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin_unban_${targetUser.id}`)
      ],
      [
        Markup.button.callback('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', `admin_balance_${targetUser.id}`),
        Markup.button.callback('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `admin_stats_${targetUser.id}`)
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    const message = 
      `üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n` +
      `üÜî *ID:* \`${targetUser.id}\`\n` +
      `üë§ *–ò–º—è:* ${targetUser.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* ${targetUser.createdAt ? targetUser.createdAt.toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
      `‚è∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:* ${targetUser.lastSeen ? targetUser.lastSeen.toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å: \`${targetUser.level || 1}\`\n` +
      `‚îú –û–ø—ã—Ç: \`${targetUser.experience || 0}\`\n` +
      `‚îú Magnum Coins: \`${formatNumber(targetUser.magnumCoins || 0)}\`\n` +
      `‚îú Stars: \`${formatNumber(targetUser.stars || 0)}\`\n` +
      `‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${targetUser.referralsCount || 0}\`\n` +
      `‚îî –°—Ç–∞—Ç—É—Å: ${targetUser.banned ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}

async function handleAdminBanUser(ctx, user, text) {
  try {
    const userId = parseInt(text);
    if (isNaN(userId)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ');
      return;
    }
    
    const targetUser = await db.collection('users').findOne({ id: userId });
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    if (targetUser.banned) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: userId },
      { $set: { banned: true, bannedAt: new Date(), bannedBy: user.id, updatedAt: new Date() } }
    );
    
    await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}

async function handleAdminUnbanUser(ctx, user, text) {
  try {
    const userId = parseInt(text);
    if (isNaN(userId)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ');
      return;
    }
    
    const targetUser = await db.collection('users').findOne({ id: userId });
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    if (!targetUser.banned) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: userId },
      { $unset: { banned: "", bannedAt: "", bannedBy: "" }, $set: { updatedAt: new Date() } }
    );
    
    await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function handleAdminSetFarmReward(ctx, user, text) {
  try {
    const newReward = parseFloat(text);
    if (isNaN(newReward) || newReward < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'FARM_BASE_REWARD' },
      { $set: { value: newReward, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.FARM_BASE_REWARD = newReward;
    
    await ctx.reply(`‚úÖ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —Ñ–∞—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newReward} Magnum Coins`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Ñ–∞—Ä–º–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã');
  }
}

async function handleAdminSetFarmCooldown(ctx, user, text) {
  try {
    const newCooldown = parseInt(text);
    if (isNaN(newCooldown) || newCooldown < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'FARM_COOLDOWN' },
      { $set: { value: newCooldown, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.FARM_COOLDOWN = newCooldown;
    
    await ctx.reply(`‚úÖ –ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newCooldown} —Å–µ–∫—É–Ω–¥ (${Math.floor(newCooldown / 60)} –º–∏–Ω—É—Ç)`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞ —Ñ–∞—Ä–º–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞');
  }
}

async function handleAdminSetBonusBase(ctx, user, text) {
  try {
    const newBonus = parseFloat(text);
    if (isNaN(newBonus) || newBonus < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'DAILY_BONUS_BASE' },
      { $set: { value: newBonus, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.DAILY_BONUS_BASE = newBonus;
    
    await ctx.reply(`‚úÖ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newBonus} Magnum Coins`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–∞');
  }
}

async function handleAdminSetMinerReward(ctx, user, text) {
  try {
    const newReward = parseFloat(text);
    if (isNaN(newReward) || newReward < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'MINER_REWARD_PER_HOUR' },
      { $set: { value: newReward, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.MINER_REWARD_PER_HOUR = newReward;
    
    await ctx.reply(`‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –º–∞–π–Ω–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newReward} Magnum Coins –≤ —á–∞—Å`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞');
  }
}

async function handleAdminSetReferralReward(ctx, user, text) {
  try {
    const newReward = parseFloat(text);
    if (isNaN(newReward) || newReward < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'REFERRAL_REWARD' },
      { $set: { value: newReward, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.REFERRAL_REWARD = newReward;
    
    await ctx.reply(`‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newReward} Magnum Coins`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
  }
}

async function handleAdminSetSubscriptionChannel(ctx, user, text) {
  try {
    let channel = text.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞
    if (!channel.startsWith('@') && !channel.startsWith('https://t.me/')) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @channel –∏–ª–∏ https://t.me/channel');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'REQUIRED_CHANNEL' },
      { $set: { value: channel, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.REQUIRED_CHANNEL = channel;
    
    await ctx.reply(`‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${channel}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.action('main_menu', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMainMenu(ctx, user);
  } catch (error) {
    logError(error, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
  }
});

// –ú–∞–π–Ω–∏–Ω–≥
bot.action('miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMinerMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞');
  }
});

bot.action('start_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await startMiner(ctx, user);
  } catch (error) {
    logError(error, '–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('stop_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await stopMiner(ctx, user);
  } catch (error) {
    logError(error, '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –§–∞—Ä–º
bot.action('farm', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showFarmMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é —Ñ–∞—Ä–º–∞');
  }
});

// –û–±–º–µ–Ω
bot.action('exchange', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –æ–±–º–µ–Ω–∞');
  }
});

bot.action('exchange_10', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await performExchange(ctx, user, 10);
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω 10 Magnum Coins');
  }
});

bot.action('exchange_50', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await performExchange(ctx, user, 50);
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω 50 Magnum Coins');
  }
});

bot.action('exchange_100', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await performExchange(ctx, user, 100);
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω 100 Magnum Coins');
  }
});

bot.action('exchange_500', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await performExchange(ctx, user, 500);
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω 500 Magnum Coins');
  }
});

bot.action('exchange_all', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const amount = Math.floor(user.magnumCoins);
    if (amount <= 0) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç Magnum Coins –¥–ª—è –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    await performExchange(ctx, user, amount);
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω –≤—Å–µ—Ö Magnum Coins');
  }
});

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
bot.action('achievements', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAchievementsMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }
});

bot.action('achievements_progress', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAchievementsProgress(ctx, user);
  } catch (error) {
    logError(error, '–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }
});

bot.action('achievements_rewards', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAchievementsRewards(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞–≥—Ä–∞–¥—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }
});

// –†–µ—Ñ–µ—Ä–∞–ª—ã
bot.action('referrals', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralsMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});

bot.action('referral_link', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralLink(ctx, user);
  } catch (error) {
    logError(error, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞');
  }
});

bot.action('referral_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});

bot.action('referral_rewards', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralRewards(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});

bot.action('referral_list', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralList(ctx, user);
  } catch (error) {
    logError(error, '–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});

bot.action('copy_referral_link', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const botUsername = (await ctx.telegram.getMe()).username;
    const referralLink = `https://t.me/${botUsername}?start=${user.id}`;
    
    await ctx.answerCbQuery('üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    await ctx.reply(`üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\`${referralLink}\``, { parse_mode: 'Markdown' });
  } catch (error) {
    logError(error, '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏');
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
bot.action('settings', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showSettingsMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
});

bot.action('settings_notifications', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showNotificationSettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
});

bot.action('settings_privacy', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showPrivacySettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
  }
});

bot.action('settings_language', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showLanguageSettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞');
  }
});

bot.action('settings_reset', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showResetSettings(ctx, user);
  } catch (error) {
    logError(error, '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
});

// –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.action('toggle_notifications', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await toggleNotificationSetting(ctx, user);
  } catch (error) {
    logError(error, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
});

bot.action('toggle_privacy', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await togglePrivacySetting(ctx, user);
  } catch (error) {
    logError(error, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
  }
});

bot.action('set_language_ru', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await setLanguage(ctx, user, 'ru');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ RU');
  }
});

bot.action('set_language_en', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await setLanguage(ctx, user, 'en');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ EN');
  }
});

bot.action('confirm_reset', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await resetUserSettings(ctx, user);
  } catch (error) {
    logError(error, '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});

// –ó–∞–¥–∞–Ω–∏—è
bot.action('tasks', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showTasksMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π');
  }
});

bot.action('tasks_sponsor', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showSponsorTasks(ctx, user);
  } catch (error) {
    logError(error, '–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è');
  }
});

bot.action('tasks_daily', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showDailyTasks(ctx, user);
  } catch (error) {
    logError(error, '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è');
  }
});

bot.action('tasks_progress', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showTasksProgress(ctx, user);
  } catch (error) {
    logError(error, '–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π
bot.action(/^sponsor_task_(\d+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const taskId = parseInt(ctx.match[1]);
    await showSponsorTaskDetails(ctx, user, taskId);
  } catch (error) {
    logError(error, '–î–µ—Ç–∞–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
  }
});

bot.action(/^claim_sponsor_(\d+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const taskId = parseInt(ctx.match[1]);
    await claimSponsorTask(ctx, user, taskId);
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
  }
});

bot.action(/^verify_sponsor_(\d+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const taskId = parseInt(ctx.match[1]);
    await verifySponsorTask(ctx, user, taskId);
  } catch (error) {
    logError(error, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
  }
});

bot.action('do_farm', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await doFarm(ctx, user);
  } catch (error) {
    logError(error, '–§–∞—Ä–º (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞—Ä–º–∞
bot.action('farm_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showFarmStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞—Ä–º–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –ë–æ–Ω—É—Å—ã —Ñ–∞—Ä–º–∞
bot.action('farm_bonuses', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showFarmBonuses(ctx, user);
  } catch (error) {
    logError(error, '–ë–æ–Ω—É—Å—ã —Ñ–∞—Ä–º–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –ë–æ–Ω—É—Å
bot.action('bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showBonusMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –±–æ–Ω—É—Å–∞');
  }
});

bot.action('claim_bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await claimBonus(ctx, user);
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('bonus_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showBonusStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('bonus_streak', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showBonusStreak(ctx, user);
  } catch (error) {
    logError(error, '–°–µ—Ä–∏—è –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤
bot.action('farm_cooldown', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const farm = user.farm;
    const now = Date.now();
    const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
    const timeSince = Math.floor((now - lastFarm) / 1000);
    const cooldown = config.FARM_COOLDOWN;
    
    if (timeSince < cooldown) {
      const remaining = cooldown - timeSince;
      await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(remaining)} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞—Ä–º–æ–º!`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞
      setTimeout(async () => {
        try {
          const updatedUser = await getUser(ctx.from.id);
          if (updatedUser) {
            await updateFarmMenu(ctx, updatedUser);
            log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞`);
          }
        } catch (error) {
          logError(error, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞');
        }
      }, remaining * 1000);
    } else {
      // –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω —É–∂–µ –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
      await updateFarmMenu(ctx, user);
    }
  } catch (error) {
    logError(error, '–ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞');
  }
});

bot.action('bonus_cooldown', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const bonus = user.dailyBonus;
    const now = Date.now();
    const lastBonus = bonus.lastBonus ? bonus.lastBonus.getTime() : 0;
    const timeSince = now - lastBonus;
    const dayInMs = 24 * 60 * 60 * 1000;
    
    if (timeSince < dayInMs) {
      const remaining = dayInMs - timeSince;
      await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(Math.floor(remaining / 1000))} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞!`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞
      setTimeout(async () => {
        try {
          const updatedUser = await getUser(ctx.from.id);
          if (updatedUser) {
            await updateBonusMenu(ctx, updatedUser);
            log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞`);
          }
        } catch (error) {
          logError(error, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞');
        }
      }, remaining);
    } else {
      // –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω —É–∂–µ –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
      await updateBonusMenu(ctx, user);
    }
  } catch (error) {
    logError(error, '–ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
bot.action('check_subscription', async (ctx) => {
  try {
    const isSubscribed = await checkSubscription(ctx);
    if (isSubscribed) {
      const user = await getUser(ctx.from.id);
      if (!user) return;
      
      await showMainMenu(ctx, user);
    } else {
      await showSubscriptionMessage(ctx);
    }
  } catch (error) {
    logError(error, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const user = await getUser(ctx.from.id);
    if (user) {
      await showMainMenu(ctx, user);
    }
  }
});

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
bot.action('admin', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminPanel(ctx, user);
  } catch (error) {
    logError(error, '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_users', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminUsers(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_balance', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminBalance(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_settings', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminSettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_search_user', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminSearchUser(ctx, user);
  } catch (error) {
    logError(error, '–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_top_users', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminTopUsers(ctx, user);
  } catch (error) {
    logError(error, '–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_ban_user', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminBanUser(ctx, user);
  } catch (error) {
    logError(error, '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_unban_user', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminUnbanUser(ctx, user);
  } catch (error) {
    logError(error, '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
bot.action('admin_farm_rewards', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminFarmRewards(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥ —Ñ–∞—Ä–º–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_cooldowns', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminCooldowns(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_daily_bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminDailyBonus(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_miner_settings', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminMinerSettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_referral_settings', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminReferralSettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_subscription_channels', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminSubscriptionChannels(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
bot.action('admin_settings', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminSettings(ctx, user);
  } catch (error) {
    logError(error, '–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_users', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminUsers(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.action('admin_farm_reward_set', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–≥—Ä–∞–¥—ã
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_farm_reward', updatedAt: new Date() } }
    );
    
    await ctx.reply('üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É —Ñ–∞—Ä–º–∞ (–≤ Magnum Coins):');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã —Ñ–∞—Ä–º–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_cooldown_farm', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫—É–ª–¥–∞—É–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_farm_cooldown', updatedAt: new Date() } }
    );
    
    await ctx.reply('‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ —Ñ–∞—Ä–º–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_bonus_base', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –±–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_bonus_base', updatedAt: new Date() } }
    );
    
    await ctx.reply('üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (–≤ Magnum Coins):');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_miner_reward', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_miner_reward', updatedAt: new Date() } }
    );
    
    await ctx.reply('‚õèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –º–∞–π–Ω–µ—Ä–∞ (–≤ Magnum Coins –∑–∞ —á–∞—Å):');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_referral_reward', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_referral_reward', updatedAt: new Date() } }
    );
    
    await ctx.reply('üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–≤ Magnum Coins):');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_subscription_add', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_subscription_channel', updatedAt: new Date() } }
    );
    
    await ctx.reply('üì¢ –í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (@channel –∏–ª–∏ https://t.me/channel):');
  } catch (error) {
    logError(error, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  logError(err, `–û–±—Ä–∞–±–æ—Ç–∫–∞ ${ctx.updateType}`);
});

// ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async function startBot() {
  try {
    log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await connectDB();
    log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    log('üåê –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞...');
    // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
    startHttpServer();
    log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    
    log('‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤...');
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–π–Ω–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(processMinerRewards, 30 * 60 * 1000);
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      const now = Date.now();
      for (const [key, value] of userCache.entries()) {
        if (now - value.timestamp > config.USER_CACHE_TTL) {
          userCache.delete(key);
        }
      }
      for (const [key, value] of statsCache.entries()) {
        if (now - value.timestamp > config.STATS_CACHE_TTL) {
          statsCache.delete(key);
        }
      }
    }, 5 * 60 * 1000);
    
    await bot.launch();
    log('üöÄ Magnum Stars Bot –∑–∞–ø—É—â–µ–Ω!');
    
    // Graceful stop
    process.once('SIGINT', () => {
      log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
      if (server) {
        server.close(() => {
          log('üåê HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          bot.stop('SIGINT');
        });
      } else {
        bot.stop('SIGINT');
      }
    });
    
    process.once('SIGTERM', () => {
      log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
      if (server) {
        server.close(() => {
          log('üåê HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          bot.stop('SIGTERM');
        });
      } else {
        bot.stop('SIGTERM');
      }
    });
  } catch (error) {
    logError(error, '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞');
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  logError(error, '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (uncaughtException)');
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logError(new Error(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞: ${reason}`), 'unhandledRejection');
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();