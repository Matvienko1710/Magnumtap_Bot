require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { MongoClient, ObjectId } = require('mongodb');
const http = require('http');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É–¥–∞–ª–µ–Ω - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
log('üöÄ –ó–∞–ø—É—Å–∫ Magnum Stars Bot...');
log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.BOT_TOKEN) {
  logError(new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω'), '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

if (!process.env.MONGODB_URI) {
  logError(new Error('MONGODB_URI –Ω–µ –Ω–∞–π–¥–µ–Ω'), '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');

const config = {
  BOT_TOKEN: process.env.BOT_TOKEN,
  MONGODB_URI: process.env.MONGODB_URI,
  ADMIN_IDS: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())) : [],
  SUPPORT_CHANNEL: process.env.SUPPORT_CHANNEL,
  WITHDRAWAL_CHANNEL: process.env.WITHDRAWAL_CHANNEL,
  REQUIRED_CHANNEL: process.env.REQUIRED_CHANNEL,
  REQUIRED_BOT_LINK: process.env.REQUIRED_BOT_LINK || 'https://t.me/ReferalStarsRobot?start=6587897295',
  FIRESTARS_BOT_LINK: process.env.FIRESTARS_BOT_LINK || 'https://t.me/firestars_rbot?start=6587897295',
  FARMIK_BOT_LINK: process.env.FARMIK_BOT_LINK || 'https://t.me/farmikstars_bot?start=6587897295',
  BASKET_BOT_LINK: process.env.BASKET_BOT_LINK || 'https://t.me/basket_gift_bot?start=6587897295',
  PRIVATE_CHANNEL_LINK: process.env.PRIVATE_CHANNEL_LINK || 'https://t.me/+4BUF9S_rLZw3NDQ6',
  PROMO_NOTIFICATIONS_CHAT: process.env.PROMO_NOTIFICATIONS_CHAT,
  BOT_PHOTO_URL: process.env.BOT_PHOTO_URL,
  
  // –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  INITIAL_STARS: 100,
  INITIAL_MAGNUM_COINS: 0,
  FARM_COOLDOWN: 10, // —Å–µ–∫—É–Ω–¥—ã
  FARM_BASE_REWARD: 0.01,
  DAILY_BONUS_BASE: 3,
  REFERRAL_BONUS: 50,
  MINER_REWARD_PER_HOUR: 0.1,
  EXCHANGE_COMMISSION: 2.5,
  MIN_WITHDRAWAL: 100,
  MAX_WITHDRAWAL: 10000,
  
  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  USER_CACHE_TTL: 30000,
  STATS_CACHE_TTL: 120000,
  
  // Rate limiting
  RATE_LIMIT_WINDOW: 60000,
  RATE_LIMIT_MAX_REQUESTS: 30,
  
  // –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏
  INITIAL_RESERVE_STARS: 1000000,
  INITIAL_RESERVE_MAGNUM_COINS: 1000000
};

// ==================== HTTP –°–ï–†–í–ï–† –î–õ–Ø HEALTH CHECK ====================
let server;
const PORT = process.env.PORT || 3000;

function startHttpServer() {
  log(`üîß –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`);
  
  server = http.createServer((req, res) => {
    log(`üì° HTTP –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.url}`);
    
    if (req.url === '/' && req.method === 'GET') {
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ 
        status: 'ok', 
        message: 'Magnum Stars Bot is running',
        timestamp: new Date().toISOString()
      }));
      log('‚úÖ Health check –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } else {
      res.writeHead(404, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ error: 'Not found' }));
      log('‚ùå 404 –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    }
  });

  server.listen(PORT, () => {
    log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  });
  
  server.on('error', (error) => {
    logError(error, 'HTTP —Å–µ—Ä–≤–µ—Ä');
  });
}

// ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
let db;
let client;

async function connectDB() {
  try {
    log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    client = new MongoClient(config.MONGODB_URI);
    await client.connect();
    log('üîå MongoDB –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
    db = client.db();
    log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    await db.collection('users').createIndex({ id: 1 }, { unique: true });
    await db.collection('users').createIndex({ username: 1 });
    await db.collection('users').createIndex({ 'miner.active': 1 });
    await db.collection('users').createIndex({ lastSeen: -1 });
    await db.collection('users').createIndex({ referrerId: 1 });
    
    await db.collection('promocodes').createIndex({ code: 1 }, { unique: true });
    await db.collection('promocodes').createIndex({ isActive: 1 });
    await db.collection('promocodes').createIndex({ expiresAt: 1 });
    
    await db.collection('withdrawalRequests').createIndex({ userId: 1 });
    await db.collection('withdrawalRequests').createIndex({ status: 1 });
    await db.collection('withdrawalRequests').createIndex({ createdAt: -1 });
    
    await db.collection('supportTickets').createIndex({ userId: 1 });
    await db.collection('supportTickets').createIndex({ status: 1 });
    await db.collection('supportTickets').createIndex({ createdAt: -1 });
    
    await db.collection('taskChecks').createIndex({ userId: 1 });
    await db.collection('taskChecks').createIndex({ status: 1 });
    await db.collection('taskChecks').createIndex({ createdAt: -1 });
    
    await db.collection('dailyTasks').createIndex({ userId: 1 });
    await db.collection('dailyTasks').createIndex({ date: 1 });
    await db.collection('dailyTasks').createIndex({ completed: 1 });
    
    await db.collection('exchangeHistory').createIndex({ userId: 1 });
    await db.collection('exchangeHistory').createIndex({ timestamp: -1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    try {
      await db.collection('reserve').createIndex({ currency: 1 }, { unique: true });
    } catch (error) {
      if (error.code === 11000) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏, —É–¥–∞–ª—è–µ–º –∏—Ö –∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞–Ω–æ–≤–æ
        log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–∑–µ—Ä–≤–µ...');
        await db.collection('reserve').deleteMany({ currency: null });
        await db.collection('reserve').createIndex({ currency: 1 }, { unique: true });
      } else {
        throw error;
      }
    }
    
    log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    log('üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞...');
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤
    await initializeReserve();
    log('‚úÖ –†–µ–∑–µ—Ä–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    logError(error, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');
    process.exit(1);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞
async function initializeReserve() {
  try {
    // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    await db.collection('reserve').deleteMany({ currency: null });
    
    let reserve = await db.collection('reserve').findOne({ currency: 'main' });
    
    if (!reserve) {
      reserve = {
        currency: 'main',
        stars: config.INITIAL_RESERVE_STARS,
        magnumCoins: config.INITIAL_RESERVE_MAGNUM_COINS,
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      await db.collection('reserve').insertOne(reserve);
      log('üí∞ –†–µ–∑–µ—Ä–≤ –≤–∞–ª—é—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          } else {
        log('üí∞ –†–µ–∑–µ—Ä–≤ –≤–∞–ª—é—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
  } catch (error) {
    logError(error, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞');
  }
}

// ==================== –ö–ï–®–ò–†–û–í–ê–ù–ò–ï ====================
const userCache = new Map();
const statsCache = new Map();

function getCachedUser(id) {
  const cached = userCache.get(id);
  if (cached && (Date.now() - cached.timestamp) < config.USER_CACHE_TTL) {
    return cached.user;
  }
  return null;
}

function setCachedUser(id, user) {
  userCache.set(id, { user, timestamp: Date.now() });
}

function getCachedStats(key) {
  const cached = statsCache.get(key);
  if (cached && (Date.now() - cached.timestamp) < config.STATS_CACHE_TTL) {
    return cached.data;
  }
  return null;
}

function setCachedStats(key, data) {
  statsCache.set(key, { data, timestamp: Date.now() });
}

// ==================== –£–¢–ò–õ–ò–¢–´ ====================
function formatNumber(num) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ num —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
  if (num === null || num === undefined || isNaN(num)) {
    return '0.00';
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  num = Number(num);
  
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  }
  return num.toFixed(2);
}

function formatTime(seconds) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ seconds —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
  if (seconds === null || seconds === undefined || isNaN(seconds)) {
    return '0—Å';
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  seconds = Number(seconds);
  
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;
  
  if (hours > 0) {
    return `${hours}—á ${minutes}–º ${secs}—Å`;
  } else if (minutes > 0) {
    return `${minutes}–º ${secs}—Å`;
  }
  return `${secs}—Å`;
}

function getUserRank(user) {
  const stars = user.stars || 0;
  if (stars >= 1000000) return 'üëë –õ–µ–≥–µ–Ω–¥–∞';
  if (stars >= 500000) return 'üíé –ê–ª–º–∞–∑';
  if (stars >= 100000) return 'üèÜ –ß–µ–º–ø–∏–æ–Ω';
  if (stars >= 50000) return '‚≠ê –ó–≤–µ–∑–¥–∞';
  if (stars >= 10000) return 'üåü –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª';
  if (stars >= 5000) return 'üí´ –≠–∫—Å–ø–µ—Ä—Ç';
  if (stars >= 1000) return '‚ú® –ú–∞—Å—Ç–µ—Ä';
  if (stars >= 500) return 'üéØ –û–ø—ã—Ç–Ω—ã–π';
  if (stars >= 100) return 'üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π';
  return 'üå± –ù–æ–≤–∏—á–æ–∫';
}

function isAdmin(userId) {
  return config.ADMIN_IDS.includes(userId);
}

// ==================== –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function ensureUserFields(user) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  if (!user.statistics) {
    user.statistics = {
      joinDate: user.createdAt || new Date(),
      lastSeen: new Date(),
      totalSessions: 1,
      totalActions: 0,
      favoriteAction: null
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–µ—Ä–º—É
  if (!user.farm) {
    user.farm = {
      lastFarm: null,
      farmCount: 0,
      totalFarmEarnings: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–π–Ω–µ—Ä
  if (!user.miner) {
    user.miner = {
      active: false,
      level: 1,
      efficiency: 1,
      lastReward: null,
      totalMined: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
  if (!user.dailyBonus) {
    user.dailyBonus = {
      lastBonus: null,
      streak: 0,
      maxStreak: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–º–µ–Ω
  if (!user.exchange) {
    user.exchange = {
      totalExchanged: 0,
      exchangeCount: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
  if (!user.withdrawal) {
    user.withdrawal = {
      totalWithdrawn: 0,
      withdrawalCount: 0,
      pendingAmount: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è
  if (!user.tasks) {
    user.tasks = {
      dailyTasks: [],
      sponsorTasks: [],
      lastDailyTasksReset: null,
      completedTasksCount: 0,
      totalTaskRewards: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
  if (!user.support) {
    user.support = {
      ticketsCount: 0,
      lastTicket: null
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  if (!user.settings) {
    user.settings = {
      notifications: true,
      language: 'ru',
      theme: 'default'
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  if (!user.achievements) {
    user.achievements = [];
  }
  
  if (!user.achievementsCount) {
    user.achievementsCount = 0;
  }
  
  if (!user.achievementsProgress) {
    user.achievementsProgress = {};
  }
  
  if (!user.titles) {
    user.titles = ['üå± –ù–æ–≤–∏—á–æ–∫'];
  }
  
  if (!user.mainTitle) {
    user.mainTitle = 'üå± –ù–æ–≤–∏—á–æ–∫';
  }
  
  if (!user.referrals) {
    user.referrals = [];
  }
  
  if (!user.referralsCount) {
    user.referralsCount = 0;
  }
  
  if (!user.totalReferralEarnings) {
    user.totalReferralEarnings = 0;
  }
  
  if (!user.totalEarnedStars) {
    user.totalEarnedStars = user.stars || 0;
  }
  
  if (!user.totalEarnedMagnumCoins) {
    user.totalEarnedMagnumCoins = user.magnumCoins || 0;
  }
  
  if (!user.level) {
    user.level = 1;
  }
  
  if (!user.experience) {
    user.experience = 0;
  }
  
  if (!user.experienceToNextLevel) {
    user.experienceToNextLevel = 100;
  }
  
  if (!user.rank) {
    user.rank = getUserRank(user);
  }
  
  if (!user.referralCode) {
    user.referralCode = generateReferralCode();
  }
  
  return user;
}

async function getUser(id, ctx = null) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = getCachedUser(id);
    if (cached) return cached;

    let user = await db.collection('users').findOne({ id: id });
    
    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = {
        id: id,
        username: ctx?.from?.username || null,
        firstName: ctx?.from?.first_name || null,
        lastName: ctx?.from?.last_name || null,
        stars: config.INITIAL_STARS,
        magnumCoins: config.INITIAL_MAGNUM_COINS,
        totalEarnedStars: config.INITIAL_STARS,
        totalEarnedMagnumCoins: config.INITIAL_MAGNUM_COINS,
        level: 1,
        experience: 0,
        experienceToNextLevel: 100,
        rank: getUserRank({ stars: config.INITIAL_STARS }),
        mainTitle: 'üå± –ù–æ–≤–∏—á–æ–∫',
        titles: ['üå± –ù–æ–≤–∏—á–æ–∫'],
        achievements: [],
        achievementsCount: 0,
        achievementsProgress: {},
        referralCode: generateReferralCode(),
        referrerId: null,
        referrals: [],
        referralsCount: 0,
        totalReferralEarnings: 0,
        farm: {
          lastFarm: null,
          farmCount: 0,
          totalFarmEarnings: 0
        },
        miner: {
          active: false,
          level: 1,
          efficiency: 1,
          lastReward: null,
          totalMined: 0
        },
        dailyBonus: {
          lastBonus: null,
          streak: 0,
          maxStreak: 0
        },
        exchange: {
          totalExchanged: 0,
          exchangeCount: 0
        },
        withdrawal: {
          totalWithdrawn: 0,
          withdrawalCount: 0,
          pendingAmount: 0
        },
        tasks: {
          dailyTasks: [],
          sponsorTasks: [],
          lastDailyTasksReset: null,
          completedTasksCount: 0,
          totalTaskRewards: 0
        },
        support: {
          ticketsCount: 0,
          lastTicket: null
        },
        settings: {
          notifications: true,
          language: 'ru',
          theme: 'default'
        },
        statistics: {
          joinDate: new Date(),
          lastSeen: new Date(),
          totalSessions: 1,
          totalActions: 0,
          favoriteAction: null
        },
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      await db.collection('users').insertOne(user);
      log(`üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username || user.id}`);
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
      user = ensureUserFields(user);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      user.statistics.lastSeen = new Date();
      user.statistics.totalSessions = (user.statistics.totalSessions || 0) + 1;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await db.collection('users').updateOne(
        { id: id },
        { 
          $set: { 
            ...user,
            updatedAt: new Date()
          }
        }
      );
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    setCachedUser(id, user);
    return user;
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return null;
  }
}

function generateReferralCode() {
  return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// ==================== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ====================
async function checkSubscription(ctx) {
  try {
    if (!config.REQUIRED_CHANNEL) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (!config.REQUIRED_CHANNEL.startsWith('@') && !config.REQUIRED_CHANNEL.startsWith('https://t.me/')) {
      return true;
    }
    
    const member = await ctx.telegram.getChatMember(config.REQUIRED_CHANNEL, ctx.from.id);
    return ['creator', 'administrator', 'member'].includes(member.status);
  } catch (error) {
    logError(error, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏');
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    return true;
  }
}

async function showSubscriptionMessage(ctx) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  if (!config.REQUIRED_CHANNEL || (!config.REQUIRED_CHANNEL.startsWith('@') && !config.REQUIRED_CHANNEL.startsWith('https://t.me/'))) {
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const user = await getUser(ctx.from.id);
    if (user) {
      await showMainMenu(ctx, user);
    }
    return;
  }
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', config.REQUIRED_CHANNEL)],
    [Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'check_subscription')]
  ]);
  
  await ctx.reply(
    `üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n` +
    `üì¢ –ö–∞–Ω–∞–ª: ${config.REQUIRED_CHANNEL}\n\n` +
    `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"`,
    keyboard
  );
}

// ==================== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ====================
async function handleReferral(userId, referrerId) {
  try {
    if (userId === referrerId) return;
    
    const user = await getUser(userId);
    if (user.referrerId) return; // –£–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä
    
    const referrer = await getUser(referrerId);
    if (!referrer) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: userId },
      { 
        $set: { 
          referrerId: referrerId,
          updatedAt: new Date()
        }
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    await db.collection('users').updateOne(
      { id: referrerId },
      { 
        $inc: { 
          referralsCount: 1,
          totalReferralEarnings: config.REFERRAL_BONUS,
          stars: config.REFERRAL_BONUS,
          totalEarnedStars: config.REFERRAL_BONUS
        },
        $push: { referrals: userId },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(userId);
    userCache.delete(referrerId);
    
    log(`üë• –†–µ—Ñ–µ—Ä–∞–ª: ${userId} -> ${referrerId}`);
  } catch (error) {
    logError(error, '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
  }
}

// ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================
async function showMainMenu(ctx, user) {
  const rank = getUserRank(user);
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
  const buttons = [
    [
      Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥', 'miner'),
      Markup.button.callback('üåæ –§–∞—Ä–º', 'farm')
    ],
    [
      Markup.button.callback('üí± –û–±–º–µ–Ω', 'exchange'),
      Markup.button.callback('üí∞ –í—ã–≤–æ–¥', 'withdrawal')
    ],
    [
      Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus'),
      Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'tasks')
    ],
    [
      Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements'),
      Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')
    ],
    [
      Markup.button.callback('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support'),
      Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')
    ]
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (isAdmin(user.id)) {
    buttons.push([
      Markup.button.callback('üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')
    ]);
  }
  
  const keyboard = Markup.inlineKeyboard(buttons);
  
  const message = 
    `üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!*\n\n` +
    `üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n` +
    `‚îú ID: \`${user.id}\`\n` +
    `‚îú –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
    `‚îú –£—Ä–æ–≤–µ–Ω—å: ${user.level}\n` +
    `‚îú –†–∞–Ω–≥: ${rank}\n` +
    `‚îî –¢–∏—Ç—É–ª: ${user.mainTitle}\n\n` +
    `üíé *–ë–∞–ª–∞–Ω—Å:*\n` +
    `‚îú ‚≠ê Stars: \`${formatNumber(user.stars)}\`\n` +
    `‚îî ü™ô Magnum Coins: \`${formatNumber(user.magnumCoins)}\`\n\n` +
    `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
    `‚îú –û–ø—ã—Ç: \`${user.experience}/${user.experienceToNextLevel}\`\n` +
    `‚îú –†–µ—Ñ–µ—Ä–∞–ª—ã: \`${user.referralsCount}\`\n` +
    `‚îî –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: \`${user.achievementsCount}\`\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

// ==================== –ú–ê–ô–ù–ò–ù–ì ====================
async function showMinerMenu(ctx, user) {
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –º–∞–π–Ω–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
  if (!user.miner) {
    user.miner = {
      active: false,
      level: 1,
      efficiency: 1,
      lastReward: null,
      totalMined: 0
    };
  }
  
  const miner = user.miner;
  const isActive = miner.active || false;
  const efficiency = miner.efficiency || 1;
  const rewardPerHour = config.MINER_REWARD_PER_HOUR * efficiency;
  
  let statusText = isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
  let lastRewardText = '';
  
  if (miner.lastReward) {
    const timeSince = Math.floor((Date.now() - miner.lastReward.getTime()) / 1000);
    if (timeSince < 3600) {
      const remaining = 3600 - timeSince;
      lastRewardText = `\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${formatTime(remaining)}`;
    }
  }
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        isActive ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä',
        isActive ? 'stop_miner' : 'start_miner'
      )
    ],
    [
      Markup.button.callback('‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä', 'upgrade_miner'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'miner_stats')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `‚õèÔ∏è *–ú–∞–π–Ω–µ—Ä*\n\n` +
    `üìä *–°—Ç–∞—Ç—É—Å:* ${statusText}\n` +
    `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${miner.level}\n` +
    `‚ö° *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${efficiency}x\n` +
    `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(rewardPerHour)} Stars\n` +
    `üíé *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:* ${formatNumber(miner.totalMined)} Stars${lastRewardText}\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

async function startMiner(ctx, user) {
  try {
    log(`‚õèÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (user.miner.active) {
      log(`‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!');
      return;
    }
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'miner.active': true,
          'miner.lastReward': new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚úÖ –ú–∞–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å Stars –∫–∞–∂–¥—ã–π —á–∞—Å.');
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    await updateMinerMenu(ctx, { ...user, miner: { ...user.miner, active: true } });
  } catch (error) {
    logError(error, '–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞');
  }
}

async function stopMiner(ctx, user) {
  try {
    log(`‚èπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (!user.miner.active) {
      log(`‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      return;
    }
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'miner.active': false,
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚èπÔ∏è –ú–∞–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    await updateMinerMenu(ctx, { ...user, miner: { ...user.miner, active: false } });
  } catch (error) {
    logError(error, '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–π–Ω–µ—Ä–∞');
  }
}

// ==================== –§–ê–†–ú ====================
async function showFarmMenu(ctx, user) {
  const farm = user.farm;
  const now = Date.now();
  const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
  const timeSince = Math.floor((now - lastFarm) / 1000);
  const cooldown = config.FARM_COOLDOWN;
  
  const canFarm = timeSince >= cooldown;
  const remainingTime = canFarm ? 0 : cooldown - timeSince;
  
  const baseReward = config.FARM_BASE_REWARD;
  const bonus = Math.min(user.level * 0.1, 2); // –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å
  const totalReward = baseReward + bonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canFarm ? 'üåæ –§–∞—Ä–º–∏—Ç—å' : `‚è≥ ${formatTime(remainingTime)}`,
        canFarm ? 'do_farm' : 'farm_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'farm_stats'),
      Markup.button.callback('üéØ –ë–æ–Ω—É—Å—ã', 'farm_bonuses')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üåæ *–§–∞—Ä–º*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canFarm ? 'üü¢ –ì–æ—Ç–æ–≤' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Stars\n` +
    `üéØ *–ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å:* +${formatNumber(bonus)} Stars\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Stars\n` +
    `üìä *–í—Å–µ–≥–æ —Ñ–∞—Ä–º–æ–≤:* ${farm.farmCount}\n` +
    `üíé *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${formatNumber(farm.totalFarmEarnings)} Stars\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

async function doFarm(ctx, user) {
  try {
    log(`üåæ –ü–æ–ø—ã—Ç–∫–∞ —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const farm = user.farm;
    const now = Date.now();
    const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
    const timeSince = Math.floor((now - lastFarm) / 1000);
    const cooldown = config.FARM_COOLDOWN;
    
    log(`‚è∞ –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞—Ä–º–∞: ${timeSince}—Å, –∫—É–ª–¥–∞—É–Ω: ${cooldown}—Å`);
    
    if (timeSince < cooldown) {
      const remaining = cooldown - timeSince;
      log(`‚è≥ –ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}—Å`);
      await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(remaining)} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞—Ä–º–æ–º!`);
      return;
    }
    
    const baseReward = config.FARM_BASE_REWARD;
    const bonus = Math.min(user.level * 0.1, 2);
    const totalReward = baseReward + bonus;
    
    log(`üí∞ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã: –±–∞–∑–æ–≤–∞—è ${baseReward}, –±–æ–Ω—É—Å ${bonus}, –∏—Ç–æ–≥–æ ${totalReward} Stars`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          stars: totalReward,
          totalEarnedStars: totalReward,
          experience: Math.floor(totalReward * 10),
          'farm.farmCount': 1,
          'farm.totalFarmEarnings': totalReward,
          'statistics.totalActions': 1
        },
        $set: { 
          'farm.lastFarm': new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –§–∞—Ä–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalReward} Stars`);
    await ctx.answerCbQuery(
      `üåæ –§–∞—Ä–º –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber(totalReward)} Stars`
    );
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ñ–∞—Ä–º–∞
    await updateFarmMenu(ctx, { ...user, farm: { ...farm, lastFarm: new Date() } });
  } catch (error) {
    logError(error, '–§–∞—Ä–º');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ñ–∞—Ä–º–∞');
  }
}

// ==================== –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° ====================
async function updateMinerMenu(ctx, user) {
  try {
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –º–∞–π–Ω–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (!user.miner) {
      log(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      user.miner = {
        active: false,
        level: 1,
        efficiency: 1,
        lastReward: null,
        totalMined: 0
      };
    }
  
  const miner = user.miner;
  const isActive = miner.active || false;
  const efficiency = miner.efficiency || 1;
  const rewardPerHour = config.MINER_REWARD_PER_HOUR * efficiency;
  
  let statusText = isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
  let lastRewardText = '';
  
  if (miner.lastReward) {
    const timeSince = Math.floor((Date.now() - miner.lastReward.getTime()) / 1000);
    if (timeSince < 3600) {
      const remaining = 3600 - timeSince;
      lastRewardText = `\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${formatTime(remaining)}`;
    }
  }
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        isActive ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä',
        isActive ? 'stop_miner' : 'start_miner'
      )
    ],
    [
      Markup.button.callback('‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä', 'upgrade_miner'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'miner_stats')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `‚õèÔ∏è *–ú–∞–π–Ω–µ—Ä*\n\n` +
    `üìä *–°—Ç–∞—Ç—É—Å:* ${statusText}\n` +
    `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${miner.level}\n` +
    `‚ö° *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${efficiency}x\n` +
    `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(rewardPerHour)} Stars\n` +
    `üíé *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:* ${formatNumber(miner.totalMined)} Stars${lastRewardText}\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
    log(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    log(`‚úÖ –ú–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    log(`üîÑ Fallback: –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await showMinerMenu(ctx, user);
  }
}
}

async function updateFarmMenu(ctx, user) {
  try {
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const farm = user.farm;
    const now = Date.now();
    const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
    const timeSince = Math.floor((now - lastFarm) / 1000);
    const cooldown = config.FARM_COOLDOWN;
  
  const canFarm = timeSince >= cooldown;
  const remainingTime = canFarm ? 0 : cooldown - timeSince;
  
  const baseReward = config.FARM_BASE_REWARD;
  const bonus = Math.min(user.level * 0.1, 2);
  const totalReward = baseReward + bonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canFarm ? 'üåæ –§–∞—Ä–º–∏—Ç—å' : `‚è≥ ${formatTime(remainingTime)}`,
        canFarm ? 'do_farm' : 'farm_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'farm_stats'),
      Markup.button.callback('üéØ –ë–æ–Ω—É—Å—ã', 'farm_bonuses')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üåæ *–§–∞—Ä–º*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canFarm ? 'üü¢ –ì–æ—Ç–æ–≤' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Stars\n` +
    `üéØ *–ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å:* +${formatNumber(bonus)} Stars\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Stars\n` +
    `üìä *–í—Å–µ–≥–æ —Ñ–∞—Ä–º–æ–≤:* ${farm.farmCount}\n` +
    `üíé *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${formatNumber(farm.totalFarmEarnings)} Stars\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
    log(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    log(`‚úÖ –ú–µ–Ω—é —Ñ–∞—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    log(`üîÑ Fallback: –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await showFarmMenu(ctx, user);
  }
}
}

async function showBonusMenu(ctx, user) {
  const bonus = user.dailyBonus;
  const now = new Date();
  const lastBonus = bonus.lastBonus;
  
  let canClaim = false;
  let timeUntilNext = 0;
  
  if (!lastBonus) {
    canClaim = true;
  } else {
    const timeSince = now.getTime() - lastBonus.getTime();
    const dayInMs = 24 * 60 * 60 * 1000;
    
    if (timeSince >= dayInMs) {
      canClaim = true;
    } else {
      timeUntilNext = dayInMs - timeSince;
    }
  }
  
  const baseReward = config.DAILY_BONUS_BASE;
  const streakBonus = Math.min(bonus.streak * 0.5, 5);
  const totalReward = baseReward + streakBonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(timeUntilNext / 1000))}`,
        canClaim ? 'claim_bonus' : 'bonus_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'bonus_stats'),
      Markup.button.callback('üî• –°–µ—Ä–∏—è', 'bonus_streak')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canClaim ? 'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Stars\n` +
    `üî• *–ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏:* +${formatNumber(streakBonus)} Stars\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Stars\n` +
    `üìä *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:* ${bonus.streak} –¥–Ω–µ–π\n` +
    `üèÜ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è:* ${bonus.maxStreak} –¥–Ω–µ–π\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

async function updateBonusMenu(ctx, user) {
  try {
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const now = new Date();
    const lastBonus = bonus.lastBonus;
  
  let canClaim = false;
  let timeUntilNext = 0;
  
  if (!lastBonus) {
    canClaim = true;
  } else {
    const timeSince = now.getTime() - lastBonus.getTime();
    const dayInMs = 24 * 60 * 60 * 1000;
    
    if (timeSince >= dayInMs) {
      canClaim = true;
    } else {
      timeUntilNext = dayInMs - timeSince;
    }
  }
  
  const baseReward = config.DAILY_BONUS_BASE;
  const streakBonus = Math.min(bonus.streak * 0.5, 5);
  const totalReward = baseReward + streakBonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(timeUntilNext / 1000))}`,
        canClaim ? 'claim_bonus' : 'bonus_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'bonus_stats'),
      Markup.button.callback('üî• –°–µ—Ä–∏—è', 'bonus_streak')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canClaim ? 'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Stars\n` +
    `üî• *–ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏:* +${formatNumber(streakBonus)} Stars\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Stars\n` +
    `üìä *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:* ${bonus.streak} –¥–Ω–µ–π\n` +
    `üèÜ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è:* ${bonus.maxStreak} –¥–Ω–µ–π\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
    log(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    log(`‚úÖ –ú–µ–Ω—é –±–æ–Ω—É—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    log(`üîÑ Fallback: –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await showBonusMenu(ctx, user);
  }
}
}

async function claimBonus(ctx, user) {
  try {
    log(`üéÅ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const now = new Date();
    const lastBonus = bonus.lastBonus;
    
    if (lastBonus) {
      const timeSince = now.getTime() - lastBonus.getTime();
      const dayInMs = 24 * 60 * 60 * 1000;
      
      log(`‚è∞ –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞: ${Math.floor(timeSince / 1000)}—Å`);
      
      if (timeSince < dayInMs) {
        const remaining = dayInMs - timeSince;
        log(`‚è≥ –ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Å—Ç–∞–ª–æ—Å—å: ${Math.floor(remaining / 1000)}—Å`);
        await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(Math.floor(remaining / 1000))} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞!`);
        return;
      }
    }
    
    const baseReward = config.DAILY_BONUS_BASE;
    const streakBonus = Math.min(bonus.streak * 0.5, 5);
    const totalReward = baseReward + streakBonus;
    
    log(`üí∞ –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞: –±–∞–∑–æ–≤–∞—è ${baseReward}, —Å–µ—Ä–∏—è ${bonus.streak}, –±–æ–Ω—É—Å —Å–µ—Ä–∏–∏ ${streakBonus}, –∏—Ç–æ–≥–æ ${totalReward} Stars`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ª–∏ –¥–µ–Ω—å
    let newStreak = bonus.streak + 1;
    if (lastBonus) {
      const timeSince = now.getTime() - lastBonus.getTime();
      const twoDaysInMs = 2 * 24 * 60 * 60 * 1000;
      if (timeSince > twoDaysInMs) {
        newStreak = 1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é
        log(`üîÑ –°–±—Ä–æ—Å —Å–µ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} (–ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å)`);
      }
    }
    
    log(`üìà –ù–æ–≤–∞—è —Å–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤: ${newStreak}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          stars: totalReward,
          totalEarnedStars: totalReward,
          experience: Math.floor(totalReward * 5),
          'statistics.totalActions': 1
        },
        $set: { 
          'dailyBonus.lastBonus': now,
          'dailyBonus.streak': newStreak,
          'dailyBonus.maxStreak': Math.max(newStreak, bonus.maxStreak),
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalReward} Stars, —Å–µ—Ä–∏—è: ${newStreak} –¥–Ω–µ–π`);
    await ctx.answerCbQuery(
      `üéÅ –ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω! –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber(totalReward)} Stars, —Å–µ—Ä–∏—è: ${newStreak} –¥–Ω–µ–π`
    );
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±–æ–Ω—É—Å–∞
    await updateBonusMenu(ctx, { ...user, dailyBonus: { ...bonus, lastBonus: now, streak: newStreak } });
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞');
  }
}

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ê–ô–ù–ï–†–ê ====================
async function processMinerRewards() {
  try {
    const now = new Date();
    const hourAgo = new Date(now.getTime() - 60 * 60 * 1000);
    
    const activeMiners = await db.collection('users').find({
      'miner.active': true,
      'miner.lastReward': { $lt: hourAgo }
    }).toArray();
    
    for (const user of activeMiners) {
      const reward = config.MINER_REWARD_PER_HOUR * user.miner.efficiency;
      
      await db.collection('users').updateOne(
        { id: user.id },
        { 
          $inc: { 
            stars: reward,
            totalEarnedStars: reward,
            experience: Math.floor(reward * 5),
            'miner.totalMined': reward
          },
          $set: { 
            'miner.lastReward': now,
            updatedAt: new Date()
          }
        }
      );
      
      userCache.delete(user.id);
      log(`‚õèÔ∏è –ú–∞–π–Ω–µ—Ä –Ω–∞–≥—Ä–∞–¥–∞: ${user.id} +${reward} Stars`);
    }
  } catch (error) {
    logError(error, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–µ—Ä–∞');
  }
}

// ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================
function log(message, type = 'INFO') {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [${type}] ${message}`;
  console.log(logMessage);
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
function logError(error, context = '') {
  const timestamp = new Date().toISOString();
  const errorMessage = `[${timestamp}] [ERROR] ${context}: ${error.message}`;
  console.error(errorMessage);
  if (error.stack) {
    console.error(`[${timestamp}] [ERROR] Stack: ${error.stack}`);
  }
}

// ==================== –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê ====================
const bot = new Telegraf(config.BOT_TOKEN);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  try {
    const user = await getUser(ctx.from.id, ctx);
    if (!user) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const isSubscribed = await checkSubscription(ctx);
    if (!isSubscribed) {
      await showSubscriptionMessage(ctx);
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const startPayload = ctx.startPayload;
    if (startPayload && startPayload !== user.id.toString()) {
      await handleReferral(user.id, parseInt(startPayload));
    }
    
    await showMainMenu(ctx, user);
  } catch (error) {
    logError(error, '–ö–æ–º–∞–Ω–¥–∞ /start');
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.action('main_menu', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMainMenu(ctx, user);
  } catch (error) {
    logError(error, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
  }
});

// –ú–∞–π–Ω–∏–Ω–≥
bot.action('miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMinerMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞');
  }
});

bot.action('start_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await startMiner(ctx, user);
  } catch (error) {
    logError(error, '–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('stop_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await stopMiner(ctx, user);
  } catch (error) {
    logError(error, '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –§–∞—Ä–º
bot.action('farm', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showFarmMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é —Ñ–∞—Ä–º–∞');
  }
});

bot.action('do_farm', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await doFarm(ctx, user);
  } catch (error) {
    logError(error, '–§–∞—Ä–º (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –ë–æ–Ω—É—Å
bot.action('bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showBonusMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –±–æ–Ω—É—Å–∞');
  }
});

bot.action('claim_bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await claimBonus(ctx, user);
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤
bot.action('farm_cooldown', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await ctx.answerCbQuery('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞!');
  } catch (error) {
    logError(error, '–ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞');
  }
});

bot.action('bonus_cooldown', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await ctx.answerCbQuery('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞!');
  } catch (error) {
    logError(error, '–ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
bot.action('check_subscription', async (ctx) => {
  try {
    const isSubscribed = await checkSubscription(ctx);
    if (isSubscribed) {
      const user = await getUser(ctx.from.id);
      if (!user) return;
      
      await showMainMenu(ctx, user);
    } else {
      await showSubscriptionMessage(ctx);
    }
  } catch (error) {
    logError(error, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const user = await getUser(ctx.from.id);
    if (user) {
      await showMainMenu(ctx, user);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  logError(err, `–û–±—Ä–∞–±–æ—Ç–∫–∞ ${ctx.updateType}`);
});

// ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async function startBot() {
  try {
    log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await connectDB();
    log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    log('üåê –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞...');
    // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
    startHttpServer();
    log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    
    log('‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤...');
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–π–Ω–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(processMinerRewards, 30 * 60 * 1000);
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      const now = Date.now();
      for (const [key, value] of userCache.entries()) {
        if (now - value.timestamp > config.USER_CACHE_TTL) {
          userCache.delete(key);
        }
      }
      for (const [key, value] of statsCache.entries()) {
        if (now - value.timestamp > config.STATS_CACHE_TTL) {
          statsCache.delete(key);
        }
      }
    }, 5 * 60 * 1000);
    
    await bot.launch();
    log('üöÄ Magnum Stars Bot –∑–∞–ø—É—â–µ–Ω!');
    
    // Graceful stop
    process.once('SIGINT', () => {
      log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
      if (server) {
        server.close(() => {
          log('üåê HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          bot.stop('SIGINT');
        });
      } else {
        bot.stop('SIGINT');
      }
    });
    
    process.once('SIGTERM', () => {
      log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
      if (server) {
        server.close(() => {
          log('üåê HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          bot.stop('SIGTERM');
        });
      } else {
        bot.stop('SIGTERM');
      }
    });
  } catch (error) {
    logError(error, '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞');
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  logError(error, '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (uncaughtException)');
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logError(new Error(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞: ${reason}`), 'unhandledRejection');
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();