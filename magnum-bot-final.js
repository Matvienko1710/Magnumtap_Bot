require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { MongoClient, ObjectId } = require('mongodb');
const express = require('express');
const path = require('path');
const fs = require('fs');

// RichAds –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
const { 
  getRichAdsOffers, 
  verifyRichAdsOffer, 
  sendRichAdsConversion, 
  getRichAdsUserStats,
  isRichAdsAvailable 
} = require('./richads-integration');

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 12-—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
function generateKey() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 12; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è WebApp
const app = express();
const PORT = process.env.PORT || 3000; // Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π –ø–æ—Ä—Ç

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`üåê [${new Date().toISOString()}] ${req.method} ${req.path}`);
    next();
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –†–∞–∑–¥–∞—á–∞ WebApp –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–¥ —É–¥–∞–ª—ë–Ω –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã)



// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
    res.json({ 
        status: 'ok', 
        message: 'Magnum Stars Bot is running',
        timestamp: new Date().toISOString(),
        webappUrl: '/webapp',
        apiUrl: '/api/webapp/check-access'
    });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è UptimeRobot - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get('/health', (req, res) => {
    res.status(200).json({
        status: 'healthy',
        message: 'Magnum Stars Bot is alive and running',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        version: '1.0.0',
        environment: process.env.NODE_ENV || 'development'
    });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è UptimeRobot - –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
app.get('/ping', (req, res) => {
    res.status(200).send('pong');
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.get('/test', (req, res) => {
    // [–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è] –£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç fs ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–π 'fs'
    const webappEnabled = process.env.WEBAPP_ENABLED === 'true'; // [–ò–∑–º–µ–Ω–µ–Ω–∏–µ] –£–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∞–º–∏ WebApp —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const webappPath = path.join(__dirname, 'webapp');
    const indexPath = path.join(webappPath, 'index.html');
    const stylesPath = path.join(webappPath, 'styles.css');
    const scriptPath = path.join(webappPath, 'app.js');
    
    if (webappEnabled) {
        console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ WebApp...');
        console.log(`üìÅ –ü—É—Ç—å –∫ WebApp: ${webappPath}`);
        console.log(`üìÑ index.html: ${fs.existsSync(indexPath) ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        console.log(`üé® styles.css: ${fs.existsSync(stylesPath) ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        console.log(`‚ö° app.js: ${fs.existsSync(scriptPath) ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
    }
    
    res.json({
        status: 'test',
        webappPath: webappPath,
        files: {
            index: fs.existsSync(indexPath) ? 'found' : 'not found',
            styles: fs.existsSync(stylesPath) ? 'found' : 'not found',
            app: fs.existsSync(scriptPath) ? 'found' : 'not found'
        },
        timestamp: new Date().toISOString()
    });
});



// WebApp –º–∞—Ä—à—Ä—É—Ç—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
if (process.env.WEBAPP_ENABLED === 'true') {
  app.use('/webapp', express.static(path.join(__dirname, 'webapp'), {
    maxAge: '1h',
    etag: true
  }));

  app.get('/api/webapp/check-access', async (req, res) => {
    try {
      const { userId } = req.query;
      if (!userId) {
        return res.status(400).json({ error: 'Missing userId' });
      }

      const user = await db.collection('users').findOne({ id: parseInt(userId) });
      const hasAccess = user && config.ADMIN_IDS.includes(parseInt(userId));
      
      res.json({ hasAccess, user: hasAccess ? user : null });
    } catch (error) {
      console.error('WebApp access check error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  app.get('/api/webapp/user-data', async (req, res) => {
    try {
      const { userId } = req.query;
      if (!userId) {
        return res.status(400).json({ error: 'Missing userId' });
      }

      const user = await db.collection('users').findOne({ id: parseInt(userId) });
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }

      res.json(user);
    } catch (error) {
      console.error('User data error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  // WebApp API endpoints –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
  app.post('/api/webapp/mining-click', async (req, res) => {
    try {
      const { userId } = req.body;
      if (!userId) {
        return res.status(400).json({ success: false, message: 'Missing userId' });
      }

      const user = await db.collection('users').findOne({ id: parseInt(userId) });
      if (!user) {
        return res.status(404).json({ success: false, message: 'User not found' });
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–∫
      const baseReward = 0.1;
      const levelMultiplier = 1 + (user.level - 1) * 0.1;
      const reward = baseReward * levelMultiplier;

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db.collection('users').updateOne(
        { id: parseInt(userId) },
        { 
          $inc: { 
            magnuStarsoins: reward,
            'miningStats.activeClicks': 1,
            'miningStats.activeRewards': reward
          },
          $set: { lastActivity: new Date() }
        }
      );

      res.json({ 
        success: true, 
        reward: reward.toFixed(2),
        message: `+${reward.toFixed(2)} Stars –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–∫!`
      });

    } catch (error) {
      console.error('Mining click error:', error);
      res.status(500).json({ success: false, message: 'Internal server error' });
    }
  });

  app.post('/api/webapp/farm', async (req, res) => {
    try {
      const { userId } = req.body;
      if (!userId) {
        return res.status(400).json({ success: false, message: 'Missing userId' });
      }

      const user = await db.collection('users').findOne({ id: parseInt(userId) });
      if (!user) {
        return res.status(404).json({ success: false, message: 'User not found' });
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ñ–∞—Ä–º
      const baseReward = 10;
      const levelBonus = Math.min(user.level * 0.1, 2);
      const reward = baseReward + levelBonus;

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db.collection('users').updateOne(
        { id: parseInt(userId) },
        { 
          $inc: { 
            magnuStarsoins: reward,
            'miningStats.totalMinedStars': reward
          },
          $set: { lastActivity: new Date() }
        }
      );

      res.json({ 
        success: true, 
        reward: reward.toFixed(2),
        message: `+${reward.toFixed(2)} Stars –∑–∞ —Ñ–∞—Ä–º!`
      });

    } catch (error) {
      console.error('Farm error:', error);
      res.status(500).json({ success: false, message: 'Internal server error' });
    }
  });

  app.post('/api/webapp/tasks', async (req, res) => {
    try {
      const { userId } = req.body;
      if (!userId) {
        return res.status(400).json({ success: false, message: 'Missing userId' });
      }

      const user = await db.collection('users').findOne({ id: parseInt(userId) });
      if (!user) {
        return res.status(404).json({ success: false, message: 'User not found' });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
      const tasks = [
        {
          id: 1,
          name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥',
          description: '–ó–∞–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è',
          reward: 5,
          icon: 'üìÖ',
          type: 'daily'
        },
        {
          id: 2,
          name: '–ê–∫—Ç–∏–≤–Ω—ã–π –º–∞–π–Ω–µ—Ä',
          description: '–°–¥–µ–ª–∞–π—Ç–µ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–∫–æ–≤',
          reward: 15,
          icon: '‚ö°',
          type: 'clicks',
          progress: Math.min((user.miningStats?.activeClicks || 0), 10),
          target: 10
        },
        {
          id: 3,
          name: '–§–∞—Ä–º–µ—Ä',
          description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞—Ä–º 3 —Ä–∞–∑–∞',
          reward: 25,
          icon: 'üåæ',
          type: 'farm',
          progress: Math.min((user.miningStats?.farStarsount || 0), 3),
          target: 3
        }
      ];

      res.json({ 
        success: true, 
        tasks: tasks
      });

    } catch (error) {
      console.error('Tasks error:', error);
      res.status(500).json({ success: false, message: 'Internal server error' });
    }
  });

  app.post('/api/webapp/exchange', async (req, res) => {
    try {
      const { userId, froStarsurrency, toCurrency, amount } = req.body;
      if (!userId || !froStarsurrency || !toCurrency || !amount) {
        return res.status(400).json({ success: false, message: 'Missing required parameters' });
      }

      const user = await db.collection('users').findOne({ id: parseInt(userId) });
      if (!user) {
        return res.status(404).json({ success: false, message: 'User not found' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      const userBalance = froStarsurrency === 'magnuStarsoins' ? user.magnuStarsoins : user.stars;
      if (userBalance < amount) {
        return res.json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
      const baseRate = 0.001; // 1 Stars = 0.001 Stars
      const exchangeRate = froStarsurrency === 'magnuStarsoins' ? baseRate : 1 / baseRate;
      const convertedAmount = amount * exchangeRate;

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      const updateData = {};
      updateData[froStarsurrency] = -amount;
      updateData[toCurrency] = convertedAmount;

      await db.collection('users').updateOne(
        { id: parseInt(userId) },
        { 
          $inc: updateData,
          $set: { lastActivity: new Date() }
        }
      );

      res.json({ 
        success: true, 
        convertedAmount: convertedAmount.toFixed(4),
        message: `–û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω: ${amount} ${froStarsurrency} ‚Üí ${convertedAmount.toFixed(4)} ${toCurrency}`
      });

    } catch (error) {
      console.error('Exchange error:', error);
      res.status(500).json({ success: false, message: 'Internal server error' });
    }
  });
}

// API –º–∞—Ä—à—Ä—É—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

// Express —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É–¥–∞–ª–µ–Ω - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
console.log('üöÄ –ó–∞–ø—É—Å–∫ Magnum Stars Bot...');
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
  process.exit(1);
}

if (!process.env.MONGODB_URI) {
  console.error('‚ùå MONGODB_URI –Ω–µ –Ω–∞–π–¥–µ–Ω');
  process.exit(1);
}

console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');

const config = {
  BOT_TOKEN: process.env.BOT_TOKEN,
  MONGODB_URI: process.env.MONGODB_URI,
  ADMIN_IDS: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())) : [],
  SUPPORT_CHANNEL: process.env.SUPPORT_CHANNEL ? `@${process.env.SUPPORT_CHANNEL}` : null,
  WITHDRAWAL_CHANNEL: process.env.WITHDRAWAL_CHANNEL ? `@${process.env.WITHDRAWAL_CHANNEL}` : null,
  REQUIRED_CHANNEL: process.env.REQUIRED_CHANNEL ? `@${process.env.REQUIRED_CHANNEL}` : null,
  // RichAds –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω—è–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è)
  RICHADS_API_KEY: process.env.RICHADS_API_KEY,
  RICHADS_ENABLED: process.env.RICHADS_ENABLED === 'true',
  
  // WebApp –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  WEBAPP_URL: process.env.WEBAPP_URL,
  
  // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
  SPONSOR_TASK_CHANNEL: process.env.SPONSOR_TASK_CHANNEL || '@musice46',
  SPONSOR_TASK_BOT: process.env.SPONSOR_TASK_BOT || 'https://t.me/farmikstars_bot?start=6587897295',
  REQUIRED_BOT_LINK: process.env.REQUIRED_BOT_LINK || 'https://t.me/ReferalStarsRobot?start=6587897295',
  FIRESTARS_BOT_LINK: process.env.FIRESTARS_BOT_LINK || 'https://t.me/firestars_rbot?start=6587897295',
  FARMIK_BOT_LINK: process.env.FARMIK_BOT_LINK || 'https://t.me/farmikstars_bot?start=6587897295',
  BASKET_BOT_LINK: process.env.BASKET_BOT_LINK || 'https://t.me/basket_gift_bot?start=6587897295',
  PRIVATE_CHANNEL_LINK: process.env.PRIVATE_CHANNEL_LINK || 'https://t.me/+4BUF9S_rLZw3NDQ6',
  PROMO_NOTIFICATIONS_CHAT: process.env.PROMO_NOTIFICATIONS_CHAT,
  BOT_PHOTO_URL: process.env.BOT_PHOTO_URL,
  
  // –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  INITIAL_STARS: 0,
  INITIAL_MAGNUM_COINS: 1000,

  DAILY_BONUS_BASE: 3,
  REFERRAL_BONUS: 50,
  REFERRAL_REWARD: 5, // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  MINER_REWARD_PER_MINUTE: 0.01, // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∏–Ω—É—Ç—É (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
  MINER_REWARD_PER_HOUR: 0.1, // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  
  // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞–π–Ω–∏–Ω–≥–∞
  MINING_SEASON_DURATION: 30, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∑–æ–Ω–∞ –≤ –¥–Ω—è—Ö
  MINING_REWARD_INTERVAL: 1, // –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –≤ –º–∏–Ω—É—Ç–∞—Ö
  MINING_ACTIVE_CLICK_BONUS: 0.5, // –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–∫ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É)
  
  // –ú–∞–π–Ω–µ—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
  MINERS: {
    basic: {
      id: 'basic',
      name: '–ë–∞–∑–æ–≤—ã–π –º–∞–π–Ω–µ—Ä',
      rarity: 'common',
      baseSpeed: 0.01, // ~7 –¥–Ω–µ–π –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
      price: 100,
      currency: 'magnuStarsoins',
      description: '–ü—Ä–æ—Å—Ç–æ–π –º–∞–π–Ω–µ—Ä –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö (–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å ~7 –¥–Ω–µ–π)'
    },
    advanced: {
      id: 'advanced',
      name: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–∞–π–Ω–µ—Ä',
      rarity: 'rare',
      baseSpeed: 0.025, // ~14 –¥–Ω–µ–π –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
      price: 500,
      currency: 'magnuStarsoins',
      description: '–ë–æ–ª–µ–µ –º–æ—â–Ω—ã–π –º–∞–π–Ω–µ—Ä (–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å ~14 –¥–Ω–µ–π)'
    },
    premium: {
      id: 'premium',
      name: '–ü—Ä–µ–º–∏—É–º –º–∞–π–Ω–µ—Ä',
      rarity: 'epic',
      baseSpeed: 0.0017, // ~21 –¥–µ–Ω—å –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
      price: 50,
      currency: 'stars',
      miningCurrency: 'stars', // –î–æ–±—ã–≤–∞–µ—Ç Stars
      description: '–ú–æ—â–Ω—ã–π –º–∞–π–Ω–µ—Ä –∑–∞ Stars, –¥–æ–±—ã–≤–∞–µ—Ç Stars (–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å ~21 –¥–µ–Ω—å)'
    },
    legendary: {
      id: 'legendary',
      name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–∞–π–Ω–µ—Ä',
      rarity: 'legendary',
      baseSpeed: 0.0045, // ~31 –¥–µ–Ω—å –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
      price: 200,
      currency: 'stars',
      miningCurrency: 'stars', // –î–æ–±—ã–≤–∞–µ—Ç Stars
      description: '–°–∞–º—ã–π –º–æ—â–Ω—ã–π –º–∞–π–Ω–µ—Ä, –¥–æ–±—ã–≤–∞–µ—Ç Stars (–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å ~31 –¥–µ–Ω—å)'
    }
  },
  
  // –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–µ–∑–æ–Ω—ã (—Ç–æ–ª—å–∫–æ —Ç–æ–ø-10)
  SEASON_REWARDS: {
    top1: { magnuStarsoins: 10000, stars: 100, title: 'üèÜ –ß–µ–º–ø–∏–æ–Ω —Å–µ–∑–æ–Ω–∞' },
    top3: { magnuStarsoins: 5000, stars: 50, title: 'ü•á –¢–æ–ø-3 —Å–µ–∑–æ–Ω–∞' },
    top10: { magnuStarsoins: 2000, stars: 20, title: 'ü•à –¢–æ–ø-10 —Å–µ–∑–æ–Ω–∞' }
  },
  
  EXCHANGE_COMMISSION: 2.5,
  WITHDRAWAL_COMMISSION: 5.0,
  MIN_WITHDRAWAL: 50,
  MAX_WITHDRAWAL: 10000,
  
  // –°–∏—Å—Ç–µ–º–∞ —Å–µ–∑–æ–Ω–æ–≤ –º–∞–π–Ω–∏–Ω–≥–∞
  MINING_SEASON_DURATION: 7, // –¥–Ω–µ–π
  MINING_SEASON_START_DATE: new Date('2025-11-22'), // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞
  MINING_TOTAL_MAGNUM_COINS: 1000000, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  MINING_TOTAL_STARS: 100, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  MINING_SEASON_MULTIPLIER: 1.2, // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –∫–∞–∂–¥—ã–π —Å–µ–∑–æ–Ω
  
  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  USER_CACHE_TTL: 30000,
  STATS_CACHE_TTL: 120000,
  
  // Rate limiting
  RATE_LIMIT_WINDOW: 60000,
  RATE_LIMIT_MAX_REQUESTS: 30,
  
  // –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏
  INITIAL_RESERVE_STARS: 0,
  INITIAL_RESERVE_MAGNUM_COINS: 0,
  
  // –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ (–±–∞–∑–æ–≤—ã–π)
  BASE_EXCHANGE_RATE: 0.000001, // 1 Magnum Coin = 0.000001 Star
  EXCHANGE_RATE_MULTIPLIER: 1.0 // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫—É—Ä—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑–µ—Ä–≤–∞
};

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ WebApp
app.get('/api/webapp/check-access', async (req, res) => {
    try {
        const userId = req.query.user_id;
        if (!userId) {
            return res.json({ access: false, reason: 'No user ID provided' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        const isAdmin = config.ADMIN_IDS.includes(parseInt(userId));
        const webappEnabled = process.env.WEBAPP_ENABLED === 'true';
        const adminOnly = process.env.WEBAPP_ADMIN_ONLY === 'true';

        if (!webappEnabled) {
            return res.json({ access: false, reason: 'WebApp disabled' });
        }

        if (adminOnly && !isAdmin) {
            return res.json({ access: false, reason: 'Admin only' });
        }

        res.json({ access: true, isAdmin });
    } catch (error) {
        console.error('WebApp access check error:', error);
        res.status(500).json({ access: false, reason: 'Server error' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/webapp/user-data', async (req, res) => {
    try {
        const userId = req.query.user_id;
        if (!userId) {
            return res.status(400).json({ error: 'User ID required' });
        }

        console.log(`üì• WebApp –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        let webappUser = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        
        if (!webappUser) {
            webappUser = {
                userId: parseInt(userId),
                magnuStarsoins: 1000,
                stars: 0,
                level: 1,
                experience: 0,
                clickCount: 0,
                cps: 1,
                minerActive: false,
                referralsCount: 0,
                referralEarnings: 0,
                achievementsCompleted: 0,
                upgrades: {
                    autoClicker: { level: 0, cost: 10, baseCost: 10, multiplier: 1.5 },
                    clickPower: { level: 0, cost: 25, baseCost: 25, multiplier: 2 },
                    starGenerator: { level: 0, cost: 50, baseCost: 50, multiplier: 2.5 }
                },
                minerUpgrades: {
                    efficiency: { level: 0, cost: 100, baseCost: 100, multiplier: 2 },
                    capacity: { level: 0, cost: 200, baseCost: 200, multiplier: 2.5 }
                },
                tasks: {
                    daily: [
                        { id: 'click_100', name: '–ö–ª–∏–∫–µ—Ä', description: '–°–¥–µ–ª–∞–π—Ç–µ 100 –∫–ª–∏–∫–æ–≤', target: 100, progress: 0, reward: 50, completed: false },
                        { id: 'earn_1000', name: '–ó–∞—Ä–∞–±–æ—Ç–æ–∫', description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 1000 Stars', target: 1000, progress: 0, reward: 100, completed: false },
                        { id: 'farm_5', name: '–§–∞—Ä–º–µ—Ä', description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞—Ä–º 5 —Ä–∞–∑', target: 5, progress: 0, reward: 75, completed: false }
                    ],
                    achievements: [
                        { id: 'first_click', name: '–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫', description: '–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫', target: 1, progress: 0, reward: 25, completed: false },
                        { id: 'rich_player', name: '–ë–æ–≥–∞—á', description: '–ù–∞–∫–æ–ø–∏—Ç–µ 10000 Stars', target: 10000, progress: 0, reward: 500, completed: false },
                        { id: 'click_master', name: '–ú–∞—Å—Ç–µ—Ä –∫–ª–∏–∫–æ–≤', description: '–°–¥–µ–ª–∞–π—Ç–µ 1000 –∫–ª–∏–∫–æ–≤', target: 1000, progress: 0, reward: 200, completed: false }
                    ]
                },
                settings: {
                    notifications: true,
                    sound: true,
                    autoSave: true
                },
                lastFarmAt: null,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            await db.collection('webappUsers').insertOne(webappUser);
            console.log(`üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π WebApp –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
        }

        if (webappUser.minerActive) {
            const now = Date.now();
            const lastUpdate = new Date(webappUser.updatedAt || webappUser.createdAt).getTime();
            const minutesPassed = Math.floor((now - lastUpdate) / 60000);
            if (minutesPassed > 0) {
                const baseIncome = 1;
                const efficiencyBonus = (webappUser.minerUpgrades?.efficiency?.level || 0) * 0.5;
                const capacityBonus = (webappUser.minerUpgrades?.capacity?.level || 0) * 0.3;
                const perMinute = baseIncome + efficiencyBonus + capacityBonus;
                const passiveEarn = perMinute * minutesPassed;
                await db.collection('webappUsers').updateOne(
                    { userId: parseInt(userId) },
                    { $inc: { magnuStarsoins: passiveEarn }, $set: { updatedAt: new Date() } }
                );
                webappUser.magnuStarsoins += passiveEarn;
            }
        }

        const farStarsooldownMs = (parseInt(process.env.WEBAPP_FARM_COOLDOWN_SEC || '5') || 5) * 1000;

        res.json({
            success: true,
            data: {
                magnuStarsoins: webappUser.magnuStarsoins || 0,
                stars: webappUser.stars || 0,
                level: webappUser.level || 1,
                experience: webappUser.experience || 0,
                clickCount: webappUser.clickCount || 0,
                cps: webappUser.cps || 1,
                minerActive: !!webappUser.minerActive,
                referralsCount: webappUser.referralsCount || 0,
                referralEarnings: webappUser.referralEarnings || 0,
                achievementsCompleted: webappUser.achievementsCompleted || 0,
                upgrades: webappUser.upgrades || {
                    autoClicker: { level: 0, cost: 10, baseCost: 10, multiplier: 1.5 },
                    clickPower: { level: 0, cost: 25, baseCost: 25, multiplier: 2 },
                    starGenerator: { level: 0, cost: 50, baseCost: 50, multiplier: 2.5 }
                },
                minerUpgrades: webappUser.minerUpgrades || {
                    efficiency: { level: 0, cost: 100, baseCost: 100, multiplier: 2 },
                    capacity: { level: 0, cost: 200, baseCost: 200, multiplier: 2.5 }
                },
                tasks: webappUser.tasks || {
                    daily: [
                        { id: 'click_100', name: '–ö–ª–∏–∫–µ—Ä', description: '–°–¥–µ–ª–∞–π—Ç–µ 100 –∫–ª–∏–∫–æ–≤', target: 100, progress: 0, reward: 50, completed: false },
                        { id: 'earn_1000', name: '–ó–∞—Ä–∞–±–æ—Ç–æ–∫', description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 1000 Stars', target: 1000, progress: 0, reward: 100, completed: false },
                        { id: 'farm_5', name: '–§–∞—Ä–º–µ—Ä', description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞—Ä–º 5 —Ä–∞–∑', target: 5, progress: 0, reward: 75, completed: false }
                    ],
                    achievements: [
                        { id: 'first_click', name: '–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫', description: '–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫', target: 1, progress: 0, reward: 25, completed: false },
                        { id: 'rich_player', name: '–ë–æ–≥–∞—á', description: '–ù–∞–∫–æ–ø–∏—Ç–µ 10000 Stars', target: 10000, progress: 0, reward: 500, completed: false },
                        { id: 'click_master', name: '–ú–∞—Å—Ç–µ—Ä –∫–ª–∏–∫–æ–≤', description: '–°–¥–µ–ª–∞–π—Ç–µ 1000 –∫–ª–∏–∫–æ–≤', target: 1000, progress: 0, reward: 200, completed: false }
                    ]
                },
                settings: webappUser.settings || {
                    notifications: true,
                    sound: true,
                    autoSave: true
                },
                lastFarmAt: webappUser.lastFarmAt || null,
                farStarsooldownMs
            }
        });
    } catch (error) {
        console.error('WebApp user data error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/webapp/update-data', async (req, res) => {
    try {
        const { userId, magnuStarsoins, stars, level, experience, clickCount, upgrades, minerUpgrades, tasks, settings, cps, minerActive, lastFarmAt } = req.body;
        
        if (!userId) {
            return res.status(400).json({ error: 'User ID required' });
        }

        // –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        const updateData = { updatedAt: new Date() };
        if (typeof magnuStarsoins === 'number' && isFinite(magnuStarsoins) && magnuStarsoins >= 0) updateData.magnuStarsoins = magnuStarsoins;
        if (typeof stars === 'number' && isFinite(stars) && stars >= 0) updateData.stars = stars;
        if (typeof level === 'number' && isFinite(level) && level >= 1) updateData.level = Math.floor(level);
        if (typeof experience === 'number' && isFinite(experience) && experience >= 0) updateData.experience = Math.floor(experience);
        if (typeof clickCount === 'number' && isFinite(clickCount) && clickCount >= 0) updateData.clickCount = Math.floor(clickCount);
        if (typeof cps === 'number' && isFinite(cps) && cps >= 0) updateData.cps = cps;
        if (typeof minerActive === 'boolean') updateData.minerActive = minerActive;
        if (lastFarmAt) updateData.lastFarmAt = new Date(lastFarmAt);

        if (upgrades && typeof upgrades === 'object') updateData.upgrades = upgrades;
        if (minerUpgrades && typeof minerUpgrades === 'object') updateData.minerUpgrades = minerUpgrades;
        if (tasks && typeof tasks === 'object') updateData.tasks = tasks;
        if (settings && typeof settings === 'object') updateData.settings = settings;

        const result = await db.collection('webappUsers').updateOne(
            { userId: parseInt(userId) },
            { $set: updateData },
            { upsert: true }
        );

        console.log(`‚úÖ WebApp –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, result);

        res.json({ success: true, message: 'Data updated successfully' });
    } catch (error) {
        console.error('WebApp update data error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç —Ñ–∞—Ä–º–∞ —Å –∫—É–ª–¥–∞—É–Ω–æ–º
app.post('/api/webapp/farm', async (req, res) => {
    try {
        const { userId } = req.body;
        if (!userId) {
            return res.status(400).json({ error: 'User ID required' });
        }

        const farStarsooldownMs = (parseInt(process.env.WEBAPP_FARM_COOLDOWN_SEC || '5') || 5) * 1000;
        const now = Date.now();

        let webappUser = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        if (!webappUser) {
            return res.status(404).json({ error: 'User not found' });
        }

        const lastFarmAt = webappUser.lastFarmAt ? new Date(webappUser.lastFarmAt).getTime() : 0;
        const elapsed = now - lastFarmAt;
        const remainingMs = farStarsooldownMs - elapsed;
        if (remainingMs > 0) {
            return res.status(429).json({
                error: 'Cooldown',
                remainingMs,
                nextAvailableAt: now + remainingMs,
                farStarsooldownMs
            });
        }

        const reward = Math.max(1, webappUser.cps || 1);
        const updates = {
            $inc: { magnuStarsoins: reward, clickCount: 1, experience: 1 },
            $set: { lastFarmAt: new Date(now), updatedAt: new Date(now) }
        };
        await db.collection('webappUsers').updateOne({ userId: parseInt(userId) }, updates);

        const newBalance = (webappUser.magnuStarsoins || 0) + reward;

        return res.json({
            success: true,
            reward,
            magnuStarsoins: newBalance,
            nextAvailableAt: now + farStarsooldownMs,
            farStarsooldownMs
        });
    } catch (error) {
        console.error('WebApp farm error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞
app.post('/api/webapp/miner/toggle', async (req, res) => {
    try {
        const { userId, active } = req.body;
        if (!userId || typeof active !== 'boolean') {
            return res.status(400).json({ error: 'Bad request' });
        }
        await db.collection('webappUsers').updateOne(
            { userId: parseInt(userId) },
            { $set: { minerActive: active, updatedAt: new Date() } }
        );
        res.json({ success: true });
    } catch (error) {
        console.error('WebApp miner toggle error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç (Stars <-> Stars)
app.post('/api/webapp/exchange', async (req, res) => {
    try {
        const { userId, from, amount } = req.body;
        if (!userId || !from || typeof amount !== 'number' || amount <= 0) {
            return res.status(400).json({ error: 'Bad request' });
        }
        const user = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        if (!user) return res.status(404).json({ error: 'User not found' });

        const rate = await calculateExchangeRate();
        const commission = (config.EXCHANGE_COMMISSION || 2.5) / 100;

        let inc = { magnuStarsoins: 0, stars: 0 };
        let reserveInc = { magnuStarsoins: 0, stars: 0 };

        let received = 0;
        if (from === 'Stars') {
            if (user.magnuStarsoins < amount) return res.status(400).json({ error: 'Insufficient Stars' });
            const starsOut = amount * rate * (1 - commission);
            inc.magnuStarsoins -= amount;
            inc.stars += starsOut;
            reserveInc.magnuStarsoins += amount * commission;
            received = starsOut;
        } else if (from === 'stars') {
            if ((user.stars || 0) < amount) return res.status(400).json({ error: 'Insufficient Stars' });
            const StarsOut = (amount / rate) * (1 - commission);
            inc.stars -= amount;
            inc.magnuStarsoins += StarsOut;
            reserveInc.stars += amount * commission;
            received = StarsOut;
        } else {
            return res.status(400).json({ error: 'Unknown from' });
        }

        await db.collection('webappUsers').updateOne(
            { userId: parseInt(userId) },
            { $inc: inc, $set: { updatedAt: new Date() } }
        );

        await db.collection('reserve').updateOne(
            { currency: 'main' },
            { $inc: reserveInc },
            { upsert: true }
        );

        await db.collection('exchangeHistory').insertOne({
            userId: parseInt(userId), direction: from, amount, rate, received, commission: commission * 100, timestamp: new Date()
        });

        const updated = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        res.json({ success: true, rate, magnuStarsoins: updated.magnuStarsoins, stars: updated.stars });
    } catch (error) {
        console.error('WebApp exchange error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
app.post('/api/webapp/bonus', async (req, res) => {
    try {
        const { userId } = req.body;
        if (!userId) return res.status(400).json({ error: 'Bad request' });
        const user = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        if (!user) return res.status(404).json({ error: 'User not found' });
        const base = config.DAILY_BONUS_BASE || 10;
        const now = Date.now();
        const last = user.lastBonusAt ? new Date(user.lastBonusAt).getTime() : 0;
        const oneDay = 24 * 60 * 60 * 1000;
        if (now - last < oneDay) {
            return res.status(429).json({ error: 'Already claimed' });
        }
        const streak = (user.bonusStreak || 0) + (now - last < 2 * oneDay && last > 0 ? 1 : 1);
        const reward = base * (1 + Math.min(streak, 40) * 0.1);
        await db.collection('webappUsers').updateOne(
            { userId: parseInt(userId) },
            { $inc: { magnuStarsoins: Math.floor(reward) }, $set: { lastBonusAt: new Date(now), bonusStreak: streak, updatedAt: new Date(now) } }
        );
        const updated = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        res.json({ success: true, reward: Math.floor(reward), magnuStarsoins: updated.magnuStarsoins, bonusStreak: streak });
    } catch (error) {
        console.error('WebApp bonus error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
app.post('/api/webapp/promocode', async (req, res) => {
    try {
        const { userId, code } = req.body;
        if (!userId || !code) return res.status(400).json({ error: 'Bad request' });
        const promo = await db.collection('promocodes').findOne({ code: String(code).trim().toUpperCase(), isActive: true });
        if (!promo) return res.status(404).json({ error: 'Invalid code' });
        if (promo.expiresAt && new Date(promo.expiresAt).getTime() < Date.now()) return res.status(400).json({ error: 'Expired' });
        if (promo.maxActivations && (promo.activations || 0) >= promo.maxActivations) return res.status(400).json({ error: 'Limit reached' });

        await db.collection('webappUsers').updateOne(
            { userId: parseInt(userId) },
            { $inc: { magnuStarsoins: promo.reward || 0 }, $set: { updatedAt: new Date() } }
        );
        await db.collection('promocodes').updateOne(
            { _id: promo._id },
            { $inc: { activations: 1 } }
        );
        const updated = await db.collection('webappUsers').findOne({ userId: parseInt(userId) });
        res.json({ success: true, reward: promo.reward || 0, magnuStarsoins: updated.magnuStarsoins });
    } catch (error) {
        console.error('WebApp promocode error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// API —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
app.get('/api/webapp/exchange-rate', async (req, res) => {
    try {
        const rate = await calculateExchangeRate();
        res.json({ success: true, rate });
    } catch (error) {
        res.status(500).json({ success: false });
    }
});

// –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/webapp/exchange-history', async (req, res) => {
    try {
        const userId = parseInt(String(req.query.user_id||'0'));
        if (!userId) return res.status(400).json({ success:false });
        const items = await db.collection('exchangeHistory').find({ userId }).sort({ timestamp:-1 }).limit(50).toArray();
        res.json({ success:true, items });
    } catch (error) {
        res.status(500).json({ success:false });
    }
});

// API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
app.get('/api/bot-info', async (req, res) => {
    try {
        const username = process.env.BOT_PUBLIC_USERNAME || (bot?.botInfo?.username) || null;
        res.json({ success: true, username });
    } catch (error) {
        res.json({ success: true, username: null });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
app.get('/api/status', async (req, res) => {
    try {
        const botStatus = bot ? 'running' : 'not_initialized';
        const dbStatus = db ? 'connected' : 'disconnected';
        
        res.json({
            status: 'ok',
            bot: {
                status: botStatus,
                username: process.env.BOT_PUBLIC_USERNAME || (bot?.botInfo?.username) || null
            },
            database: {
                status: dbStatus,
                name: db ? db.databaseName : null
            },
            server: {
                uptime: process.uptime(),
                memory: process.memoryUsage(),
                timestamp: new Date().toISOString()
            },
            environment: process.env.NODE_ENV || 'development'
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∑–∞ 24 —á–∞—Å–∞
let exchangeRate24h = null;
let lastRateUpdate = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
async function calculateExchangeRate() {
  try {
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    if (!reserve) {
      return config.BASE_EXCHANGE_RATE;
    }
    
    const magnuStarsoinsReserve = reserve.magnuStarsoins || config.INITIAL_RESERVE_MAGNUM_COINS;
    const starsReserve = reserve.stars || config.INITIAL_RESERVE_STARS;
    
    // –†–∞—Å—á–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤
    const ratio = magnuStarsoinsReserve / starsReserve;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é —à–∫–∞–ª—É –¥–ª—è –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    let multiplier;
    if (ratio <= 1) {
      // –ï—Å–ª–∏ Stars –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ Stars, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–Ω–µ–π–Ω—É—é —à–∫–∞–ª—É
      multiplier = Math.max(0.001, ratio);
    } else {
      // –ï—Å–ª–∏ Stars –±–æ–ª—å—à–µ Stars, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é —à–∫–∞–ª—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
      const logRatio = Math.log(ratio) / Math.log(10); // log10
      multiplier = Math.max(0.001, 1 + logRatio * 2);
    }
    
    const dynamicRate = config.BASE_EXCHANGE_RATE * multiplier;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –∑–∞ 24 —á–∞—Å–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å
    const now = new Date();
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    
    if (!lastRateUpdate || lastRateUpdate < oneDayAgo) {
      exchangeRate24h = dynamicRate;
      lastRateUpdate = now;
      console.log(`üìÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫—É—Ä—Å –∑–∞ 24 —á–∞—Å–∞: ${dynamicRate.toFixed(6)}`);
      try {
        // [–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ] –ü–µ—Ä—Å–∏—Å—Ç–∏–º 24—á –∫—É—Ä—Å –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ MongoDB
        await db.collection('config').updateOne(
          { key: 'EXCHANGE_RATE_24H' },
          { $set: { value: exchangeRate24h, updatedAt: now } },
          { upsert: true }
        );
        await db.collection('config').updateOne(
          { key: 'LAST_RATE_UPDATE' },
          { $set: { value: lastRateUpdate.toISOString(), updatedAt: now } },
          { upsert: true }
        );
      } catch (e) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ –±–∞–∑—É:', e.message);
      }
    }
    
    console.log(`üí± –†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞:`, {
      magnuStarsoinsReserve: formatNumber(magnuStarsoinsReserve),
      starsReserve: formatNumber(starsReserve),
      ratio: ratio.toFixed(4),
      logRatio: ratio > 1 ? (Math.log(ratio) / Math.log(10)).toFixed(4) : 'N/A',
      multiplier: multiplier.toFixed(4),
      baseRate: config.BASE_EXCHANGE_RATE,
      dynamicRate: dynamicRate.toFixed(6),
      rate24h: exchangeRate24h ? exchangeRate24h.toFixed(6) : 'N/A'
    });
    
    return dynamicRate;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞:', error);
    return config.BASE_EXCHANGE_RATE;
  }
}
// ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
let db;
let client;

async function connectDB() {
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', {
      uri: config.MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      uriLength: config.MONGODB_URI?.length || 0
    });
    
    client = new MongoClient(config.MONGODB_URI);
    await client.connect();
    console.log('üîå MongoDB –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
    
    db = client.db();
    console.log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–∞');
    
    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', {
      databaseName: db.databaseName,
      collections: await db.listCollections().toArray().then(cols => cols.map(c => c.name))
    });
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users...');
    await db.collection('users').createIndex({ id: 1 }, { unique: true });
    await db.collection('users').createIndex({ username: 1 });
    await db.collection('users').createIndex({ 'miner.active': 1 });
    await db.collection('users').createIndex({ lastSeen: -1 });
    await db.collection('users').createIndex({ referrerId: 1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è users —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ promocodes...');
    await db.collection('promocodes').createIndex({ code: 1 }, { unique: true });
    await db.collection('promocodes').createIndex({ isActive: 1 });
    await db.collection('promocodes').createIndex({ expiresAt: 1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è promocodes —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ withdrawalRequests...');
    await db.collection('withdrawalRequests').createIndex({ userId: 1 });
    await db.collection('withdrawalRequests').createIndex({ status: 1 });
    await db.collection('withdrawalRequests').createIndex({ createdAt: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è withdrawalRequests —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ supportTickets...');
    await db.collection('supportTickets').createIndex({ userId: 1 });
    await db.collection('supportTickets').createIndex({ status: 1 });
    await db.collection('supportTickets').createIndex({ createdAt: -1 });
    await db.collection('supportTickets').createIndex({ id: 1 }, { unique: true });
    await db.collection('supportTickets').createIndex({ adminId: 1 });
    await db.collection('supportTickets').createIndex({ updatedAt: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è supportTickets —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ taskChecks...');
    await db.collection('taskChecks').createIndex({ userId: 1 });
    await db.collection('taskChecks').createIndex({ status: 1 });
    await db.collection('taskChecks').createIndex({ createdAt: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è taskChecks —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ dailyTasks...');
    await db.collection('dailyTasks').createIndex({ userId: 1 });
    await db.collection('dailyTasks').createIndex({ date: 1 });
    await db.collection('dailyTasks').createIndex({ completed: 1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è dailyTasks —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ exchangeHistory...');
    await db.collection('exchangeHistory').createIndex({ userId: 1 });
    await db.collection('exchangeHistory').createIndex({ timestamp: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è exchangeHistory —Å–æ–∑–¥–∞–Ω—ã');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ reserve...');
    try {
      await db.collection('reserve').createIndex({ currency: 1 }, { unique: true });
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è reserve —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      if (error.code === 11000) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏, —É–¥–∞–ª—è–µ–º –∏—Ö –∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞–Ω–æ–≤–æ
        console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–∑–µ—Ä–≤–µ...');
        const deleteResult = await db.collection('reserve').deleteMany({ currency: null });
        console.log('–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π:', { deletedCount: deleteResult.deletedCount });
        await db.collection('reserve').createIndex({ currency: 1 }, { unique: true });
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è reserve –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω');
      } else {
        throw error;
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ webappUsers
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ webappUsers...');
    await db.collection('webappUsers').createIndex({ userId: 1 }, { unique: true });
    await db.collection('webappUsers').createIndex({ updatedAt: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è webappUsers —Å–æ–∑–¥–∞–Ω—ã');
    console.log('‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    console.log('üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞...');
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤
    await initializeReserve();
    console.log('‚úÖ –†–µ–∑–µ—Ä–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', {
      databaseName: db.databaseName,
      collectionsCount: (await db.listCollections().toArray()).length
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    console.log('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', {
      error: error.message,
      stack: error.stack,
      mongoUri: config.MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    });
    process.exit(1);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞
async function initializeReserve() {
  try {
    // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    await db.collection('reserve').deleteMany({ currency: null });
    
    let reserve = await db.collection('reserve').findOne({ currency: 'main' });
    
    if (!reserve) {
      reserve = {
        currency: 'main',
        stars: config.INITIAL_RESERVE_STARS,
        magnuStarsoins: config.INITIAL_RESERVE_MAGNUM_COINS,
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      await db.collection('reserve').insertOne(reserve);
      console.log('üí∞ –†–µ–∑–µ—Ä–≤ –≤–∞–ª—é—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          } else {
        console.log('üí∞ –†–µ–∑–µ—Ä–≤ –≤–∞–ª—é—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞:', error);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function resetDatabase() {
  try {
    console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
    const collections = await db.listCollections().toArray();
    const collectionNames = collections.map(col => col.name);
    
    console.log('üìã –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', collectionNames);
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö
    for (const collectionName of collectionNames) {
      if (!collectionName.startsWith('system.')) {
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: ${collectionName}`);
        await db.collection(collectionName).drop();
      }
    }
    
    console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã');
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üìã –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
    await db.collection('users').createIndex({ id: 1 }, { unique: true });
    await db.collection('users').createIndex({ username: 1 });
    await db.collection('users').createIndex({ 'miner.active': 1 });
    await db.collection('users').createIndex({ lastSeen: -1 });
    await db.collection('users').createIndex({ referrerId: 1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ promocodes
    await db.collection('promocodes').createIndex({ code: 1 }, { unique: true });
    await db.collection('promocodes').createIndex({ isActive: 1 });
    await db.collection('promocodes').createIndex({ expiresAt: 1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ withdrawalRequests
    await db.collection('withdrawalRequests').createIndex({ userId: 1 });
    await db.collection('withdrawalRequests').createIndex({ status: 1 });
    await db.collection('withdrawalRequests').createIndex({ createdAt: -1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ supportTickets
    await db.collection('supportTickets').createIndex({ userId: 1 });
    await db.collection('supportTickets').createIndex({ status: 1 });
    await db.collection('supportTickets').createIndex({ createdAt: -1 });
    await db.collection('supportTickets').createIndex({ id: 1 }, { unique: true });
    await db.collection('supportTickets').createIndex({ adminId: 1 });
    await db.collection('supportTickets').createIndex({ updatedAt: -1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ taskChecks
    await db.collection('taskChecks').createIndex({ userId: 1 });
    await db.collection('taskChecks').createIndex({ status: 1 });
    await db.collection('taskChecks').createIndex({ createdAt: -1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ dailyTasks
    await db.collection('dailyTasks').createIndex({ userId: 1 });
    await db.collection('dailyTasks').createIndex({ date: 1 });
    await db.collection('dailyTasks').createIndex({ completed: 1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ exchangeHistory
    await db.collection('exchangeHistory').createIndex({ userId: 1 });
    await db.collection('exchangeHistory').createIndex({ timestamp: -1 });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞
    await db.collection('reserve').createIndex({ currency: 1 }, { unique: true });
    
    console.log('‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤ –∑–∞–Ω–æ–≤–æ
    console.log('üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞...');
    await initializeReserve();
    console.log('‚úÖ –†–µ–∑–µ—Ä–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à–∏
    userCache.clear();
    statsCache.clear();
    console.log('‚úÖ –ö–µ—à–∏ –æ—á–∏—â–µ–Ω—ã');
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!');
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// ==================== –ö–ï–®–ò–†–û–í–ê–ù–ò–ï ====================
const userCache = new Map();
const statsCache = new Map();

function getCachedUser(id) {
  const cached = userCache.get(id);
  if (cached && (Date.now() - cached.timestamp) < config.USER_CACHE_TTL) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (cached.user && typeof cached.user.magnuStarsoins === 'number' && typeof cached.user.stars === 'number' &&
        !isNaN(cached.user.magnuStarsoins) && !isNaN(cached.user.stars)) {
      return cached.user;
    } else {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã, —É–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞
      userCache.delete(id);
      console.warn(`üßπ –£–¥–∞–ª–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} (NaN –∏–ª–∏ null –∑–Ω–∞—á–µ–Ω–∏—è)`);
      return null;
    }
  }
  return null;
}

function setCachedUser(id, user) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –∫–µ—à
  if (user && typeof user.magnuStarsoins === 'number' && typeof user.stars === 'number' &&
      !isNaN(user.magnuStarsoins) && !isNaN(user.stars)) {
    userCache.set(id, { user, timestamp: Date.now() });
  } else {
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} –≤ –∫–µ—à:`, {
      magnuStarsoins: user?.magnuStarsoins,
      stars: user?.stars,
      type: typeof user?.magnuStarsoins,
      isNaN_magnuStarsoins: isNaN(user?.magnuStarsoins),
      isNaN_stars: isNaN(user?.stars)
    });
  }
}

function getCachedStats(key) {
  const cached = statsCache.get(key);
  if (cached && (Date.now() - cached.timestamp) < config.STATS_CACHE_TTL) {
    return cached.data;
  }
  return null;
}

function setCachedStats(key, data) {
  statsCache.set(key, { data, timestamp: Date.now() });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞
function cleanupInvalidCache() {
  const now = Date.now();
  let cleanedCount = 0;
  
  for (const [id, cached] of userCache.entries()) {
    if (cached && cached.user) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      if (typeof cached.user.magnuStarsoins !== 'number' || typeof cached.user.stars !== 'number' ||
          isNaN(cached.user.magnuStarsoins) || isNaN(cached.user.stars)) {
        userCache.delete(id);
        cleanedCount++;
        console.log(`üßπ –£–¥–∞–ª–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} (NaN –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)`);
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
      else if (now - cached.timestamp > config.USER_CACHE_TTL) {
        userCache.delete(id);
        cleanedCount++;
      }
    }
  }
  
  if (cleanedCount > 0) {
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  }
  
  return cleanedCount;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function clearUserCache(userId) {
  if (userCache.has(userId)) {
    userCache.delete(userId);
    console.log(`üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    return true;
  }
  return false;
}

// ==================== –£–¢–ò–õ–ò–¢–´ ====================
function escapeMarkdown(text) {
  if (!text) return '';
  return text
    .replace(/\*/g, '\\*')
    .replace(/\[/g, '\\[')
    .replace(/\]/g, '\\]')
    .replace(/\(/g, '\\(')
    .replace(/\)/g, '\\)')
    .replace(/~/g, '\\~')
    .replace(/`/g, '\\`')
    .replace(/>/g, '\\>')
    .replace(/#/g, '\\#')
    .replace(/\+/g, '\\+')
    .replace(/\|/g, '\\|')
    .replace(/\{/g, '\\{')
    .replace(/\}/g, '\\}')
    .replace(/!/g, '\\!');
}

function formatNumber(num) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ num —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
  if (num === null || num === undefined || isNaN(num)) {
    return '0,00';
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  num = Number(num);
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ü–µ–ª—É—é –∏ –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç–∏
  const [integerPart, decimalPart = '00'] = num.toFixed(2).split('.');
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á –∫ —Ü–µ–ª–æ–π —á–∞—Å—Ç–∏
  const formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
  return `${formattedInteger},${decimalPart}`;
}

function formatTime(seconds) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ seconds —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
  if (seconds === null || seconds === undefined || isNaN(seconds)) {
    return '0—Å';
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  seconds = Number(seconds);
  
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;
  
  if (hours > 0) {
    return `${hours}—á ${minutes}–º ${secs}—Å`;
  } else if (minutes > 0) {
    return `${minutes}–º ${secs}—Å`;
  }
  return `${secs}—Å`;
}

function calculateExperienceToNextLevel(level) {
  // –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –¥–ª—è 1 —É—Ä–æ–≤–Ω—è
  let baseExperience = 100;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—ã—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
  for (let i = 1; i < level; i++) {
    baseExperience = Math.floor(baseExperience * 1.2);
  }
  
  return baseExperience;
}

function getRankByLevel(level) {
  // –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω–µ–π
  if (level >= 100) return 'üëë –ò–º–ø–µ—Ä–∞—Ç–æ—Ä';
  if (level >= 80) return '‚öúÔ∏è –ö–æ—Ä–æ–ª—å';
  if (level >= 60) return 'üëë –ü—Ä–∏–Ω—Ü';
  if (level >= 40) return 'üõ°Ô∏è –†—ã—Ü–∞—Ä—å';
  if (level >= 30) return '‚öîÔ∏è –í–æ–∏–Ω';
  if (level >= 20) return 'üõ°Ô∏è –°—Ç—Ä–∞–∂';
  if (level >= 15) return 'üó°Ô∏è –û—Ö–æ—Ç–Ω–∏–∫';
  if (level >= 10) return 'üèπ –õ—É—á–Ω–∏–∫';
  if (level >= 5) return '‚öîÔ∏è –ë–æ–µ—Ü';
  return 'üõ°Ô∏è –†–µ–∫—Ä—É—Ç';
}

function getUserRank(user) {
  const level = user.level || 1;
  
  console.log(`üîç getUserRank –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, —É—Ä–æ–≤–µ–Ω—å: ${level}`);
  
  return getRankByLevel(level);
}

function getRankRequirements() {
  return [
    { level: 1, name: 'üõ°Ô∏è –†–µ–∫—Ä—É—Ç', requirement: '–ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥' },
    { level: 5, name: '‚öîÔ∏è –ë–æ–µ—Ü', requirement: '5 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 10, name: 'üèπ –õ—É—á–Ω–∏–∫', requirement: '10 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 15, name: 'üó°Ô∏è –û—Ö–æ—Ç–Ω–∏–∫', requirement: '15 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 20, name: 'üõ°Ô∏è –°—Ç—Ä–∞–∂', requirement: '20 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 30, name: '‚öîÔ∏è –í–æ–∏–Ω', requirement: '30 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 40, name: 'üõ°Ô∏è –†—ã—Ü–∞—Ä—å', requirement: '40 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 60, name: 'üëë –ü—Ä–∏–Ω—Ü', requirement: '60 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 80, name: '‚öúÔ∏è –ö–æ—Ä–æ–ª—å', requirement: '80 —É—Ä–æ–≤–µ–Ω—å' },
    { level: 100, name: 'üëë –ò–º–ø–µ—Ä–∞—Ç–æ—Ä', requirement: '100 —É—Ä–æ–≤–µ–Ω—å' }
  ];
}

async function getRankProgress(user) {
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
  const freshUser = await getUser(user.id);
  const level = freshUser ? (freshUser.level || 1) : (user.level || 1);
  const ranks = getRankRequirements();
  
  console.log(`üîç getRankProgress –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  console.log(`üîç –£—Ä–æ–≤–µ–Ω—å –∏–∑ freshUser: ${freshUser ? freshUser.level : 'null'}`);
  console.log(`üîç –£—Ä–æ–≤–µ–Ω—å –∏–∑ user: ${user.level}`);
  console.log(`üîç –ò—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${level}`);
  
  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥
  let currentRank = ranks[0];
  let nextRank = null;
  
  for (let i = ranks.length - 1; i >= 0; i--) {
    if (level >= ranks[i].level) {
      currentRank = ranks[i];
      if (i < ranks.length - 1) {
        nextRank = ranks[i + 1];
      }
      break;
    }
  }
  
  console.log(`üîç –ù–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: ${currentRank.name} (${currentRank.level})`);
  console.log(`üîç –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥: ${nextRank ? nextRank.name + ' (' + nextRank.level + ')' : '–ù–µ—Ç'}`);
  // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥
  if (!nextRank) {
    const result = {
      current: currentRank,
      next: null,
      progress: 100,
      remaining: 0,
      isMax: true
    };
    
    console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞:`, result);
    return result;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  if (nextRank.level <= currentRank.level) {
    console.error('–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–∞: nextRank.level <= currentRank.level', {
      currentRank,
      nextRank,
      userLevel: level,
      userId: user.id
    });
    return {
      current: currentRank,
      next: nextRank,
      progress: 0,
      remaining: nextRank.level - level,
      isMax: false
    };
  }
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const levelDifference = nextRank.level - currentRank.level;
  const userProgress = level - currentRank.level;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø—ã—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  const experienceProgress = freshUser ? (freshUser.experience / freshUser.experienceToNextLevel) : 0;
  const totalUserProgress = userProgress + experienceProgress;
  
  console.log(`üîç –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: levelDifference=${levelDifference}, userProgress=${userProgress}, experienceProgress=${experienceProgress.toFixed(2)}, totalUserProgress=${totalUserProgress.toFixed(2)}`);
  if (levelDifference <= 0) {
    console.error('–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–∞: levelDifference <= 0', {
      currentRank,
      nextRank,
      userLevel: level,
      levelDifference,
      userId: user.id
    });
    return {
      current: currentRank,
      next: nextRank,
      progress: 0,
      remaining: nextRank.level - level,
      isMax: false
    };
  }
  
  const progress = Math.min(100, Math.max(0, Math.round((totalUserProgress / levelDifference) * 100)));
  const remaining = Math.max(0, nextRank.level - level);
  
  const result = {
    current: currentRank,
    next: nextRank,
    progress: progress,
    remaining: remaining,
    isMax: false
  };
  
  console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, {
    level,
    currentRank: currentRank.name,
    nextRank: nextRank.name,
    progress,
    remaining,
    userProgress,
    experienceProgress: experienceProgress.toFixed(2),
    totalUserProgress: totalUserProgress.toFixed(2),
    levelDifference,
    calculation: `(${totalUserProgress.toFixed(2)} / ${levelDifference}) * 100 = ${progress}%`
  });
  
  return result;
}

function isAdmin(userId) {
  return config.ADMIN_IDS.includes(userId);
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkAndUpdateLevel(user) {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: –æ–ø—ã—Ç ${user.experience}/${user.experienceToNextLevel}, —É—Ä–æ–≤–µ–Ω—å ${user.level}`);
    
    let levelUp = false;
    let newLevel = user.level || 1;
    let newExperience = user.experience || 0;
    let newExperienceToNextLevel = user.experienceToNextLevel || 100;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    while (newExperience >= newExperienceToNextLevel) {
      levelUp = true;
      newExperience -= newExperienceToNextLevel;
      newLevel++;
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
      newExperienceToNextLevel = Math.floor(newExperienceToNextLevel * 1.2);
      
      console.log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ ${newLevel}! –û—Å—Ç–∞–ª–æ—Å—å –æ–ø—ã—Ç–∞: ${newExperience}/${newExperienceToNextLevel}`);
    }
    
    // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (levelUp) {
      await db.collection('users').updateOne(
        { id: user.id },
        { 
          $set: { 
            level: newLevel,
            experience: newExperience,
            experienceToNextLevel: newExperienceToNextLevel,
            updatedAt: new Date()
          }
        }
      );
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
      userCache.delete(user.id);
      
      console.log(`‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –æ–±–Ω–æ–≤–ª–µ–Ω: ${newLevel}, –æ–ø—ã—Ç: ${newExperience}/${newExperienceToNextLevel}`);
    }
    
    return { levelUp, newLevel, newExperience, newExperienceToNextLevel };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
    return { levelUp: false, newLevel: user.level, newExperience: user.experience, newExperienceToNextLevel: user.experienceToNextLevel };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è
function getRequiredExperience(level) {
  let requiredExp = 100; // –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –¥–ª—è 1 —É—Ä–æ–≤–Ω—è
  
  for (let i = 2; i <= level; i++) {
    requiredExp = Math.floor(requiredExp * 1.2);
  }
  
  return requiredExp;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–∞
async function debugRankProgress(user) {
  const level = user.level || 1;
  const ranks = getRankRequirements();
  
  console.log(`üîç –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`);
  console.log(`‚îú –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${level}`);
  console.log(`‚îú –í—Å–µ —Ä–∞–Ω–≥–∏:`, ranks.map(r => `${r.name} (${r.level})`));
  
  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥
  let currentRank = ranks[0];
  let nextRank = null;
  
  for (let i = ranks.length - 1; i >= 0; i--) {
    if (level >= ranks[i].level) {
      currentRank = ranks[i];
      if (i < ranks.length - 1) {
        nextRank = ranks[i + 1];
      }
      break;
    }
  }
  
  console.log(`‚îú –¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: ${currentRank.name} (${currentRank.level})`);
  console.log(`‚îú –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥: ${nextRank ? nextRank.name + ' (' + nextRank.level + ')' : '–ù–µ—Ç (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)'}`);
  
  if (nextRank) {
    const levelDifference = nextRank.level - currentRank.level;
    const userProgress = level - currentRank.level;
    const progress = Math.min(100, Math.max(0, Math.round((userProgress / levelDifference) * 100)));
    
    console.log(`‚îú –†–∞–∑–Ω–∏—Ü–∞ —É—Ä–æ–≤–Ω–µ–π: ${levelDifference}`);
    console.log(`‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userProgress}`);
    console.log(`‚îú –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${progress}%`);
    console.log(`‚îî –û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–≤–Ω–µ–π: ${nextRank.level - level}`);
  } else {
    console.log(`‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞`);
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é getRankProgress
  const rankProgress = await getRankProgress(user);
  console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç getRankProgress:`, rankProgress);
}
// ==================== –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function ensureUserFields(user) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  if (!user.statistics) {
    user.statistics = {
      joinDate: user.createdAt || new Date(),
      lastSeen: new Date(),
      totalSessions: 1,
      totalActions: 0,
      favoriteAction: null
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–µ—Ä–º—É
  if (!user.farm) {
    user.farm = {
      lastFarm: null,
      farStarsount: 0,
      totalFarmEarnings: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–π–Ω–µ—Ä
  if (!user.miner) {
    user.miner = {
      active: false,
      level: 1,
      efficiency: 1,
      lastReward: null,
      totalMined: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
  if (!user.dailyBonus) {
    user.dailyBonus = {
      lastBonus: null,
      streak: 0,
      maxStreak: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–º–µ–Ω
  if (!user.exchange) {
    user.exchange = {
      totalExchanged: 0,
      exchangeCount: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
  if (!user.withdrawal) {
    user.withdrawal = {
      totalWithdrawn: 0,
      withdrawalCount: 0,
      pendingAmount: 0
    };
  }
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è
  if (!user.tasks) {
    user.tasks = {
      dailyTasks: [],
      sponsorTasks: [],
      lastDailyTasksReset: null,
      completedTasks: 0,
      totalTaskEarnings: 0
    };
  }
  
  // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (user.tasks && (user.tasks.completedTasksCount !== undefined || user.tasks.totalTaskRewards !== undefined)) {
    if (user.tasks.completedTasksCount !== undefined) {
      user.tasks.completedTasks = user.tasks.completedTasksCount;
      delete user.tasks.completedTasksCount;
    }
    if (user.tasks.totalTaskRewards !== undefined) {
      user.tasks.totalTaskEarnings = user.tasks.totalTaskRewards;
      delete user.tasks.totalTaskRewards;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
  if (!user.support) {
    user.support = {
      ticketsCount: 0,
      lastTicket: null
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  if (!user.settings) {
    user.settings = {
      notifications: true,
      language: 'ru',
      theme: 'default'
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  if (!user.achievements) {
    user.achievements = [];
  }
  
  if (!user.achievementsCount) {
    user.achievementsCount = 0;
  }
  
  if (!user.achievementsProgress) {
    user.achievementsProgress = {};
  }
  
  if (!user.titles) {
    user.titles = ['üå± –ù–æ–≤–∏—á–æ–∫'];
  }
  
  if (!user.mainTitle) {
    user.mainTitle = 'üå± –ù–æ–≤–∏—á–æ–∫';
  }
  
  if (!user.referrals) {
    user.referrals = [];
  }
  
  if (!user.referralsCount) {
    user.referralsCount = 0;
  }
  
  if (!user.totalReferralEarnings) {
    user.totalReferralEarnings = 0;
  }
  
  if (!user.totalEarnedStars) {
    user.totalEarnedStars = user.stars || 0;
  }
  
  if (!user.totalEarnedMagnuStarsoins) {
    user.totalEarnedMagnuStarsoins = user.magnuStarsoins || 0;
  }
  
  if (!user.level) {
    user.level = 1;
  }
  
  if (!user.experience) {
    user.experience = 0;
  }
  
  if (!user.experienceToNextLevel) {
    user.experienceToNextLevel = 100;
  }
  
  if (!user.rank) {
    user.rank = getUserRank(user);
  }
  
  if (!user.referralCode) {
    user.referralCode = generateReferralCode();
  }
  
  return user;
}
async function getUser(id, ctx = null) {
  try {
    logFunction('getUser', id, { ctx: ctx ? 'present' : 'null' });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if (!id || isNaN(parseInt(id))) {
      console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${id}`);
      return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = getCachedUser(id);
    if (cached) {
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (cached.banned) {
        if (ctx) {
          await ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }
        return null;
      }
      return cached;
    }

    let user = await db.collection('users').findOne({ id: id });
    
    if (!user) {
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = {
        id: id,
        username: ctx?.from?.username || null,
        firstName: ctx?.from?.first_name || null,
        lastName: ctx?.from?.last_name || null,
        stars: config.INITIAL_STARS,
        magnuStarsoins: config.INITIAL_MAGNUM_COINS,
        totalEarnedStars: config.INITIAL_STARS,
        totalEarnedMagnuStarsoins: config.INITIAL_MAGNUM_COINS,
        level: 1,
        experience: 0,
        experienceToNextLevel: 100,
        rank: getUserRank({ stars: config.INITIAL_STARS }),
        mainTitle: 'üå± –ù–æ–≤–∏—á–æ–∫',
        titles: ['üå± –ù–æ–≤–∏—á–æ–∫'],
        achievements: [],
        achievementsCount: 0,
        achievementsProgress: {},
        referralCode: generateReferralCode(),
        referrerId: null,
        referrals: [],
        referralsCount: 0,
        totalReferralEarnings: 0,
        farm: {
          lastFarm: null,
          farStarsount: 0,
          totalFarmEarnings: 0
        },
        miner: {
          active: false,
          level: 1,
          efficiency: 1,
          lastReward: null,
          totalMined: 0
        },
        dailyBonus: {
          lastBonus: null,
          streak: 0,
          maxStreak: 0
        },
        exchange: {
          totalExchanged: 0,
          exchangeCount: 0
        },
        withdrawal: {
          totalWithdrawn: 0,
          withdrawalCount: 0,
          pendingAmount: 0
        },
        tasks: {
          dailyTasks: [],
          sponsorTasks: [],
          lastDailyTasksReset: null,
          completedTasks: 0,
          totalTaskEarnings: 0
        },
        support: {
          ticketsCount: 0,
          lastTicket: null
        },
        settings: {
          notifications: true,
          language: 'ru',
          theme: 'default'
        },
        statistics: {
          joinDate: new Date(),
          lastSeen: new Date(),
          totalSessions: 1,
          totalActions: 0,
          favoriteAction: null
        },
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      await db.collection('users').insertOne(user);
    } else {
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (user.banned) {
        if (ctx) {
          await ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }
        return null;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
      user = ensureUserFields(user);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const oldLastSeen = user.statistics?.lastSeen;
      const oldSessions = user.statistics?.totalSessions || 0;
      user.statistics.lastSeen = new Date();
      user.statistics.totalSessions = oldSessions + 1;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      const updateData = { 
        'statistics.lastSeen': user.statistics.lastSeen,
        'statistics.totalSessions': user.statistics.totalSessions,
        updatedAt: new Date()
      };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ username, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      if (ctx?.from?.first_name) {
        updateData.firstName = ctx.from.first_name;
        user.firstName = ctx.from.first_name;
      }
      if (ctx?.from?.last_name) {
        updateData.lastName = ctx.from.last_name;
        user.lastName = ctx.from.last_name;
      }
      if (ctx?.from?.username) {
        updateData.username = ctx.from.username;
        user.username = ctx.from.username;
      }
      
      await db.collection('users').updateOne(
        { id: id },
        { $set: updateData }
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    if (typeof user.magnuStarsoins !== 'number' || typeof user.stars !== 'number' || 
        isNaN(user.magnuStarsoins) || isNaN(user.stars)) {
      console.error(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, {
        magnuStarsoins: user.magnuStarsoins,
        stars: user.stars,
        type: typeof user.magnuStarsoins,
        isNaN_magnuStarsoins: isNaN(user.magnuStarsoins),
        isNaN_stars: isNaN(user.stars)
      });
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      user.magnuStarsoins = (typeof user.magnuStarsoins === 'number' && !isNaN(user.magnuStarsoins)) ? user.magnuStarsoins : config.INITIAL_MAGNUM_COINS;
      user.stars = (typeof user.stars === 'number' && !isNaN(user.stars)) ? user.stars : config.INITIAL_STARS;
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      clearUserCache(id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await db.collection('users').updateOne(
        { id: id },
        { 
          $set: { 
            magnuStarsoins: user.magnuStarsoins,
            stars: user.stars,
            updatedAt: new Date()
          }
        }
      );
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    setCachedUser(id, user);
    return user;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, error);
    console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, {
      error: error.message,
      stack: error.stack
    });
    return null;
  }
}

function generateReferralCode() {
  return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getDisplayName(user) {
  if (user.firstName) {
    return user.firstName;
  }
  if (user.username) {
    return `@${user.username}`;
  }
  return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function formatProfileMessage(user, rankProgress) {
  let rankInfo = `‚îú –†–∞–Ω–≥: ${rankProgress.current.name}\n`;
  if (!rankProgress.isMax) {
    rankInfo += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: ${rankProgress.progress}% (${rankProgress.remaining} —É—Ä. –¥–æ ${rankProgress.next.name})\n`;
  } else {
    rankInfo += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥! üéâ\n`;
  }
  
  return `üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!*\n\n` +
    `üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n` +
    `‚îú ID: \`${user.id}\`\n` +
    `‚îú –ò–º—è: ${getDisplayName(user)}\n` +
    `‚îú –£—Ä–æ–≤–µ–Ω—å: ${user.level}\n` +
    `${rankInfo}` +
    `‚îî –¢–∏—Ç—É–ª: ${user.mainTitle}\n\n` +
    `üíé *–ë–∞–ª–∞–Ω—Å:*\n` +
    `‚îú ‚≠ê Stars: \`${formatNumber(user.stars)}\`\n` +
    `‚îî ü™ô Stars: \`${formatNumber(user.magnuStarsoins)}\`\n\n` +
    `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
    `‚îú –û–ø—ã—Ç: \`${user.experience}/${user.experienceToNextLevel}\`\n` +
    `‚îî –†–µ—Ñ–µ—Ä–∞–ª—ã: \`${user.referralsCount}\`\n\n` +
    `üì± *–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*\n` +
    `‚îú [üì∞ –ù–æ–≤–æ—Å—Ç–∏](https://t.me/magnumtap)\n` +
    `‚îú [üí∞ –í—ã–≤–æ–¥—ã](https://t.me/magnumwithdraw)\n` +
    `‚îî [üí¨ –ß–∞—Ç](https://t.me/magnumtapchat)\n\n` +
    `‚ö†Ô∏è *–ù–∞—à–ª–∏ –æ—à–∏–±–∫—É?*\n` +
    `‚îú –°–æ–æ–±—â–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ!\n` +
    `‚îú FAQ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n` +
    `‚îî –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
}

// ==================== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ====================
async function checkSubscription(ctx) {
  try {
    if (!config.REQUIRED_CHANNEL) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (!config.REQUIRED_CHANNEL.startsWith('@') && !config.REQUIRED_CHANNEL.startsWith('https://t.me/')) {
      console.log('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞:', config.REQUIRED_CHANNEL);
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ctx.from.id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!ctx.from || !ctx.from.id) {
      console.error('‚ùå ctx.from.id –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return true;
    }
    
    const member = await ctx.telegram.getChatMember(config.REQUIRED_CHANNEL, ctx.from.id);
    return ['creator', 'administrator', 'member'].includes(member.status);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      channel: config.REQUIRED_CHANNEL,
      userId: ctx.from?.id,
      error: error.message,
      stack: error.stack
    });
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    return true;
  }
}
async function showSubscriptionMessage(ctx) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (!config.REQUIRED_CHANNEL || (!config.REQUIRED_CHANNEL.startsWith('@') && !config.REQUIRED_CHANNEL.startsWith('https://t.me/'))) {
      console.log('‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:', config.REQUIRED_CHANNEL);
      // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      const user = await getUser(ctx.from.id);
      if (user) {
        await showMainMenu(ctx, user);
      }
      return;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–Ω–∞–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Ñ–æ—Ä–º–∞—Ç
    let channelUrl = config.REQUIRED_CHANNEL;
    if (channelUrl.startsWith('@')) {
      channelUrl = `https://t.me/${channelUrl.substring(1)}`;
    } else if (!channelUrl.startsWith('https://')) {
      channelUrl = `https://t.me/${channelUrl}`;
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', channelUrl)],
      [Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'check_subscription')]
    ]);
    
    await ctx.reply(
      `üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n` +
      `üì¢ –ö–∞–Ω–∞–ª: ${config.REQUIRED_CHANNEL}\n\n` +
      `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"`,
      { reply_markup: keyboard.reply_markup }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:', error);
    console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      channel: config.REQUIRED_CHANNEL,
      userId: ctx.from?.id,
      error: error.message,
      stack: error.stack
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try {
      const user = await getUser(ctx.from.id);
      if (user) {
        await showMainMenu(ctx, user);
      }
    } catch (fallbackError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', fallbackError);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}
// ==================== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ====================
async function handleReferral(userId, referrerId) {
  try {
    console.log(`üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${userId} -> ${referrerId}`);
    console.log(`üîç –î–µ—Ç–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:`, {
      userId: userId,
      referrerId: referrerId,
      userIdType: typeof userId,
      referrerIdType: typeof referrerId
    });
    
    if (userId === referrerId) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º');
      return;
    }
    
    const user = await getUser(userId);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω:`, {
      id: user.id,
      referrerId: user.referrerId,
      referralsCount: user.referralsCount
    });
    
    if (user.referrerId) {
      console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä:', user.referrerId);
      return;
    }
    
    const referrer = await getUser(referrerId);
    console.log(`üë§ –†–µ—Ñ–µ—Ä–µ—Ä –ø–æ–ª—É—á–µ–Ω:`, {
      id: referrer.id,
      referralsCount: referrer.referralsCount,
      referralsEarnings: referrer.referralsEarnings,
      totalReferralEarnings: referrer.totalReferralEarnings
    });
    
    if (!referrer) {
      console.log('‚ùå –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: userId },
      { 
        $set: { 
          referrerId: referrerId,
          updatedAt: new Date()
        }
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π
    const referralReward = config.REFERRAL_REWARD; // 5 Stars –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    await db.collection('users').updateOne(
      { id: referrerId },
      { 
        $inc: { 
          referralsCount: 1,
          totalReferralEarnings: referralReward,
          referralsEarnings: referralReward, // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          stars: referralReward, // –ù–∞—á–∏—Å–ª—è–µ–º Stars –≤–º–µ—Å—Ç–æ Stars
          totalEarnedStars: referralReward
        },
        $push: { referrals: userId },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(userId);
    userCache.delete(referrerId);
    
    console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${userId} -> ${referrerId}`);
    console.log(`üí∞ –ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞: ${referralReward} Stars`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    try {
      const referrerUser = await getUser(referrerId);
      const newUser = await getUser(userId);
      
      const notificationMessage = 
        `üéâ *–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${newUser.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
        `üÜî ID: \`${userId}\`\n` +
        `‚≠ê –ù–∞–≥—Ä–∞–¥–∞: +${formatNumber(referralReward)} Stars\n\n` +
        `üìä –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrerUser.referralsCount}\n` +
        `üíé –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${formatNumber(referrerUser.referralsEarnings || referrerUser.totalReferralEarnings || 0)} Stars`;
      
      await bot.telegram.sendMessage(referrerId, notificationMessage, {
        parse_mode: 'Markdown'
      });
      
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä—É ${referrerId}`);
    } catch (notifyError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É:', notifyError);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      const welcomeMessage = 
        `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!*\n\n` +
        `üë• –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n` +
        `üë§ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${referrer.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
        `üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏: +${formatNumber(config.INITIAL_MAGNUM_COINS)} Stars\n\n` +
        `üéÆ –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;
      
      await bot.telegram.sendMessage(userId, welcomeMessage, {
        parse_mode: 'Markdown'
      });
      
      console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    } catch (welcomeError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', welcomeError);
    }
    
    console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${userId} -> ${referrerId}`);
    console.log(`üí∞ –ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞: ${referralReward} Stars`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
    logError(error, '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
  }
}
// ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================
async function showMainMenu(ctx, user) {
  try {
    log(`üè† –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const rankProgress = await getRankProgress(user);
    log(`üè† –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (—Ä–∞–±–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏)
    const buttons = [
      [
        Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä', 'miner'),
        Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')
      ],
      [
        Markup.button.callback('üîë –ö–ª—é—á–∏', 'promocode'),
        Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')
      ],
      [
        Markup.button.callback('üó∫Ô∏è –†–æ–∞–¥–º–∞–ø', 'roadmap'),
        Markup.button.callback('üìà –ë–∏—Ä–∂–∞', 'exchange')
      ],
      [
        Markup.button.callback('üí∞ –í—ã–≤–æ–¥', 'withdrawal')
      ]
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±–æ–Ω—É—Å–∞
    if (isAdmin(user.id)) {
      buttons.splice(3, 0, [
        Markup.button.webApp('üéÅ –ë–æ–Ω—É—Å', `${config.WEBAPP_URL || 'https://your-domain.com'}/webapp`)
      ]);
    } else {
      buttons.splice(3, 0, [
        Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus_user')
      ]);
    }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (isAdmin(user.id)) {
    buttons.push([
      Markup.button.callback('üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')
    ]);
  }
  
  const keyboard = Markup.inlineKeyboard(buttons);
  
  const message = formatProfileMessage(user, rankProgress);
  
  try {
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (editError) {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ`);
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  }
  
  log(`‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    log(`‚ùå –û—à–∏–±–∫–∞ –≤ showMainMenu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${error.message}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ answerCbQuery –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if (ctx.answerCbQuery) {
      try {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é');
      } catch (cbError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ answerCbQuery:', cbError);
      }
    }
  }
}

async function showMainMenuStart(ctx, user) {
  try {
    const rankProgress = await getRankProgress(user);
  
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (—Ä–∞–±–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏)
    const buttons = [
      [
        Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä', 'miner'),
        Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')
      ],
      [
        Markup.button.callback('üîë –ö–ª—é—á–∏', 'promocode'),
        Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')
      ],
      [
        Markup.button.callback('üó∫Ô∏è –†–æ–∞–¥–º–∞–ø', 'roadmap'),
        Markup.button.callback('üìà –ë–∏—Ä–∂–∞', 'exchange')
      ],
      [
        Markup.button.callback('üí∞ –í—ã–≤–æ–¥', 'withdrawal')
      ]
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±–æ–Ω—É—Å–∞
    if (isAdmin(user.id)) {
      buttons.splice(3, 0, [
        Markup.button.webApp('üéÅ –ë–æ–Ω—É—Å', `${config.WEBAPP_URL || 'https://your-domain.com'}/webapp`)
      ]);
    } else {
      buttons.splice(3, 0, [
        Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus_user')
      ]);
    }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (isAdmin(user.id)) {
    buttons.push([
      Markup.button.callback('üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')
    ]);
  }
  
  const keyboard = Markup.inlineKeyboard(buttons);
  
  const message = formatProfileMessage(user, rankProgress);
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
    console.log(`–û—à–∏–±–∫–∞ –≤ showMainMenuStart:`, {
      userId: user.id,
      error: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } catch (replyError) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, replyError);
    }
  }
}

// ==================== –†–û–ê–î–ú–ê–ü ====================
async function showRoadmap(ctx, user) {
  try {
    log(`üó∫Ô∏è –ü–æ–∫–∞–∑ —Ä–æ–∞–¥–º–∞–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üöÄ Q4 2025 (–ë–æ—Ç)', 'roadmap_q4_2025'),
        Markup.button.callback('üéØ Q1 2026 (WebApp)', 'roadmap_q1_2026')
      ],
      [
        Markup.button.callback('üåü Q2 2026 (WebApp)', 'roadmap_q2_2026'),
        Markup.button.callback('üî• Q3 2026 (WebApp)', 'roadmap_q3_2026')
      ],
      [
        Markup.button.callback('üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (‚è≥)', 'roadmap_suggestions')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üó∫Ô∏è *–†–æ–∞–¥–º–∞–ø —Ä–∞–∑–≤–∏—Ç–∏—è Magnum Stars*\n\n` +
      `üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–µ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!*\n\n` +
      `üî¨ *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: Beta-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞*\n` +
      `üìÖ *–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: 28 –∞–≤–≥—É—Å—Ç–∞ 2025*\n\n` +
      `üìÖ *–ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è:*\n` +
      `‚îú üöÄ Q4 2025 - –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ë–æ—Ç)\n` +
      `‚îú üéØ Q1 2026 - WebApp –ø–µ—Ä–µ—Ö–æ–¥\n` +
      `‚îú üåü Q2 2026 - –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ (WebApp)\n` +
      `‚îî üî• Q3 2026 - –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ (WebApp)\n\n` +
      `üéÆ *–ß—Ç–æ –Ω–∞—Å –∂–¥–µ—Ç:*\n` +
      `‚îú üè∞ –°–∏—Å—Ç–µ–º–∞ –≥–∏–ª—å–¥–∏–π\n` +
      `‚îú ‚öîÔ∏è PvP —Å—Ä–∞–∂–µ–Ω–∏—è\n` +
      `‚îú üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã –∏ —Ç—É—Ä–Ω–∏—Ä—ã\n` +
      `‚îú üé® –°–∏—Å—Ç–µ–º–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏\n` +
      `‚îú üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∏—Ä–∂–∞\n` +
      `‚îú üé≠ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è\n` +
      `‚îú üåç –ú–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–∞—è\n` +
      `‚îî üíé NFT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\n\n` +
      `üì± *WebApp –ø–µ—Ä–µ—Ö–æ–¥:*\n` +
      `‚îú üîÑ –°–µ–Ω—Ç—è–±—Ä—å - –ù–æ—è–±—Ä—å 2025: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n` +
      `‚îú üöÄ 22 –Ω–æ—è–±—Ä—è 2025: –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ WebApp\n` +
      `‚îî üì± –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ - —Ç–æ–ª—å–∫–æ WebApp!\n\n` +
      `üí° *–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ!*\n` +
      `‚îú üìä –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ —Ñ—É–Ω–∫—Ü–∏–∏\n` +
      `‚îî üí° –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∏–¥–µ–∏\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∞–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –†–æ–∞–¥–º–∞–ø –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Ä–æ–∞–¥–º–∞–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–æ–∞–¥–º–∞–ø–∞');
  }
}

// ==================== –î–ï–¢–ê–õ–¨–ù–´–ï –†–û–ê–î–ú–ê–ü–´ ====================
async function showRoadmapQ4_2025(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∞–¥–º–∞–ø—É', 'roadmap')]
    ]);
    
    const message = 
      `üöÄ *Q4 2025 - –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ë–æ—Ç)*\n\n` +
      `üìÖ *–ê–≤–≥—É—Å—Ç - –î–µ–∫–∞–±—Ä—å 2025*\n` +
      `ü§ñ *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram Bot*\n\n` +
      `‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–æ:*\n` +
      `‚îú üåæ –°–∏—Å—Ç–µ–º–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞\n` +
      `‚îú üìà –ë–∏—Ä–∂–∞ Magnum Exchange\n` +
      `‚îú ‚õèÔ∏è –ú–∞–π–Ω–µ—Ä —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏\n` +
      `‚îú üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã\n` +
      `‚îú üìã –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π\n` +
      `‚îú üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n` +
      `‚îú üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n` +
      `‚îú üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã\n` +
      `‚îú üëë –°–∏—Å—Ç–µ–º–∞ —Ç–∏—Ç—É–ª–æ–≤\n` +
      `‚îî üí∞ –°–∏—Å—Ç–µ–º–∞ –≤—ã–≤–æ–¥–∞\n\n` +
      `üîÑ *–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:*\n` +
      `‚îú üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n` +
      `‚îú üé® –£–ª—É—á—à–µ–Ω–Ω—ã–π UI/UX\n` +
      `‚îî ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n` +
      `üì± *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ WebApp:*\n` +
      `‚îú üîÑ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞\n` +
      `‚îú üì± –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ WebApp\n` +
      `‚îî üé® –î–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞\n\n` +
      `üöÄ *WebApp –ø–µ—Ä–µ—Ö–æ–¥:*\n` +
      `‚îî 22 –Ω–æ—è–±—Ä—è 2025\n\n` +
      `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å: 85%*\n` +
      `üéØ *–ó–∞–ø—É—Å–∫: 28 –∞–≤–≥—É—Å—Ç–∞ 2025*`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–æ–∞–¥–º–∞–ø–∞ Q4 2024');
  }
}

async function showRoadmapQ1_2026(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∞–¥–º–∞–ø—É', 'roadmap')]
    ]);
    
    const message = 
      `üéØ *Q1 2026 - –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (WebApp)*\n\n` +
      `üìÖ *–Ø–Ω–≤–∞—Ä—å - –ú–∞—Ä—Ç 2026*\n` +
      `üì± *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram WebApp*\n\n` +
      `üîÑ *WebApp –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:*\n` +
      `‚îú üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π\n` +
      `‚îú üîÑ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n` +
      `‚îú üîÑ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI/UX\n` +
      `‚îî üîÑ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n` +
      `üè∞ *–°–∏—Å—Ç–µ–º–∞ –≥–∏–ª—å–¥–∏–π:*\n` +
      `‚îú –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∏–ª—å–¥–∏—è–º–∏\n` +
      `‚îú –û–±—â–∏–π –±–∞–Ω–∫ –≥–∏–ª—å–¥–∏–∏\n` +
      `‚îú –ì–∏–ª—å–¥–µ–π—Å–∫–∏–µ —á–∞—Ç—ã\n` +
      `‚îî –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤ –≤ –≥–∏–ª—å–¥–∏–∏\n\n` +
      `üí¨ *–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n` +
      `‚îú –í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π —á–∞—Ç\n` +
      `‚îú –°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑–µ–π\n` +
      `‚îú –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n` +
      `‚îî –≠–º–æ–¥–∑–∏ –∏ —Å—Ç–∏–∫–µ—Ä—ã\n\n` +
      `üé≠ *–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:*\n` +
      `‚îú –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è\n` +
      `‚îú –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤\n` +
      `‚îú –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã\n` +
      `‚îî –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫\n\n` +
      `üì± *WebApp –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*\n` +
      `‚îú üîî Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n` +
      `‚îú üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n` +
      `‚îú üé® –¢–µ–º–Ω–∞—è/—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞\n` +
      `‚îî üì± PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n` +
      `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å: 15%*\n` +
      `üéØ *–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 22 –Ω–æ—è–±—Ä—è 2025*`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–æ–∞–¥–º–∞–ø–∞ Q1 2025');
  }
}

async function showRoadmapQ2_2026(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∞–¥–º–∞–ø—É', 'roadmap')]
    ]);
    
    const message = 
      `üåü *Q2 2026 - –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ (WebApp)*\n\n` +
      `üìÖ *–ê–ø—Ä–µ–ª—å - –ò—é–Ω—å 2026*\n` +
      `üì± *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram WebApp*\n\n` +
      `‚öîÔ∏è *PvP —Å–∏—Å—Ç–µ–º–∞:*\n` +
      `‚îú –î—É—ç–ª–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏\n` +
      `‚îú –¢—É—Ä–Ω–∏—Ä—ã —Å –ø—Ä–∏–∑–æ–≤—ã–º–∏ —Ñ–æ–Ω–¥–∞–º–∏\n` +
      `‚îú –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞\n` +
      `‚îî –ö–æ–º–∞–Ω–¥–Ω—ã–µ –±–∏—Ç–≤—ã\n\n` +
      `üé≤ *–ú–∏–Ω–∏-–∏–≥—Ä—ã –∏ —Ç—É—Ä–Ω–∏—Ä—ã:*\n` +
      `‚îú –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã\n` +
      `‚îú –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏\n` +
      `‚îú –°–ª–æ–≤–µ—Å–Ω—ã–µ –∏–≥—Ä—ã\n` +
      `‚îî –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã\n\n` +
      `üé® *–°–∏—Å—Ç–µ–º–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏:*\n` +
      `‚îú –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã\n` +
      `‚îú –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–∞–º–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n` +
      `‚îú –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã\n` +
      `‚îî –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏\n\n` +
      `üì± *WebApp –∏–≥—Ä—ã:*\n` +
      `‚îú üéÆ –ò–≥—Ä—ã –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n` +
      `‚îú üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Ä–µ–∂–∏–º\n` +
      `‚îú üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã\n` +
      `‚îî üîÑ Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n\n` +
      `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%*\n` +
      `üéØ *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: WebApp —Ç–æ–ª—å–∫–æ*`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–æ–∞–¥–º–∞–ø–∞ Q2 2025');
  }
}

async function showRoadmapQ3_2026(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∞–¥–º–∞–ø—É', 'roadmap')]
    ]);
    
    const message = 
      `üî• *Q3 2026 - –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ (WebApp)*\n\n` +
      `üìÖ *–ò—é–ª—å - –°–µ–Ω—Ç—è–±—Ä—å 2026*\n` +
      `üì± *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram WebApp*\n\n` +
      `üéÆ *–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:*\n` +
      `‚îú –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n` +
      `‚îú –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã\n` +
      `‚îú –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n` +
      `‚îî –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n` +
      `üíé *NFT –∏ –±–ª–æ–∫—á–µ–π–Ω:*\n` +
      `‚îú NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n` +
      `‚îú –ë–ª–æ–∫—á–µ–π–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\n` +
      `‚îú –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞\n` +
      `‚îî –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã\n\n` +
      `ü§ñ *AI –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:*\n` +
      `‚îú AI –ø–æ–º–æ—â–Ω–∏–∫\n` +
      `‚îú –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–¥–µ–ª–∫–∏\n` +
      `‚îú –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n` +
      `‚îî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n` +
      `üì± *WebApp —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è:*\n` +
      `‚îú ‚úÖ –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n` +
      `‚îú üì± –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º\n` +
      `‚îú üîÑ PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n` +
      `‚îî üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è\n\n` +
      `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%*\n` +
      `üéØ *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: WebApp —Ç–æ–ª—å–∫–æ*`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–æ–∞–¥–º–∞–ø–∞ Q3 2025');
  }
}



async function showRoadmapSuggestions(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∞–¥–º–∞–ø—É', 'roadmap')]
    ]);
    
    const message = 
      `üí° *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è*\n\n` +
      `‚ö†Ô∏è *–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*\n\n` +
      `üîß *–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n` +
      `‚îú üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n` +
      `‚îú üéØ –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n` +
      `‚îú üèÜ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥\n` +
      `‚îî üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n` +
      `üìÖ *–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:*\n` +
      `‚îî 15 –¥–µ–∫–∞–±—Ä—è 2025\n\n` +
      `üí° *–ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:*\n` +
      `‚îú üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n` +
      `‚îú üó∫Ô∏è –ò–∑—É—á–∞—Ç—å –ø–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è –≤ —Ä–æ–∞–¥–º–∞–ø–µ\n` +
      `‚îî üéÆ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö (—á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å)\n\n` +
      `üöÄ *–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!*`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ä–æ–∞–¥–º–∞–ø–∞');
  }
}
// ==================== –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–ê–ô–ù–ò–ù–ì–ê ====================
async function showMinerMenu(ctx, user) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –º–∞–π–Ω–∏–Ω–≥–∞
  const userWithMining = initializeNewMiningSystem(user);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ
  const currentSeason = getCurrentMiningSeason();
  const seasonInfo = currentSeason ? 
    `\nüìÖ *–°–µ–∑–æ–Ω ${currentSeason.season}* (–î–µ–Ω—å ${currentSeason.dayInSeason}/${config.MINING_SEASON_DURATION})\n` +
    `üìà *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–µ–∑–æ–Ω–∞:* ${currentSeason.multiplier.toFixed(2)}x\n` +
    `‚è∞ *–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞:* ${currentSeason.daysUntilNextSeason} –¥–Ω–µ–π` :
    `\nüìÖ *–í—ã—Ö–æ–¥–Ω—ã–µ* - –º–∞–π–Ω–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞
  const totalSpeed = calculateTotalMiningSpeed(userWithMining);
  const rewardPerMinuteStars = totalSpeed.stars * currentSeason.multiplier;
  const rewardPerHourStars = rewardPerMinuteStars * 60;
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–π–Ω–µ—Ä–æ–≤
  const totalMiners = userWithMining.miners.reduce((sum, miner) => sum + miner.count, 0);
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('üõí –ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤', 'miner_shop'),
      Markup.button.callback('üìÖ –°–µ–∑–æ–Ω', 'miner_season_info')
    ],
    [
      Markup.button.callback('üèÜ –†–µ–π—Ç–∏–Ω–≥', 'miner_leaderboard'),
      Markup.button.callback('‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥—ã', 'miner_upgrades')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏—Ç—É–ª–µ
  const titlesList = getTitlesList(userWithMining);
  const mainTitle = userWithMining.mainTitle || 'üå± –ù–æ–≤–∏—á–æ–∫';
  const currentTitle = titlesList.find(t => t.name === mainTitle);
  const titleBonus = currentTitle ? currentTitle.minerBonus : 1.0;
  const titleBonusText = titleBonus > 1.0 ? ` (+${((titleBonus - 1) * 100).toFixed(0)}%)` : '';

  const message = 
    `‚õèÔ∏è *–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞–π–Ω–∏–Ω–≥–∞*${seasonInfo}\n\n` +
    `üíé *–í–∞—à–∏ –º–∞–π–Ω–µ—Ä—ã:* ${totalMiners} —à—Ç.\n` +
    `‚ö° *–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±—ã—á–∏ Stars:* ${formatNumber(totalSpeed.stars)} Stars/–º–∏–Ω\n` +
    `‚≠ê *–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±—ã—á–∏ Stars:* ${formatNumber(totalSpeed.stars)} ‚≠ê/–º–∏–Ω\n\n` +
    `üí∞ *–ù–∞–≥—Ä–∞–¥—ã:*\n` +
    `‚îî Stars: ${formatNumber(rewardPerMinuteStars)} Stars/–º–∏–Ω ‚Ä¢ ${formatNumber(rewardPerHourStars)} Stars/—á–∞—Å\n` +
    `‚îî Stars: ${formatNumber(rewardPerMinuteStars)} ‚≠ê/–º–∏–Ω ‚Ä¢ ${formatNumber(rewardPerHourStars)} ‚≠ê/—á–∞—Å\n\n` +
    `üëë *–¢–∏—Ç—É–ª:* ${mainTitle}${titleBonusText}\n\n` +
    `üìä *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:*\n` +
    `‚îî Stars: ${formatNumber(userWithMining.miningStats?.totalMinedStars || 0)} Stars\n` +
    `‚îî Stars: ${formatNumber(userWithMining.miningStats?.totalMinedStars || 0)} ‚≠ê\n\n` +
    `üìä *–°–µ–∑–æ–Ω–Ω–∞—è –¥–æ–±—ã—á–∞:*\n` +
    `‚îî Stars: ${formatNumber(userWithMining.miningStats?.seasonMinedStars || 0)} Stars\n` +
    `‚îî Stars: ${formatNumber(userWithMining.miningStats?.seasonMinedStars || 0)} ‚≠ê\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}
async function startMiner(ctx, user) {
  try {
    log(`‚õèÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (user.miner.active) {
      log(`‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!');
      return;
    }
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'miner.active': true,
          'miner.lastReward': new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚úÖ –ú–∞–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å Stars –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.');
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    await updateMinerMenu(ctx, { ...user, miner: { ...user.miner, active: true } });
  } catch (error) {
    logError(error, '–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞');
  }
}

async function stopMiner(ctx, user) {
  try {
    log(`‚èπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (!user.miner.active) {
      log(`‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      return;
    }
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'miner.active': false,
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚èπÔ∏è –ú–∞–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    await updateMinerMenu(ctx, { ...user, miner: { ...user.miner, active: false } });
  } catch (error) {
    logError(error, '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–π–Ω–µ—Ä–∞');
  }
}
// ==================== –£–õ–£–ß–®–ï–ù–ò–ï –ú–ê–ô–ù–ï–†–ê ====================
async function showMinerUpgrade(ctx, user) {
  try {
    log(`‚¨ÜÔ∏è –ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const miner = user.miner;
    const currentLevel = miner.level || 1;
    const currentEfficiency = miner.efficiency || 1;
    
    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
    const upgradeCost = currentLevel * 100; // 100 Stars –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    const newEfficiency = currentEfficiency + 0.2;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –∏ —Ç–∏—Ç—É–ª–∞
    const newRewardPerMinute = await calculateMinerReward(newEfficiency, user);
    const newRewardPerHour = newRewardPerMinute * 60;
    
    const canUpgrade = user.magnuStarsoins >= upgradeCost;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          canUpgrade ? `‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å (${formatNumber(upgradeCost)} Stars)` : `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars (${formatNumber(upgradeCost)})`,
          canUpgrade ? 'confirm_miner_upgrade' : 'insufficient_funds'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
    ]);
    
    const message = 
      `‚¨ÜÔ∏è *–£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞*\n\n` +
      `üìä *–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:* ${currentLevel}\n` +
      `‚ö° *–¢–µ–∫—É—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${currentEfficiency.toFixed(1)}x\n` +
      `üí∞ *–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber((await calculateMinerReward(currentEfficiency, user)) * 60)} Stars\n\n` +
      `üìà *–ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è:*\n` +
      `‚ö° *–ù–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${newEfficiency.toFixed(1)}x\n` +
      `üí∞ *–ù–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(newRewardPerHour)} Stars\n\n` +
      `üíé *–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è:* ${formatNumber(upgradeCost)} Stars\n` +
      `üíé *–í–∞—à –±–∞–ª–∞–Ω—Å:* ${formatNumber(user.magnuStarsoins)} Stars\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ú–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  }
}

// ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–ô–ù–ï–†–ê ====================
async function showMinerStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const miner = user.miner;
    const isActive = miner.active || false;
    const efficiency = miner.efficiency || 1;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä–∞–¥—É —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –∏ —Ç–∏—Ç—É–ª–∞
    const currentReward = await calculateMinerReward(efficiency, user);
    const rewardPerMinute = currentReward;
    const rewardPerHour = currentReward * 60;
    
    let statusText = isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
    let lastRewardText = '';
    let nextRewardText = '';
    
    if (miner.lastReward) {
      const timeSince = Math.floor((Date.now() - miner.lastReward.getTime()) / 1000);
      if (timeSince < 60) {
        const remaining = 60 - timeSince;
        nextRewardText = `\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${formatTime(remaining)}`;
      } else {
        nextRewardText = `\n‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –Ω–∞–≥—Ä–∞–¥—ã!`;
      }
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
    ]);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏—Ç—É–ª–µ
    const titlesList = getTitlesList(user);
    const mainTitle = user.mainTitle || 'üå± –ù–æ–≤–∏—á–æ–∫';
    const currentTitle = titlesList.find(t => t.name === mainTitle);
    const titleBonus = currentTitle ? currentTitle.minerBonus : 1.0;
    const titleBonusText = titleBonus > 1.0 ? ` (+${((titleBonus - 1) * 100).toFixed(0)}%)` : '';

    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞*\n\n` +
      `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${miner.level || 1}\n` +
      `‚ö° *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${efficiency.toFixed(1)}x\n` +
      `üëë *–¢–∏—Ç—É–ª:* ${mainTitle}${titleBonusText}\n` +
      `üìä *–°—Ç–∞—Ç—É—Å:* ${statusText}\n` +
      `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/–º–∏–Ω—É—Ç—É:* ${formatNumber(rewardPerMinute)} Stars\n` +
      `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(rewardPerHour)} Stars\n` +
      `üíé *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:* ${formatNumber(miner.totalMined || 0)} Stars\n` +
      `‚è∞ *–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞:* ${miner.lastReward ? miner.lastReward.toLocaleString('ru-RU') : '–ù–µ—Ç'}\n` +
      `${nextRewardText}\n\n` +
      `üìà *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚Ä¢ –ú–∞–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n` +
      `‚Ä¢ –ù–∞–≥—Ä–∞–¥—ã –≤—ã–¥–∞—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n` +
      `‚Ä¢ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –∏ —Ç–∏—Ç—É–ª–∞\n` +
      `‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏\n` +
      `‚Ä¢ –ú–æ–∂–Ω–æ —É–ª—É—á—à–∞—Ç—å –∑–∞ Stars`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  }
}
// ==================== –§–£–ù–ö–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –ú–ê–ô–ù–ï–†–ê ====================
async function upgradeMiner(ctx, user) {
  try {
    log(`‚¨ÜÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const miner = user.miner;
    const currentLevel = miner.level || 1;
    const currentEfficiency = miner.efficiency || 1;
    const upgradeCost = currentLevel * 100;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    if (user.magnuStarsoins < upgradeCost) {
      log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars!');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä
    const newLevel = currentLevel + 1;
    const newEfficiency = currentEfficiency + 0.2;
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnuStarsoins: -upgradeCost,
          totalEarnedMagnuStarsoins: -upgradeCost
        },
        $set: { 
          'miner.level': newLevel,
          'miner.efficiency': newEfficiency,
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery(`‚úÖ –ú–∞–π–Ω–µ—Ä —É–ª—É—á—à–µ–Ω! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${newLevel}, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${newEfficiency.toFixed(1)}x`);
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showMinerMenu(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞');
  }
}

// ==================== –°–ò–°–¢–ï–ú–ê –°–ï–ó–û–ù–û–í –ú–ê–ô–ù–ò–ù–ì–ê ====================

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
function getCurrentMiningSeason() {
  const now = new Date();
  const startDate = config.MINING_SEASON_START_DATE;
  const seasonDuration = config.MINING_SEASON_DURATION;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
  const dayOfWeek = now.getDay();
  if (dayOfWeek === 0 || dayOfWeek === 6) {
    return null; // –í—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è
  }
  
  const daysSinceStart = Math.floor((now - startDate) / (1000 * 60 * 60 * 24));
  const currentSeason = Math.floor(daysSinceStart / seasonDuration) + 1;
  
  return {
    season: currentSeason,
    dayInSeason: (daysSinceStart % seasonDuration) + 1,
    daysUntilNextSeason: seasonDuration - (daysSinceStart % seasonDuration),
    startDate: new Date(startDate.getTime() + (currentSeason - 1) * seasonDuration * 24 * 60 * 60 * 1000),
    endDate: new Date(startDate.getTime() + currentSeason * seasonDuration * 24 * 60 * 60 * 1000),
    multiplier: Math.pow(config.MINING_SEASON_MULTIPLIER, currentSeason - 1)
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Å–µ–∑–æ–Ω–∞
function getSeasonLimits(season) {
  const baseMagnumLimit = config.MINING_TOTAL_MAGNUM_COINS;
  const baseStarsLimit = config.MINING_TOTAL_STARS;
  const multiplier = Math.pow(config.MINING_SEASON_MULTIPLIER, season - 1);
  
  return {
    magnuStarsoins: Math.floor(baseStarsLimit * multiplier),
    stars: Math.floor(baseStarsLimit * multiplier)
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–∑–æ–Ω–∞
async function getSeasonStats(season) {
  const startDate = new Date(config.MINING_SEASON_START_DATE.getTime() + (season - 1) * config.MINING_SEASON_DURATION * 24 * 60 * 60 * 1000);
  const endDate = new Date(startDate.getTime() + config.MINING_SEASON_DURATION * 24 * 60 * 60 * 1000);
  
  const stats = await db.collection('miningSeasonStats').findOne({ season: season });
  
  if (!stats) {
    return {
      season: season,
      totalMinedStars: 0,
      totalMinedStars: 0,
      activeMiners: 0,
      startDate: startDate,
      endDate: endDate
    };
  }
  
  return {
    ...stats,
    startDate: startDate,
    endDate: endDate
  };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–∑–æ–Ω–∞
async function updateSeasonStats(season, minedStars, minedStars) {
  await db.collection('miningSeasonStats').updateOne(
    { season: season },
    { 
      $inc: { 
        totalMinedStars: minedStars,
        totalMinedStars: minedStars
      },
      $set: { 
        updatedAt: new Date()
      }
    },
    { upsert: true }
  );
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–µ–∑–æ–Ω–∞
async function checkSeasonLimits(season, minedStars, minedStars) {
  const limits = getSeasonLimits(season);
  const stats = await getSeasonStats(season);
  
  const canMineMagnum = stats.totalMinedStars + minedStars <= limits.magnuStarsoins;
  const canMineStars = stats.totalMinedStars + minedStars <= limits.stars;
  
  return {
    canMineStars,
    canMineStars,
    remainingStars: Math.max(0, limits.magnuStarsoins - stats.totalMinedStars),
    remainingStars: Math.max(0, limits.stars - stats.totalMinedStars)
  };
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ –º–∞–π–Ω–∏–Ω–≥–∞
async function showMinerSeasonInfo(ctx, user) {
  try {
    log(`üìÖ –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ –º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const currentSeason = getCurrentMiningSeason();
    
    if (!currentSeason) {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
      ]);
      
      await ctx.editMessageText(
        `üìÖ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–µ –º–∞–π–Ω–∏–Ω–≥–∞*\n\n` +
        `üåÖ *–í—ã—Ö–æ–¥–Ω—ã–µ*\n\n` +
        `‚è∏Ô∏è –ú–∞–π–Ω–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏\n` +
        `üìÖ –°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏\n\n` +
        `üîÑ –ú–∞–π–Ω–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );
      return;
    }
    
    const limits = getSeasonLimits(currentSeason.season);
    const stats = await getSeasonStats(currentSeason.season);
    const limitsCheck = await checkSeasonLimits(currentSeason.season, 0, 0);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
    ]);
    
    const message = 
      `üìÖ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–µ –º–∞–π–Ω–∏–Ω–≥–∞*\n\n` +
      `üéØ *–¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω:* ${currentSeason.season}\n` +
      `üìÖ *–î–µ–Ω—å —Å–µ–∑–æ–Ω–∞:* ${currentSeason.dayInSeason}/${config.MINING_SEASON_DURATION}\n` +
      `‚è∞ *–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞:* ${currentSeason.daysUntilNextSeason} –¥–Ω–µ–π\n\n` +
      `üìà *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–µ–∑–æ–Ω–∞:* ${currentSeason.multiplier.toFixed(2)}x\n` +
      `üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ–∑–æ–Ω–∞:* ${((currentSeason.dayInSeason / config.MINING_SEASON_DURATION) * 100).toFixed(1)}%\n\n` +
      `üí∞ *–õ–∏–º–∏—Ç—ã —Å–µ–∑–æ–Ω–∞:*\n` +
      `‚îú Stars: ${formatNumber(limits.magnuStarsoins)}\n` +
      `‚îî Stars: ${formatNumber(limits.stars)}\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∑–æ–Ω–∞:*\n` +
      `‚îú –î–æ–±—ã—Ç–æ Stars: ${formatNumber(stats.totalMinedStars)} / ${formatNumber(limits.magnuStarsoins)}\n` +
      `‚îú –î–æ–±—ã—Ç–æ Stars: ${formatNumber(stats.totalMinedStars)} / ${formatNumber(limits.stars)}\n` +
      `‚îú –û—Å—Ç–∞–ª–æ—Å—å Stars: ${formatNumber(limitsCheck.remainingStars)}\n` +
      `‚îî –û—Å—Ç–∞–ª–æ—Å—å Stars: ${formatNumber(limitsCheck.remainingStars)}\n\n` +
      `üìÖ *–î–∞—Ç—ã —Å–µ–∑–æ–Ω–∞:*\n` +
      `‚îú –ù–∞—á–∞–ª–æ: ${currentSeason.startDate.toLocaleDateString('ru-RU')}\n` +
      `‚îî –ö–æ–Ω–µ—Ü: ${currentSeason.endDate.toLocaleDateString('ru-RU')}\n\n` +
      `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚îú –ö–∞–∂–¥—ã–π —Å–µ–∑–æ–Ω –¥–ª–∏—Ç—Å—è ${config.MINING_SEASON_DURATION} –¥–Ω–µ–π\n` +
      `‚îú –í—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏\n` +
      `‚îú –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ${((config.MINING_SEASON_MULTIPLIER - 1) * 100).toFixed(0)}% –∫–∞–∂–¥—ã–π —Å–µ–∑–æ–Ω\n` +
      `‚îî –õ–∏–º–∏—Ç—ã —Ç–∞–∫–∂–µ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è —Å –∫–∞–∂–¥—ã–º —Å–µ–∑–æ–Ω–æ–º`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ');
  }
}

// ==================== –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–ê–ô–ù–ò–ù–ì–ê ====================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞ –º–∞–π–Ω–∏–Ω–≥–∞
function getCurrentMiningSeason() {
  const now = new Date();
  const seasonStart = new Date('2025-08-28T00:00:00Z'); // 28 –∞–≤–≥—É—Å—Ç–∞ 00:00 UTC
  
  const daysSinceStart = Math.floor((now - seasonStart) / (1000 * 60 * 60 * 24));
  const currentSeason = Math.floor(daysSinceStart / config.MINING_SEASON_DURATION) + 1;
  const dayInSeason = (daysSinceStart % config.MINING_SEASON_DURATION) + 1;
  
  const seasonStartDate = new Date(seasonStart);
  seasonStartDate.setDate(seasonStartDate.getDate() + (currentSeason - 1) * config.MINING_SEASON_DURATION);
  
  const seasonEndDate = new Date(seasonStartDate);
  seasonEndDate.setDate(seasonEndDate.getDate() + config.MINING_SEASON_DURATION);
  
  const daysUntilNextSeason = config.MINING_SEASON_DURATION - dayInSeason;
  
  const season = {
    season: currentSeason,
    dayInSeason: dayInSeason,
    daysUntilNextSeason: daysUntilNextSeason,
    startDate: seasonStartDate,
    endDate: seasonEndDate,
    multiplier: 1 + (currentSeason - 1) * 0.1, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ 10% –∫–∞–∂–¥—ã–π —Å–µ–∑–æ–Ω
    isActive: true
  };
  
  console.log('üìÖ –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω –º–∞–π–Ω–∏–Ω–≥–∞:', {
    now: now.toISOString(),
    seasonStart: seasonStart.toISOString(),
    daysSinceStart,
    currentSeason: season.season,
    dayInSeason: season.dayInSeason,
    multiplier: season.multiplier,
    isActive: season.isActive
  });
  
  return season;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –º–∞–π–Ω–∏–Ω–≥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initializeNewMiningSystem(user) {
  if (!user.miners) {
    user.miners = [];
  }
  
  if (!user.miningStats) {
    user.miningStats = {
      totalMinedStars: 0,
      totalMinedStars: 0,
      seasonMinedStars: 0,
      seasonMinedStars: 0,
      lastReward: null,
      activeClickCount: 0,
      passiveRewards: 0
    };
  }
  
  if (!user.miningSeasonStats) {
    user.miningSeasonStats = {};
  }
  
  return user;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function calculateTotalMiningSpeed(user) {
  let totalSpeedMagnum = 0;
  
  if (user.miners && user.miners.length > 0) {
    for (const miner of user.miners) {
      const minerConfig = config.MINERS[miner.type];
      if (minerConfig) {
        const levelMultiplier = 1 + (miner.level - 1) * 0.2; // +20% –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        const minerSpeed = minerConfig.baseSpeed * levelMultiplier * miner.count;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –º–∞–π–Ω–∏–Ω–≥–∞
        const miningCurrency = minerConfig.miningCurrency || 'magnuStarsoins';
        if (miningCurrency === 'stars') {
          totalSpeedStars += minerSpeed;
        } else {
          totalSpeedStars += minerSpeed;
        }
      }
    }
  }
  
  // –ë–æ–Ω—É—Å –æ—Ç —Ç–∏—Ç—É–ª–∞
  const titlesList = getTitlesList(user);
  const mainTitle = user.mainTitle || 'üå± –ù–æ–≤–∏—á–æ–∫';
  const currentTitle = titlesList.find(t => t.name === mainTitle);
  const titleBonus = currentTitle ? currentTitle.minerBonus : 1.0;
  
  return {
    magnuStarsoins: totalSpeedStars * titleBonus,
    stars: totalSpeedStars * titleBonus
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–∏–Ω–≥–∞
async function processMiningRewards() {
  try {
    console.log('‚õèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–∏–Ω–≥–∞...');
    
    const currentSeason = getCurrentMiningSeason();
    if (!currentSeason.isActive) {
      console.log('üìÖ –ú–∞–π–Ω–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤—ã—Ö–æ–¥–Ω—ã–µ');
      return;
    }
    
    const users = await db.collection('users').find({
      $or: [
        { 'miningStats.lastReward': { $exists: true } },
        { 'miners': { $exists: true, $ne: [] } }
      ]
    }).toArray();
    
    let processedCount = 0;
    
    for (const user of users) {
      try {
        const userWithMining = initializeNewMiningSystem(user);
        const totalSpeed = calculateTotalMiningSpeed(userWithMining);
        
        const totalSpeedSum = totalSpeed.stars + totalSpeed.stars;
        if (totalSpeedSum > 0) {
          const now = new Date();
          const lastReward = userWithMining.miningStats.lastReward || now;
          const timeDiff = (now - lastReward) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
          
          if (timeDiff >= config.MINING_REWARD_INTERVAL) {
            
            
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await db.collection('users').updateOne(
              { id: userWithMining.id },
              {
                $inc: {
                  magnuStarsoins: rewardStars,
                  stars: rewardStars,
                  'miningStats.totalMinedStars': rewardStars,
                  'miningStats.totalMinedStars': rewardStars,
                  'miningStats.seasonMinedStars': rewardStars,
                  'miningStats.seasonMinedStars': rewardStars,
                  'miningStats.passiveRewards': rewardStars + rewardStars
                },
                $set: {
                  'miningStats.lastReward': now
                }
              }
            );
            
            // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userCache.delete(userWithMining.id);
            
            processedCount++;
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
      }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–∏–Ω–≥–∞:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞
async function buyMiner(user, minerType) {
  try {
    const minerConfig = config.MINERS[minerType];
    if (!minerConfig) {
      return { success: false, message: '‚ùå –ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    
    const userWithMining = initializeNewMiningSystem(user);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const userBalance = userWithMining[minerConfig.currency];
    if (userBalance < minerConfig.price) {
      return { 
        success: false, 
        message: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${minerConfig.currency === 'magnuStarsoins' ? 'Stars' : 'Stars'}` 
      };
    }
    
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–π–Ω–µ—Ä —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
    const existingMiner = userWithMining.miners.find(m => m.type === minerType);
    const currentCount = existingMiner ? existingMiner.count : 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 5 –º–∞–π–Ω–µ—Ä–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)
    if (currentCount >= 5) {
      return { 
        success: false, 
        message: `‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–∫—É–ø–∫–∏ (5 –º–∞–π–Ω–µ—Ä–æ–≤ ${minerConfig.name})` 
      };
    }
    
    if (existingMiner) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      existingMiner.count++;
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞–π–Ω–µ—Ä
      userWithMining.miners.push({
        type: minerType,
        level: 1,
        count: 1
      });
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    await db.collection('users').updateOne(
      { id: userWithMining.id },
      {
        $inc: {
          [minerConfig.currency]: -minerConfig.price
        },
        $set: {
          miners: userWithMining.miners
        }
      }
    );
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await db.collection('users').findOne({ id: userWithMining.id });
    if (updatedUser) {
      await forceSaveUser(updatedUser);
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(userWithMining.id);
    
    return { 
      success: true, 
      message: `‚úÖ –ö—É–ø–ª–µ–Ω ${minerConfig.name} –∑–∞ ${minerConfig.price} ${minerConfig.currency === 'magnuStarsoins' ? 'Stars' : 'Stars'}!` 
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞' };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞
async function upgradeMiner(user, minerType) {
  try {
    const userWithMining = initializeNewMiningSystem(user);
    const miner = userWithMining.miners.find(m => m.type === minerType);
    
    if (!miner) {
      return { success: false, message: '‚ùå –ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    
    const upgradeCost = miner.level * 50; // –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞ —Ä–∞—Å—Ç–µ—Ç —Å —É—Ä–æ–≤–Ω–µ–º
    
    if (userWithMining.magnuStarsoins < upgradeCost) {
      return { success: false, message: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞' };
    }
    
    // –ê–ø–≥—Ä–µ–π–¥–∏–º –º–∞–π–Ω–µ—Ä
    await db.collection('users').updateOne(
      { id: userWithMining.id },
      {
        $inc: {
          magnuStarsoins: -upgradeCost,
          'miners.$.level': 1
        }
      },
      { arrayFilters: [{ 'miners.type': minerType }] }
    );
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await db.collection('users').findOne({ id: userWithMining.id });
    if (updatedUser) {
      await forceSaveUser(updatedUser);
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(userWithMining.id);
    
    return { 
      success: true, 
      message: `‚úÖ –ú–∞–π–Ω–µ—Ä ${config.MINERS[minerType].name} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${miner.level + 1}!` 
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –º–∞–π–Ω–µ—Ä–∞' };
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞
async function showMinerShop(ctx, user, minerIndex = 0) {
  try {
    const userWithMining = initializeNewMiningSystem(user);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–∞–π–Ω–µ—Ä–æ–≤
    const minerTypes = Object.keys(config.MINERS);
    const currentMinerType = minerTypes[minerIndex];
    const minerConfig = config.MINERS[currentMinerType];
    
    if (!minerConfig) {
      await ctx.answerCbQuery('‚ùå –ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç—Ç–æ–º—É –º–∞–π–Ω–µ—Ä—É
    const userMiner = userWithMining.miners.find(m => m.type === currentMinerType);
    const userCount = userMiner ? userMiner.count : 0;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Ä–≤–µ—Ä—É
    const serverStats = await getServerMinerStats();
    const serverCount = serverStats[currentMinerType] || 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 5 –º–∞–π–Ω–µ—Ä–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)
    const canBuy = userCount < 5;
    const remainingSlots = 5 - userCount;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    const keyboard = [];
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navRow = [];
    if (minerIndex > 0) {
      navRow.push(Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π', `miner_shop_${minerIndex - 1}`));
    }
    if (minerIndex < minerTypes.length - 1) {
      navRow.push(Markup.button.callback('–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è', `miner_shop_${minerIndex + 1}`));
    }
    if (navRow.length > 0) {
      keyboard.push(navRow);
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
    if (canBuy) {
      const currencySymbol = minerConfig.currency === 'magnuStarsoins' ? 'Stars' : '‚≠ê';
      keyboard.push([
        Markup.button.callback(`üõí –ö—É–ø–∏—Ç—å ${minerConfig.name} (${minerConfig.price} ${currencySymbol})`, `buy_miner_${currentMinerType}`)
      ]);
    } else {
      keyboard.push([
        Markup.button.callback('‚ùå –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (5/5)', 'miner_shop_limit')
      ]);
    }
    
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const miningCurrency = minerConfig.miningCurrency || 'magnuStarsoins';
    const currencySymbol = miningCurrency === 'stars' ? '‚≠ê' : 'Stars';
    const priceSymbol = minerConfig.currency === 'magnuStarsoins' ? 'Stars' : '‚≠ê';
    
    let message = `üõí *–ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤*\n\n`;
    message += `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*\n`;
    message += `‚îú Stars: ${formatNumber(userWithMining.magnuStarsoins)}\n`;
    message += `‚îî Stars: ${formatNumber(userWithMining.stars)}\n\n`;
    
    message += `üì¶ *${minerConfig.name}*\n`;
    message += `‚îú –°–∫–æ—Ä–æ—Å—Ç—å: ${formatNumber(minerConfig.baseSpeed)} ${currencySymbol}/–º–∏–Ω\n`;
    message += `‚îú –†–µ–¥–∫–æ—Å—Ç—å: ${getRarityEmoji(minerConfig.rarity)} ${minerConfig.rarity}\n`;
    message += `‚îú –¶–µ–Ω–∞: ${minerConfig.price} ${priceSymbol}\n`;
    message += `‚îú –£ –≤–∞—Å: ${userCount}/5 —à—Ç.\n`;
    message += `‚îú –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: ${remainingSlots}\n`;
    message += `‚îú –í—Å–µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${serverCount} —à—Ç.\n`;
    message += `‚îî ${minerConfig.description}\n\n`;
    
    message += `üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å:* ${minerIndex + 1}/${minerTypes.length}\n\n`;
    
    if (canBuy) {
      message += `‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –º–∞–π–Ω–µ—Ä\n`;
    } else {
      message += `‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–∫—É–ø–∫–∏ (5 –º–∞–π–Ω–µ—Ä–æ–≤)\n`;
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard(keyboard).reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –º–∞–π–Ω–µ—Ä–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞');
  }
}

async function showMinerUpgrades(ctx, user) {
  try {
    const userWithMining = initializeNewMiningSystem(user);
    
    let keyboardButtons = [
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
    ];
    
    let message = `‚¨ÜÔ∏è *–ê–ø–≥—Ä–µ–π–¥—ã –º–∞–π–Ω–µ—Ä–æ–≤*\n\n`;
    message += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${formatNumber(userWithMining.magnuStarsoins)} Stars\n\n`;
    
    if (userWithMining.miners.length === 0) {
      message += `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞\n\n`;
      message += `üõí –ö—É–ø–∏—Ç–µ –º–∞–π–Ω–µ—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!`;
    } else {
      message += `üì¶ *–í–∞—à–∏ –º–∞–π–Ω–µ—Ä—ã:*\n\n`;
      
      for (const miner of userWithMining.miners) {
        const minerConfig = config.MINERS[miner.type];
        if (minerConfig) {
          const currentSpeed = minerConfig.baseSpeed * (1 + (miner.level - 1) * 0.2);
          const nextLevelSpeed = minerConfig.baseSpeed * (1 + miner.level * 0.2);
          const upgradeCost = miner.level * 50;
          const miningCurrency = minerConfig.miningCurrency || 'magnuStarsoins';
          const currencySymbol = miningCurrency === 'stars' ? '‚≠ê' : 'Stars';
          
          message += `üî∏ *${minerConfig.name}*\n`;
          message += `‚îú –£—Ä–æ–≤–µ–Ω—å: ${miner.level}\n`;
          message += `‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${miner.count} —à—Ç.\n`;
          message += `‚îú –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${formatNumber(currentSpeed)} ${currencySymbol}/–º–∏–Ω\n`;
          message += `‚îú –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Å–ª–µ –∞–ø–≥—Ä–µ–π–¥–∞: ${formatNumber(nextLevelSpeed)} ${currencySymbol}/–º–∏–Ω\n`;
          message += `‚îú –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞: ${upgradeCost} Stars\n`;
          
          if (userWithMining.magnuStarsoins >= upgradeCost) {
            message += `‚îî [–£–ª—É—á—à–∏—Ç—å](buy_miner_${miner.type})\n\n`;
            keyboardButtons.unshift([
              Markup.button.callback(`‚¨ÜÔ∏è ${minerConfig.name} (${upgradeCost} Stars)`, `upgrade_miner_${miner.type}`)
            ]);
          } else {
            message += `‚îî ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n`;
          }
        }
      }
    }
    
    message += `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ø–≥—Ä–µ–π–¥–∞—Ö:*\n`;
    message += `‚îú –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å +20% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏\n`;
    message += `‚îú –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç —Å —É—Ä–æ–≤–Ω–µ–º\n`;
    message += `‚îî –ê–ø–≥—Ä–µ–π–¥ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –º–∞–π–Ω–µ—Ä–∞–º —ç—Ç–æ–≥–æ —Ç–∏–ø–∞`;
    
    const keyboard = Markup.inlineKeyboard(keyboardButtons);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –∞–ø–≥—Ä–µ–π–¥–æ–≤ –º–∞–π–Ω–µ—Ä–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ø–≥—Ä–µ–π–¥–æ–≤');
  }
}

async function showMinerLeaderboard(ctx, user) {
  try {
    const currentSeason = getCurrentMiningSeason();
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥', 'miner_leaderboard_total'),
        Markup.button.callback('üìÖ –°–µ–∑–æ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', 'miner_leaderboard_season')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
    ]);
    
    let message = `üèÜ *–†–µ–π—Ç–∏–Ω–≥ –º–∞–π–Ω–∏–Ω–≥–∞*\n\n`;
    message += `üìÖ –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: ${currentSeason.season}\n`;
    message += `üìä –î–µ–Ω—å —Å–µ–∑–æ–Ω–∞: ${currentSeason.dayInSeason}/${config.MINING_SEASON_DURATION}\n\n`;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ–±—â–µ–º—É –º–∞–π–Ω–∏–Ω–≥—É
    const topTotal = await db.collection('users')
      .find({ 'miningStats.totalMinedStars': { $exists: true } })
      .sort({ 'miningStats.totalMinedStars': -1 })
      .limit(10)
      .toArray();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å–µ–∑–æ–Ω–Ω–æ–º—É –º–∞–π–Ω–∏–Ω–≥—É
    const topSeason = await db.collection('users')
      .find({ 'miningStats.seasonMinedStars': { $exists: true } })
      .sort({ 'miningStats.seasonMinedStars': -1 })
      .limit(10)
      .toArray();
    
    message += `ü•á *–¢–æ–ø-5 –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:*\n`;
    for (let i = 0; i < Math.min(5, topTotal.length); i++) {
      const player = topTotal[i];
      const position = i + 1;
      const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : 'üèÖ';
      message += `${emoji} ${player.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${formatNumber(player.miningStats?.totalMinedStars || 0)} Stars\n`;
    }
    
    message += `\nüìÖ *–¢–æ–ø-5 —Å–µ–∑–æ–Ω–∞ ${currentSeason.season}:*\n`;
    for (let i = 0; i < Math.min(5, topSeason.length); i++) {
      const player = topSeason[i];
      const position = i + 1;
      const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : 'üèÖ';
      message += `${emoji} ${player.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${formatNumber(player.miningStats?.seasonMinedStars || 0)} Stars\n`;
    }
    
    message += `\nüí° *–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–µ–∑–æ–Ω:*\n`;
    message += `‚îú ü•á 1 –º–µ—Å—Ç–æ: ${formatNumber(config.SEASON_REWARDS.top1.magnuStarsoins)} Stars + ${config.SEASON_REWARDS.top1.stars} ‚≠ê\n`;
    message += `‚îú ü•à 2-3 –º–µ—Å—Ç–æ: ${formatNumber(config.SEASON_REWARDS.top3.magnuStarsoins)} Stars + ${config.SEASON_REWARDS.top3.stars} ‚≠ê\n`;
    message += `‚îî ü•â 4-10 –º–µ—Å—Ç–æ: ${formatNumber(config.SEASON_REWARDS.top10.magnuStarsoins)} Stars + ${config.SEASON_REWARDS.top10.stars} ‚≠ê`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞ –º–∞–π–Ω–∏–Ω–≥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
async function showMinerLeaderboardTotal(ctx, user) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É', 'miner_leaderboard')]
    ]);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ–±—â–µ–º—É –º–∞–π–Ω–∏–Ω–≥—É
    const topTotal = await db.collection('users')
      .find({ 'miningStats.totalMinedStars': { $exists: true } })
      .sort({ 'miningStats.totalMinedStars': -1 })
      .limit(20)
      .toArray();
    
    let message = `üèÜ *–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –º–∞–π–Ω–∏–Ω–≥–∞*\n\n`;
    
    for (let i = 0; i < topTotal.length; i++) {
      const player = topTotal[i];
      const position = i + 1;
      const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : 'üèÖ';
      const totalStarsPlayer = player.miningStats?.totalMinedStars || 0;
      message += `${emoji} ${position}. ${player.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
      message += `   üíé ${formatNumber(totalStars)} Stars | ‚≠ê ${formatNumber(totalStars)} Stars\n`;
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –º–∞–π–Ω–∏–Ω–≥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
async function showMinerLeaderboardSeason(ctx, user) {
  try {
    const currentSeason = getCurrentMiningSeason();
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É', 'miner_leaderboard')]
    ]);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å–µ–∑–æ–Ω–Ω–æ–º—É –º–∞–π–Ω–∏–Ω–≥—É
    const topSeason = await db.collection('users')
      .find({ 'miningStats.seasonMinedStars': { $exists: true } })
      .sort({ 'miningStats.seasonMinedStars': -1 })
      .limit(20)
      .toArray();
    
    let message = `üìÖ *–°–µ–∑–æ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ - –°–µ–∑–æ–Ω ${currentSeason.season}*\n\n`;
    message += `üìä –î–µ–Ω—å —Å–µ–∑–æ–Ω–∞: ${currentSeason.dayInSeason}/${config.MINING_SEASON_DURATION}\n\n`;
    
    for (let i = 0; i < topSeason.length; i++) {
      const player = topSeason[i];
      const position = i + 1;
      const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : 'üèÖ';
      const seasonStars = player.miningStats?.seasonMinedStars || 0;
      message += `${emoji} ${position}. ${player.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
      message += `   üíé ${formatNumber(seasonStars)} Stars | ‚≠ê ${formatNumber(seasonStars)} Stars\n`;
    }
    
    message += `\nüí° *–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–µ–∑–æ–Ω:*\n`;
    message += `‚îú ü•á 1 –º–µ—Å—Ç–æ: ${formatNumber(config.SEASON_REWARDS.top1.magnuStarsoins)} Stars + ${config.SEASON_REWARDS.top1.stars} ‚≠ê\n`;
    message += `‚îú ü•à 2-3 –º–µ—Å—Ç–æ: ${formatNumber(config.SEASON_REWARDS.top3.magnuStarsoins)} Stars + ${config.SEASON_REWARDS.top3.stars} ‚≠ê\n`;
    message += `‚îî ü•â 4-10 –º–µ—Å—Ç–æ: ${formatNumber(config.SEASON_REWARDS.top10.magnuStarsoins)} Stars + ${config.SEASON_REWARDS.top10.stars} ‚≠ê`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –º–∞–π–Ω–∏–Ω–≥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏
function getRarityEmoji(rarity) {
  switch (rarity) {
    case 'common': return '‚ö™';
    case 'rare': return 'üîµ';
    case 'epic': return 'üü£';
    case 'legendary': return 'üü°';
    default: return '‚ö™';
  }
}

// ==================== –í–´–í–û–î –°–†–ï–î–°–¢–í ====================
async function showWithdrawalMenu(ctx, user) {
  const withdrawal = user.withdrawal || { withdrawalCount: 0, totalWithdrawn: 0 };
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('üí∞ –í—ã–≤–µ—Å—Ç–∏ Stars', 'withdrawal_Stars'),
      Markup.button.callback('‚≠ê –í—ã–≤–µ—Å—Ç–∏ Stars', 'withdrawal_stars')
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤', 'withdrawal_stats'),
      Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤', 'withdrawal_history')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üí∞ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*\n\n` +
    `üíé *–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞:*\n` +
    `‚îú Stars: ${formatNumber(user.magnuStarsoins)}\n` +
    `‚îî Stars: ${formatNumber(user.stars)}\n\n` +
    `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤:*\n` +
    `‚îú –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${withdrawal.withdrawalCount}\n` +
    `‚îî –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: ${formatNumber(withdrawal.totalWithdrawn)} Stars\n\n` +
    `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
    `‚îú üöß –í—ã–≤–æ–¥ Stars: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n` +
          `‚îú –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ Stars: 50 Stars\n` +
    `‚îú –ö–æ–º–∏—Å—Å–∏—è: 5%\n` +
    `‚îî –û–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ 24 —á–∞—Å–æ–≤\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}




// ==================== –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° ====================
async function updateMinerMenu(ctx, user) {
  try {
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –º–∞–π–Ω–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (!user.miner) {
      log(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      user.miner = {
        active: false,
        level: 1,
        efficiency: 1,
        lastReward: null,
        totalMined: 0
      };
    }
  
  const miner = user.miner;
  const isActive = miner.active || false;
  const efficiency = miner.efficiency || 1;
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ
  const currentSeason = getCurrentMiningSeason();
  const seasonInfo = currentSeason ? 
    `\nüìÖ *–°–µ–∑–æ–Ω ${currentSeason.season}* (–î–µ–Ω—å ${currentSeason.dayInSeason}/${config.MINING_SEASON_DURATION})\n` +
    `üìà *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–µ–∑–æ–Ω–∞:* ${currentSeason.multiplier.toFixed(2)}x\n` +
    `‚è∞ *–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞:* ${currentSeason.daysUntilNextSeason} –¥–Ω–µ–π` :
    `\nüìÖ *–í—ã—Ö–æ–¥–Ω—ã–µ* - –º–∞–π–Ω–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä–∞–¥—É —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–∞
  const baseReward = await calculateMinerReward(efficiency, user);
  const seasonMultiplier = currentSeason ? currentSeason.multiplier : 0;
  const currentReward = baseReward * seasonMultiplier;
  const rewardPerMinute = currentReward;
  const rewardPerHour = currentReward * 60;
  
  let statusText = isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
  let lastRewardText = '';
  
  if (miner.lastReward) {
    const timeSince = Math.floor((Date.now() - miner.lastReward.getTime()) / 1000);
    if (timeSince < 60) {
      const remaining = 60 - timeSince;
      lastRewardText = `\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${formatTime(remaining)}`;
    }
  }
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        isActive ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä',
        isActive ? 'stop_miner' : 'start_miner'
      )
    ],
    [
      Markup.button.callback('‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä', 'upgrade_miner')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏—Ç—É–ª–µ
  const titlesList = getTitlesList(user);
  const mainTitle = user.mainTitle || 'üå± –ù–æ–≤–∏—á–æ–∫';
  const currentTitle = titlesList.find(t => t.name === mainTitle);
  const titleBonus = currentTitle ? currentTitle.minerBonus : 1.0;
  const titleBonusText = titleBonus > 1.0 ? ` (+${((titleBonus - 1) * 100).toFixed(0)}%)` : '';

  const message = 
    `‚õèÔ∏è *–ú–∞–π–Ω–µ—Ä*\n\n` +
    `üìä *–°—Ç–∞—Ç—É—Å:* ${statusText}\n` +
    `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${miner.level || 1}\n` +
    `‚ö° *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${efficiency}x\n` +
    `üëë *–¢–∏—Ç—É–ª:* ${mainTitle}${titleBonusText}\n` +
    `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/–º–∏–Ω—É—Ç—É:* ${formatNumber(rewardPerMinute)} Stars\n` +
    `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(rewardPerHour)} Stars\n` +
    `üíé *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:* ${formatNumber(miner.totalMined || 0)} Stars${lastRewardText}\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
    log(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    log(`‚úÖ –ú–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    log(`üîÑ Fallback: –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await showMinerMenu(ctx, user);
  }
}

  
  

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–∞
function startBonusCountdown(ctx, user, remainingSeconds) {
  const countdownKey = `bonus_countdown_${user.id}`;
  
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (global[countdownKey]) {
    clearInterval(global[countdownKey]);
  }
  
  let secondsLeft = remainingSeconds;
  
  const updateCountdown = async () => {
    try {
      if (secondsLeft <= 0) {
        // –ö—É–ª–¥–∞—É–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        clearInterval(global[countdownKey]);
        delete global[countdownKey];
        
        const updatedUser = await getUser(ctx.from.id);
        if (updatedUser) {
          await updateBonusMenu(ctx, updatedUser);
          log(`üîÑ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
        }
        return;
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
      const updatedUser = await getUser(ctx.from.id);
      if (updatedUser) {
        const bonus = updatedUser.dailyBonus;
        const now = new Date();
        const lastBonus = bonus.lastBonus;
        
        let canClaim = false;
        let timeUntilNext = 0;
        
        if (!lastBonus) {
          canClaim = true;
        } else {
          const timeSince = now.getTime() - lastBonus.getTime();
          const dayInMs = 24 * 60 * 60 * 1000;
          
          if (timeSince >= dayInMs) {
            canClaim = true;
          } else {
            timeUntilNext = dayInMs - timeSince;
          }
        }
        
        const baseReward = config.DAILY_BONUS_BASE;
        const streakBonus = Math.min(bonus.streak * 0.5, 5);
        const totalReward = baseReward + streakBonus;
        
        const keyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback(
              canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(secondsLeft / 1000))}`,
              canClaim ? 'claim_bonus' : 'bonus_cooldown'
            )
          ],
          [
            Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'bonus_stats'),
            Markup.button.callback('üî• –°–µ—Ä–∏—è', 'bonus_streak')
          ],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
        ]);
        
        const message = 
          `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
          `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canClaim ? 'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
          `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Stars\n` +
          `üî• *–ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏:* +${formatNumber(streakBonus)} Stars\n` +
          `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Stars\n` +
          `üî• *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:* ${bonus.streak} –¥–Ω–µ–π\n` +
          `üìä *–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ:* ${bonus.totalClaimed || 0} –±–æ–Ω—É—Å–æ–≤\n` +
          `üíé *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${formatNumber(bonus.totalEarned || 0)} Stars\n\n` +
          `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        });
      }
      
      secondsLeft--;
    } catch (error) {
      logError(error, '–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –±–æ–Ω—É—Å–∞');
      clearInterval(global[countdownKey]);
      delete global[countdownKey];
    }
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
  global[countdownKey] = setInterval(updateCountdown, 5000);
  
  // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  updateCountdown();
  
  log(`‚è∞ –ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Å—Ç–∞–ª–æ—Å—å: ${remainingSeconds}—Å`);
}

// ==================== –ê–î–ú–ò–ù –¢–ò–¢–£–õ–´ ====================
async function showAdminRanksMenu(ctx, user) {
  try {
    log(`‚≠ê –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚≠ê –í—ã–¥–∞—Ç—å —Ä–∞–Ω–≥', 'admin_give_rank')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–Ω–≥–æ–≤', 'admin_ranks_stats')
      ],
      [
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')
      ]
    ]);
    
    const message = 
      `‚≠ê *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞–º–∏*\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–Ω–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n` +
      `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n` +
      `‚îú ‚≠ê –í—ã–¥–∞—Ç—å —Ä–∞–Ω–≥ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
      `‚îî üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–Ω–≥–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–æ–≤\n\n` +
      `üìã *–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤:*\n` +
      `‚îú 1-4: üå± –ù–æ–≤–∏—á–æ–∫\n` +
      `‚îú 5-9: ‚öîÔ∏è –ë–æ–µ—Ü\n` +
      `‚îú 10-19: üèπ –õ—É—á–Ω–∏–∫\n` +
      `‚îú 20-34: üõ°Ô∏è –†—ã—Ü–∞—Ä—å\n` +
      `‚îú 35-49: ‚öîÔ∏è –í–æ–∏–Ω\n` +
      `‚îú 50-74: ü¶∏ –ì–µ—Ä–æ–π\n` +
      `‚îú 75-99: üèÜ –õ–µ–≥–µ–Ω–¥–∞\n` +
      `‚îî 100+: üëë –ò–º–ø–µ—Ä–∞—Ç–æ—Ä\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞–º–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞–º–∏');
  }
}
async function showAdminTitles(ctx, user) {
  try {
    log(`üëë –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –í—ã–¥–∞—Ç—å —Ç–∏—Ç—É–ª', 'admin_give_title'),
        Markup.button.callback('‚ûñ –ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª', 'admin_remove_title')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏—Ç—É–ª–æ–≤', 'admin_titles_stats'),
        Markup.button.callback('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∏—Ç—É–ª–æ–≤', 'admin_sync_titles')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üëë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏*\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏—Ç—É–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú ‚ûï –í—ã–¥–∞—Ç—å —Ç–∏—Ç—É–ª - –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n` +
      `‚îú ‚ûñ –ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª - —É–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
      `‚îú üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏—Ç—É–ª–æ–≤ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
      `‚îî üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∏—Ç—É–ª–æ–≤ - –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∏—Ç—É–ª—ã\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    if (error.message && error.message.includes('message is not modified')) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
      log(`‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    } else {
      logError(error, '–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏');
    }
  }
}

// ==================== –ê–î–ú–ò–ù –ü–û–°–¢–´ ====================
async function showAdminPosts(ctx, user) {
  try {
    log(`üìù –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π', 'admin_create_post_with_button'),
        Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏', 'admin_create_post_no_button')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤', 'admin_posts_stats')
      ],
      [
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')
      ]
    ]);
    
    const message = 
      `üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏*\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª @magnumtap\n\n` +
      `üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π\n` +
      `‚îú üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏\n` +
      `‚îî üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏');
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–∏—Ç—É–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function handleAdminGiveTitle(ctx, user, text) {
  try {
    const parts = text.trim().split(/\s+/);
    if (parts.length < 2) {
      await ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–∏—Ç—É–ª–∞\n\n–ü—Ä–∏–º–µ—Ä: 123456789 üå± –ù–æ–≤–∏—á–æ–∫');
      return;
    }
    const userId = parseInt(parts[0]);
    const titleName = parts.slice(1).join(' ');
    
    const user = await getUser(userId);
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user.titles.push({ name: titleName, earnedAt: new Date() });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('users').updateOne(
      { id: userId },
      { $set: { titles: user.titles } }
    );
    
    await ctx.reply(`‚úÖ –¢–∏—Ç—É–ª "${titleName}" –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  } catch (error) {
    logError(error, '–í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–∏—Ç—É–ª–∞');
  }
}
