require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { MongoClient, ObjectId } = require('mongodb');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É–¥–∞–ª–µ–Ω - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
console.log('üöÄ –ó–∞–ø—É—Å–∫ Magnum Stars Bot...');
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
  process.exit(1);
}

if (!process.env.MONGODB_URI) {
  console.error('‚ùå MONGODB_URI –Ω–µ –Ω–∞–π–¥–µ–Ω');
  process.exit(1);
}

console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');

const config = {
  BOT_TOKEN: process.env.BOT_TOKEN,
  MONGODB_URI: process.env.MONGODB_URI,
  ADMIN_IDS: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())) : [],
  SUPPORT_CHANNEL: process.env.SUPPORT_CHANNEL,
  WITHDRAWAL_CHANNEL: process.env.WITHDRAWAL_CHANNEL,
  REQUIRED_CHANNEL: process.env.REQUIRED_CHANNEL,
  REQUIRED_BOT_LINK: process.env.REQUIRED_BOT_LINK || 'https://t.me/ReferalStarsRobot?start=6587897295',
  FIRESTARS_BOT_LINK: process.env.FIRESTARS_BOT_LINK || 'https://t.me/firestars_rbot?start=6587897295',
  FARMIK_BOT_LINK: process.env.FARMIK_BOT_LINK || 'https://t.me/farmikstars_bot?start=6587897295',
  BASKET_BOT_LINK: process.env.BASKET_BOT_LINK || 'https://t.me/basket_gift_bot?start=6587897295',
  PRIVATE_CHANNEL_LINK: process.env.PRIVATE_CHANNEL_LINK || 'https://t.me/+4BUF9S_rLZw3NDQ6',
  PROMO_NOTIFICATIONS_CHAT: process.env.PROMO_NOTIFICATIONS_CHAT,
  BOT_PHOTO_URL: process.env.BOT_PHOTO_URL,
  
  // –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  INITIAL_STARS: 100,
  INITIAL_MAGNUM_COINS: 0,
  FARM_COOLDOWN: 10, // —Å–µ–∫—É–Ω–¥—ã
  FARM_BASE_REWARD: 0.01,
  DAILY_BONUS_BASE: 3,
  REFERRAL_BONUS: 50,
  MINER_REWARD_PER_HOUR: 0.1,
  EXCHANGE_COMMISSION: 2.5,
  MIN_WITHDRAWAL: 100,
  MAX_WITHDRAWAL: 10000,
  
  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  USER_CACHE_TTL: 30000,
  STATS_CACHE_TTL: 120000,
  
  // Rate limiting
  RATE_LIMIT_WINDOW: 60000,
  RATE_LIMIT_MAX_REQUESTS: 30,
  
  // –†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏
  INITIAL_RESERVE_STARS: 1000000,
  INITIAL_RESERVE_MAGNUM_COINS: 1000000,
  
  // –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ (–±–∞–∑–æ–≤—ã–π)
  BASE_EXCHANGE_RATE: 0.001, // 100 Magnum Coins = 0.001 Star
  EXCHANGE_RATE_MULTIPLIER: 1.0 // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫—É—Ä—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑–µ—Ä–≤–∞
};

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
async function calculateExchangeRate() {
  try {
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    if (!reserve) {
      return config.BASE_EXCHANGE_RATE;
    }
    
    const magnumCoinsReserve = reserve.magnumCoins || config.INITIAL_RESERVE_MAGNUM_COINS;
    const starsReserve = reserve.stars || config.INITIAL_RESERVE_STARS;
    
    // –†–∞—Å—á–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤
    const ratio = magnumCoinsReserve / starsReserve;
    const multiplier = Math.max(0.1, Math.min(10, ratio)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç 0.1 –¥–æ 10
    
    const dynamicRate = config.BASE_EXCHANGE_RATE * multiplier;
    
    console.log(`üí± –†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞:`, {
      magnumCoinsReserve: formatNumber(magnumCoinsReserve),
      starsReserve: formatNumber(starsReserve),
      ratio: ratio.toFixed(4),
      multiplier: multiplier.toFixed(4),
      baseRate: config.BASE_EXCHANGE_RATE,
      dynamicRate: dynamicRate.toFixed(6)
    });
    
    return dynamicRate;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞:', error);
    return config.BASE_EXCHANGE_RATE;
  }
}

// ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
let db;
let client;

async function connectDB() {
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', {
      uri: config.MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      uriLength: config.MONGODB_URI?.length || 0
    });
    
    client = new MongoClient(config.MONGODB_URI);
    await client.connect();
    console.log('üîå MongoDB –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
    
    db = client.db();
    console.log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–∞');
    
    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', {
      databaseName: db.databaseName,
      collections: await db.listCollections().toArray().then(cols => cols.map(c => c.name))
    });
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users...');
    await db.collection('users').createIndex({ id: 1 }, { unique: true });
    await db.collection('users').createIndex({ username: 1 });
    await db.collection('users').createIndex({ 'miner.active': 1 });
    await db.collection('users').createIndex({ lastSeen: -1 });
    await db.collection('users').createIndex({ referrerId: 1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è users —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ promocodes...');
    await db.collection('promocodes').createIndex({ code: 1 }, { unique: true });
    await db.collection('promocodes').createIndex({ isActive: 1 });
    await db.collection('promocodes').createIndex({ expiresAt: 1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è promocodes —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ withdrawalRequests...');
    await db.collection('withdrawalRequests').createIndex({ userId: 1 });
    await db.collection('withdrawalRequests').createIndex({ status: 1 });
    await db.collection('withdrawalRequests').createIndex({ createdAt: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è withdrawalRequests —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ supportTickets...');
    await db.collection('supportTickets').createIndex({ userId: 1 });
    await db.collection('supportTickets').createIndex({ status: 1 });
    await db.collection('supportTickets').createIndex({ createdAt: -1 });
    await db.collection('supportTickets').createIndex({ id: 1 }, { unique: true });
    await db.collection('supportTickets').createIndex({ adminId: 1 });
    await db.collection('supportTickets').createIndex({ updatedAt: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è supportTickets —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ taskChecks...');
    await db.collection('taskChecks').createIndex({ userId: 1 });
    await db.collection('taskChecks').createIndex({ status: 1 });
    await db.collection('taskChecks').createIndex({ createdAt: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è taskChecks —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ dailyTasks...');
    await db.collection('dailyTasks').createIndex({ userId: 1 });
    await db.collection('dailyTasks').createIndex({ date: 1 });
    await db.collection('dailyTasks').createIndex({ completed: 1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è dailyTasks —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ exchangeHistory...');
    await db.collection('exchangeHistory').createIndex({ userId: 1 });
    await db.collection('exchangeHistory').createIndex({ timestamp: -1 });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è exchangeHistory —Å–æ–∑–¥–∞–Ω—ã');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ reserve...');
    try {
      await db.collection('reserve').createIndex({ currency: 1 }, { unique: true });
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è reserve —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      if (error.code === 11000) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏, —É–¥–∞–ª—è–µ–º –∏—Ö –∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞–Ω–æ–≤–æ
        console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–∑–µ—Ä–≤–µ...');
        const deleteResult = await db.collection('reserve').deleteMany({ currency: null });
        console.log('–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π:', { deletedCount: deleteResult.deletedCount });
        await db.collection('reserve').createIndex({ currency: 1 }, { unique: true });
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è reserve –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω');
      } else {
        throw error;
      }
    }
    console.log('‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    console.log('üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞...');
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤
    await initializeReserve();
    console.log('‚úÖ –†–µ–∑–µ—Ä–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', {
      databaseName: db.databaseName,
      collectionsCount: (await db.listCollections().toArray()).length
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    console.log('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', {
      error: error.message,
      stack: error.stack,
      mongoUri: config.MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    });
    process.exit(1);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞
async function initializeReserve() {
  try {
    // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    await db.collection('reserve').deleteMany({ currency: null });
    
    let reserve = await db.collection('reserve').findOne({ currency: 'main' });
    
    if (!reserve) {
      reserve = {
        currency: 'main',
        stars: config.INITIAL_RESERVE_STARS,
        magnumCoins: config.INITIAL_RESERVE_MAGNUM_COINS,
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      await db.collection('reserve').insertOne(reserve);
      console.log('üí∞ –†–µ–∑–µ—Ä–≤ –≤–∞–ª—é—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          } else {
        console.log('üí∞ –†–µ–∑–µ—Ä–≤ –≤–∞–ª—é—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞:', error);
  }
}

// ==================== –ö–ï–®–ò–†–û–í–ê–ù–ò–ï ====================
const userCache = new Map();
const statsCache = new Map();

function getCachedUser(id) {
  const cached = userCache.get(id);
  if (cached && (Date.now() - cached.timestamp) < config.USER_CACHE_TTL) {
    return cached.user;
  }
  return null;
}

function setCachedUser(id, user) {
  userCache.set(id, { user, timestamp: Date.now() });
}

function getCachedStats(key) {
  const cached = statsCache.get(key);
  if (cached && (Date.now() - cached.timestamp) < config.STATS_CACHE_TTL) {
    return cached.data;
  }
  return null;
}

function setCachedStats(key, data) {
  statsCache.set(key, { data, timestamp: Date.now() });
}

// ==================== –£–¢–ò–õ–ò–¢–´ ====================
function formatNumber(num) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ num —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
  if (num === null || num === undefined || isNaN(num)) {
    return '0.00';
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  num = Number(num);
  
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  }
  return num.toFixed(2);
}

function formatTime(seconds) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ seconds —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
  if (seconds === null || seconds === undefined || isNaN(seconds)) {
    return '0—Å';
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  seconds = Number(seconds);
  
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;
  
  if (hours > 0) {
    return `${hours}—á ${minutes}–º ${secs}—Å`;
  } else if (minutes > 0) {
    return `${minutes}–º ${secs}—Å`;
  }
  return `${secs}—Å`;
}

function getUserRank(user) {
  const stars = user.stars || 0;
  if (stars >= 1000000) return 'üëë –õ–µ–≥–µ–Ω–¥–∞';
  if (stars >= 500000) return 'üíé –ê–ª–º–∞–∑';
  if (stars >= 100000) return 'üèÜ –ß–µ–º–ø–∏–æ–Ω';
  if (stars >= 50000) return '‚≠ê –ó–≤–µ–∑–¥–∞';
  if (stars >= 10000) return 'üåü –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª';
  if (stars >= 5000) return 'üí´ –≠–∫—Å–ø–µ—Ä—Ç';
  if (stars >= 1000) return '‚ú® –ú–∞—Å—Ç–µ—Ä';
  if (stars >= 500) return 'üéØ –û–ø—ã—Ç–Ω—ã–π';
  if (stars >= 100) return 'üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π';
  return 'üå± –ù–æ–≤–∏—á–æ–∫';
}

function isAdmin(userId) {
  return config.ADMIN_IDS.includes(userId);
}
// ==================== –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function ensureUserFields(user) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  if (!user.statistics) {
    user.statistics = {
      joinDate: user.createdAt || new Date(),
      lastSeen: new Date(),
      totalSessions: 1,
      totalActions: 0,
      favoriteAction: null
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–µ—Ä–º—É
  if (!user.farm) {
    user.farm = {
      lastFarm: null,
      farmCount: 0,
      totalFarmEarnings: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–π–Ω–µ—Ä
  if (!user.miner) {
    user.miner = {
      active: false,
      level: 1,
      efficiency: 1,
      lastReward: null,
      totalMined: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
  if (!user.dailyBonus) {
    user.dailyBonus = {
      lastBonus: null,
      streak: 0,
      maxStreak: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–º–µ–Ω
  if (!user.exchange) {
    user.exchange = {
      totalExchanged: 0,
      exchangeCount: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
  if (!user.withdrawal) {
    user.withdrawal = {
      totalWithdrawn: 0,
      withdrawalCount: 0,
      pendingAmount: 0
    };
  }
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è
  if (!user.tasks) {
    user.tasks = {
      dailyTasks: [],
      sponsorTasks: [],
      lastDailyTasksReset: null,
      completedTasksCount: 0,
      totalTaskRewards: 0
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
  if (!user.support) {
    user.support = {
      ticketsCount: 0,
      lastTicket: null
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  if (!user.settings) {
    user.settings = {
      notifications: true,
      language: 'ru',
      theme: 'default'
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  if (!user.achievements) {
    user.achievements = [];
  }
  
  if (!user.achievementsCount) {
    user.achievementsCount = 0;
  }
  
  if (!user.achievementsProgress) {
    user.achievementsProgress = {};
  }
  
  if (!user.titles) {
    user.titles = ['üå± –ù–æ–≤–∏—á–æ–∫'];
  }
  
  if (!user.mainTitle) {
    user.mainTitle = 'üå± –ù–æ–≤–∏—á–æ–∫';
  }
  
  if (!user.referrals) {
    user.referrals = [];
  }
  
  if (!user.referralsCount) {
    user.referralsCount = 0;
  }
  
  if (!user.totalReferralEarnings) {
    user.totalReferralEarnings = 0;
  }
  
  if (!user.totalEarnedStars) {
    user.totalEarnedStars = user.stars || 0;
  }
  
  if (!user.totalEarnedMagnumCoins) {
    user.totalEarnedMagnumCoins = user.magnumCoins || 0;
  }
  
  if (!user.level) {
    user.level = 1;
  }
  
  if (!user.experience) {
    user.experience = 0;
  }
  
  if (!user.experienceToNextLevel) {
    user.experienceToNextLevel = 100;
  }
  
  if (!user.rank) {
    user.rank = getUserRank(user);
  }
  
  if (!user.referralCode) {
    user.referralCode = generateReferralCode();
  }
  
  return user;
}
async function getUser(id, ctx = null) {
  try {
    logFunction('getUser', id, { ctx: ctx ? 'present' : 'null' });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}`);
    const cached = getCachedUser(id);
    if (cached) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ`);
      console.log(`–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id}:`, {
        level: cached.level,
        magnumCoins: cached.magnumCoins,
        stars: cached.stars,
        banned: cached.banned,
        adminState: cached.adminState
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (cached.banned) {
        console.log(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–∏–∑ –∫–µ—à–∞)`);
        if (ctx) {
          console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${id}`);
          await ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }
        return null;
      }
      return cached;
    }

    console.log(`üìä –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    let user = await db.collection('users').findOne({ id: id });
    
    if (user) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      console.log(`üìä –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, {
        adminState: user.adminState,
        level: user.level,
        isAdmin: isAdmin(user.id)
      });
    }
    
    if (!user) {
      console.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}`);
      console.log(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, {
        username: ctx?.from?.username || null,
        firstName: ctx?.from?.first_name || null,
        lastName: ctx?.from?.last_name || null,
        hasContext: !!ctx
      });
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = {
        id: id,
        username: ctx?.from?.username || null,
        firstName: ctx?.from?.first_name || null,
        lastName: ctx?.from?.last_name || null,
        stars: config.INITIAL_STARS,
        magnumCoins: config.INITIAL_MAGNUM_COINS,
        totalEarnedStars: config.INITIAL_STARS,
        totalEarnedMagnumCoins: config.INITIAL_MAGNUM_COINS,
        level: 1,
        experience: 0,
        experienceToNextLevel: 100,
        rank: getUserRank({ stars: config.INITIAL_STARS }),
        mainTitle: 'üå± –ù–æ–≤–∏—á–æ–∫',
        titles: ['üå± –ù–æ–≤–∏—á–æ–∫'],
        achievements: [],
        achievementsCount: 0,
        achievementsProgress: {},
        referralCode: generateReferralCode(),
        referrerId: null,
        referrals: [],
        referralsCount: 0,
        totalReferralEarnings: 0,
        farm: {
          lastFarm: null,
          farmCount: 0,
          totalFarmEarnings: 0
        },
        miner: {
          active: false,
          level: 1,
          efficiency: 1,
          lastReward: null,
          totalMined: 0
        },
        dailyBonus: {
          lastBonus: null,
          streak: 0,
          maxStreak: 0
        },
        exchange: {
          totalExchanged: 0,
          exchangeCount: 0
        },
        withdrawal: {
          totalWithdrawn: 0,
          withdrawalCount: 0,
          pendingAmount: 0
        },
        tasks: {
          dailyTasks: [],
          sponsorTasks: [],
          lastDailyTasksReset: null,
          completedTasksCount: 0,
          totalTaskRewards: 0
        },
        support: {
          ticketsCount: 0,
          lastTicket: null
        },
        settings: {
          notifications: true,
          language: 'ru',
          theme: 'default'
        },
        statistics: {
          joinDate: new Date(),
          lastSeen: new Date(),
          totalSessions: 1,
          totalActions: 0,
          favoriteAction: null
        },
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
      const insertResult = await db.collection('users').insertOne(user);
      console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, { insertedId: insertResult.insertedId });
      console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${user.username || user.id}`);
    } else {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      console.log(`–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id}:`, {
        level: user.level,
        magnumCoins: user.magnumCoins,
        stars: user.stars,
        banned: user.banned,
        lastSeen: user.statistics?.lastSeen
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (user.banned) {
        console.log(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–∏–∑ –ë–î)`);
        if (ctx) {
          console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${id}`);
          await ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }
        return null;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
      console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}`);
      user = ensureUserFields(user);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const oldLastSeen = user.statistics?.lastSeen;
      const oldSessions = user.statistics?.totalSessions || 0;
      user.statistics.lastSeen = new Date();
      user.statistics.totalSessions = oldSessions + 1;
      
      console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, {
        oldLastSeen,
        newLastSeen: user.statistics.lastSeen,
        oldSessions,
        newSessions: user.statistics.totalSessions
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      console.log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      const updateResult = await db.collection('users').updateOne(
        { id: id },
        { 
          $set: { 
            'statistics.lastSeen': user.statistics.lastSeen,
            'statistics.totalSessions': user.statistics.totalSessions,
            updatedAt: new Date()
          }
        }
      );
      console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, { 
        matchedCount: updateResult.matchedCount,
        modifiedCount: updateResult.modifiedCount 
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} –≤ –∫–µ—à`);
    setCachedUser(id, user);
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`);
    console.log(`üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, {
      adminState: user.adminState,
      level: user.level,
      isAdmin: isAdmin(user.id)
    });
    return user;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, error);
    console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, {
      error: error.message,
      stack: error.stack
    });
    return null;
  }
}

function generateReferralCode() {
  return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// ==================== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ====================
async function checkSubscription(ctx) {
  try {
    if (!config.REQUIRED_CHANNEL) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (!config.REQUIRED_CHANNEL.startsWith('@') && !config.REQUIRED_CHANNEL.startsWith('https://t.me/')) {
      return true;
    }
    
    const member = await ctx.telegram.getChatMember(config.REQUIRED_CHANNEL, ctx.from.id);
    return ['creator', 'administrator', 'member'].includes(member.status);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    return true;
  }
}

async function showSubscriptionMessage(ctx) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  if (!config.REQUIRED_CHANNEL || (!config.REQUIRED_CHANNEL.startsWith('@') && !config.REQUIRED_CHANNEL.startsWith('https://t.me/'))) {
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const user = await getUser(ctx.from.id);
    if (user) {
      await showMainMenu(ctx, user);
    }
    return;
  }
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', config.REQUIRED_CHANNEL)],
    [Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'check_subscription')]
  ]);
  
  await ctx.reply(
    `üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n` +
    `üì¢ –ö–∞–Ω–∞–ª: ${config.REQUIRED_CHANNEL}\n\n` +
    `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"`,
    keyboard
  );
}

// ==================== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ====================
async function handleReferral(userId, referrerId) {
  try {
    if (userId === referrerId) return;
    
    const user = await getUser(userId);
    if (user.referrerId) return; // –£–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä
    
    const referrer = await getUser(referrerId);
    if (!referrer) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: userId },
      { 
        $set: { 
          referrerId: referrerId,
          updatedAt: new Date()
        }
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    await db.collection('users').updateOne(
      { id: referrerId },
      { 
        $inc: { 
          referralsCount: 1,
          totalReferralEarnings: config.REFERRAL_BONUS,
          magnumCoins: config.REFERRAL_BONUS,
          totalEarnedMagnumCoins: config.REFERRAL_BONUS
        },
        $push: { referrals: userId },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(userId);
    userCache.delete(referrerId);
    
    log(`üë• –†–µ—Ñ–µ—Ä–∞–ª: ${userId} -> ${referrerId}`);
  } catch (error) {
    logError(error, '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
  }
}
// ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================
async function showMainMenu(ctx, user) {
  const rank = getUserRank(user);
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
  const buttons = [
    [
      Markup.button.callback('üåæ –§–∞—Ä–º', 'farm')
    ],
    [
      Markup.button.callback('üí± –û–±–º–µ–Ω', 'exchange'),
      Markup.button.callback('üí∞ –í—ã–≤–æ–¥', 'withdrawal')
    ],
    [
      Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus'),
      Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'tasks')
    ],
    [
      Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements'),
      Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')
    ],
    [
      Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'promocode'),
      Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')
    ]
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (isAdmin(user.id)) {
    buttons.push([
      Markup.button.callback('üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')
    ]);
  }
  
  const keyboard = Markup.inlineKeyboard(buttons);
  
  const message = 
    `üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!*\n\n` +
    `üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n` +
    `‚îú ID: \`${user.id}\`\n` +
    `‚îú –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
    `‚îú –£—Ä–æ–≤–µ–Ω—å: ${user.level}\n` +
    `‚îú –†–∞–Ω–≥: ${rank}\n` +
    `‚îî –¢–∏—Ç—É–ª: ${user.mainTitle}\n\n` +
    `üíé *–ë–∞–ª–∞–Ω—Å:*\n` +
    `‚îú ‚≠ê Stars: \`${formatNumber(user.stars)}\`\n` +
    `‚îî ü™ô Magnum Coins: \`${formatNumber(user.magnumCoins)}\`\n\n` +
    `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
    `‚îú –û–ø—ã—Ç: \`${user.experience}/${user.experienceToNextLevel}\`\n` +
    `‚îú –†–µ—Ñ–µ—Ä–∞–ª—ã: \`${user.referralsCount}\`\n` +
    `‚îî –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: \`${user.achievementsCount}\`\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

async function showMainMenuStart(ctx, user) {
  const rank = getUserRank(user);
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
  const buttons = [
    [
      Markup.button.callback('üåæ –§–∞—Ä–º', 'farm')
    ],
    [
      Markup.button.callback('üí± –û–±–º–µ–Ω', 'exchange'),
      Markup.button.callback('üí∞ –í—ã–≤–æ–¥', 'withdrawal')
    ],
    [
      Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus'),
      Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'tasks')
    ],
    [
      Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements'),
      Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')
    ],
    [
      Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'promocode'),
      Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')
    ]
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (isAdmin(user.id)) {
    buttons.push([
      Markup.button.callback('üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')
    ]);
  }
  
  const keyboard = Markup.inlineKeyboard(buttons);
  
  const message = 
    `üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!*\n\n` +
    `üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n` +
    `‚îú ID: \`${user.id}\`\n` +
    `‚îú –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
    `‚îú –£—Ä–æ–≤–µ–Ω—å: ${user.level}\n` +
    `‚îú –†–∞–Ω–≥: ${rank}\n` +
    `‚îî –¢–∏—Ç—É–ª: ${user.mainTitle}\n\n` +
    `üíé *–ë–∞–ª–∞–Ω—Å:*\n` +
    `‚îú ‚≠ê Stars: \`${formatNumber(user.stars)}\`\n` +
    `‚îî ü™ô Magnum Coins: \`${formatNumber(user.magnumCoins)}\`\n\n` +
    `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
    `‚îú –û–ø—ã—Ç: \`${user.experience}/${user.experienceToNextLevel}\`\n` +
    `‚îú –†–µ—Ñ–µ—Ä–∞–ª—ã: \`${user.referralsCount}\`\n` +
    `‚îî –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: \`${user.achievementsCount}\`\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

// ==================== –ú–ê–ô–ù–ò–ù–ì ====================
async function showMinerMenu(ctx, user) {
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –º–∞–π–Ω–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
  if (!user.miner) {
    user.miner = {
      active: false,
      level: 1,
      efficiency: 1,
      lastReward: null,
      totalMined: 0
    };
  }
  
  const miner = user.miner;
  const isActive = miner.active || false;
  const efficiency = miner.efficiency || 1;
  const rewardPerHour = config.MINER_REWARD_PER_HOUR * efficiency;
  
  let statusText = isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
  let lastRewardText = '';
  
  if (miner.lastReward) {
    const timeSince = Math.floor((Date.now() - miner.lastReward.getTime()) / 1000);
    if (timeSince < 3600) {
      const remaining = 3600 - timeSince;
      lastRewardText = `\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${formatTime(remaining)}`;
    }
  }
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        isActive ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä',
        isActive ? 'stop_miner' : 'start_miner'
      )
    ],
    [
      Markup.button.callback('‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä', 'upgrade_miner'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'miner_stats')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `‚õèÔ∏è *–ú–∞–π–Ω–µ—Ä*\n\n` +
    `üìä *–°—Ç–∞—Ç—É—Å:* ${statusText}\n` +
    `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${miner.level}\n` +
    `‚ö° *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${efficiency}x\n` +
    `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(rewardPerHour)} Stars\n` +
    `üíé *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:* ${formatNumber(miner.totalMined)} Stars${lastRewardText}\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}
async function startMiner(ctx, user) {
  try {
    log(`‚õèÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (user.miner.active) {
      log(`‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!');
      return;
    }
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'miner.active': true,
          'miner.lastReward': new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚úÖ –ú–∞–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å Magnum Coins –∫–∞–∂–¥—ã–π —á–∞—Å.');
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    await updateMinerMenu(ctx, { ...user, miner: { ...user.miner, active: true } });
  } catch (error) {
    logError(error, '–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞');
  }
}

async function stopMiner(ctx, user) {
  try {
    log(`‚èπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (!user.miner.active) {
      log(`‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ö†Ô∏è –ú–∞–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      return;
    }
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'miner.active': false,
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚èπÔ∏è –ú–∞–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    await updateMinerMenu(ctx, { ...user, miner: { ...user.miner, active: false } });
  } catch (error) {
    logError(error, '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–π–Ω–µ—Ä–∞');
  }
}
// ==================== –£–õ–£–ß–®–ï–ù–ò–ï –ú–ê–ô–ù–ï–†–ê ====================
async function showMinerUpgrade(ctx, user) {
  try {
    log(`‚¨ÜÔ∏è –ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const miner = user.miner;
    const currentLevel = miner.level || 1;
    const currentEfficiency = miner.efficiency || 1;
    
    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
    const upgradeCost = currentLevel * 100; // 100 Magnum Coins –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    const newEfficiency = currentEfficiency + 0.1;
    const newRewardPerHour = config.MINER_REWARD_PER_HOUR * newEfficiency;
    
    const canUpgrade = user.magnumCoins >= upgradeCost;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          canUpgrade ? `‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å (${formatNumber(upgradeCost)} MC)` : `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MC (${formatNumber(upgradeCost)})`,
          canUpgrade ? 'confirm_miner_upgrade' : 'insufficient_funds'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
    ]);
    
    const message = 
      `‚¨ÜÔ∏è *–£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞*\n\n` +
      `üìä *–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:* ${currentLevel}\n` +
      `‚ö° *–¢–µ–∫—É—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${currentEfficiency.toFixed(1)}x\n` +
      `üí∞ *–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(config.MINER_REWARD_PER_HOUR * currentEfficiency)} Magnum Coins\n\n` +
      `üìà *–ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è:*\n` +
      `‚ö° *–ù–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${newEfficiency.toFixed(1)}x\n` +
      `üí∞ *–ù–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(newRewardPerHour)} Magnum Coins\n\n` +
      `üíé *–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è:* ${formatNumber(upgradeCost)} Magnum Coins\n` +
      `üíé *–í–∞—à –±–∞–ª–∞–Ω—Å:* ${formatNumber(user.magnumCoins)} Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ú–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  }
}

// ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–ô–ù–ï–†–ê ====================
async function showMinerStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const miner = user.miner;
    const isActive = miner.active || false;
    const efficiency = miner.efficiency || 1;
    const rewardPerHour = config.MINER_REWARD_PER_HOUR * efficiency;
    
    let statusText = isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
    let lastRewardText = '';
    let nextRewardText = '';
    
    if (miner.lastReward) {
      const timeSince = Math.floor((Date.now() - miner.lastReward.getTime()) / 1000);
      if (timeSince < 3600) {
        const remaining = 3600 - timeSince;
        nextRewardText = `\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${formatTime(remaining)}`;
      } else {
        nextRewardText = `\n‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –Ω–∞–≥—Ä–∞–¥—ã!`;
      }
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'miner')]
    ]);
    
    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞*\n\n` +
      `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${miner.level || 1}\n` +
      `‚ö° *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${efficiency.toFixed(1)}x\n` +
      `üìä *–°—Ç–∞—Ç—É—Å:* ${statusText}\n` +
      `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(rewardPerHour)} Magnum Coins\n` +
      `üíé *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:* ${formatNumber(miner.totalMined || 0)} Magnum Coins\n` +
      `‚è∞ *–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞:* ${miner.lastReward ? miner.lastReward.toLocaleString('ru-RU') : '–ù–µ—Ç'}\n` +
      `${nextRewardText}\n\n` +
      `üìà *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚Ä¢ –ú–∞–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n` +
      `‚Ä¢ –ù–∞–≥—Ä–∞–¥—ã –≤—ã–¥–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å\n` +
      `‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏\n` +
      `‚Ä¢ –ú–æ–∂–Ω–æ —É–ª—É—á—à–∞—Ç—å –∑–∞ Magnum Coins`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  }
}
// ==================== –§–£–ù–ö–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –ú–ê–ô–ù–ï–†–ê ====================
async function upgradeMiner(ctx, user) {
  try {
    log(`‚¨ÜÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const miner = user.miner;
    const currentLevel = miner.level || 1;
    const currentEfficiency = miner.efficiency || 1;
    const upgradeCost = currentLevel * 100;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    if (user.magnumCoins < upgradeCost) {
      log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins!');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä
    const newLevel = currentLevel + 1;
    const newEfficiency = currentEfficiency + 0.1;
    
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnumCoins: -upgradeCost,
          totalEarnedMagnumCoins: -upgradeCost
        },
        $set: { 
          'miner.level': newLevel,
          'miner.efficiency': newEfficiency,
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery(`‚úÖ –ú–∞–π–Ω–µ—Ä —É–ª—É—á—à–µ–Ω! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${newLevel}, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${newEfficiency.toFixed(1)}x`);
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showMinerMenu(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞');
  }
}

// ==================== –§–ê–†–ú ====================
async function showFarmMenu(ctx, user) {
  const farm = user.farm;
  const now = Date.now();
  const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
  const timeSince = Math.floor((now - lastFarm) / 1000);
  const cooldown = config.FARM_COOLDOWN;
  
  const canFarm = timeSince >= cooldown;
  const remainingTime = canFarm ? 0 : cooldown - timeSince;
  
  const baseReward = config.FARM_BASE_REWARD;
  const bonus = Math.min(user.level * 0.1, 2); // –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å
  const totalReward = baseReward + bonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canFarm ? 'üåæ –§–∞—Ä–º–∏—Ç—å' : `‚è≥ ${formatTime(remainingTime)}`,
        canFarm ? 'do_farm' : 'farm_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'farm_stats'),
      Markup.button.callback('üéØ –ë–æ–Ω—É—Å—ã', 'farm_bonuses')
    ],
    [
      Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä', 'miner')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üåæ *–§–∞—Ä–º*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canFarm ? 'üü¢ –ì–æ—Ç–æ–≤' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Magnum Coins\n` +
    `üéØ *–ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å:* +${formatNumber(bonus)} Magnum Coins\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Magnum Coins\n` +
    `üìä *–í—Å–µ–≥–æ —Ñ–∞—Ä–º–æ–≤:* ${farm.farmCount}\n` +
    `üíé *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${formatNumber(farm.totalFarmEarnings)} Magnum Coins\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}

async function doFarm(ctx, user) {
  try {
    log(`üåæ –ü–æ–ø—ã—Ç–∫–∞ —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const farm = user.farm;
    const now = Date.now();
    const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
    const timeSince = Math.floor((now - lastFarm) / 1000);
    const cooldown = config.FARM_COOLDOWN;
    
    log(`‚è∞ –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞—Ä–º–∞: ${timeSince}—Å, –∫—É–ª–¥–∞—É–Ω: ${cooldown}—Å`);
    
    if (timeSince < cooldown) {
      const remaining = cooldown - timeSince;
      log(`‚è≥ –ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Å—Ç–∞–ª–æ—Å—å: ${remaining}—Å`);
      await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(remaining)} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞—Ä–º–æ–º!`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
      startFarmCountdown(ctx, user, remaining);
      
      return;
    }
    
    const baseReward = config.FARM_BASE_REWARD;
    const bonus = Math.min(user.level * 0.1, 2);
    const totalReward = baseReward + bonus;
    
    log(`üí∞ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã: –±–∞–∑–æ–≤–∞—è ${baseReward}, –±–æ–Ω—É—Å ${bonus}, –∏—Ç–æ–≥–æ ${totalReward} Magnum Coins`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnumCoins: totalReward,
          totalEarnedMagnumCoins: totalReward,
          experience: Math.floor(totalReward * 10),
          'farm.farmCount': 1,
          'farm.totalFarmEarnings': totalReward,
          'statistics.totalActions': 1
        },
        $set: { 
          'farm.lastFarm': new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –§–∞—Ä–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalReward} Magnum Coins`);
    await ctx.answerCbQuery(
      `üåæ –§–∞—Ä–º –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber(totalReward)} Magnum Coins`
    );
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ñ–∞—Ä–º–∞
    await updateFarmMenu(ctx, { ...user, farm: { ...farm, lastFarm: new Date() } });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ñ–∞—Ä–º–∞
    log(`‚è∞ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    startFarmCountdown(ctx, { ...user, farm: { ...farm, lastFarm: new Date() } }, cooldown);
  } catch (error) {
    logError(error, '–§–∞—Ä–º');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ñ–∞—Ä–º–∞');
  }
}
// ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–†–ú–ê ====================
async function showFarmStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const farm = user.farm;
    const now = Date.now();
    const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
    const timeSince = Math.floor((now - lastFarm) / 1000);
    const cooldown = config.FARM_COOLDOWN;
    
    const canFarm = timeSince >= cooldown;
    const remainingTime = canFarm ? 0 : cooldown - timeSince;
    
    const baseReward = config.FARM_BASE_REWARD;
    const bonus = Math.min(user.level * 0.1, 2);
    const totalReward = baseReward + bonus;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          canFarm ? 'üåæ –§–∞—Ä–º–∏—Ç—å' : `‚è≥ ${formatTime(remainingTime)}`,
          canFarm ? 'do_farm' : 'farm_cooldown'
        )
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'farm_stats'),
        Markup.button.callback('üéØ –ë–æ–Ω—É—Å—ã', 'farm_bonuses')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'farm')]
    ]);
    
    const message = 
      `üåæ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞—Ä–º–∞*\n\n` +
      `üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ —Ñ–∞—Ä–º–æ–≤: \`${farm.farmCount || 0}\`\n` +
      `‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(farm.totalFarmEarnings || 0)}\` Magnum Coins\n` +
      `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${farm.farmCount > 0 ? formatNumber((farm.totalFarmEarnings || 0) / farm.farmCount) : '0.00'}\` Magnum Coins\n\n` +
      `‚è∞ *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*\n` +
      `‚îú –°—Ç–∞—Ç—É—Å: ${canFarm ? 'üü¢ –ì–æ—Ç–æ–≤' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${formatNumber(baseReward)}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å: \`+${formatNumber(bonus)}\` Magnum Coins\n` +
      `‚îî –ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞: \`${formatNumber(totalReward)}\` Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞—Ä–º–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}
// ==================== –ë–û–ù–£–°–´ –§–ê–†–ú–ê ====================
async function showFarmBonuses(ctx, user) {
  try {
    log(`üéØ –ü–æ–∫–∞–∑ –±–æ–Ω—É—Å–æ–≤ —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const farm = user.farm;
    const now = Date.now();
    const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
    const timeSince = Math.floor((now - lastFarm) / 1000);
    const cooldown = config.FARM_COOLDOWN;
    
    const canFarm = timeSince >= cooldown;
    const remainingTime = canFarm ? 0 : cooldown - timeSince;
    
    const baseReward = config.FARM_BASE_REWARD;
    const bonus = Math.min(user.level * 0.1, 2);
    const totalReward = baseReward + bonus;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          canFarm ? 'üåæ –§–∞—Ä–º–∏—Ç—å' : `‚è≥ ${formatTime(remainingTime)}`,
          canFarm ? 'do_farm' : 'farm_cooldown'
        )
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'farm_stats'),
        Markup.button.callback('üéØ –ë–æ–Ω—É—Å—ã', 'farm_bonuses')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'farm')]
    ]);
    
    const message = 
      `üéØ *–ë–æ–Ω—É—Å—ã —Ñ–∞—Ä–º–∞*\n\n` +
      `üí∞ *–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤:*\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${formatNumber(baseReward)}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å: \`+${formatNumber(bonus)}\` Magnum Coins\n` +
      `‚îî –ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞: \`${formatNumber(totalReward)}\` Magnum Coins\n\n` +
      `üìà *–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –±–æ–Ω—É—Å—ã:*\n` +
      `‚îú –ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞\n` +
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: \`+2.00\` Magnum Coins\n` +
      `‚îî –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: \`${user.level || 1}\`\n\n` +
      `‚è∞ *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*\n` +
      `‚îú –°—Ç–∞—Ç—É—Å: ${canFarm ? 'üü¢ –ì–æ—Ç–æ–≤' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
      `‚îî ${canFarm ? '–ú–æ–∂–µ—Ç–µ —Ñ–∞—Ä–º–∏—Ç—å!' : `–û—Å—Ç–∞–ª–æ—Å—å: ${formatTime(remainingTime)}`}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –±–æ–Ω—É—Å–æ–≤ —Ñ–∞—Ä–º–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–Ω—É—Å–æ–≤');
  }
}
// ==================== –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° ====================
async function updateMinerMenu(ctx, user) {
  try {
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –º–∞–π–Ω–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (!user.miner) {
      log(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      user.miner = {
        active: false,
        level: 1,
        efficiency: 1,
        lastReward: null,
        totalMined: 0
      };
    }
  
  const miner = user.miner;
  const isActive = miner.active || false;
  const efficiency = miner.efficiency || 1;
  const rewardPerHour = config.MINER_REWARD_PER_HOUR * efficiency;
  
  let statusText = isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
  let lastRewardText = '';
  
  if (miner.lastReward) {
    const timeSince = Math.floor((Date.now() - miner.lastReward.getTime()) / 1000);
    if (timeSince < 3600) {
      const remaining = 3600 - timeSince;
      lastRewardText = `\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${formatTime(remaining)}`;
    }
  }
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        isActive ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä',
        isActive ? 'stop_miner' : 'start_miner'
      )
    ],
    [
      Markup.button.callback('‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä', 'upgrade_miner'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'miner_stats')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `‚õèÔ∏è *–ú–∞–π–Ω–µ—Ä*\n\n` +
    `üìä *–°—Ç–∞—Ç—É—Å:* ${statusText}\n` +
    `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${miner.level}\n` +
    `‚ö° *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${efficiency}x\n` +
    `üí∞ *–ù–∞–≥—Ä–∞–¥–∞/—á–∞—Å:* ${formatNumber(rewardPerHour)} Stars\n` +
    `üíé *–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:* ${formatNumber(miner.totalMined)} Stars${lastRewardText}\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
    log(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    log(`‚úÖ –ú–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    log(`üîÑ Fallback: –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await showMinerMenu(ctx, user);
  }
}
async function updateFarmMenu(ctx, user) {
  try {
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const farm = user.farm;
    const now = Date.now();
    const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
    const timeSince = Math.floor((now - lastFarm) / 1000);
    const cooldown = config.FARM_COOLDOWN;
  
  const canFarm = timeSince >= cooldown;
  const remainingTime = canFarm ? 0 : cooldown - timeSince;
  
  const baseReward = config.FARM_BASE_REWARD;
  const bonus = Math.min(user.level * 0.1, 2);
  const totalReward = baseReward + bonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canFarm ? 'üåæ –§–∞—Ä–º–∏—Ç—å' : `‚è≥ ${formatTime(remainingTime)}`,
        canFarm ? 'do_farm' : 'farm_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'farm_stats'),
      Markup.button.callback('üéØ –ë–æ–Ω—É—Å—ã', 'farm_bonuses')
    ],
    [
      Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä', 'miner')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üåæ *–§–∞—Ä–º*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canFarm ? 'üü¢ –ì–æ—Ç–æ–≤' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Magnum Coins\n` +
    `üéØ *–ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å:* +${formatNumber(bonus)} Magnum Coins\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Magnum Coins\n` +
    `üìä *–í—Å–µ–≥–æ —Ñ–∞—Ä–º–æ–≤:* ${farm.farmCount}\n` +
    `üíé *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${formatNumber(farm.totalFarmEarnings)} Magnum Coins\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
    log(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    log(`‚úÖ –ú–µ–Ω—é —Ñ–∞—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    log(`üîÑ Fallback: –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await showFarmMenu(ctx, user);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ —Ñ–∞—Ä–º–∞
function startFarmCountdown(ctx, user, remainingSeconds) {
  const countdownKey = `farm_countdown_${user.id}`;
  
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (global[countdownKey]) {
    clearInterval(global[countdownKey]);
  }
  
  let secondsLeft = remainingSeconds;
  
  const updateCountdown = async () => {
    try {
      if (secondsLeft <= 0) {
        // –ö—É–ª–¥–∞—É–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        clearInterval(global[countdownKey]);
        delete global[countdownKey];
        
        const updatedUser = await getUser(ctx.from.id);
        if (updatedUser) {
          await updateFarmMenu(ctx, updatedUser);
          log(`üîÑ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Ñ–∞—Ä–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
        }
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
      const updatedUser = await getUser(ctx.from.id);
      if (updatedUser) {
        const farm = updatedUser.farm;
        const now = Date.now();
        const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
        const timeSince = Math.floor((now - lastFarm) / 1000);
        const cooldown = config.FARM_COOLDOWN;
        const canFarm = timeSince >= cooldown;
        
        // –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∏—Å—Ç–µ–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (canFarm) {
          clearInterval(global[countdownKey]);
          delete global[countdownKey];
          await updateFarmMenu(ctx, updatedUser);
          log(`üîÑ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Ñ–∞—Ä–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
          return;
        }
        
        const baseReward = config.FARM_BASE_REWARD;
        const bonus = Math.min(updatedUser.level * 0.1, 2);
        const totalReward = baseReward + bonus;
        
        const keyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback(
              canFarm ? 'üåæ –§–∞—Ä–º–∏—Ç—å' : `‚è≥ ${formatTime(secondsLeft)}`,
              canFarm ? 'do_farm' : 'farm_cooldown'
            )
          ],
          [
            Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'farm_stats'),
            Markup.button.callback('üéØ –ë–æ–Ω—É—Å—ã', 'farm_bonuses')
          ],
          [
            Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä', 'miner')
          ],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
        ]);
        
        const message = 
          `üåæ *–§–∞—Ä–º*\n\n` +
          `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canFarm ? 'üü¢ –ì–æ—Ç–æ–≤' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
          `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Magnum Coins\n` +
          `üéØ *–ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å:* +${formatNumber(bonus)} Magnum Coins\n` +
          `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Magnum Coins\n` +
          `üìä *–í—Å–µ–≥–æ —Ñ–∞—Ä–º–æ–≤:* ${farm.farmCount}\n` +
          `üíé *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${formatNumber(farm.totalFarmEarnings)} Magnum Coins\n\n` +
          `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        });
      }
      
      secondsLeft--;
    } catch (error) {
      logError(error, '–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Ñ–∞—Ä–º–∞');
      clearInterval(global[countdownKey]);
      delete global[countdownKey];
    }
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  global[countdownKey] = setInterval(updateCountdown, 1000);
  
  // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  updateCountdown();
  
  log(`‚è∞ –ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Å—Ç–∞–ª–æ—Å—å: ${remainingSeconds}—Å`);
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–∞
function startBonusCountdown(ctx, user, remainingSeconds) {
  const countdownKey = `bonus_countdown_${user.id}`;
  
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (global[countdownKey]) {
    clearInterval(global[countdownKey]);
  }
  
  let secondsLeft = remainingSeconds;
  
  const updateCountdown = async () => {
    try {
      if (secondsLeft <= 0) {
        // –ö—É–ª–¥–∞—É–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        clearInterval(global[countdownKey]);
        delete global[countdownKey];
        
        const updatedUser = await getUser(ctx.from.id);
        if (updatedUser) {
          await updateBonusMenu(ctx, updatedUser);
          log(`üîÑ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
        }
        return;
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
      const updatedUser = await getUser(ctx.from.id);
      if (updatedUser) {
        const bonus = updatedUser.dailyBonus;
        const now = new Date();
        const lastBonus = bonus.lastBonus;
        
        let canClaim = false;
        let timeUntilNext = 0;
        
        if (!lastBonus) {
          canClaim = true;
        } else {
          const timeSince = now.getTime() - lastBonus.getTime();
          const dayInMs = 24 * 60 * 60 * 1000;
          
          if (timeSince >= dayInMs) {
            canClaim = true;
          } else {
            timeUntilNext = dayInMs - timeSince;
          }
        }
        
        const baseReward = config.DAILY_BONUS_BASE;
        const streakBonus = Math.min(bonus.streak * 0.5, 5);
        const totalReward = baseReward + streakBonus;
        
        const keyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback(
              canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(secondsLeft / 1000))}`,
              canClaim ? 'claim_bonus' : 'bonus_cooldown'
            )
          ],
          [
            Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'bonus_stats'),
            Markup.button.callback('üî• –°–µ—Ä–∏—è', 'bonus_streak')
          ],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
        ]);
        
        const message = 
          `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
          `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canClaim ? 'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
          `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Magnum Coins\n` +
          `üî• *–ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏:* +${formatNumber(streakBonus)} Magnum Coins\n` +
          `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Magnum Coins\n` +
          `üî• *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:* ${bonus.streak} –¥–Ω–µ–π\n` +
          `üìä *–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ:* ${bonus.totalClaimed || 0} –±–æ–Ω—É—Å–æ–≤\n` +
          `üíé *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${formatNumber(bonus.totalEarned || 0)} Magnum Coins\n\n` +
          `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        });
      }
      
      secondsLeft--;
    } catch (error) {
      logError(error, '–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –±–æ–Ω—É—Å–∞');
      clearInterval(global[countdownKey]);
      delete global[countdownKey];
    }
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  global[countdownKey] = setInterval(updateCountdown, 1000);
  
  // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  updateCountdown();
  
  log(`‚è∞ –ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Å—Ç–∞–ª–æ—Å—å: ${remainingSeconds}—Å`);
}

// ==================== –ê–î–ú–ò–ù –ü–û–°–¢–´ ====================
async function showAdminPosts(ctx, user) {
  try {
    log(`üìù –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π', 'admin_create_post_with_button'),
        Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏', 'admin_create_post_no_button')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤', 'admin_posts_stats')
      ],
      [
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')
      ]
    ]);
    
    const message = 
      `üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏*\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª @magnumtap\n\n` +
      `üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π\n` +
      `‚îú üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏\n` +
      `‚îî üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏');
  }
}
// ==================== –ê–î–ú–ò–ù –ü–†–û–ú–û–ö–û–î–´ ====================
async function showAdminPromocodes(ctx, user) {
  try {
    log(`üé´ –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    const promocodes = await db.collection('promocodes').find({}).toArray();
    const totalPromocodes = promocodes.length;
    const activePromocodes = promocodes.filter(p => p.activations > 0).length;
    const totalActivations = promocodes.reduce((sum, p) => sum + (p.totalActivations || 0), 0);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üé´ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_create_promocode')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', 'admin_promocodes_stats')
      ],
      [
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')
      ]
    ]);
    
    const message = 
      `üé´ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏*\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: \`${totalPromocodes}\`\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: \`${activePromocodes}\`\n` +
      `‚îî –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: \`${totalActivations}\`\n\n` +
      `üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú üé´ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n` +
      `‚îî üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏');
  }
}
// ==================== –ü–†–û–ú–û–ö–û–î–´ ====================
async function showPromocodeMenu(ctx, user) {
  try {
    log(`üé´ –ü–æ–∫–∞–∑ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'enter_promocode')
      ],
      [
        Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', 'promocode_history')
      ],
      [
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')
      ]
    ]);
    
    const message = 
      `üé´ *–ü—Ä–æ–º–æ–∫–æ–¥—ã*\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã!\n\n` +
      `üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥\n` +
      `‚îî üìä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
  }
}

async function showBonusMenu(ctx, user) {
  const bonus = user.dailyBonus;
  const now = new Date();
  const lastBonus = bonus.lastBonus;
  
  let canClaim = false;
  let timeUntilNext = 0;
  
  if (!lastBonus) {
    canClaim = true;
  } else {
    const timeSince = now.getTime() - lastBonus.getTime();
    const dayInMs = 24 * 60 * 60 * 1000;
    
    if (timeSince >= dayInMs) {
      canClaim = true;
    } else {
      timeUntilNext = dayInMs - timeSince;
    }
  }
  
  const baseReward = config.DAILY_BONUS_BASE;
  const streakBonus = Math.min(bonus.streak * 0.5, 5);
  const totalReward = baseReward + streakBonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(timeUntilNext / 1000))}`,
        canClaim ? 'claim_bonus' : 'bonus_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'bonus_stats'),
      Markup.button.callback('üî• –°–µ—Ä–∏—è', 'bonus_streak')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canClaim ? 'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Magnum Coins\n` +
    `üî• *–ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏:* +${formatNumber(streakBonus)} Magnum Coins\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Magnum Coins\n` +
    `üìä *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:* ${bonus.streak} –¥–Ω–µ–π\n` +
    `üèÜ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è:* ${bonus.maxStreak} –¥–Ω–µ–π\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard.reply_markup
  });
}
async function updateBonusMenu(ctx, user) {
  try {
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const now = new Date();
    const lastBonus = bonus.lastBonus;
  
  let canClaim = false;
  let timeUntilNext = 0;
  
  if (!lastBonus) {
    canClaim = true;
  } else {
    const timeSince = now.getTime() - lastBonus.getTime();
    const dayInMs = 24 * 60 * 60 * 1000;
    
    if (timeSince >= dayInMs) {
      canClaim = true;
    } else {
      timeUntilNext = dayInMs - timeSince;
    }
  }
  
  const baseReward = config.DAILY_BONUS_BASE;
  const streakBonus = Math.min(bonus.streak * 0.5, 5);
  const totalReward = baseReward + streakBonus;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(timeUntilNext / 1000))}`,
        canClaim ? 'claim_bonus' : 'bonus_cooldown'
      )
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'bonus_stats'),
      Markup.button.callback('üî• –°–µ—Ä–∏—è', 'bonus_streak')
    ],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ]);
  
  const message = 
    `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
    `‚è∞ *–°—Ç–∞—Ç—É—Å:* ${canClaim ? 'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n` +
    `üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(baseReward)} Magnum Coins\n` +
    `üî• *–ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏:* +${formatNumber(streakBonus)} Magnum Coins\n` +
    `üíé *–ò—Ç–æ–≥–æ –Ω–∞–≥—Ä–∞–¥–∞:* ${formatNumber(totalReward)} Magnum Coins\n` +
    `üìä *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:* ${bonus.streak} –¥–Ω–µ–π\n` +
    `üèÜ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è:* ${bonus.maxStreak} –¥–Ω–µ–π\n\n` +
    `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
    log(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    log(`‚úÖ –ú–µ–Ω—é –±–æ–Ω—É—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    log(`üîÑ Fallback: –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await showBonusMenu(ctx, user);
  }
}
async function claimBonus(ctx, user) {
  try {
    log(`üéÅ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const now = new Date();
    const lastBonus = bonus.lastBonus;
    
    if (lastBonus) {
      const timeSince = now.getTime() - lastBonus.getTime();
      const dayInMs = 24 * 60 * 60 * 1000;
      
      log(`‚è∞ –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞: ${Math.floor(timeSince / 1000)}—Å`);
      
          if (timeSince < dayInMs) {
      const remaining = dayInMs - timeSince;
      log(`‚è≥ –ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –æ—Å—Ç–∞–ª–æ—Å—å: ${Math.floor(remaining / 1000)}—Å`);
      await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(Math.floor(remaining / 1000))} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞!`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
      startBonusCountdown(ctx, user, Math.floor(remaining / 1000));
      
      return;
    }
    }
    
    const baseReward = config.DAILY_BONUS_BASE;
    const streakBonus = Math.min(bonus.streak * 0.5, 5);
    const totalReward = baseReward + streakBonus;
    
    log(`üí∞ –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞: –±–∞–∑–æ–≤–∞—è ${baseReward}, —Å–µ—Ä–∏—è ${bonus.streak}, –±–æ–Ω—É—Å —Å–µ—Ä–∏–∏ ${streakBonus}, –∏—Ç–æ–≥–æ ${totalReward} Stars`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ª–∏ –¥–µ–Ω—å
    let newStreak = bonus.streak + 1;
    if (lastBonus) {
      const timeSince = now.getTime() - lastBonus.getTime();
      const twoDaysInMs = 2 * 24 * 60 * 60 * 1000;
      if (timeSince > twoDaysInMs) {
        newStreak = 1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é
        log(`üîÑ –°–±—Ä–æ—Å —Å–µ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} (–ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å)`);
      }
    }
    
    log(`üìà –ù–æ–≤–∞—è —Å–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤: ${newStreak}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnumCoins: totalReward,
          totalEarnedMagnumCoins: totalReward,
          experience: Math.floor(totalReward * 5),
          'statistics.totalActions': 1
        },
        $set: { 
          'dailyBonus.lastBonus': now,
          'dailyBonus.streak': newStreak,
          'dailyBonus.maxStreak': Math.max(newStreak, bonus.maxStreak),
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalReward} Magnum Coins, —Å–µ—Ä–∏—è: ${newStreak} –¥–Ω–µ–π`);
    await ctx.answerCbQuery(
      `üéÅ –ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω! –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber(totalReward)} Magnum Coins, —Å–µ—Ä–∏—è: ${newStreak} –¥–Ω–µ–π`
    );
    
    log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±–æ–Ω—É—Å–∞
    await updateBonusMenu(ctx, { ...user, dailyBonus: { ...bonus, lastBonus: now, streak: newStreak } });
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞');
  }
}

// ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–ù–£–°–ê ====================
async function showBonusStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const totalEarned = bonus.totalEarned || 0;
    const claimedCount = bonus.claimedCount || 0;
    const maxStreak = bonus.maxStreak || 0;
    const currentStreak = bonus.streak || 0;
    
    const averageReward = claimedCount > 0 ? totalEarned / claimedCount : 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'bonus')]
    ]);
    
    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤*\n\n` +
      `üí∞ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: \`${claimedCount}\`\n` +
      `‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarned)}\` Magnum Coins\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${formatNumber(averageReward)}\` Magnum Coins\n` +
      `‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: \`${maxStreak}\` –¥–Ω–µ–π\n\n` +
      `üî• *–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:*\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Ä–∏—è: \`${currentStreak}\` –¥–Ω–µ–π\n` +
      `‚îî –†–µ–∫–æ—Ä–¥–Ω–∞—è —Å–µ—Ä–∏—è: \`${maxStreak}\` –¥–Ω–µ–π\n\n` +
      `üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å:*\n` +
      `‚îú –î–æ 7 –¥–Ω–µ–π: \`${Math.min(currentStreak, 7)}/7\`\n` +
      `‚îú –î–æ 30 –¥–Ω–µ–π: \`${Math.min(currentStreak, 30)}/30\`\n` +
      `‚îî –î–æ 100 –¥–Ω–µ–π: \`${Math.min(currentStreak, 100)}/100\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

async function showBonusStreak(ctx, user) {
  try {
    log(`üî• –ü–æ–∫–∞–∑ —Å–µ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const bonus = user.dailyBonus;
    const currentStreak = bonus.streak || 0;
    const maxStreak = bonus.maxStreak || 0;
    const lastBonus = bonus.lastBonus;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
    let timeUntilNext = 0;
    if (lastBonus) {
      const now = new Date();
      const timeSince = now.getTime() - lastBonus.getTime();
      const dayInMs = 24 * 60 * 60 * 1000;
      timeUntilNext = Math.max(0, dayInMs - timeSince);
    }
    
    const canClaim = timeUntilNext === 0;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          canClaim ? 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å' : `‚è≥ ${formatTime(Math.floor(timeUntilNext / 1000))}`,
          canClaim ? 'claim_bonus' : 'bonus_cooldown'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'bonus')]
    ]);
    
    const message = 
      `üî• *–°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤*\n\n` +
      `üìä *–í–∞—à–∞ —Å–µ—Ä–∏—è:*\n` +
      `‚îú –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: \`${currentStreak}\` –¥–Ω–µ–π\n` +
      `‚îú –†–µ–∫–æ—Ä–¥–Ω–∞—è —Å–µ—Ä–∏—è: \`${maxStreak}\` –¥–Ω–µ–π\n` +
      `‚îî –°—Ç–∞—Ç—É—Å: ${canClaim ? 'üü¢ –ú–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å' : 'üî¥ –ö—É–ª–¥–∞—É–Ω'}\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞:*\n` +
      `‚îî ${canClaim ? '–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω!' : formatTime(Math.floor(timeUntilNext / 1000))}\n\n` +
      `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–µ—Ä–∏–∏:*\n` +
      `‚îú 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${currentStreak >= 7 ? '‚úÖ' : '‚ùå'}\n` +
      `‚îú 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${currentStreak >= 30 ? '‚úÖ' : '‚ùå'}\n` +
      `‚îî 100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${currentStreak >= 100 ? '‚úÖ' : '‚ùå'}\n\n` +
      `üí° *–°–æ–≤–µ—Ç:* –ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ —Å–µ—Ä–∏—è, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å!\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å–µ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–µ—Ä–∏–∏');
  }
}
// ==================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====================
async function showAdminPanel(ctx, user) {
  try {
    log(`üë®‚Äçüíº –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'admin_stats'),
        Markup.button.callback('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'admin_users')
      ],
      [
        Markup.button.callback('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏', 'admin_balance'),
        Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', 'admin_settings')
      ],
      [
        Markup.button.callback('üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏', 'admin_posts'),
        Markup.button.callback('üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏', 'admin_promocodes')
      ],
      [
        Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast'),
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞', 'admin_cache')
      ],
      [
        Markup.button.callback('üè¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º', 'admin_reserve')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üë®‚Äçüíº *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*\n\n` +
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n` +
      `üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n` +
      `‚îú üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
      `‚îú üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –ø–æ–∏—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n` +
      `‚îú üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤\n` +
      `‚îú ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è\n` +
      `‚îú üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª\n` +
      `‚îú üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n` +
      `‚îú üì¢ –†–∞—Å—Å—ã–ª–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n` +
      `‚îú üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ - –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞\n` +
      `‚îî üè¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º –±–∏—Ä–∂–∏\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
  }
}

async function showAdminStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const totalUsers = await db.collection('users').countDocuments();
    const activeUsers = await db.collection('users').countDocuments({
      'lastSeen': { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
    });
    const newUsersToday = await db.collection('users').countDocuments({
      'createdAt': { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º
    const totalMagnumCoins = await db.collection('users').aggregate([
      { $group: { _id: null, total: { $sum: '$magnumCoins' } } }
    ]).toArray();
    
    const totalStars = await db.collection('users').aggregate([
      { $group: { _id: null, total: { $sum: '$stars' } } }
    ]).toArray();
    
    const totalMagnum = totalMagnumCoins.length > 0 ? totalMagnumCoins[0].total : 0;
    const totalStarsAmount = totalStars.length > 0 ? totalStars[0].total : 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n` +
      `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n` +
      `‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${totalUsers}\`\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: \`${activeUsers}\`\n` +
      `‚îî –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: \`${newUsersToday}\`\n\n` +
      `üí∞ *–≠–∫–æ–Ω–æ–º–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ Magnum Coins: \`${formatNumber(totalMagnum)}\`\n` +
      `‚îî –í—Å–µ–≥–æ Stars: \`${formatNumber(totalStarsAmount)}\`\n\n` +
      `üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`${Math.round((activeUsers / totalUsers) * 100)}%\`\n` +
      `‚îî –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –¥–µ–Ω—å: \`${newUsersToday}\` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

async function showAdminUsers(ctx, user) {
  try {
    log(`üë• –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_search_user'),
        Markup.button.callback('üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin_top_users')
      ],
      [
        Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 'admin_ban_user'),
        Markup.button.callback('‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 'admin_unban_user')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n` +
      `üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –Ω–∞–π—Ç–∏ –ø–æ ID\n` +
      `‚îú üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏\n` +
      `‚îú üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø\n` +
      `‚îî ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø\n\n` +
      `üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
  }
}
async function showAdminBalance(ctx, user) {
  try {
    log(`üí∞ –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Magnum Coins', 'admin_add_magnum'),
        Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Magnum Coins', 'admin_remove_magnum')
      ],
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Stars', 'admin_add_stars'),
        Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Stars', 'admin_remove_stars')
      ],
      [
        Markup.button.callback('üí∞ –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞', 'admin_mass_give'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤', 'admin_balance_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏*\n\n` +
      `üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
      `‚îú ‚ûï –î–æ–±–∞–≤–∏—Ç—å Magnum Coins - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n` +
      `‚îú ‚ûñ –£–±—Ä–∞—Ç—å Magnum Coins - —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n` +
      `‚îú ‚ûï –î–æ–±–∞–≤–∏—Ç—å Stars - –≤—ã–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã\n` +
      `‚îú ‚ûñ –£–±—Ä–∞—Ç—å Stars - —Å–ø–∏—Å–∞—Ç—å –∑–≤–µ–∑–¥—ã\n` +
      `‚îú üí∞ –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ - –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n` +
      `‚îî üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã!\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏');
  }
}
// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ó–ï–†–í–û–ú ====================
async function showAdminReserve(ctx, user) {
  try {
    log(`üè¶ –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∑–µ—Ä–≤
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const magnumCoinsReserve = reserve?.magnumCoins || config.INITIAL_RESERVE_MAGNUM_COINS;
    const starsReserve = reserve?.stars || config.INITIAL_RESERVE_STARS;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    const exchangeRate = await calculateExchangeRate();
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Magnum Coins', 'admin_reserve_add_mc'),
        Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Magnum Coins', 'admin_reserve_remove_mc')
      ],
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å Stars', 'admin_reserve_add_stars'),
        Markup.button.callback('‚ûñ –£–±—Ä–∞—Ç—å Stars', 'admin_reserve_remove_stars')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `üè¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º –±–∏—Ä–∂–∏*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–π —Ä–µ–∑–µ—Ä–≤:*\n` +
      `‚îú ü™ô Magnum Coins: \`${formatNumber(magnumCoinsReserve)}\`\n` +
      `‚îî ‚≠ê Stars: \`${formatNumber(starsReserve)}\`\n\n` +
      `üí± *–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞:*\n` +
      `‚îú 1 Magnum Coin = ${exchangeRate.toFixed(6)} Stars\n` +
      `‚îú 100 Magnum Coins = ${(100 * exchangeRate).toFixed(4)} Stars\n` +
      `‚îî –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–≤: ${(magnumCoinsReserve / starsReserve).toFixed(4)}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º');
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º
async function handleAdminAddReserveMC(ctx, user, text) {
  try {
    const amount = parseFloat(text);
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
    await db.collection('reserve').updateOne(
      { currency: 'main' },
      { 
        $inc: { magnumCoins: amount },
        $set: { updatedAt: new Date() }
      },
      { upsert: true }
    );
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º', 'admin_reserve')]
    ]);
    
    await ctx.reply(
      `‚úÖ *Magnum Coins –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤!*\n\n` +
      `üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ: \`${formatNumber(amount)}\` Magnum Coins\n\n` +
      `üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} –¥–æ–±–∞–≤–∏–ª ${amount} Magnum Coins –≤ —Ä–µ–∑–µ—Ä–≤`);
  } catch (error) {
    logError(error, `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Magnum Coins –≤ —Ä–µ–∑–µ—Ä–≤ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Magnum Coins –≤ —Ä–µ–∑–µ—Ä–≤.');
  }
}

async function handleAdminRemoveReserveMC(ctx, user, text) {
  try {
    const amount = parseFloat(text);
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∑–µ—Ä–≤
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const currentReserve = reserve?.magnumCoins || config.INITIAL_RESERVE_MAGNUM_COINS;
    
    if (amount > currentReserve) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins –≤ —Ä–µ–∑–µ—Ä–≤–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${formatNumber(currentReserve)}`);
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
    await db.collection('reserve').updateOne(
      { currency: 'main' },
      { 
        $inc: { magnumCoins: -amount },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º', 'admin_reserve')]
    ]);
    
    await ctx.reply(
      `‚úÖ *Magnum Coins —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞!*\n\n` +
      `üí∞ –£–¥–∞–ª–µ–Ω–æ: \`${formatNumber(amount)}\` Magnum Coins\n\n` +
      `üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} —É–¥–∞–ª–∏–ª ${amount} Magnum Coins –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞`);
  } catch (error) {
    logError(error, `–£–¥–∞–ª–µ–Ω–∏–µ Magnum Coins –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Magnum Coins –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞.');
  }
}

async function handleAdminAddReserveStars(ctx, user, text) {
  try {
    const amount = parseFloat(text);
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
    await db.collection('reserve').updateOne(
      { currency: 'main' },
      { 
        $inc: { stars: amount },
        $set: { updatedAt: new Date() }
      },
      { upsert: true }
    );
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º', 'admin_reserve')]
    ]);
    
    await ctx.reply(
      `‚úÖ *Stars –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤!*\n\n` +
      `‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ: \`${formatNumber(amount)}\` Stars\n\n` +
      `üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} –¥–æ–±–∞–≤–∏–ª ${amount} Stars –≤ —Ä–µ–∑–µ—Ä–≤`);
  } catch (error) {
    logError(error, `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars –≤ —Ä–µ–∑–µ—Ä–≤ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Stars –≤ —Ä–µ–∑–µ—Ä–≤.');
  }
}
async function handleAdminRemoveReserveStars(ctx, user, text) {
  try {
    const amount = parseFloat(text);
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∑–µ—Ä–≤
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const currentReserve = reserve?.stars || config.INITIAL_RESERVE_STARS;
    
    if (amount > currentReserve) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –≤ —Ä–µ–∑–µ—Ä–≤–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${formatNumber(currentReserve)}`);
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
    await db.collection('reserve').updateOne(
      { currency: 'main' },
      { 
        $inc: { stars: -amount },
        $set: { updatedAt: new Date() }
      }
    );
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º', 'admin_reserve')]
    ]);
    
    await ctx.reply(
      `‚úÖ *Stars —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞!*\n\n` +
      `‚≠ê –£–¥–∞–ª–µ–Ω–æ: \`${formatNumber(amount)}\` Stars\n\n` +
      `üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} —É–¥–∞–ª–∏–ª ${amount} Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞`);
  } catch (error) {
    logError(error, `–£–¥–∞–ª–µ–Ω–∏–µ Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞.');
  }
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏
async function handleAdminSetCommission(ctx, user, text) {
  try {
    const commission = parseFloat(text);
    
    if (isNaN(commission) || commission < 0 || commission > 10) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config.EXCHANGE_COMMISSION = commission;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–µ–π', 'admin_exchange_commission')]
    ]);
    
    await ctx.reply(
      `‚úÖ *–ö–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*\n\n` +
      `üí∏ –ù–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: \`${commission}%\`\n\n` +
      `üìä *–ü—Ä–∏–º–µ—Ä—ã –æ–±–º–µ–Ω–∞:*\n` +
      `‚îú 100 MC ‚Üí ${((100 - (100 * commission / 100)) * 0.001).toFixed(4)} Stars\n` +
      `‚îú 500 MC ‚Üí ${((500 - (500 * commission / 100)) * 0.001).toFixed(4)} Stars\n` +
      `‚îî 1000 MC ‚Üí ${((1000 - (1000 * commission / 100)) * 0.001).toFixed(4)} Stars\n\n` +
      `üí° –ö–æ–º–∏—Å—Å–∏—è –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫–æ –≤—Å–µ–º –Ω–æ–≤—ã–º –æ–±–º–µ–Ω–∞–º.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–æ–º–∏—Å—Å–∏—é ${commission}%`);
  } catch (error) {
    logError(error, `–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏.');
  }
}

async function showAdminSettings(ctx, user) {
  try {
    log(`‚öôÔ∏è –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üéØ –ù–∞–≥—Ä–∞–¥—ã —Ñ–∞—Ä–º–∞', 'admin_farm_rewards'),
        Markup.button.callback('‚è∞ –ö—É–ª–¥–∞—É–Ω—ã', 'admin_cooldowns')
      ],
      [
        Markup.button.callback('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 'admin_daily_bonus'),
        Markup.button.callback('‚õèÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–π–Ω–µ—Ä–∞', 'admin_miner_settings')
      ],
      [
        Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', 'admin_referral_settings'),
        Markup.button.callback('üì¢ –ö–∞–Ω–∞–ª—ã –ø–æ–¥–ø–∏—Å–∫–∏', 'admin_subscription_channels')
      ],
      [
        Markup.button.callback('üí∏ –ö–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–∞', 'admin_exchange_commission')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]);
    
    const message = 
      `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n` +
      `üîß *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú üéØ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —Ñ–∞—Ä–º–∞: \`${config.FARM_BASE_REWARD}\` Magnum Coins\n` +
      `‚îú ‚è∞ –ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞: \`${config.FARM_COOLDOWN}\` —Å–µ–∫—É–Ω–¥\n` +
      `‚îú üéÅ –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å: \`${config.DAILY_BONUS_BASE}\` Magnum Coins\n` +
      `‚îú ‚õèÔ∏è –ù–∞–≥—Ä–∞–¥–∞ –º–∞–π–Ω–µ—Ä–∞: \`${config.MINER_REWARD_PER_HOUR}\` Magnum Coins/—á–∞—Å\n` +
      `‚îú üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.REFERRAL_REWARD}\` Magnum Coins\n` +
      `‚îú üí∏ –ö–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–∞: \`${config.EXCHANGE_COMMISSION}%\`\n` +
      `‚îî üì¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: \`${config.REQUIRED_CHANNEL || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

async function showAdminFarmRewards(ctx, user) {
  try {
    log(`üéØ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–¥ —Ñ–∞—Ä–º–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É', 'admin_farm_reward_increase'),
        Markup.button.callback('‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É', 'admin_farm_reward_decrease')
      ],
      [
        Markup.button.callback('üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', 'admin_farm_reward_set'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä–∞–¥', 'admin_farm_reward_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üéØ *–ù–∞–≥—Ä–∞–¥—ã —Ñ–∞—Ä–º–∞*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.FARM_BASE_REWARD}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å: \`${Math.min(user.level * 0.1, 2)}\` Magnum Coins\n` +
      `‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.FARM_BASE_REWARD + 2}\` Magnum Coins\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ —Ñ–∞—Ä–º–æ–≤: \`${user.farm?.farmCount || 0}\`\n` +
      `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞—Ä–º–æ–º: \`${formatNumber(user.farm?.totalFarmEarnings || 0)}\` Magnum Coins\n` +
      `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${user.farm?.farmCount > 0 ? formatNumber((user.farm?.totalFarmEarnings || 0) / user.farm?.farmCount) : '0.00'}\` Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥ —Ñ–∞—Ä–º–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–¥ —Ñ–∞—Ä–º–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–¥');
  }
}
// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ò–°–°–ò–ï–ô ====================
async function showAdminExchangeCommission(ctx, user) {
  try {
    log(`üí∏ –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π –æ–±–º–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é', 'admin_commission_increase'),
        Markup.button.callback('‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é', 'admin_commission_decrease')
      ],
      [
        Markup.button.callback('üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', 'admin_commission_set'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–π', 'admin_commission_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üí∏ *–ö–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–∞*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: \`${config.EXCHANGE_COMMISSION}%\`\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è —Å 100 MC: \`${(100 * config.EXCHANGE_COMMISSION / 100).toFixed(2)}\` Magnum Coins\n` +
      `‚îî –ö–æ–º–∏—Å—Å–∏—è —Å 1000 MC: \`${(1000 * config.EXCHANGE_COMMISSION / 100).toFixed(2)}\` Magnum Coins\n\n` +
      `üìä *–ü—Ä–∏–º–µ—Ä—ã –æ–±–º–µ–Ω–∞:*\n` +
      `‚îú 100 MC ‚Üí ${((100 - (100 * config.EXCHANGE_COMMISSION / 100)) * 0.001).toFixed(4)} Stars\n` +
      `‚îú 500 MC ‚Üí ${((500 - (500 * config.EXCHANGE_COMMISSION / 100)) * 0.001).toFixed(4)} Stars\n` +
      `‚îî 1000 MC ‚Üí ${((1000 - (1000 * config.EXCHANGE_COMMISSION / 100)) * 0.001).toFixed(4)} Stars\n\n` +
      `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è –≤–∑–∏–º–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ Magnum Coins\n` +
      `‚îî –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–µ–π –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π');
  }
}
async function showAdminCooldowns(ctx, user) {
  try {
    log(`‚è∞ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ª–¥–∞—É–Ω–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚è∞ –ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞', 'admin_cooldown_farm'),
        Markup.button.callback('üéÅ –ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞', 'admin_cooldown_bonus')
      ],
      [
        Markup.button.callback('‚õèÔ∏è –ö—É–ª–¥–∞—É–Ω –º–∞–π–Ω–µ—Ä–∞', 'admin_cooldown_miner'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤', 'admin_cooldown_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `‚è∞ *–ö—É–ª–¥–∞—É–Ω—ã*\n\n` +
      `‚è≥ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –§–∞—Ä–º: \`${config.FARM_COOLDOWN}\` —Å–µ–∫—É–Ω–¥ (\`${Math.floor(config.FARM_COOLDOWN / 60)}\` –º–∏–Ω—É—Ç)\n` +
      `‚îú –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: \`24\` —á–∞—Å–∞\n` +
      `‚îî –ú–∞–π–Ω–µ—Ä: \`60\` –º–∏–Ω—É—Ç\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n` +
      `‚îú –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Ñ–∞—Ä–º–∞–º–∏: \`${user.farm?.farmCount > 1 ? Math.floor(config.FARM_COOLDOWN / 60) : '–ù/–î'}\` –º–∏–Ω—É—Ç\n` +
      `‚îú –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º: ${user.farm?.lastFarm ? user.farm.lastFarm.toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞'}\n` +
      `‚îî –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–Ω—É—Å: ${user.dailyBonus?.lastBonus ? user.dailyBonus.lastBonus.toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞'}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ª–¥–∞—É–Ω–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ª–¥–∞—É–Ω–æ–≤');
  }
}

async function showAdminDailyBonus(ctx, user) {
  try {
    log(`üéÅ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üí∞ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞', 'admin_bonus_base'),
        Markup.button.callback('üî• –ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏', 'admin_bonus_streak')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤', 'admin_bonus_stats'),
        Markup.button.callback('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–∏–∏', 'admin_bonus_series')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.DAILY_BONUS_BASE}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é: \`+0.5\` Magnum Coins –∑–∞ –¥–µ–Ω—å\n` +
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å —Å–µ—Ä–∏–∏: \`5\` Magnum Coins\n` +
      `‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.DAILY_BONUS_BASE + 5}\` Magnum Coins\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
      `‚îú –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: \`${user.dailyBonus?.streak || 0}\` –¥–Ω–µ–π\n` +
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: \`${user.dailyBonus?.maxStreak || 0}\` –¥–Ω–µ–π\n` +
      `‚îú –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: \`${user.dailyBonus?.claimedCount || 0}\`\n` +
      `‚îî –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ–Ω—É—Å–∞–º–∏: \`${formatNumber(user.dailyBonus?.totalEarned || 0)}\` Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ–Ω—É—Å–∞');
  }
}
async function showAdminMinerSettings(ctx, user) {
  try {
    log(`‚õèÔ∏è –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —á–∞—Å', 'admin_miner_reward'),
        Markup.button.callback('‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 'admin_miner_efficiency')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞', 'admin_miner_stats'),
        Markup.button.callback('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π', 'admin_miner_levels')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `‚õèÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–π–Ω–µ—Ä–∞*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —á–∞—Å: \`${config.MINER_REWARD_PER_HOUR}\` Magnum Coins\n` +
      `‚îú –ë–∞–∑–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`1.0\`\n` +
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`5.0\`\n` +
      `‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.MINER_REWARD_PER_HOUR * 5}\` Magnum Coins/—á–∞—Å\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å –º–∞–π–Ω–µ—Ä–∞: \`${user.miner?.level || 1}\`\n` +
      `‚îú –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`${user.miner?.efficiency || 1.0}\`\n` +
      `‚îú –°—Ç–∞—Ç—É—Å: ${user.miner?.active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n` +
      `‚îú –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ: \`${formatNumber(user.miner?.totalMined || 0)}\` Magnum Coins\n` +
      `‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: ${user.miner?.lastReward ? user.miner.lastReward.toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞'}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–π–Ω–µ—Ä–∞');
  }
}
async function showAdminReferralSettings(ctx, user) {
  try {
    log(`üë• –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞', 'admin_referral_reward'),
        Markup.button.callback('üèÜ –ë–æ–Ω—É—Å—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'admin_referral_bonuses')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', 'admin_referral_stats'),
        Markup.button.callback('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π', 'admin_referral_levels')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\n` +
      `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: \`${config.REFERRAL_REWARD}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`50\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`100\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ 25 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`250\` Magnum Coins\n` +
      `‚îî –ë–æ–Ω—É—Å –∑–∞ 50 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`500\` Magnum Coins\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
      `‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${user.referralsCount || 0}\`\n` +
      `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(user.referralsEarnings || 0)}\` Magnum Coins\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å: \`${getReferralLevel(user.referralsCount || 0)}\`\n` +
      `‚îî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: \`${user.referralCode}\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
}

async function showAdminSubscriptionChannels(ctx, user) {
  try {
    log(`üì¢ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', 'admin_subscription_add'),
        Markup.button.callback('‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', 'admin_subscription_remove')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫', 'admin_subscription_stats'),
        Markup.button.callback('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏', 'admin_subscription_check')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]
    ]);
    
    const message = 
      `üì¢ *–ö–∞–Ω–∞–ª—ã –ø–æ–¥–ø–∏—Å–∫–∏*\n\n` +
      `üì∫ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
      `‚îú –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: \`${config.REQUIRED_CHANNEL || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\`\n` +
      `‚îú –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${config.REQUIRED_CHANNEL ? 'üü¢ –í–∫–ª—é—á–µ–Ω–∞' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n` +
      `‚îî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: \`–ü—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏\`\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${await db.collection('users').countDocuments()}\`\n` +
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${await db.collection('users').countDocuments({ 'lastSeen': { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } })}\`\n` +
      `‚îî –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: \`${Math.round((await db.collection('users').countDocuments({ 'lastSeen': { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } })) / (await db.collection('users').countDocuments()) * 100)}%\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏');
  }
}

async function showAdminTopUsers(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    const topByLevel = await db.collection('users').find().sort({ level: -1 }).limit(10).toArray();
    const topByMagnumCoins = await db.collection('users').find().sort({ magnumCoins: -1 }).limit(10).toArray();
    const topByStars = await db.collection('users').find().sort({ stars: -1 }).limit(10).toArray();
    const topByReferrals = await db.collection('users').find().sort({ referralsCount: -1 }).limit(10).toArray();
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚≠ê –ü–æ —É—Ä–æ–≤–Ω—é', 'admin_top_level'),
        Markup.button.callback('ü™ô –ü–æ Magnum Coins', 'admin_top_magnum')
      ],
      [
        Markup.button.callback('üíé –ü–æ Stars', 'admin_top_stars'),
        Markup.button.callback('üë• –ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', 'admin_top_referrals')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    let message = `üìä *–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é
    message += `‚≠ê *–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é:*\n`;
    topByLevel.forEach((user, index) => {
      message += `${index + 1}. ID: \`${user.id}\` - –£—Ä–æ–≤–µ–Ω—å: \`${user.level}\`\n`;
    });
    
    message += `\nü™ô *–¢–æ–ø –ø–æ Magnum Coins:*\n`;
    topByMagnumCoins.forEach((user, index) => {
      message += `${index + 1}. ID: \`${user.id}\` - \`${formatNumber(user.magnumCoins)}\` MC\n`;
    });
    
    message += `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
}
async function showAdminSearchUser(ctx, user) {
  try {
    log(`üîç –ü–æ–∫–∞–∑ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    const message = 
      `üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n` +
      `‚îú –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç\n` +
      `‚îú ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
      `‚îî –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* \`123456789\` –∏–ª–∏ \`@username\`\n\n` +
      `üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    user.adminState = 'searching_user';
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'searching_user', updatedAt: new Date() } }
    );
    
    log(`‚úÖ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–∏—Å–∫–∞');
  }
}
async function showAdminBanUser(ctx, user) {
  try {
    log(`üö´ –ü–æ–∫–∞–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    const message = 
      `üö´ *–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n` +
      `‚îú –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n` +
      `‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n` +
      `‚îî –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!\n\n` +
      `üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    user.adminState = 'banning_user';
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'banning_user', updatedAt: new Date() } }
    );
    
    log(`‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
  }
}
async function showAdminUnbanUser(ctx, user) {
  try {
    log(`‚úÖ –ü–æ–∫–∞–∑ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    const message = 
      `‚úÖ *–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n` +
      `‚îú –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n` +
      `‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n` +
      `‚îî –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è\n\n` +
      `üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    user.adminState = 'unbanning_user';
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'unbanning_user', updatedAt: new Date() } }
    );
    
    log(`‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
  } catch (error) {
    logError(error, `–ü–æ–∫–∞–∑ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${user.id}`);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
  }
}

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ê–ô–ù–ï–†–ê ====================
async function processMinerRewards() {
  try {
    const now = new Date();
    const hourAgo = new Date(now.getTime() - 60 * 60 * 1000);
    
    const activeMiners = await db.collection('users').find({
      'miner.active': true,
      'miner.lastReward': { $lt: hourAgo }
    }).toArray();
    
    for (const user of activeMiners) {
      const reward = config.MINER_REWARD_PER_HOUR * user.miner.efficiency;
      
      await db.collection('users').updateOne(
        { id: user.id },
        { 
          $inc: { 
            magnumCoins: reward,
            totalEarnedMagnumCoins: reward,
            experience: Math.floor(reward * 5),
            'miner.totalMined': reward
          },
          $set: { 
            'miner.lastReward': now,
            updatedAt: new Date()
          }
        }
      );
      
      userCache.delete(user.id);
      log(`‚õèÔ∏è –ú–∞–π–Ω–µ—Ä –Ω–∞–≥—Ä–∞–¥–∞: ${user.id} +${reward} Magnum Coins`);
    }
  } catch (error) {
    logError(error, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–µ—Ä–∞');
  }
}

// ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================
function log(message, type = 'INFO') {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [${type}] ${message}`;
  console.log(logMessage);
  
  // –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è Railway
  if (process.env.NODE_ENV === 'production') {
    console.log(logMessage);
  }
}
function logError(error, context = '') {
  const timestamp = new Date().toISOString();
  const errorMessage = error.message || error;
  const stack = error.stack || '';
  const logMessage = `[${timestamp}] [ERROR] ${context}: ${errorMessage}`;
  console.error(logMessage);
  
  if (stack) {
    const stackMessage = `[${timestamp}] [ERROR] Stack: ${stack}`;
    console.error(stackMessage);
  }
  
  // –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è Railway
  if (process.env.NODE_ENV === 'production') {
    console.error(logMessage);
    if (stack) {
      console.error(stackMessage);
    }
  }
}

function logDebug(message, data = null) {
  const timestamp = new Date().toISOString();
  let logMessage = `[${timestamp}] [DEBUG] ${message}`;
  
  if (data) {
    logMessage += ` | Data: ${JSON.stringify(data, null, 2)}`;
  }
  
  console.log(logMessage);
}

function logAction(userId, action, details = '') {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [ACTION] User ${userId} | Action: ${action} | Details: ${details}`;
  console.log(logMessage);
}

function logFunction(functionName, userId = null, params = null) {
  const timestamp = new Date().toISOString();
  let logMessage = `[${timestamp}] [FUNCTION] ${functionName}`;
  
  if (userId) {
    logMessage += ` | User: ${userId}`;
  }
  
  if (params) {
    logMessage += ` | Params: ${JSON.stringify(params)}`;
  }
  
  console.log(logMessage);
}
// ==================== –û–ë–ú–ï–ù ====================
async function showExchangeMenu(ctx, user) {
  try {
    log(`üí± –ü–æ–∫–∞–∑ –º–µ–Ω—é –æ–±–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    const exchangeRate = await calculateExchangeRate();
    const maxExchange = Math.floor(user.magnumCoins);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–µ
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const magnumCoinsReserve = reserve?.magnumCoins || config.INITIAL_RESERVE_MAGNUM_COINS;
    const starsReserve = reserve?.stars || config.INITIAL_RESERVE_STARS;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å –∫–æ–º–∏—Å—Å–∏–µ–π
    const commission10 = (10 * config.EXCHANGE_COMMISSION) / 100;
    const commission50 = (50 * config.EXCHANGE_COMMISSION) / 100;
    const commission100 = (100 * config.EXCHANGE_COMMISSION) / 100;
    const commission500 = (500 * config.EXCHANGE_COMMISSION) / 100;
    
    const stars10 = ((10 - commission10) * exchangeRate).toFixed(6);
    const stars50 = ((50 - commission50) * exchangeRate).toFixed(6);
    const stars100 = ((100 - commission100) * exchangeRate).toFixed(6);
    const stars500 = ((500 - commission500) * exchangeRate).toFixed(6);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(`ü™ô 10 MC ‚Üí ${stars10} Stars`, 'exchange_10'),
        Markup.button.callback(`ü™ô 50 MC ‚Üí ${stars50} Stars`, 'exchange_50')
      ],
      [
        Markup.button.callback(`ü™ô 100 MC ‚Üí ${stars100} Stars`, 'exchange_100'),
        Markup.button.callback(`ü™ô 500 MC ‚Üí ${stars500} Stars`, 'exchange_500')
      ],
      [
        Markup.button.callback('ü™ô –í—Å–µ Magnum Coins', 'exchange_all'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º–µ–Ω–æ–≤', 'exchange_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üí± *–û–±–º–µ–Ω –≤–∞–ª—é—Ç*\n\n` +
      `üí∞ *–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:*\n` +
      `‚îú ü™ô Magnum Coins: \`${formatNumber(user.magnumCoins)}\`\n` +
      `‚îî ‚≠ê Stars: \`${formatNumber(user.stars)}\`\n\n` +
      `üí± *–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:*\n` +
      `‚îú 1 Magnum Coin = ${exchangeRate.toFixed(6)} Stars\n` +
      `‚îú 100 Magnum Coins = ${((100 - (100 * config.EXCHANGE_COMMISSION / 100)) * exchangeRate).toFixed(4)} Stars\n` +
      `‚îî üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${config.EXCHANGE_COMMISSION}%\n\n` +
      `üè¶ *–†–µ–∑–µ—Ä–≤ –±–∏—Ä–∂–∏:*\n` +
      `‚îú ü™ô Magnum Coins: \`${formatNumber(magnumCoinsReserve)}\`\n` +
      `‚îî ‚≠ê Stars: \`${formatNumber(starsReserve)}\`\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º–µ–Ω–æ–≤:*\n` +
      `‚îú –í—Å–µ–≥–æ –æ–±–º–µ–Ω–æ–≤: \`${user.exchange?.totalExchanges || 0}\`\n` +
      `‚îî –í—Å–µ–≥–æ –æ–±–º–µ–Ω–µ–Ω–æ: \`${formatNumber(user.exchange?.totalExchanged || 0)}\` Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –æ–±–º–µ–Ω–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –æ–±–º–µ–Ω–∞');
  }
}
async function performExchange(ctx, user, amount) {
  try {
    log(`üí± –ü–æ–ø—ã—Ç–∫–∞ –æ–±–º–µ–Ω–∞ ${amount} Magnum Coins –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (amount > user.magnumCoins) {
      log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins –¥–ª—è –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    if (amount <= 0) {
      log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    const exchangeRate = await calculateExchangeRate();
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
    const commission = (amount * config.EXCHANGE_COMMISSION) / 100;
    const amountAfterCommission = amount - commission;
    const starsToReceive = amountAfterCommission * exchangeRate;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤ Stars
    const reserve = await db.collection('reserve').findOne({ currency: 'main' });
    const availableStars = reserve?.stars || config.INITIAL_RESERVE_STARS;
    
    if (starsToReceive > availableStars) {
      log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –≤ —Ä–µ–∑–µ—Ä–≤–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –≤ —Ä–µ–∑–µ—Ä–≤–µ –¥–ª—è –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnumCoins: -amount,
          stars: starsToReceive,
          'exchange.totalExchanges': 1,
          'exchange.totalExchanged': amount,
          'statistics.totalActions': 1
        },
        $set: { 
          updatedAt: new Date()
        }
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤ (–∫–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ Magnum Coins)
    await db.collection('reserve').updateOne(
      { currency: 'main' },
      { 
        $inc: { 
          magnumCoins: amount, // –ü–æ–ª–Ω–∞—è —Å—É–º–º–∞ –∏–¥–µ—Ç –≤ —Ä–µ–∑–µ—Ä–≤
          stars: -starsToReceive
        },
        $set: { 
          updatedAt: new Date()
        }
      }
    );
    
    log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    userCache.delete(user.id);
    
    log(`‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${amount} Magnum Coins ‚Üí ${starsToReceive} Stars (–∫—É—Ä—Å: ${exchangeRate}, –∫–æ–º–∏—Å—Å–∏—è: ${commission})`);
    await ctx.answerCbQuery(
      `‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω! ${formatNumber(amount)} Magnum Coins ‚Üí ${formatNumber(starsToReceive)} Stars\nüí∏ –ö–æ–º–∏—Å—Å–∏—è: ${formatNumber(commission)} Magnum Coins (${config.EXCHANGE_COMMISSION}%)`
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –æ–±–º–µ–Ω–∞
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showExchangeMenu(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω –≤–∞–ª—é—Ç');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞');
  }
}

// ==================== –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ====================
async function showAchievementsMenu(ctx, user) {
  try {
    log(`üèÜ –ü–æ–∫–∞–∑ –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = getAchievementsList(user);
    
    const completedAchievements = achievements.filter(a => a.condition);
    const totalAchievements = achievements.length;
    const completionRate = Math.round((completedAchievements.length / totalAchievements) * 100);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', 'achievements_progress'),
        Markup.button.callback('üéÅ –ù–∞–≥—Ä–∞–¥—ã', 'achievements_rewards')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    let message = `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n`;
    message += `üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å:* ${completedAchievements.length}/${totalAchievements} (${completionRate}%)\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const recentAchievements = achievements.slice(0, 5);
    message += `üéØ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n`;
    
    recentAchievements.forEach((achievement, index) => {
      const status = achievement.condition ? '‚úÖ' : '‚ùå';
      message += `${status} ${achievement.title}\n`;
      if (index < 4) message += `‚îî ${achievement.description}\n\n`;
    });
    
    if (achievements.length > 5) {
      message += `\n... –∏ –µ—â–µ ${achievements.length - 5} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n`;
    }
    
    message += `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }
}
function getAchievementsList(user) {
  return [
          {
        id: 'first_farm',
        title: 'üåæ –ü–µ—Ä–≤—ã–π —Ñ–∞—Ä–º',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∞—Ä–º',
        condition: user.farm?.farmCount >= 1,
        progress: user.farm?.farmCount || 0,
        target: 1,
        reward: '10 Magnum Coins'
      },
      {
        id: 'farm_master',
        title: 'üëë –ú–∞—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 100 —Ñ–∞—Ä–º–æ–≤',
        condition: user.farm?.farmCount >= 100,
        progress: user.farm?.farmCount || 0,
        target: 100,
        reward: '500 Magnum Coins'
      },
      {
        id: 'magnum_collector',
        title: 'ü™ô –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä Magnum',
        description: '–ù–∞–∫–æ–ø–∏—Ç–µ 1000 Magnum Coins',
        condition: user.magnumCoins >= 1000,
        progress: user.magnumCoins || 0,
        target: 1000,
        reward: '200 Magnum Coins'
      },
      {
        id: 'exchange_trader',
        title: 'üí± –¢—Ä–µ–π–¥–µ—Ä',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 50 –æ–±–º–µ–Ω–æ–≤',
        condition: user.exchange?.totalExchanges >= 50,
        progress: user.exchange?.totalExchanges || 0,
        target: 50,
        reward: '300 Magnum Coins'
      },
      {
        id: 'level_10',
        title: '‚≠ê –£—Ä–æ–≤–µ–Ω—å 10',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è',
        condition: user.level >= 10,
        progress: user.level || 1,
        target: 10,
        reward: '100 Magnum Coins'
      },
      {
        id: 'level_50',
        title: '‚≠ê‚≠ê –£—Ä–æ–≤–µ–Ω—å 50',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 50 —É—Ä–æ–≤–Ω—è',
        condition: user.level >= 50,
        progress: user.level || 1,
        target: 50,
        reward: '1000 Magnum Coins'
      },
      {
        id: 'referral_king',
        title: 'üë• –ö–æ—Ä–æ–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
        description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
        condition: user.referralsCount >= 10,
        progress: user.referralsCount || 0,
        target: 10,
        reward: '400 Magnum Coins'
      },
      {
        id: 'daily_streak',
        title: 'üî• –°–µ—Ä–∏—è –¥–Ω–µ–π',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        condition: user.dailyBonus?.streak >= 7,
        progress: user.dailyBonus?.streak || 0,
        target: 7,
        reward: '150 Magnum Coins'
      }
  ];
}
async function showAchievementsProgress(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const achievements = getAchievementsList(user);
    const completedAchievements = achievements.filter(a => a.condition);
    const totalAchievements = achievements.length;
    const completionRate = Math.round((completedAchievements.length / totalAchievements) * 100);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º', 'achievements')]
    ]);
    
    let message = `üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π*\n\n`;
    message += `üìà *–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:* ${completedAchievements.length}/${totalAchievements} (${completionRate}%)\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    message += `üéØ *–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n\n`;
    
    achievements.forEach((achievement, index) => {
      const status = achievement.condition ? '‚úÖ' : 'üîÑ';
      const progressPercent = Math.min(Math.round((achievement.progress / achievement.target) * 100), 100);
      const progressBar = createProgressBar(progressPercent);
      
      message += `${status} *${achievement.title}*\n`;
      message += `‚îî ${achievement.description}\n`;
      message += `‚îî –ü—Ä–æ–≥—Ä–µ—Å—Å: \`${achievement.progress}/${achievement.target}\` (${progressPercent}%)\n`;
      message += `‚îî ${progressBar}\n\n`;
    });
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
  }
}

async function showAchievementsRewards(ctx, user) {
  try {
    log(`üéÅ –ü–æ–∫–∞–∑ –Ω–∞–≥—Ä–∞–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const achievements = getAchievementsList(user);
    const completedAchievements = achievements.filter(a => a.condition);
    const totalRewards = completedAchievements.reduce((sum, a) => {
      const rewardAmount = parseInt(a.reward.split(' ')[0]);
      return sum + rewardAmount;
    }, 0);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º', 'achievements')]
    ]);
    
    let message = `üéÅ *–ù–∞–≥—Ä–∞–¥—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π*\n\n`;
    message += `üí∞ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: \`${completedAchievements.length}\`\n`;
    message += `‚îú –í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: \`${totalRewards} Magnum Coins\`\n`;
    message += `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${completedAchievements.length > 0 ? Math.round(totalRewards / completedAchievements.length) : 0} Magnum Coins\`\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    message += `üèÜ *–ù–∞–≥—Ä–∞–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n\n`;
    
    const categories = {
      'üåæ –§–∞—Ä–º': achievements.filter(a => a.id.includes('farm')),
      'ü™ô Magnum Coins': achievements.filter(a => a.id.includes('magnum')),
      'üí± –û–±–º–µ–Ω': achievements.filter(a => a.id.includes('exchange')),
      '‚≠ê –£—Ä–æ–≤–Ω–∏': achievements.filter(a => a.id.includes('level')),
      'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã': achievements.filter(a => a.id.includes('referral')),
      'üî• –°–µ—Ä–∏–∏': achievements.filter(a => a.id.includes('daily'))
    };
    
    Object.entries(categories).forEach(([category, categoryAchievements]) => {
      if (categoryAchievements.length > 0) {
        const completed = categoryAchievements.filter(a => a.condition);
        const totalReward = completed.reduce((sum, a) => {
          const rewardAmount = parseInt(a.reward.split(' ')[0]);
          return sum + rewardAmount;
        }, 0);
        
        message += `*${category}:*\n`;
        message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ: \`${completed.length}/${categoryAchievements.length}\`\n`;
        message += `‚îî –ù–∞–≥—Ä–∞–¥—ã: \`${totalReward} Magnum Coins\`\n\n`;
      }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Å–∞–º—ã—Ö —Ü–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const valuableAchievements = achievements
      .filter(a => !a.condition)
      .sort((a, b) => {
        const rewardA = parseInt(a.reward.split(' ')[0]);
        const rewardB = parseInt(b.reward.split(' ')[0]);
        return rewardB - rewardA;
      })
      .slice(0, 3);
    
    if (valuableAchievements.length > 0) {
      message += `üíé *–°–∞–º—ã–µ —Ü–µ–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ:*\n`;
      valuableAchievements.forEach((achievement, index) => {
        const rewardAmount = parseInt(achievement.reward.split(' ')[0]);
        message += `${index + 1}. ${achievement.title} - \`${achievement.reward}\`\n`;
      });
      message += `\n`;
    }
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞–≥—Ä–∞–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≥—Ä–∞–¥');
  }
}
function createProgressBar(percent) {
  const filled = Math.round(percent / 10);
  const empty = 10 - filled;
  return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
}
// ==================== –†–ï–§–ï–†–ê–õ–´ ====================
async function showReferralsMenu(ctx, user) {
  try {
    log(`üë• –ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', 'referral_link'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'referral_stats')
      ],
      [
        Markup.button.callback('üéÅ –ù–∞–≥—Ä–∞–¥—ã', 'referral_rewards'),
        Markup.button.callback('üë• –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', 'referral_list')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\n` +
      `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${user.referralsCount || 0}\`\n` +
      `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(user.referralsEarnings || 0)}\` Magnum Coins\n` +
      `‚îî –£—Ä–æ–≤–µ–Ω—å: \`${getReferralLevel(user.referralsCount || 0)}\`\n\n` +
      `üí∞ *–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n` +
      `‚îú –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: \`${config.REFERRAL_REWARD || 10}\` Magnum Coins\n` +
      `‚îú –ë–æ–Ω—É—Å –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`50\` Magnum Coins\n` +
      `‚îî –ë–æ–Ω—É—Å –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`100\` Magnum Coins\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
}

async function showReferralLink(ctx, user) {
  try {
    log(`üîó –ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const botUsername = (await ctx.telegram.getMe()).username;
    const referralLink = `https://t.me/${botUsername}?start=${user.id}`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.url('üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É', referralLink),
        Markup.button.callback('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 'copy_referral_link')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'referrals')]
    ]);
    
    const message = 
      `üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞*\n\n` +
      `üìù *–°—Å—ã–ª–∫–∞:*\n` +
      `\`${referralLink}\`\n\n` +
      `üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n` +
      `‚îú –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º\n` +
      `‚îú –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω—É—Ç –≤–∞—à–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏\n` +
      `‚îî –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n` +
      `üí∞ *–ù–∞–≥—Ä–∞–¥–∞:* \`${config.REFERRAL_REWARD || 10}\` Magnum Coins –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏');
  }
}

async function showReferralStats(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const referrals = await db.collection('users').find(
      { referrerId: user.id },
      { projection: { id: 1, firstName: 1, username: 1, level: 1, createdAt: 1 } }
    ).toArray();
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'referrals')]
    ]);
    
    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n`;
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚îú –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${user.referralsCount || 0}\`\n`;
    message += `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(user.referralsEarnings || 0)}\` Magnum Coins\n`;
    message += `‚îú –£—Ä–æ–≤–µ–Ω—å: \`${getReferralLevel(user.referralsCount || 0)}\`\n`;
    message += `‚îî –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${referrals.length > 0 ? Math.round(referrals.reduce((sum, r) => sum + (r.level || 1), 0) / referrals.length) : 0}\`\n\n`;
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–∏–º –±–æ–Ω—É—Å–∞–º
    const nextBonus5 = 5 - (user.referralsCount || 0);
    const nextBonus10 = 10 - (user.referralsCount || 0);
    
    message += `üéØ *–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –±–æ–Ω—É—Å–∞–º:*\n`;
    if (nextBonus5 > 0) {
      message += `‚îú –î–æ –±–æ–Ω—É—Å–∞ –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${nextBonus5}\` —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
    } else {
      message += `‚îú ‚úÖ –ë–æ–Ω—É—Å –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω\n`;
    }
    
    if (nextBonus10 > 0) {
      message += `‚îî –î–æ –±–æ–Ω—É—Å–∞ –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${nextBonus10}\` —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
    } else {
      message += `‚îî ‚úÖ –ë–æ–Ω—É—Å –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω\n`;
    }
    
    message += `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}
async function showReferralRewards(ctx, user) {
  try {
    log(`üéÅ –ü–æ–∫–∞–∑ –Ω–∞–≥—Ä–∞–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'referrals')]
    ]);
    
    const referralReward = config.REFERRAL_REWARD || 10;
    const totalEarnings = user.referralsEarnings || 0;
    const referralsCount = user.referralsCount || 0;
    
    let message = `üéÅ *–ù–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n`;
    
    // –¢–µ–∫—É—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
    message += `üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n`;
    message += `‚îú –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: \`${referralReward}\` Stars\n`;
    message += `‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarnings)}\` Stars\n`;
    message += `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${referralsCount > 0 ? Math.round(totalEarnings / referralsCount) : 0}\` Stars\n\n`;
    
    // –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤
    message += `üèÜ *–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤:*\n`;
    message += `‚îú 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`50\` Magnum Coins (–±–æ–Ω—É—Å)\n`;
    message += `‚îú 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`100\` Magnum Coins (–±–æ–Ω—É—Å)\n`;
    message += `‚îú 25 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`250\` Magnum Coins (–±–æ–Ω—É—Å)\n`;
    message += `‚îî 50 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`500\` Magnum Coins (–±–æ–Ω—É—Å)\n\n`;
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –±–æ–Ω—É—Å–∞–º
    message += `üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n`;
    const bonuses = [
      { count: 5, reward: 50, achieved: referralsCount >= 5 },
      { count: 10, reward: 100, achieved: referralsCount >= 10 },
      { count: 25, reward: 250, achieved: referralsCount >= 25 },
      { count: 50, reward: 500, achieved: referralsCount >= 50 }
    ];
    
    bonuses.forEach(bonus => {
      const status = bonus.achieved ? '‚úÖ' : 'üîÑ';
      const progress = bonus.achieved ? 
        `–í—ã–ø–æ–ª–Ω–µ–Ω–æ!` : 
        `–û—Å—Ç–∞–ª–æ—Å—å: ${bonus.count - referralsCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`;
      
      message += `${status} ${bonus.count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - \`${bonus.reward}\` Stars\n`;
      message += `‚îî ${progress}\n\n`;
    });
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞–≥—Ä–∞–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≥—Ä–∞–¥');
  }
}

function getReferralLevel(referralsCount) {
  if (referralsCount >= 50) return 'üëë –õ–µ–≥–µ–Ω–¥–∞';
  if (referralsCount >= 25) return '‚≠ê –ú–∞—Å—Ç–µ—Ä';
  if (referralsCount >= 10) return 'üî• –≠–∫—Å–ø–µ—Ä—Ç';
  if (referralsCount >= 5) return 'üíé –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª';
  if (referralsCount >= 1) return 'üå± –ù–æ–≤–∏—á–æ–∫';
  return 'üî∞ –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤';
}
async function showReferralList(ctx, user) {
  try {
    log(`üë• –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const referrals = await db.collection('users').find(
      { referrerId: user.id },
      { 
        projection: { 
          id: 1, 
          firstName: 1, 
          username: 1, 
          level: 1, 
          createdAt: 1,
          stars: 1,
          magnumCoins: 1
        },
        sort: { createdAt: -1 }
      }
    ).toArray();
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'referrals')]
    ]);
    
    let message = `üë• *–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n`;
    
    if (referrals.length === 0) {
      message += `üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n`;
      message += `üí° *–ö–∞–∫ –ø—Ä–∏–≤–ª–µ—á—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n`;
      message += `‚îú –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π\n`;
      message += `‚îú –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –¥—Ä—É–∑—å—è–º –æ –±–æ—Ç–µ\n`;
      message += `‚îî –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n`;
    } else {
      message += `üìä *–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:* \`${referrals.length}\`\n\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const recentReferrals = referrals.slice(0, 10);
      message += `üë§ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:*\n\n`;
      
      recentReferrals.forEach((referral, index) => {
        const daysAgo = Math.floor((Date.now() - referral.createdAt.getTime()) / (1000 * 60 * 60 * 24));
        const timeText = daysAgo === 0 ? '—Å–µ–≥–æ–¥–Ω—è' : daysAgo === 1 ? '–≤—á–µ—Ä–∞' : `${daysAgo} –¥–Ω. –Ω–∞–∑–∞–¥`;
        
        message += `${index + 1}. ${referral.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n`;
        message += `‚îú ID: \`${referral.id}\`\n`;
        message += `‚îú –£—Ä–æ–≤–µ–Ω—å: \`${referral.level || 1}\`\n`;
        message += `‚îú –ë–∞–ª–∞–Ω—Å: \`${formatNumber(referral.stars || 0)}\` Stars\n`;
        message += `‚îú Magnum Coins: \`${formatNumber(referral.magnumCoins || 0)}\`\n`;
        message += `‚îî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${timeText}\n\n`;
      });
      
      if (referrals.length > 10) {
        message += `... –∏ –µ—â–µ \`${referrals.length - 10}\` —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n`;
      }
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const activeReferrals = referrals.filter(r => r.level > 1);
      const totalReferralStars = referrals.reduce((sum, r) => sum + (r.stars || 0), 0);
      const totalReferralMagnum = referrals.reduce((sum, r) => sum + (r.magnumCoins || 0), 0);
      
      message += `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: \`${activeReferrals.length}\`\n`;
      message += `‚îú –í—Å–µ–≥–æ Stars —É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${formatNumber(totalReferralStars)}\`\n`;
      message += `‚îî –í—Å–µ–≥–æ Magnum Coins —É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${formatNumber(totalReferralMagnum)}\`\n\n`;
    }
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
}

// ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
async function showSettingsMenu(ctx, user) {
  try {
    log(`‚öôÔ∏è –ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'settings_notifications'),
        Markup.button.callback('üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', 'settings_privacy')
      ],
      [
        Markup.button.callback('üåê –Ø–∑—ã–∫', 'settings_language'),
        Markup.button.callback('üîÑ –°–±—Ä–æ—Å', 'settings_reset')
      ],
      [
        Markup.button.callback('üéñ –¢–∏—Ç—É–ª—ã', 'titles')
      ],
      [
        Markup.button.callback('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n` +
      `üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* ${settings.notifications !== false ? 'üü¢ –í–∫–ª—é—á–µ–Ω—ã' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã'}\n` +
      `üîí *–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:* ${settings.privacy !== false ? 'üü¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : 'üî¥ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è'}\n` +
      `üåê *–Ø–∑—ã–∫:* ${settings.language === 'en' ? 'üá∫üá∏ English' : 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'}\n\n` +
      `üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

async function showNotificationSettings(ctx, user) {
  try {
    log(`üîî –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const notificationsEnabled = settings.notifications !== false;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          notificationsEnabled ? 'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üü¢ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
          'toggle_notifications'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')]
    ]);
    
    const message = 
      `üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n` +
      `üì± *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:* ${notificationsEnabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω—ã' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n` +
      `üìã *–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–∞—Ä–º–µ\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞–π–Ω–∏–Ω–≥–µ\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–∞—Ö\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö\n` +
      `‚îî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö\n\n` +
      `üí° *–ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:*\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∞\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –º–∞–π–Ω–µ—Ä–∞\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö\n` +
      `‚îî –î—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
}
async function showPrivacySettings(ctx, user) {
  try {
    log(`üîí –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const privacyEnabled = settings.privacy !== false;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          privacyEnabled ? 'üî¥ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å' : 'üü¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å',
          'toggle_privacy'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')]
    ]);
    
    const message = 
      `üîí *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏*\n\n` +
      `üõ°Ô∏è *–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:* ${privacyEnabled ? 'üü¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : 'üî¥ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è'}\n\n` +
      `üìä *–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:*\n` +
      `‚îú –í–∞—à ID –≤–∏–¥–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n` +
      `‚îú –ò–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å –≤–∏–¥–µ–Ω –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º\n` +
      `‚îî –ë–∞–ª–∞–Ω—Å—ã —Å–∫—Ä—ã—Ç—ã\n\n` +
      `üîí *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:*\n` +
      `‚îú ID —Å–∫—Ä—ã—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n` +
      `‚îú –ò–º—è —Å–∫—Ä—ã—Ç–æ –≤ —Å–ø–∏—Å–∫–∞—Ö\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å —Å–∫—Ä—ã—Ç\n` +
      `‚îî –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
  }
}

async function showLanguageSettings(ctx, user) {
  try {
    log(`üåê –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const currentLanguage = settings.language || 'ru';
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          currentLanguage === 'ru' ? '‚úÖ üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
          'set_language_ru'
        ),
        Markup.button.callback(
          currentLanguage === 'en' ? '‚úÖ üá∫üá∏ English' : 'üá∫üá∏ English',
          'set_language_en'
        )
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')]
    ]);
    
    const message = 
      `üåê *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞*\n\n` +
      `üó£Ô∏è *–¢–µ–∫—É—â–∏–π —è–∑—ã–∫:* ${currentLanguage === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∫üá∏ English'}\n\n` +
      `üìù *–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:*\n\n` +
      `üá∑üá∫ *–†—É—Å—Å–∫–∏–π:*\n` +
      `‚îú –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n` +
      `‚îú –í—Å–µ –º–µ–Ω—é –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n` +
      `‚îî –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `üá∫üá∏ *English:*\n` +
      `‚îú Full English language support\n` +
      `‚îú All menus and messages in English\n` +
      `‚îî Recommended for English-speaking users\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞');
  }
}
async function showResetSettings(ctx, user) {
  try {
    log(`üîÑ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–±—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'confirm_reset'),
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')
      ]
    ]);
    
    const message = 
      `üîÑ *–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫*\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n` +
      `üóëÔ∏è *–ß—Ç–æ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ:*\n` +
      `‚îú –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n` +
      `‚îú –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏\n` +
      `‚îú –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞\n` +
      `‚îî –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
      `‚úÖ *–ß—Ç–æ –ù–ï –±—É–¥–µ—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ:*\n` +
      `‚îú –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–≥—Ä–µ\n` +
      `‚îú –ë–∞–ª–∞–Ω—Å—ã (Stars, Magnum Coins)\n` +
      `‚îú –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã\n` +
      `‚îî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É—Ä–æ–≤–µ–Ω—å\n\n` +
      `üí° *–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:*\n` +
      `‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã\n` +
      `‚îú –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π\n` +
      `‚îî –Ø–∑—ã–∫ –±—É–¥–µ—Ç —Ä—É—Å—Å–∫–∏–π\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–±—Ä–æ—Å–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–±—Ä–æ—Å–∞');
  }
}

async function toggleNotificationSetting(ctx, user) {
  try {
    log(`üîî –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const newNotificationState = settings.notifications === false ? true : false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'settings.notifications': newNotificationState,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    const status = newNotificationState ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã';
    log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    await ctx.answerCbQuery(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status}!`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showNotificationSettings(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

async function togglePrivacySetting(ctx, user) {
  try {
    log(`üîí –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const settings = user.settings || {};
    const newPrivacyState = settings.privacy === false ? true : false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'settings.privacy': newPrivacyState,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    const status = newPrivacyState ? '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : '—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è';
    log(`‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${status} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    await ctx.answerCbQuery(`‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: ${status}!`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showPrivacySettings(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}
async function setLanguage(ctx, user, language) {
  try {
    log(`üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ ${language} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'settings.language': language,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    const langName = language === 'ru' ? '—Ä—É—Å—Å–∫–∏–π' : 'English';
    log(`‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${langName} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    await ctx.answerCbQuery(`‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${langName}!`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showLanguageSettings(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞');
  }
}

async function resetUserSettings(ctx, user) {
  try {
    log(`üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $set: { 
          'settings': {
            notifications: true,
            privacy: true,
            language: 'ru'
          },
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    await ctx.answerCbQuery('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showSettingsMenu(ctx, updatedUser);
    }
  } catch (error) {
    logError(error, '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

// ==================== –ó–ê–î–ê–ù–ò–Ø ====================
async function showTasksMenu(ctx, user) {
  try {
    log(`üìã –ü–æ–∫–∞–∑ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const tasks = user.tasks || {};
    const completedTasks = tasks.completedTasks || 0;
    const totalEarnings = tasks.totalTaskEarnings || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üéØ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è', 'tasks_sponsor'),
        Markup.button.callback('üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', 'tasks_daily')
      ],
      [
        Markup.button.callback('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', 'tasks_progress'),
        Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'tasks_achievements')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    const message = 
      `üìã *–°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π*\n\n` +
      `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: \`${completedTasks}\`\n` +
      `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarnings)}\` Stars\n` +
      `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${completedTasks > 0 ? formatNumber(totalEarnings / completedTasks) : '0.00'}\` Stars\n\n` +
      `üéØ *–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:*\n` +
      `‚îú üéØ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è (–ø–æ–¥–ø–∏—Å–∫–∏, –∑–∞–ø—É—Å–∫–∏ –±–æ—Ç–æ–≤)\n` +
      `‚îú üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (—Ñ–∞—Ä–º, –º–∞–π–Ω–∏–Ω–≥, –±–æ–Ω—É—Å—ã)\n` +
      `‚îî üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏)\n\n` +
      `üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π:*\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π');
  }
}

async function showSponsorTasks(ctx, user) {
  try {
    log(`üéØ –ü–æ–∫–∞–∑ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = getSponsorTasks();
    const userTasks = user.tasks?.sponsorTasks || {};
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks')]
    ]);
    
    let message = `üéØ *–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è*\n\n`;
    message += `üí∞ *–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!*\n\n`;
    
    sponsorTasks.forEach((task, index) => {
      const isCompleted = userTasks[task.id]?.completed || false;
      const isClaimed = userTasks[task.id]?.claimed || false;
      const status = isCompleted ? (isClaimed ? '‚úÖ' : 'üéÅ') : 'üîÑ';
      
      message += `${status} *${task.title}*\n`;
      message += `‚îú ${task.description}\n`;
      message += `‚îú –ù–∞–≥—Ä–∞–¥–∞: \`${task.reward}\` Magnum Coins\n`;
      message += `‚îî –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${task.difficulty}\n\n`;
    });
    
    message += `üí° *–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:*\n`;
    message += `‚îú –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n`;
    message += `‚îú –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"\n`;
    message += `‚îî –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!\n\n`;
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π');
  }
}
async function showSponsorTaskDetails(ctx, user, taskId) {
  try {
    log(`üéØ –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ${taskId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = getSponsorTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    const userTasks = user.tasks?.sponsorTasks || {};
    const userTask = userTasks[taskId] || {};
    const isCompleted = userTask.completed || false;
    const isClaimed = userTask.claimed || false;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.url('üîó –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', task.url),
        Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', `verify_sponsor_${taskId}`)
      ]
    ]);
    
    if (isCompleted && !isClaimed) {
      keyboard.reply_markup.inline_keyboard.push([
        Markup.button.callback('üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É', `claim_sponsor_${taskId}`)
      ]);
    }
    
    keyboard.reply_markup.inline_keyboard.push([
      Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks_sponsor')
    ]);
    
    let message = `üéØ *${task.title}*\n\n`;
    message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${task.description}\n\n`;
    message += `üí∞ *–ù–∞–≥—Ä–∞–¥–∞:* \`${task.reward}\` Magnum Coins\n`;
    message += `‚≠ê *–°–ª–æ–∂–Ω–æ—Å—Ç—å:* ${task.difficulty}\n`;
    message += `‚è∞ *–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${task.estimatedTime}\n\n`;
    
    if (task.requirements) {
      message += `üìã *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*\n`;
      task.requirements.forEach(req => {
        message += `‚îú ${req}\n`;
      });
      message += `\n`;
    }
    
    if (isCompleted) {
      message += `‚úÖ *–°—Ç–∞—Ç—É—Å:* –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
      if (isClaimed) {
        message += `üéÅ *–ù–∞–≥—Ä–∞–¥–∞:* –ü–æ–ª—É—á–µ–Ω–∞\n`;
      } else {
        message += `üéÅ *–ù–∞–≥—Ä–∞–¥–∞:* –ì–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é\n`;
      }
    } else {
      message += `üîÑ *–°—Ç–∞—Ç—É—Å:* –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
    }
    
    message += `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞–Ω–∏—è');
  }
}

async function verifySponsorTask(ctx, user, taskId) {
  try {
    log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ${taskId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = getSponsorTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    const userTasks = user.tasks?.sponsorTasks || {};
    const userTask = userTasks[taskId] || {};
    
    if (userTask.completed) {
      await ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
      return;
    }
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    const isCompleted = await checkTaskCompletion(ctx, user, task);
    
    if (isCompleted) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await db.collection('users').updateOne(
        { id: user.id },
        { 
          $set: { 
            [`tasks.sponsorTasks.${taskId}.completed`]: true,
            [`tasks.sponsorTasks.${taskId}.completedAt`]: new Date(),
            updatedAt: new Date()
          }
        }
      );
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à
      userCache.delete(user.id);
      
      log(`‚úÖ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ ${taskId} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}`);
      await ctx.answerCbQuery(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} Magnum Coins`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è
      const updatedUser = await getUser(ctx.from.id);
      if (updatedUser) {
        await showSponsorTaskDetails(ctx, updatedUser, taskId);
      }
    } else {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.');
    }
  } catch (error) {
    logError(error, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è');
  }
}
async function claimSponsorTask(ctx, user, taskId) {
  try {
    log(`üéÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ${taskId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const sponsorTasks = getSponsorTasks();
    const task = sponsorTasks.find(t => t.id === taskId);
    
    if (!task) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    const userTasks = user.tasks?.sponsorTasks || {};
    const userTask = userTasks[taskId] || {};
    
    if (!userTask.completed) {
      await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
      return;
    }
    
    if (userTask.claimed) {
      await ctx.answerCbQuery('‚ùå –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞');
      return;
    }
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          magnumCoins: task.reward,
          'tasks.completedTasks': 1,
          'tasks.totalTaskEarnings': task.reward
        },
        $set: { 
          [`tasks.sponsorTasks.${taskId}.claimed`]: true,
          [`tasks.sponsorTasks.${taskId}.claimedAt`]: new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    log(`üéÅ –ù–∞–≥—Ä–∞–¥–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ${taskId} –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}: ${task.reward} Magnum Coins`);
    await ctx.answerCbQuery(`üéÅ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! +${task.reward} Magnum Coins`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è
    const updatedUser = await getUser(ctx.from.id);
    if (updatedUser) {
      await showSponsorTaskDetails(ctx, updatedUser, taskId);
    }
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã');
  }
}
async function showDailyTasks(ctx, user) {
  try {
    log(`üìÖ –ü–æ–∫–∞–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const dailyTasks = getDailyTasks();
    const userTasks = user.tasks?.dailyTasks || {};
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks')]
    ]);
    
    let message = `üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*\n\n`;
    message += `üîÑ *–≠—Ç–∏ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!*\n\n`;
    
    dailyTasks.forEach((task, index) => {
      const userTask = userTasks[task.id] || {};
      const progress = userTask.progress || 0;
      const isCompleted = progress >= task.target;
      const isClaimed = userTask.claimed || false;
      const status = isCompleted ? (isClaimed ? '‚úÖ' : 'üéÅ') : 'üîÑ';
      
      message += `${status} *${task.title}*\n`;
      message += `‚îú ${task.description}\n`;
      message += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: \`${progress}/${task.target}\`\n`;
      message += `‚îú –ù–∞–≥—Ä–∞–¥–∞: \`${task.reward}\` Magnum Coins\n`;
      message += `‚îî ${isCompleted ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}\n\n`;
    });
    
    message += `üí° *–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:*\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –æ–±—ã—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ\n`;
    message += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n`;
    message += `‚îú –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É\n`;
    message += `‚îî –ó–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n`;
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
  }
}
async function showTasksProgress(ctx, user) {
  try {
    log(`üìä –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    const tasks = user.tasks || {};
    const completedTasks = tasks.completedTasks || 0;
    const totalEarnings = tasks.totalTaskEarnings || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks')]
    ]);
    
    let message = `üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π*\n\n`;
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: \`${completedTasks}\`\n`;
    message += `‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: \`${formatNumber(totalEarnings)}\` Magnum Coins\n`;
    message += `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: \`${completedTasks > 0 ? formatNumber(totalEarnings / completedTasks) : '0.00'}\` Magnum Coins\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    const sponsorTasks = tasks.sponsorTasks || {};
    const dailyTasks = tasks.dailyTasks || {};
    
    const completedSponsor = Object.values(sponsorTasks).filter(t => t.completed).length;
    const completedDaily = Object.values(dailyTasks).filter(t => t.claimed).length;
    
    message += `üéØ *–ü–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π:*\n`;
    message += `‚îú –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ: \`${completedSponsor}\` –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
    message += `‚îú –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ: \`${completedDaily}\` –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
    message += `‚îî –í—Å–µ–≥–æ: \`${completedSponsor + completedDaily}\` –∑–∞–¥–∞–Ω–∏–π\n\n`;
    
    // –ù–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    message += `üèÜ *–ù–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n`;
    
    const allTasks = [];
    Object.entries(sponsorTasks).forEach(([id, task]) => {
      if (task.claimedAt) {
        allTasks.push({ ...task, type: 'sponsor', id });
      }
    });
    Object.entries(dailyTasks).forEach(([id, task]) => {
      if (task.claimedAt) {
        allTasks.push({ ...task, type: 'daily', id });
      }
    });
    
    const recentTasks = allTasks
      .sort((a, b) => new Date(b.claimedAt) - new Date(a.claimedAt))
      .slice(0, 5);
    
    if (recentTasks.length > 0) {
      recentTasks.forEach((task, index) => {
        const daysAgo = Math.floor((Date.now() - task.claimedAt.getTime()) / (1000 * 60 * 60 * 24));
        const timeText = daysAgo === 0 ? '—Å–µ–≥–æ–¥–Ω—è' : daysAgo === 1 ? '–≤—á–µ—Ä–∞' : `${daysAgo} –¥–Ω. –Ω–∞–∑–∞–¥`;
        
        message += `${index + 1}. ${task.type === 'sponsor' ? 'üéØ' : 'üìÖ'} –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`;
        message += `‚îî ${timeText}\n\n`;
      });
    } else {
      message += `–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n\n`;
    }
    
    message += `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getSponsorTasks() {
  return [
    {
      id: 1,
      title: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª',
      description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª',
      reward: 50,
      difficulty: '‚≠ê –õ–µ–≥–∫–æ–µ',
      estimatedTime: '1 –º–∏–Ω—É—Ç–∞',
      url: 'https://t.me/magnumstars',
      requirements: [
        '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @magnumstars',
        '–û—Å—Ç–∞–Ω—å—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º 24 —á–∞—Å–∞'
      ]
    },
    {
      id: 2,
      title: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
      description: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞',
      reward: 100,
      difficulty: '‚≠ê‚≠ê –°—Ä–µ–¥–Ω–µ–µ',
      estimatedTime: '2 –º–∏–Ω—É—Ç—ã',
      url: 'https://t.me/partner_bot',
      requirements: [
        '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ @partner_bot',
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É /start',
        '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–æ—Ç–µ'
      ]
    },
    {
      id: 3,
      title: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π',
      description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 3 –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à –±–æ—Ç',
      reward: 200,
      difficulty: '‚≠ê‚≠ê‚≠ê –°–ª–æ–∂–Ω–æ–µ',
      estimatedTime: '10 –º–∏–Ω—É—Ç',
      url: 'https://t.me/magnumstars',
      requirements: [
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É 3 –¥—Ä—É–∑—å—è–º',
        '–î—Ä—É–∑—å—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—Ç—É',
        '–ö–∞–∂–¥—ã–π –¥—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ'
      ]
    }
  ];
}

function getDailyTasks() {
  return [
    {
      id: 'daily_farm',
      title: '–§–∞—Ä–º–µ—Ä –¥–Ω—è',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 5 —Ñ–∞—Ä–º–æ–≤ –∑–∞ –¥–µ–Ω—å',
      target: 5,
      reward: 25
    },
    {
      id: 'daily_bonus',
      title: '–ë–æ–Ω—É—Å –¥–Ω—è',
      description: '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
      target: 1,
      reward: 15
    },
    {
      id: 'daily_exchange',
      title: '–¢—Ä–µ–π–¥–µ—Ä –¥–Ω—è',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 3 –æ–±–º–µ–Ω–∞ Magnum Coins',
      target: 3,
      reward: 30
    }
  ];
}

async function checkTaskCompletion(ctx, user, task) {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true (–∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
  return true;
}
// ==================== –¢–ò–¢–£–õ–´ ====================
function getTitlesList(user) {
  const farmCount = user.farm?.farmCount || 0;
  const minerTotal = user.miner?.totalMined || 0;
  const streak = user.dailyBonus?.streak || 0;
  const level = user.level || 1;
  const stars = user.stars || 0;
  const totalMC = user.totalEarnedMagnumCoins || 0;
  const totalStars = user.totalEarnedStars || 0;
  const referrals = user.referralsCount || 0;
  const achievements = user.achievementsCount || 0;

  const definitions = [
    // –û–±—ã—á–Ω—ã–µ (7)
    { id: 'novice', name: 'üå± –ù–æ–≤–∏—á–æ–∫', rarity: '–û–±—ã—á–Ω—ã–π', conditionText: '–¢–∏—Ç—É–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', unlocked: true },
    { id: 'starter', name: 'üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π', rarity: '–û–±—ã—á–Ω—ã–π', conditionText: '–£—Ä–æ–≤–µ–Ω—å 2 –∏–ª–∏ 100 Stars', unlocked: level >= 2 || stars >= 100 },
    { id: 'skilled', name: 'üéØ –û–ø—ã—Ç–Ω—ã–π', rarity: '–û–±—ã—á–Ω—ã–π', conditionText: '–£—Ä–æ–≤–µ–Ω—å 5 –∏–ª–∏ 20 —Ñ–∞—Ä–º–æ–≤', unlocked: level >= 5 || farmCount >= 20 },
    { id: 'master', name: '‚ú® –ú–∞—Å—Ç–µ—Ä', rarity: '–û–±—ã—á–Ω—ã–π', conditionText: '–£—Ä–æ–≤–µ–Ω—å 10 –∏–ª–∏ 1 000 Stars', unlocked: level >= 10 || stars >= 1000 },
    { id: 'expert', name: 'üí´ –≠–∫—Å–ø–µ—Ä—Ç', rarity: '–û–±—ã—á–Ω—ã–π', conditionText: '–£—Ä–æ–≤–µ–Ω—å 20 –∏–ª–∏ 1 000 Magnum Coins –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', unlocked: level >= 20 || totalMC >= 1000 },
    { id: 'pro', name: 'üåü –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', rarity: '–û–±—ã—á–Ω—ã–π', conditionText: '10 000 Stars –∏–ª–∏ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', unlocked: stars >= 10000 || referrals >= 5 },
    { id: 'champion', name: 'üèÜ –ß–µ–º–ø–∏–æ–Ω', rarity: '–û–±—ã—á–Ω—ã–π', conditionText: '–£—Ä–æ–≤–µ–Ω—å 30 –∏–ª–∏ 5 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π', unlocked: level >= 30 || achievements >= 5 },

    // –°–µ–∫—Ä–µ—Ç–Ω—ã–µ (3)
    { id: 'stealth', name: 'üïµÔ∏è –°–∫—Ä—ã—Ç–Ω—ã–π', rarity: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π', conditionText: '–°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', unlocked: streak >= 7 },
    { id: 'tactician', name: 'üß† –¢–∞–∫—Ç–∏–∫', rarity: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π', conditionText: '50 —Ñ–∞—Ä–º–æ–≤ –∏ 3 —Ä–µ—Ñ–µ—Ä–∞–ª–∞', unlocked: farmCount >= 50 && referrals >= 3 },
    { id: 'chronos', name: '‚è≥ –£—Å–µ—Ä–¥–Ω—ã–π', rarity: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π', conditionText: '–ù–∞–º–∞–π–Ω–∏—Ç—å 500 Magnum Coins', unlocked: minerTotal >= 500 },

    // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ (3)
    { id: 'legend', name: 'üëë –õ–µ–≥–µ–Ω–¥–∞', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', conditionText: '1 000 000 Stars', unlocked: stars >= 1000000 || totalStars >= 1000000 },
    { id: 'immortal', name: 'üî• –ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', conditionText: '100 000 Magnum Coins –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', unlocked: totalMC >= 100000 },
    { id: 'dragon', name: 'üêâ –î—Ä–∞–∫–æ–Ω', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', conditionText: '50 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', unlocked: referrals >= 50 }
  ];

  return definitions;
}

async function syncUserTitles(user) {
  try {
    const definitions = getTitlesList(user);
    const ownedSet = new Set(user.titles || []);
    const toAdd = definitions.filter(t => t.unlocked && !ownedSet.has(t.name)).map(t => t.name);

    if (toAdd.length > 0) {
      await db.collection('users').updateOne(
        { id: user.id },
        { $addToSet: { titles: { $each: toAdd } }, $set: { updatedAt: new Date() } }
      );
      user.titles = Array.from(new Set([...(user.titles || []), ...toAdd]));
      setCachedUser(user.id, user);
    }

    if (!user.mainTitle || !user.titles.includes(user.mainTitle)) {
      user.mainTitle = 'üå± –ù–æ–≤–∏—á–æ–∫';
      await db.collection('users').updateOne(
        { id: user.id },
        { $set: { mainTitle: user.mainTitle, updatedAt: new Date() } }
      );
      setCachedUser(user.id, user);
    }

    return { definitions, toAdd };
  } catch (error) {
    logError(error, '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return { definitions: getTitlesList(user), toAdd: [] };
  }
}

async function showTitlesMenu(ctx, user) {
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { definitions } = await syncUserTitles(user);
  const total = definitions.length;
  const owned = (user.titles || []).length;

  let message = `üéñ *–¢–∏—Ç—É–ª—ã*\n\n`;
  message += `üëë –ì–ª–∞–≤–Ω—ã–π —Ç–∏—Ç—É–ª: ${user.mainTitle}\n`;
  message += `üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: \`${owned}/${total}\`\n\n`;
  message += `üìú *–°–ø–∏—Å–æ–∫ —Ç–∏—Ç—É–ª–æ–≤:*\n`;

  for (const t of definitions) {
    const has = (user.titles || []).includes(t.name);
    const status = has ? '‚úÖ' : (t.rarity === '–°–µ–∫—Ä–µ—Ç–Ω—ã–π' ? '‚ùî' : 'üîí');
    const titleName = has ? t.name : (t.rarity === '–°–µ–∫—Ä–µ—Ç–Ω—ã–π' ? '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏—Ç—É–ª' : t.name);
    message += `${status} ${titleName} ‚Äî ${t.rarity}${has ? '' : ` (—É—Å–ª–æ–≤–∏–µ: ${t.conditionText})`}\n`;
  }

  const buttons = [
    [Markup.button.callback('üß≠ –°–º–µ–Ω–∏—Ç—å —Ç–∏—Ç—É–ª', 'titles_select')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
  ];

  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: Markup.inlineKeyboard(buttons).reply_markup
  });
}
async function showTitlesSelectMenu(ctx, user) {
  const definitions = getTitlesList(user);
  const ownedDefs = definitions.filter(d => (user.titles || []).includes(d.name));

  // –§–æ–ª–ª–±–µ–∫ –¥–ª—è —Ç–∏—Ç—É–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö
  const extraOwned = (user.titles || [])
    .filter(n => !ownedDefs.some(d => d.name === n))
    .map(n => ({ id: 'name_' + Buffer.from(n, 'utf8').toString('base64'), name: n }));

  const items = [...ownedDefs.map(d => ({ id: d.id, name: d.name })), ...extraOwned];

  let message = `üéñ *–í—ã–±–æ—Ä —Ç–∏—Ç—É–ª–∞*\n\n`;
  message += `–¢–µ–∫—É—â–∏–π: ${user.mainTitle}\n\n`;
  message += `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ç—É–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:`;

  const rows = [];
  for (const item of items) {
    rows.push([Markup.button.callback(item.name, `set_title_${item.id}`)]);
  }
  rows.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'titles')]);

  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: Markup.inlineKeyboard(rows).reply_markup
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∏—Ç—É–ª–æ–≤
let afterActions = [];
afterActions.push(() => {
  bot.action('titles', async (ctx) => {
    try {
      const user = await getUser(ctx.from.id);
      if (!user) return;
      await showTitlesMenu(ctx, user);
    } catch (error) {
      logError(error, '–¢–∏—Ç—É–ª—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
    }
  });

  bot.action('titles_select', async (ctx) => {
    try {
      const user = await getUser(ctx.from.id);
      if (!user) return;
      await showTitlesSelectMenu(ctx, user);
    } catch (error) {
      logError(error, '–¢–∏—Ç—É–ª—ã –≤—ã–±–æ—Ä (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
    }
  });

  bot.action(/^(set_title_)\S+/, async (ctx) => {
    try {
      const data = ctx.callbackQuery?.data || '';
      const rawId = data.replace('set_title_', '');

      const user = await getUser(ctx.from.id);
      if (!user) return;

      const definitions = getTitlesList(user);
      let selectedName = null;

      const byId = definitions.find(d => d.id === rawId);
      if (byId) {
        selectedName = byId.name;
      } else if (rawId.startsWith('name_')) {
        const b64 = rawId.substring(5);
        try {
          selectedName = Buffer.from(b64, 'base64').toString('utf8');
        } catch (e) {
          selectedName = null;
        }
      }

      if (!selectedName) {
        await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏—Ç—É–ª', { show_alert: true });
        return;
      }

      if (!(user.titles || []).includes(selectedName)) {
        await ctx.answerCbQuery('üîí –≠—Ç–æ—Ç —Ç–∏—Ç—É–ª –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω', { show_alert: true });
        return;
      }

      await db.collection('users').updateOne(
        { id: user.id },
        { $set: { mainTitle: selectedName, updatedAt: new Date() } }
      );
      user.mainTitle = selectedName;
      setCachedUser(user.id, user);

      await ctx.answerCbQuery('‚úÖ –¢–∏—Ç—É–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      await showTitlesMenu(ctx, user);
    } catch (error) {
      logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏—Ç—É–ª–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∏—Ç—É–ª–∞', { show_alert: true });
    }
  });
});
// ==================== –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê ====================
const bot = new Telegraf(config.BOT_TOKEN);
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
if (typeof afterActions !== 'undefined' && Array.isArray(afterActions)) {
  for (const fn of afterActions) {
    try {
      fn();
    } catch (e) {
      logError(e, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤');
    }
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
if (typeof afterActions !== 'undefined' && Array.isArray(afterActions)) {
  for (const fn of afterActions) {
    try {
      fn();
    } catch (e) {
      logError(e, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤');
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  try {
    console.log('üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', ctx.from.id);
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /start:', {
      id: ctx.from.id,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
      lastName: ctx.from.last_name,
      startPayload: ctx.startPayload
    });
    
    console.log(`üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    const user = await getUser(ctx.from.id, ctx);
    if (!user) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø–æ–ª—É—á–µ–Ω:`, {
      level: user.level,
      magnumCoins: user.magnumCoins,
      stars: user.stars,
      banned: user.banned
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    const isSubscribed = await checkSubscription(ctx);
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${ctx.from.id}:`, { isSubscribed });
    
    if (!isSubscribed) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª`);
      await showSubscriptionMessage(ctx);
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const startPayload = ctx.startPayload;
    if (startPayload && startPayload !== user.id.toString()) {
      console.log(`üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${ctx.from.id} –æ—Ç ${startPayload}`);
      console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`, {
        userId: ctx.from.id,
        referrerId: startPayload,
        currentReferrer: user.referrerId
      });
      await handleReferral(user.id, parseInt(startPayload));
    } else {
      console.log(`‚ÑπÔ∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    }
    
    // –î–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏—Å–ø–æ–ª—å–∑—É–µ–º ctx.reply –≤–º–µ—Å—Ç–æ editMessageText
    console.log(`üì± –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    await showMainMenuStart(ctx, user);
    
    console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, error);
    console.log(`–û—à–∏–±–∫–∞ –≤ /start:`, {
      userId: ctx.from.id,
      error: error.message,
      stack: error.stack
    });
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π
async function handleAdminSearchUser(ctx, user, text) {
  try {
    let targetUser;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username
    if (text.startsWith('@')) {
      const username = text.substring(1);
      targetUser = await db.collection('users').findOne({ username: username });
    } else {
      const userId = parseInt(text);
      if (isNaN(userId)) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ @username');
        return;
      }
      targetUser = await db.collection('users').findOne({ id: userId });
    }
    
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin_ban_${targetUser.id}`),
        Markup.button.callback('‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin_unban_${targetUser.id}`)
      ],
      [
        Markup.button.callback('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', `admin_balance_${targetUser.id}`),
        Markup.button.callback('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `admin_stats_${targetUser.id}`)
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_users')]
    ]);
    
    const message = 
      `üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n` +
      `üÜî *ID:* \`${targetUser.id}\`\n` +
      `üë§ *–ò–º—è:* ${targetUser.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* ${targetUser.createdAt ? targetUser.createdAt.toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
      `‚è∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:* ${targetUser.lastSeen ? targetUser.lastSeen.toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –£—Ä–æ–≤–µ–Ω—å: \`${targetUser.level || 1}\`\n` +
      `‚îú –û–ø—ã—Ç: \`${targetUser.experience || 0}\`\n` +
      `‚îú Magnum Coins: \`${formatNumber(targetUser.magnumCoins || 0)}\`\n` +
      `‚îú Stars: \`${formatNumber(targetUser.stars || 0)}\`\n` +
      `‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${targetUser.referralsCount || 0}\`\n` +
      `‚îî –°—Ç–∞—Ç—É—Å: ${targetUser.banned ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}

async function handleAdminBanUser(ctx, user, text) {
  try {
    const userId = parseInt(text);
    if (isNaN(userId)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ');
      return;
    }
    
    const targetUser = await db.collection('users').findOne({ id: userId });
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    if (targetUser.banned) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: userId },
      { $set: { banned: true, bannedAt: new Date(), bannedBy: user.id, updatedAt: new Date() } }
    );
    
    await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}
async function handleAdminUnbanUser(ctx, user, text) {
  try {
    const userId = parseInt(text);
    if (isNaN(userId)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ');
      return;
    }
    
    const targetUser = await db.collection('users').findOne({ id: userId });
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    if (!targetUser.banned) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: userId },
      { $unset: { banned: "", bannedAt: "", bannedBy: "" }, $set: { updatedAt: new Date() } }
    );
    
    await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function handleAdminSetFarmReward(ctx, user, text) {
  try {
    const newReward = parseFloat(text);
    if (isNaN(newReward) || newReward < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'FARM_BASE_REWARD' },
      { $set: { value: newReward, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.FARM_BASE_REWARD = newReward;
    
    await ctx.reply(`‚úÖ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —Ñ–∞—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newReward} Magnum Coins`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Ñ–∞—Ä–º–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã');
  }
}
async function handleAdminSetFarmCooldown(ctx, user, text) {
  try {
    const newCooldown = parseInt(text);
    if (isNaN(newCooldown) || newCooldown < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'FARM_COOLDOWN' },
      { $set: { value: newCooldown, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.FARM_COOLDOWN = newCooldown;
    
    await ctx.reply(`‚úÖ –ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newCooldown} —Å–µ–∫—É–Ω–¥ (${Math.floor(newCooldown / 60)} –º–∏–Ω—É—Ç)`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞ —Ñ–∞—Ä–º–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞');
  }
}

async function handleAdminSetBonusBase(ctx, user, text) {
  try {
    const newBonus = parseFloat(text);
    if (isNaN(newBonus) || newBonus < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'DAILY_BONUS_BASE' },
      { $set: { value: newBonus, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.DAILY_BONUS_BASE = newBonus;
    
    await ctx.reply(`‚úÖ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newBonus} Magnum Coins`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–∞');
  }
}

async function handleAdminSetMinerReward(ctx, user, text) {
  try {
    const newReward = parseFloat(text);
    if (isNaN(newReward) || newReward < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'MINER_REWARD_PER_HOUR' },
      { $set: { value: newReward, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.MINER_REWARD_PER_HOUR = newReward;
    
    await ctx.reply(`‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –º–∞–π–Ω–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newReward} Magnum Coins –≤ —á–∞—Å`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞');
  }
}
async function handleAdminSetReferralReward(ctx, user, text) {
  try {
    const newReward = parseFloat(text);
    if (isNaN(newReward) || newReward < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'REFERRAL_REWARD' },
      { $set: { value: newReward, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.REFERRAL_REWARD = newReward;
    
    await ctx.reply(`‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newReward} Magnum Coins`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
  }
}
async function handleAdminSetSubscriptionChannel(ctx, user, text) {
  try {
    let channel = text.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞
    if (!channel.startsWith('@') && !channel.startsWith('https://t.me/')) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @channel –∏–ª–∏ https://t.me/channel');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection('config').updateOne(
      { key: 'REQUIRED_CHANNEL' },
      { $set: { value: channel, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
    config.REQUIRED_CHANNEL = channel;
    
    await ctx.reply(`‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${channel}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
  } catch (error) {
    logError(error, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–¥–º–∏–Ω–æ–º');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏');
  }
}
// ==================== –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò ====================
async function handleCreateSupportTicket(ctx, user, text) {
  try {
    logFunction('handleCreateSupportTicket', user.id, { textLength: text.length });
    log(`üÜò –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
    if (text.length < 10) {
      await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).');
      return;
    }
    
    if (text.length > 1000) {
      await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const ticket = {
      id: Date.now() + Math.random().toString(36).substr(2, 9),
      userId: user.id,
      username: user.username,
      firstName: user.firstName,
      status: 'new', // new, in_progress, answered, closed
      priority: 'normal', // low, normal, high, urgent
      subject: text.substring(0, 100) + (text.length > 100 ? '...' : ''),
      description: text,
      createdAt: new Date(),
      updatedAt: new Date(),
      adminResponse: null,
      adminId: null,
      responseTime: null
    };
    
    logDebug(`–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ –ë–î`, {
      ticketId: ticket.id,
      userId: user.id,
      status: ticket.status,
      subject: ticket.subject
    });
    
    await db.collection('supportTickets').insertOne(ticket);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { id: user.id },
      { 
        $inc: { 
          'support.ticketsCount': 1
        },
        $set: { 
          'support.lastTicket': new Date(),
          adminState: null,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    userCache.delete(user.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const supportChannel = '@magnumsupported';
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å', `support_answer_${ticket.id}`),
        Markup.button.callback('‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', `support_progress_${ticket.id}`)
      ],
      [
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `support_reject_${ticket.id}`),
        Markup.button.callback('üîí –ó–∞–∫—Ä—ã—Ç—å', `support_close_${ticket.id}`)
      ]
    ]);
    
    const supportMessage = 
      `üÜò *–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticket.id}\`\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üì± *Username:* ${user.username ? '@' + user.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üÜî *User ID:* \`${user.id}\`\n` +
      `üìÖ *–î–∞—Ç–∞:* ${ticket.createdAt.toLocaleString('ru-RU')}\n` +
      `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${user.level || 1}\n` +
      `üí∞ *Magnum Coins:* ${formatNumber(user.magnumCoins || 0)}\n` +
      `‚≠ê *Stars:* ${formatNumber(user.stars || 0)}\n\n` +
      `üìù *–ü—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${text}\n\`\`\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    try {
      await ctx.telegram.sendMessage(supportChannel, supportMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
      
      log(`‚úÖ –¢–∏–∫–µ—Ç ${ticket.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ${supportChannel}`);
    } catch (error) {
      logError(error, `–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∏–∫–µ—Ç–∞ ${ticket.id} –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏`);
      logDebug(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª`, {
        channel: supportChannel,
        ticketId: ticket.id,
        error: error.message
      });
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'support')]
    ]);
    
    const userMessage = 
      `‚úÖ *–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticket.id}\`\n` +
      `üìù *–í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${text}\n\`\`\`\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* 5-30 –º–∏–Ω—É—Ç\n\n` +
      `üìã *–ß—Ç–æ –¥–∞–ª—å—à–µ:*\n` +
      `‚Ä¢ –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à —Ç–∏–∫–µ—Ç\n` +
      `‚Ä¢ –û—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n` +
      `‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n` +
      `üí° *–°–æ–≤–µ—Ç:* –ü–æ–∫–∞ –∂–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç–∞, –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å FAQ - –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–º —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!`;
    
    await ctx.reply(userMessage, {
      parse_mode: 'Markdown',
      reply_markup: userKeyboard.reply_markup
    });
    
    log(`‚úÖ –¢–∏–∫–µ—Ç ${ticket.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    
  } catch (error) {
    logError(error, `–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    logDebug(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞`, {
      userId: user.id,
      text: text,
      error: error.message,
      stack: error.stack
    });
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
async function handleAdminAnswerTicket(ctx, user, text) {
  try {
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: ${text.length}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ adminState
    const ticketId = user.adminState.replace('answering_ticket_', '');
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${user.id} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç ${ticketId}`);
    
    if (text.length < 5) {
      await ctx.reply('‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.');
      return;
    }
    
    if (text.length > 2000) {
      await ctx.reply('‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const ticket = await db.collection('supportTickets').findOne({ id: ticketId });
    if (!ticket) {
      await ctx.reply('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç —Å –æ—Ç–≤–µ—Ç–æ–º –∞–¥–º–∏–Ω–∞
    const responseTime = Date.now() - ticket.createdAt.getTime();
    await db.collection('supportTickets').updateOne(
      { id: ticketId },
      { 
        $set: { 
          status: 'answered',
          adminResponse: text,
          adminId: user.id,
          responseTime: responseTime,
          updatedAt: new Date()
        }
      }
    );
    
    console.log(`–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:`, {
      ticketId: ticketId,
      adminId: user.id,
      responseLength: text.length,
      responseTime: responseTime
    });
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      const userMessage = 
        `‚úÖ *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ç–∏–∫–µ—Ç*\n\n` +
        `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
        `üìù *–í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${ticket.description}\n\`\`\`\n\n` +
        `üë®‚Äçüíº *–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n\`\`\`\n${text}\n\`\`\`\n\n` +
        `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* ${Math.floor(responseTime / 1000 / 60)} –º–∏–Ω—É—Ç\n\n` +
        `üí° –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.`;
      
      await ctx.telegram.sendMessage(ticket.userId, userMessage, {
        parse_mode: 'Markdown'
      });
      
      console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}:`, error);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const supportChannel = '@magnumsupported';
    const message = 
      `‚úÖ *–¢–∏–∫–µ—Ç –æ—Ç–≤–µ—á–µ–Ω*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üì± *Username:* ${ticket.username ? '@' + ticket.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üÜî *User ID:* \`${ticket.userId}\`\n` +
      `üìÖ *–î–∞—Ç–∞:* ${ticket.createdAt.toLocaleString('ru-RU')}\n` +
      `üë®‚Äçüíº *–ê–¥–º–∏–Ω:* ${user.firstName || user.username || user.id}\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* ${Math.floor(responseTime / 1000 / 60)} –º–∏–Ω—É—Ç\n\n` +
      `üìù *–ü—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${ticket.description}\n\`\`\`\n\n` +
      `‚úÖ *–û—Ç–≤–µ—Ç:*\n\`\`\`\n${text}\n\`\`\`\n\n` +
      `‚úÖ *–°—Ç–∞—Ç—É—Å:* –û—Ç–≤–µ—á–µ–Ω`;
    
    try {
      await ctx.telegram.sendMessage(supportChannel, message, {
        parse_mode: 'Markdown'
      });
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏:`, error);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(user.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    const adminKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin')]
    ]);
    
    const adminMessage = 
      `‚úÖ *–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üìù *–û—Ç–≤–µ—Ç:*\n\`\`\`\n${text}\n\`\`\`\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* ${Math.floor(responseTime / 1000 / 60)} –º–∏–Ω—É—Ç\n\n` +
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –≤–∞—à –æ—Ç–≤–µ—Ç.`;
    
    await ctx.reply(adminMessage, {
      parse_mode: 'Markdown',
      reply_markup: adminKeyboard.reply_markup
    });
    
    console.log(`‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç ${ticketId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–¥–º–∏–Ω–æ–º ${user.id}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ ${user.id} –Ω–∞ —Ç–∏–∫–µ—Ç:`, error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
// ==================== FAQ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
bot.action('faq_farm', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üåæ *FAQ - –§–∞—Ä–º*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∞—Ä–º?*\n` +
      `–§–∞—Ä–º - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Magnum Coins –≤ –±–æ—Ç–µ. –í—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É "–§–∞—Ä–º" –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞–≥—Ä–∞–¥—É.\n\n` +
      `*‚ùì –ö–∞–∫ —á–∞—Å—Ç–æ –º–æ–∂–Ω–æ —Ñ–∞—Ä–º–∏—Ç—å?*\n` +
      `–§–∞—Ä–º –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥—ã–µ ${config.FARM_COOLDOWN || 10} —Å–µ–∫—É–Ω–¥. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç.\n\n` +
      `*‚ùì –°–∫–æ–ª—å–∫–æ Magnum Coins —è –ø–æ–ª—É—á–∞—é –∑–∞ —Ñ–∞—Ä–º?*\n` +
      `–ó–∞ –∫–∞–∂–¥—ã–π —Ñ–∞—Ä–º –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${config.FARM_REWARD || 1} Magnum Coins. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è —Å —É—Ä–æ–≤–Ω–µ–º.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –∫—É–ª–¥–∞—É–Ω?*\n` +
      `–ö—É–ª–¥–∞—É–Ω - —ç—Ç–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É —Ñ–∞—Ä–º–∞–º–∏. –í–æ –≤—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç.\n\n` +
      `*‚ùì –ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ñ–∞—Ä–º?*\n` +
      `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ñ–∞—Ä–º —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã —á–µ—Ä–µ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞—Ä–º–∞?*\n` +
      `–í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞—Ä–º–æ–≤, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ Magnum Coins –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞—Ä–º–∞.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –±–æ–Ω—É—Å—ã —Ñ–∞—Ä–º–∞?*\n` +
      `–ë–æ–Ω—É—Å—ã —Ñ–∞—Ä–º–∞ - —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –§–∞—Ä–º');
  }
});

bot.action('faq_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `‚õèÔ∏è *FAQ - –ú–∞–π–Ω–µ—Ä*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞–π–Ω–µ—Ä?*\n` +
      `–ú–∞–π–Ω–µ—Ä - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Magnum Coins. –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞–≥—Ä–∞–¥—ã –∫–∞–∂–¥—ã–π —á–∞—Å.\n\n` +
      `*‚ùì –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä?*\n` +
      `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–§–∞—Ä–º" ‚Üí "‚õèÔ∏è –ú–∞–π–Ω–µ—Ä" –∏ –Ω–∞–∂–º–∏—Ç–µ "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä".\n\n` +
      `*‚ùì –ö–∞–∫ —á–∞—Å—Ç–æ –º–∞–π–Ω–µ—Ä –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞–≥—Ä–∞–¥—ã?*\n` +
      `–ú–∞–π–Ω–µ—Ä –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞–≥—Ä–∞–¥—ã –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç (1 —á–∞—Å).\n\n` +
          `*‚ùì –°–∫–æ–ª—å–∫–æ Magnum Coins —è –ø–æ–ª—É—á–∞—é –æ—Ç –º–∞–π–Ω–µ—Ä–∞?*\n` +
    `–ó–∞ —á–∞—Å —Ä–∞–±–æ—Ç—ã –º–∞–π–Ω–µ—Ä –ø—Ä–∏–Ω–æ—Å–∏—Ç ${config.MINER_REWARD_PER_HOUR || 10} Magnum Coins. –ù–∞–≥—Ä–∞–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –º–∞–π–Ω–µ—Ä–∞.\n\n` +
      `*‚ùì –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä?*\n` +
      `–ú–∞–π–Ω–µ—Ä –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –ø–æ—Ç—Ä–∞—Ç–∏–≤ Magnum Coins. –£–ª—É—á—à–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞–≥—Ä–∞–¥—ã.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞–π–Ω–µ—Ä–∞?*\n` +
      `–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 2x –æ–∑–Ω–∞—á–∞–µ—Ç –¥–≤–æ–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É.\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä?*\n` +
      `–î–∞, –º–∞–π–Ω–µ—Ä –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–µ—Ä".\n\n` +
      `*‚ùì –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∞–π–Ω–µ—Ä–∞?*\n` +
      `–ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∞–π–Ω–µ—Ä –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã, –Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –ú–∞–π–Ω–µ—Ä');
  }
});
bot.action('faq_bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üéÅ *FAQ - –ë–æ–Ω—É—Å—ã*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å?*\n` +
      `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å - —ç—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å. –ë–æ–Ω—É—Å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º –ø–æ–¥—Ä—è–¥.\n\n` +
      `*‚ùì –ö–∞–∫ —á–∞—Å—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å?*\n` +
      `–ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞. –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –¥–µ–Ω—å, —Å–µ—Ä–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤?*\n` +
      `–°–µ—Ä–∏—è - —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥, –∫–æ–≥–¥–∞ –≤—ã –∑–∞–±–∏—Ä–∞–ª–∏ –±–æ–Ω—É—Å. –ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ —Å–µ—Ä–∏—è, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞.\n\n` +
      `*‚ùì –°–∫–æ–ª—å–∫–æ Magnum Coins –≤ –±–æ–Ω—É—Å–µ?*\n` +
      `–ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${config.DAILY_BONUS_BASE || 10} Magnum Coins. –° –∫–∞–∂–¥—ã–º –¥–Ω–µ–º —Å–µ—Ä–∏–∏ –Ω–∞–≥—Ä–∞–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.\n\n` +
      `*‚ùì –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è?*\n` +
      `–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –¥–µ–Ω—å, —Å–µ—Ä–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ 1, –∏ –Ω–∞–≥—Ä–∞–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –±–∞–∑–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.\n\n` +
      `*‚ùì –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–Ω—É—Å–æ–≤?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "–ë–æ–Ω—É—Å—ã" ‚Üí "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "–ë–æ–Ω—É—Å—ã" ‚Üí "üî• –°–µ—Ä–∏—è" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –∏ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –ë–æ–Ω—É—Å—ã');
  }
});
bot.action('faq_exchange', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üíé *FAQ - –û–±–º–µ–Ω*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±–º–µ–Ω?*\n` +
      `–û–±–º–µ–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Magnum Coins –≤ Stars –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É.\n\n` +
      `*‚ùì –ö–∞–∫–æ–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞?*\n` +
      `–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 1 Magnum Coin = 1 Star (1:1).\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ —Å—É–º–º—ã –º–æ–∂–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å?*\n` +
      `–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º—ã: 10, 50, 100, 500, 1000, 5000 Magnum Coins.\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –æ–±–º–µ–Ω—è—Ç—å Stars –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ Magnum Coins?*\n` +
      `–ù–µ—Ç, –æ–±–º–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É: Magnum Coins ‚Üí Stars.\n\n` +
      `*‚ùì –ï—Å—Ç—å –ª–∏ –∫–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–±–º–µ–Ω?*\n` +
      `–ù–µ—Ç, –æ–±–º–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ –∫—É—Ä—Å—É 1:1.\n\n` +
      `*‚ùì –ó–∞—á–µ–º –Ω—É–∂–Ω—ã Stars?*\n` +
      `Stars –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –±–æ—Ç–µ.\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–±–º–µ–Ω?*\n` +
      `–ù–µ—Ç, –æ–±–º–µ–Ω –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –û–±–º–µ–Ω');
  }
});

bot.action('faq_promocodes', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üé´ *FAQ - –ü—Ä–æ–º–æ–∫–æ–¥—ã*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã?*\n` +
      `–ü—Ä–æ–º–æ–∫–æ–¥—ã - —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –±–æ–Ω—É—Å–Ω—ã–µ Magnum Coins –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n\n` +
      `*‚ùì –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?*\n` +
      `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "üé´ –ü—Ä–æ–º–æ–∫–æ–¥" ‚Üí "üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥" –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥.\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–∞—é—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã?*\n` +
      `–ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–∞—é—Ç Magnum Coins. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑?*\n` +
      `–ù–µ—Ç, –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç.\n\n` +
      `*‚ùì –ß—Ç–æ –µ—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n` +
      `–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n\n` +
      `*‚ùì –ì–¥–µ –≤–∑—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã?*\n` +
      `–ü—Ä–æ–º–æ–∫–æ–¥—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ –±–æ—Ç–∞ –∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.\n\n` +
      `*‚ùì –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "üé´ –ü—Ä–æ–º–æ–∫–æ–¥" ‚Üí "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞?*\n` +
      `–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ - —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥. –ö–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –ø—Ä–æ–º–æ–∫–æ–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –ü—Ä–æ–º–æ–∫–æ–¥—ã');
  }
});

bot.action('faq_referrals', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üë• *FAQ - –†–µ—Ñ–µ—Ä–∞–ª—ã*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?*\n` +
      `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –≤ –±–æ—Ç–∞.\n\n` +
      `*‚ùì –ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞?*\n` +
      `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã" ‚Üí "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É.\n\n` +
      `*‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞?*\n` +
      `–ö–æ–≥–¥–∞ –¥—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤?*\n` +
      `–ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${config.REFERRAL_REWARD || 10} Magnum Coins.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —É—Ä–æ–≤–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤?*\n` +
      `–£—Ä–æ–≤–Ω–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n` +
      `‚Ä¢ 1-5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –ù–æ–≤–∏—á–æ–∫\n` +
      `‚Ä¢ 6-15 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –û–ø—ã—Ç–Ω—ã–π\n` +
      `‚Ä¢ 16-30 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –≠–∫—Å–ø–µ—Ä—Ç\n` +
      `‚Ä¢ 31+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –ú–∞—Å—Ç–µ—Ä\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤?*\n` +
      `–ù–µ—Ç, —Ä–µ—Ñ–µ—Ä–∞–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n` +
      `*‚ùì –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã" ‚Üí "üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞?*\n` +
      `–í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ —É—Ä–æ–≤–µ–Ω—å.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –†–µ—Ñ–µ—Ä–∞–ª—ã');
  }
});

bot.action('faq_achievements', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üèÜ *FAQ - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?*\n` +
      `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –±–æ—Ç–µ.\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?*\n` +
      `‚Ä¢ –§–∞—Ä–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞—Ä–º–æ–≤\n` +
      `‚Ä¢ –ú–∞–π–Ω–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –∑–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–∞–π–Ω–µ—Ä–∞\n` +
      `‚Ä¢ –ë–æ–Ω—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –∑–∞ —Å–µ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤\n` +
      `‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n` +
      `‚Ä¢ –û–±–º–µ–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –∑–∞ –æ–±–º–µ–Ω—ã –≤–∞–ª—é—Ç\n` +
      `‚Ä¢ –û–±—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –∑–∞ –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n` +
      `*‚ùì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?*\n` +
      `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—É—á–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π. –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?*\n` +
      `–ó–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–∞—é—Ç—Å—è Magnum Coins. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n\n` +
      `*‚ùì –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è" ‚Üí "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º.\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?*\n` +
      `–ù–µ—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è" ‚Üí "üéÅ –ù–∞–≥—Ä–∞–¥—ã" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã.\n\n` +
      `*‚ùì –ö–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å?*\n` +
      `–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è');
  }
});

bot.action('faq_tasks', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support_faq')]
    ]);
    
    const message = 
      `üìã *FAQ - –ó–∞–¥–∞–Ω–∏—è*\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏—è?*\n` +
      `–ó–∞–¥–∞–Ω–∏—è - —ç—Ç–æ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ Magnum Coins –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –∑–∞–¥–∞–Ω–∏—è?*\n` +
      `‚Ä¢ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã, –∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤\n` +
      `‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è - —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏\n` +
      `‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏\n\n` +
      `*‚ùì –ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ?*\n` +
      `1. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "üìã –ó–∞–¥–∞–Ω–∏—è" ‚Üí "üéØ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ"\n` +
      `2. –ù–∞–∂–º–∏—Ç–µ "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å"\n` +
      `3. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n` +
      `4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"\n\n` +
      `*‚ùì –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è?*\n` +
      `–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π. –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É".\n\n` +
      `*‚ùì –ö–∞–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è?*\n` +
      `–ó–∞–¥–∞–Ω–∏—è –¥–∞—é—Ç Magnum Coins. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è.\n\n` +
      `*‚ùì –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑?*\n` +
      `–ù–µ—Ç, –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n\n` +
      `*‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π?*\n` +
      `–í —Ä–∞–∑–¥–µ–ª–µ "üìã –ó–∞–¥–∞–Ω–∏—è" ‚Üí "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n` +
      `*‚ùì –ß—Ç–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n` +
      `–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞. –ò–Ω–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ –ó–∞–¥–∞–Ω–∏—è');
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
bot.action('contact_support', async (ctx) => {
  try {
    logFunction('bot.action.contact_support', ctx.from.id);
    log(`üÜò –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
    const user = await getUser(ctx.from.id);
    if (!user) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞`);
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'creating_support_ticket', updatedAt: new Date() } }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
    userCache.delete(user.id);
    
    logDebug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω adminState –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, { adminState: 'creating_support_ticket' });
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'support')]
    ]);
    
    const message = 
      `üÜò *–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n` +
      `–í–∞—à ID: \`${user.id}\`\n\n` +
      `üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n` +
      `*–ü—Ä–∏–º–µ—Ä:*\n` +
      `"–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å, –ø–∏—à–µ—Ç –æ—à–∏–±–∫–∞"\n\n` +
      `‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –±—ã—Å—Ç—Ä–µ–µ.`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id} –ø–æ–∫–∞–∑–∞–Ω–∞ —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞`);
    
  } catch (error) {
    logError(error, `–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    logDebug(`–û—à–∏–±–∫–∞ –≤ contact_support`, {
      userId: ctx.from.id,
      error: error.message,
      stack: error.stack
    });
  }
});

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–ù–ê–õ–ê –ü–û–î–î–ï–†–ñ–ö–ò ====================
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
bot.action(/^support_answer_(.+)$/, async (ctx) => {
  try {
    console.log(`‚úÖ –ê–¥–º–∏–Ω ${ctx.from.id} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç ${ctx.match[1]}`);
    
    const ticketId = ctx.match[1];
    const admin = await getUser(ctx.from.id);
    
    if (!admin || !isAdmin(admin.id)) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
    await db.collection('users').updateOne(
      { id: admin.id },
      { $set: { adminState: `answering_ticket_${ticketId}`, updatedAt: new Date() } }
    );
    
    console.log(`üíæ adminState —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ë–î –¥–ª—è –∞–¥–º–∏–Ω–∞ ${admin.id}: answering_ticket_${ticketId}`);
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã adminState –æ–±–Ω–æ–≤–∏–ª—Å—è
    userCache.delete(admin.id);
    console.log(`üóëÔ∏è –ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${admin.id} –æ—á–∏—â–µ–Ω`);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', `support_cancel_${ticketId}`)],
      [Markup.button.url('üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –±–æ—Ç–æ–º', `https://t.me/${(await bot.telegram.getMe()).username}`)]
    ]);
    
    const message = 
      `‚úÖ *–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n\n` +
      `üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º:\n\n` +
      `üí° *–°–æ–≤–µ—Ç—ã:*\n` +
      `‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã\n` +
      `‚Ä¢ –î–∞–π—Ç–µ —á–µ—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç\n` +
      `‚Ä¢ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∑–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n` +
      `‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º, –∞ –Ω–µ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    try {
      const personalMessage = 
        `‚úÖ *–§–æ—Ä–º–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç*\n\n` +
        `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n\n` +
        `üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n\n` +
        `üí° *–°–æ–≤–µ—Ç—ã:*\n` +
        `‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã\n` +
        `‚Ä¢ –î–∞–π—Ç–µ —á–µ—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç\n` +
        `‚Ä¢ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∑–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n` +
        `‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ!`;
      
      await ctx.telegram.sendMessage(admin.id, personalMessage, {
        parse_mode: 'Markdown'
      });
      
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${admin.id} –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ${admin.id}:`, error);
    }
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω—É ${ctx.from.id} –ø–æ–∫–∞–∑–∞–Ω–∞ —Ñ–æ—Ä–º–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç ${ticketId}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç ${ctx.match[1]} –∞–¥–º–∏–Ω–æ–º ${ctx.from.id}:`, error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
bot.action(/^support_progress_(.+)$/, async (ctx) => {
  try {
    console.log(`‚è≥ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ" –¥–ª—è —Ç–∏–∫–µ—Ç–∞ ${ctx.match[1]}`);
    
    const ticketId = ctx.match[1];
    const admin = await getUser(ctx.from.id);
    
    if (!admin || !isAdmin(admin.id)) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
    await db.collection('supportTickets').updateOne(
      { id: ticketId },
      { 
        $set: { 
          status: 'in_progress',
          adminId: admin.id,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const ticket = await db.collection('supportTickets').findOne({ id: ticketId });
    if (ticket) {
      try {
        await ctx.telegram.sendMessage(ticket.userId, 
          `‚è≥ *–í–∞—à —Ç–∏–∫–µ—Ç –≤–∑—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É*\n\n` +
          `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
          `üìù *–ü—Ä–æ–±–ª–µ–º–∞:* ${ticket.subject}\n\n` +
          `‚è∞ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.\n` +
          `üìß –û—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!`
        );
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}:`, error);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å', `support_answer_${ticketId}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `support_reject_${ticketId}`)
      ],
      [
        Markup.button.callback('üîí –ó–∞–∫—Ä—ã—Ç—å', `support_close_${ticketId}`)
      ]
    ]);
    
    const message = 
      `‚è≥ *–¢–∏–∫–µ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket?.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üì± *Username:* ${ticket?.username ? '@' + ticket.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üÜî *User ID:* \`${ticket?.userId}\`\n` +
      `üìÖ *–î–∞—Ç–∞:* ${ticket?.createdAt?.toLocaleString('ru-RU')}\n` +
      `üë®‚Äçüíº *–ê–¥–º–∏–Ω:* ${admin.firstName || admin.username || admin.id}\n\n` +
      `üìù *–ü—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${ticket?.description}\n\`\`\`\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    await ctx.answerCbQuery('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ ${ticketId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ" –¥–ª—è —Ç–∏–∫–µ—Ç–∞ ${ctx.match[1]}:`, error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
bot.action(/^support_reject_(.+)$/, async (ctx) => {
  try {
    console.log(`‚ùå –ê–¥–º–∏–Ω ${ctx.from.id} –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —Ç–∏–∫–µ—Ç ${ctx.match[1]}`);
    
    const ticketId = ctx.match[1];
    const admin = await getUser(ctx.from.id);
    
    if (!admin || !isAdmin(admin.id)) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
    await db.collection('supportTickets').updateOne(
      { id: ticketId },
      { 
        $set: { 
          status: 'rejected',
          adminId: admin.id,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const ticket = await db.collection('supportTickets').findOne({ id: ticketId });
    if (ticket) {
      try {
        await ctx.telegram.sendMessage(ticket.userId, 
          `‚ùå *–í–∞—à —Ç–∏–∫–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n` +
          `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
          `üìù *–ü—Ä–æ–±–ª–µ–º–∞:* ${ticket.subject}\n\n` +
          `‚ö†Ô∏è –í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n` +
          `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.`
        );
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}:`, error);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    const message = 
      `‚ùå *–¢–∏–∫–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket?.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üì± *Username:* ${ticket?.username ? '@' + ticket.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üÜî *User ID:* \`${ticket?.userId}\`\n` +
      `üìÖ *–î–∞—Ç–∞:* ${ticket?.createdAt?.toLocaleString('ru-RU')}\n` +
      `üë®‚Äçüíº *–ê–¥–º–∏–Ω:* ${admin.firstName || admin.username || admin.id}\n\n` +
      `üìù *–ü—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${ticket?.description}\n\`\`\`\n\n` +
      `‚ùå *–°—Ç–∞—Ç—É—Å:* –û—Ç–∫–ª–æ–Ω–µ–Ω`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown'
    });
    
    await ctx.answerCbQuery('‚úÖ –¢–∏–∫–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    console.log(`‚úÖ –¢–∏–∫–µ—Ç ${ticketId} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º ${ctx.from.id}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ ${ctx.match[1]}:`, error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
bot.action(/^support_close_(.+)$/, async (ctx) => {
  try {
    console.log(`üîí –ê–¥–º–∏–Ω ${ctx.from.id} –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç ${ctx.match[1]}`);
    
    const ticketId = ctx.match[1];
    const admin = await getUser(ctx.from.id);
    
    if (!admin || !isAdmin(admin.id)) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
    await db.collection('supportTickets').updateOne(
      { id: ticketId },
      { 
        $set: { 
          status: 'closed',
          adminId: admin.id,
          updatedAt: new Date()
        }
      }
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const ticket = await db.collection('supportTickets').findOne({ id: ticketId });
    if (ticket) {
      try {
        await ctx.telegram.sendMessage(ticket.userId, 
          `üîí *–í–∞—à —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç*\n\n` +
          `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
          `üìù *–ü—Ä–æ–±–ª–µ–º–∞:* ${ticket.subject}\n\n` +
          `‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\n` +
          `üí° –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.`
        );
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.userId}:`, error);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    const message = 
      `üîí *–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç*\n\n` +
      `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
      `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket?.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üì± *Username:* ${ticket?.username ? '@' + ticket.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üÜî *User ID:* \`${ticket?.userId}\`\n` +
      `üìÖ *–î–∞—Ç–∞:* ${ticket?.createdAt?.toLocaleString('ru-RU')}\n` +
      `üë®‚Äçüíº *–ê–¥–º–∏–Ω:* ${admin.firstName || admin.username || admin.id}\n\n` +
      `üìù *–ü—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${ticket?.description}\n\`\`\`\n\n` +
      `üîí *–°—Ç–∞—Ç—É—Å:* –ó–∞–∫—Ä—ã—Ç`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown'
    });
    
    await ctx.answerCbQuery('‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç');
    console.log(`‚úÖ –¢–∏–∫–µ—Ç ${ticketId} –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–æ–º ${ctx.from.id}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ ${ctx.match[1]}:`, error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
bot.action(/^support_cancel_(.+)$/, async (ctx) => {
  try {
    console.log(`üîô –ê–¥–º–∏–Ω ${ctx.from.id} –æ—Ç–º–µ–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç ${ctx.match[1]}`);
    
    const ticketId = ctx.match[1];
    const admin = await getUser(ctx.from.id);
    
    if (!admin || !isAdmin(admin.id)) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await db.collection('users').updateOne(
      { id: admin.id },
      { $unset: { adminState: "" }, $set: { updatedAt: new Date() } }
    );
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache.delete(admin.id);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Ç–∏–∫–µ—Ç–∞
    const ticket = await db.collection('supportTickets').findOne({ id: ticketId });
    if (ticket) {
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å', `support_answer_${ticketId}`),
          Markup.button.callback('‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', `support_progress_${ticketId}`)
        ],
        [
          Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `support_reject_${ticketId}`),
          Markup.button.callback('üîí –ó–∞–∫—Ä—ã—Ç—å', `support_close_${ticketId}`)
        ]
      ]);
      
      const message = 
        `üÜò *–¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n` +
        `üÜî *ID —Ç–∏–∫–µ—Ç–∞:* \`${ticketId}\`\n` +
        `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${ticket.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `üì± *Username:* ${ticket.username ? '@' + ticket.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üÜî *User ID:* \`${ticket.userId}\`\n` +
        `üìÖ *–î–∞—Ç–∞:* ${ticket.createdAt.toLocaleString('ru-RU')}\n` +
        `üìä *–£—Ä–æ–≤–µ–Ω—å:* ${ticket.level || 1}\n` +
        `üí∞ *Magnum Coins:* ${formatNumber(ticket.magnumCoins || 0)}\n` +
        `‚≠ê *Stars:* ${formatNumber(ticket.stars || 0)}\n\n` +
        `üìù *–ü—Ä–æ–±–ª–µ–º–∞:*\n\`\`\`\n${ticket.description}\n\`\`\`\n\n` +
        `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    }
    await ctx.answerCbQuery('‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ');
    console.log(`‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç ${ticketId} –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º ${ctx.from.id}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç ${ctx.match[1]}:`, error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ —Å–≤—è–∑–∏
bot.action('support_telegram', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'contact_support')]
    ]);
    
    const message = 
      `üìß *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ Telegram*\n\n` +
      `–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ Telegram:\n\n` +
      `üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* @magnum_support\n` +
      `üì± *–ö–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏:* @magnumtap\n\n` +
      `üí¨ *–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å:*\n` +
      `1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É @magnum_support\n` +
      `2. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n` +
      `3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID: \`${user.id}\`\n\n` +
      `üìã *–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:*\n` +
      `‚Ä¢ –í–∞—à ID: \`${user.id}\`\n` +
      `‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n` +
      `‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* 5-15 –º–∏–Ω—É—Ç`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram');
  }
});

bot.action('support_whatsapp', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'contact_support')]
    ]);
    
    const message = 
      `üì± *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ WhatsApp*\n\n` +
      `–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ WhatsApp:\n\n` +
      `üìû *–ù–æ–º–µ—Ä:* +7 (999) 123-45-67\n` +
      `üí¨ *WhatsApp:* https://wa.me/79991234567\n\n` +
      `üí¨ *–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å:*\n` +
      `1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É WhatsApp\n` +
      `2. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n` +
      `3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID: \`${user.id}\`\n\n` +
      `üìã *–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:*\n` +
      `‚Ä¢ –í–∞—à ID: \`${user.id}\`\n` +
      `‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n` +
      `‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* 10-30 –º–∏–Ω—É—Ç`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ WhatsApp');
  }
});

bot.action('support_email', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'contact_support')]
    ]);
    
    const message = 
      `üìß *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ Email*\n\n` +
      `–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ Email:\n\n` +
      `üìß *Email:* support@magnumtap.com\n` +
      `üìß *–¢–µ–º–∞ –ø–∏—Å—å–º–∞:* –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Magnum Bot\n\n` +
      `üìù *–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞:*\n` +
      `‚Ä¢ –í–∞—à ID: \`${user.id}\`\n` +
      `‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n` +
      `‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n\n` +
      `üìã *–ü—Ä–∏–º–µ—Ä –ø–∏—Å—å–º–∞:*\n` +
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n` +
      `–ú–æ–π ID: ${user.id}\n` +
      `–ü—Ä–æ–±–ª–µ–º–∞: [–æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É]\n\n` +
      `–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n` +
      `${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n` +
      `‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* 1-24 —á–∞—Å–∞`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Email');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.action('main_menu', async (ctx) => {
  try {
    logFunction('bot.action.main_menu', ctx.from.id);
    log(`üè† –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
    const user = await getUser(ctx.from.id);
    if (!user) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é`);
      return;
    }
    
    logDebug(`–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, {
      level: user.level,
      magnumCoins: user.magnumCoins,
      stars: user.stars,
      isAdmin: isAdmin(user.id)
    });
    
    await showMainMenu(ctx, user);
    log(`‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}`);
    
  } catch (error) {
    logError(error, `–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    logDebug(`–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é`, {
      userId: ctx.from.id,
      error: error.message,
      stack: error.stack
    });
  }
});

// –ú–∞–π–Ω–∏–Ω–≥
bot.action('miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMinerMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –º–∞–π–Ω–µ—Ä–∞');
  }
});

bot.action('start_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await startMiner(ctx, user);
  } catch (error) {
    logError(error, '–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('stop_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await stopMiner(ctx, user);
  } catch (error) {
    logError(error, '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('upgrade_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMinerUpgrade(ctx, user);
  } catch (error) {
    logError(error, '–£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('miner_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showMinerStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});
bot.action('confirm_miner_upgrade', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await upgradeMiner(ctx, user);
  } catch (error) {
    logError(error, '–£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('insufficient_funds', async (ctx) => {
  try {
    await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è!');
  } catch (error) {
    logError(error, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –§–∞—Ä–º
bot.action('farm', async (ctx) => {
  try {
    logFunction('bot.action.farm', ctx.from.id);
    log(`üåæ –ó–∞–ø—Ä–æ—Å –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
    const user = await getUser(ctx.from.id);
    if (!user) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} –¥–ª—è –º–µ–Ω—é —Ñ–∞—Ä–º–∞`);
      return;
    }
    
    logDebug(`–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, {
      level: user.level,
      magnumCoins: user.magnumCoins,
      lastFarm: user.farm?.lastFarm,
      farmCount: user.farm?.farmCount
    });
    
    await showFarmMenu(ctx, user);
    log(`‚úÖ –ú–µ–Ω—é —Ñ–∞—Ä–º–∞ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}`);
    
  } catch (error) {
    logError(error, `–ú–µ–Ω—é —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    logDebug(`–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é —Ñ–∞—Ä–º–∞`, {
      userId: ctx.from.id,
      error: error.message,
      stack: error.stack
    });
  }
});
// –û–±–º–µ–Ω
bot.action('exchange', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showExchangeMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –æ–±–º–µ–Ω–∞');
  }
});

bot.action('exchange_10', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await performExchange(ctx, user, 10);
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω 10 Magnum Coins');
  }
});

bot.action('exchange_50', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await performExchange(ctx, user, 50);
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω 50 Magnum Coins');
  }
});

bot.action('exchange_100', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await performExchange(ctx, user, 100);
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω 100 Magnum Coins');
  }
});
bot.action('exchange_500', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await performExchange(ctx, user, 500);
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω 500 Magnum Coins');
  }
});
bot.action('exchange_all', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const amount = Math.floor(user.magnumCoins);
    if (amount <= 0) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç Magnum Coins –¥–ª—è –æ–±–º–µ–Ω–∞!');
      return;
    }
    
    await performExchange(ctx, user, amount);
  } catch (error) {
    logError(error, '–û–±–º–µ–Ω –≤—Å–µ—Ö Magnum Coins');
  }
});

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
bot.action('achievements', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAchievementsMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }
});

bot.action('achievements_progress', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAchievementsProgress(ctx, user);
  } catch (error) {
    logError(error, '–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }
});

bot.action('achievements_rewards', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAchievementsRewards(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞–≥—Ä–∞–¥—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }
});

// –†–µ—Ñ–µ—Ä–∞–ª—ã
bot.action('referrals', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralsMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});

bot.action('referral_link', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralLink(ctx, user);
  } catch (error) {
    logError(error, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞');
  }
});
bot.action('referral_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});
bot.action('referral_rewards', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralRewards(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});
bot.action('referral_list', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showReferralList(ctx, user);
  } catch (error) {
    logError(error, '–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});

bot.action('copy_referral_link', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const botUsername = (await ctx.telegram.getMe()).username;
    const referralLink = `https://t.me/${botUsername}?start=${user.id}`;
    
    await ctx.answerCbQuery('üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    await ctx.reply(`üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\`${referralLink}\``, { parse_mode: 'Markdown' });
  } catch (error) {
    logError(error, '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏');
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
bot.action('settings', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showSettingsMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
});

bot.action('settings_notifications', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showNotificationSettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
});
bot.action('settings_privacy', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showPrivacySettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
  }
});

bot.action('settings_language', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showLanguageSettings(ctx, user);
  } catch (error) {
    logError(error, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞');
  }
});

bot.action('settings_reset', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showResetSettings(ctx, user);
  } catch (error) {
    logError(error, '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
});

// –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.action('toggle_notifications', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await toggleNotificationSetting(ctx, user);
  } catch (error) {
    logError(error, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
});

bot.action('toggle_privacy', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await togglePrivacySetting(ctx, user);
  } catch (error) {
    logError(error, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
  }
});

bot.action('set_language_ru', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await setLanguage(ctx, user, 'ru');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ RU');
  }
});

bot.action('set_language_en', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await setLanguage(ctx, user, 'en');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ EN');
  }
});

bot.action('confirm_reset', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await resetUserSettings(ctx, user);
  } catch (error) {
    logError(error, '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});

// –ó–∞–¥–∞–Ω–∏—è
bot.action('tasks', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showTasksMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π');
  }
});

bot.action('tasks_sponsor', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showSponsorTasks(ctx, user);
  } catch (error) {
    logError(error, '–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è');
  }
});

bot.action('tasks_daily', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showDailyTasks(ctx, user);
  } catch (error) {
    logError(error, '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è');
  }
});

bot.action('tasks_progress', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showTasksProgress(ctx, user);
  } catch (error) {
    logError(error, '–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π');
  }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π
bot.action(/^sponsor_task_(\d+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const taskId = parseInt(ctx.match[1]);
    await showSponsorTaskDetails(ctx, user, taskId);
  } catch (error) {
    logError(error, '–î–µ—Ç–∞–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
  }
});
bot.action(/^claim_sponsor_(\d+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const taskId = parseInt(ctx.match[1]);
    await claimSponsorTask(ctx, user, taskId);
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
  }
});

bot.action(/^verify_sponsor_(\d+)$/, async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const taskId = parseInt(ctx.match[1]);
    await verifySponsorTask(ctx, user, taskId);
  } catch (error) {
    logError(error, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
  }
});
bot.action('do_farm', async (ctx) => {
  try {
    logFunction('bot.action.do_farm', ctx.from.id);
    log(`üåæ –ó–∞–ø—Ä–æ—Å –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∞—Ä–º–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
    const user = await getUser(ctx.from.id);
    if (!user) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∞—Ä–º–∞`);
      return;
    }
    
    logDebug(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`, {
      level: user.level,
      magnumCoins: user.magnumCoins,
      lastFarm: user.farm?.lastFarm,
      farmCount: user.farm?.farmCount,
      farmCooldown: config.FARM_COOLDOWN
    });
    
    await doFarm(ctx, user);
    log(`‚úÖ –î–µ–π—Å—Ç–≤–∏–µ —Ñ–∞—Ä–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
  } catch (error) {
    logError(error, `–î–µ–π—Å—Ç–≤–∏–µ —Ñ–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    logDebug(`–û—à–∏–±–∫–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ —Ñ–∞—Ä–º–∞`, {
      userId: ctx.from.id,
      error: error.message,
      stack: error.stack
    });
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞—Ä–º–∞
bot.action('farm_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showFarmStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞—Ä–º–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –ë–æ–Ω—É—Å—ã —Ñ–∞—Ä–º–∞
bot.action('farm_bonuses', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showFarmBonuses(ctx, user);
  } catch (error) {
    logError(error, '–ë–æ–Ω—É—Å—ã —Ñ–∞—Ä–º–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –ë–æ–Ω—É—Å
bot.action('bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showBonusMenu(ctx, user);
  } catch (error) {
    logError(error, '–ú–µ–Ω—é –±–æ–Ω—É—Å–∞');
  }
});

bot.action('claim_bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await claimBonus(ctx, user);
  } catch (error) {
    logError(error, '–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('bonus_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showBonusStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('bonus_streak', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showBonusStreak(ctx, user);
  } catch (error) {
    logError(error, '–°–µ—Ä–∏—è –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤
bot.action('farm_cooldown', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const farm = user.farm;
    const now = Date.now();
    const lastFarm = farm.lastFarm ? farm.lastFarm.getTime() : 0;
    const timeSince = Math.floor((now - lastFarm) / 1000);
    const cooldown = config.FARM_COOLDOWN;
    
    if (timeSince < cooldown) {
      const remaining = cooldown - timeSince;
      await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(remaining)} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞—Ä–º–æ–º!`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
      startFarmCountdown(ctx, user, remaining);
    } else {
      // –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω —É–∂–µ –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
      await updateFarmMenu(ctx, user);
    }
  } catch (error) {
    logError(error, '–ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞');
  }
});

bot.action('bonus_cooldown', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const bonus = user.dailyBonus;
    const now = Date.now();
    const lastBonus = bonus.lastBonus ? bonus.lastBonus.getTime() : 0;
    const timeSince = now - lastBonus;
    const dayInMs = 24 * 60 * 60 * 1000;
    
    if (timeSince < dayInMs) {
      const remaining = dayInMs - timeSince;
      await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(Math.floor(remaining / 1000))} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞!`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
      startBonusCountdown(ctx, user, Math.floor(remaining / 1000));
    } else {
      // –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω —É–∂–µ –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
      await updateBonusMenu(ctx, user);
    }
  } catch (error) {
    logError(error, '–ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞');
  }
});
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
bot.action('check_subscription', async (ctx) => {
  try {
    const isSubscribed = await checkSubscription(ctx);
    if (isSubscribed) {
      const user = await getUser(ctx.from.id);
      if (!user) return;
      
      await showMainMenu(ctx, user);
    } else {
      await showSubscriptionMessage(ctx);
    }
  } catch (error) {
    logError(error, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const user = await getUser(ctx.from.id);
    if (user) {
      await showMainMenu(ctx, user);
    }
  }
});
// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
bot.action('admin', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminPanel(ctx, user);
  } catch (error) {
    logError(error, '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});
bot.action('admin_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminStats(ctx, user);
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_users', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminUsers(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_balance', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminBalance(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_posts', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminPosts(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_promocodes', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showAdminPromocodes(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});
bot.action('admin_cache', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à–∏
    userCache.clear();
    statsCache.clear();
    
    await ctx.answerCbQuery('‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω!');
    await showAdminPanel(ctx, user);
  } catch (error) {
    logError(error, '–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞');
  }
});

bot.action('admin_reserve', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminReserve(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–º');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–º');
  }
});

bot.action('admin_reserve_add_mc', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'adding_reserve_mc', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_reserve')]
    ]);
    
    await ctx.editMessageText(
      `‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Magnum Coins –≤ —Ä–µ–∑–µ—Ä–≤*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Magnum Coins –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 1000, 5000, 10000\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Magnum Coins –≤ —Ä–µ–∑–µ—Ä–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_reserve_remove_mc', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'removing_reserve_mc', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_reserve')]
    ]);
    
    await ctx.editMessageText(
      `‚ûñ *–£–¥–∞–ª–µ–Ω–∏–µ Magnum Coins –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Magnum Coins –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 1000, 5000, 10000\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–£–¥–∞–ª–µ–Ω–∏–µ Magnum Coins –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});
bot.action('admin_reserve_add_stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'adding_reserve_stars', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_reserve')]
    ]);
    
    await ctx.editMessageText(
      `‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars –≤ —Ä–µ–∑–µ—Ä–≤*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 1000, 5000, 10000\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Stars –≤ —Ä–µ–∑–µ—Ä–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_reserve_remove_stars', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'removing_reserve_stars', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_reserve')]
    ]);
    
    await ctx.editMessageText(
      `‚ûñ *–£–¥–∞–ª–µ–Ω–∏–µ Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞:\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 1000, 5000, 10000\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–£–¥–∞–ª–µ–Ω–∏–µ Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π
bot.action('admin_exchange_commission', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await showAdminExchangeCommission(ctx, user);
  } catch (error) {
    logError(error, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–µ–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π');
  }
});

bot.action('admin_commission_increase', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const newCommission = Math.min(config.EXCHANGE_COMMISSION + 0.5, 10); // –ú–∞–∫—Å–∏–º—É–º 10%
    config.EXCHANGE_COMMISSION = newCommission;
    
    await ctx.answerCbQuery(`‚úÖ –ö–æ–º–∏—Å—Å–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ ${newCommission}%`);
    await showAdminExchangeCommission(ctx, user);
  } catch (error) {
    logError(error, '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_commission_decrease', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    const newCommission = Math.max(config.EXCHANGE_COMMISSION - 0.5, 0); // –ú–∏–Ω–∏–º—É–º 0%
    config.EXCHANGE_COMMISSION = newCommission;
    
    await ctx.answerCbQuery(`‚úÖ –ö–æ–º–∏—Å—Å–∏—è —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ ${newCommission}%`);
    await showAdminExchangeCommission(ctx, user);
  } catch (error) {
    logError(error, '–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

bot.action('admin_commission_set', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_commission', updatedAt: new Date() } }
    );
    
    userCache.delete(user.id);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_exchange_commission')]
    ]);
    
    await ctx.editMessageText(
      `üéØ *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –æ–±–º–µ–Ω–∞*\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (–æ—Ç 0 –¥–æ 10):\n\n` +
      `üí° *–ü—Ä–∏–º–µ—Ä:* 2.5, 5.0, 7.5\n\n` +
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});
bot.action('admin_commission_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user || !isAdmin(user.id)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–º–µ–Ω–æ–≤
    const totalExchanges = await db.collection('users').aggregate([
      { $group: { _id: null, total: { $sum: '$exchange.totalExchanges' } } }
    ]).toArray();
    
    const totalExchanged = await db.collection('users').aggregate([
      { $group: { _id: null, total: { $sum: '$exchange.totalExchanged' } } }
    ]).toArray();
    
    const totalExchangesCount = totalExchanges.length > 0 ? totalExchanges[0].total : 0;
    const totalExchangedAmount = totalExchanged.length > 0 ? totalExchanged[0].total : 0;
    const totalCommission = (totalExchangedAmount * config.EXCHANGE_COMMISSION) / 100;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_exchange_commission')]
    ]);
    
    const message = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–π*\n\n` +
      `üí∞ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚îú –í—Å–µ–≥–æ –æ–±–º–µ–Ω–æ–≤: \`${totalExchangesCount}\`\n` +
      `‚îú –í—Å–µ–≥–æ –æ–±–º–µ–Ω–µ–Ω–æ: \`${formatNumber(totalExchangedAmount)}\` Magnum Coins\n` +
      `‚îú –¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: \`${config.EXCHANGE_COMMISSION}%\`\n` +
      `‚îî –í—Å–µ–≥–æ –∫–æ–º–∏—Å—Å–∏–π: \`${formatNumber(totalCommission)}\` Magnum Coins\n\n` +
      `üìà *–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n` +
      `‚îú –°—Ä–µ–¥–Ω–∏–π –æ–±–º–µ–Ω: \`${totalExchangesCount > 0 ? formatNumber(totalExchangedAmount / totalExchangesCount) : '0.00'}\` Magnum Coins\n` +
      `‚îú –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è: \`${totalExchangesCount > 0 ? formatNumber(totalCommission / totalExchangesCount) : '0.00'}\` Magnum Coins\n` +
      `‚îî –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏: \`${config.EXCHANGE_COMMISSION}%\`\n\n` +
      `üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
      `‚îú –í—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ\n` +
      `‚îú –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞\n` +
      `‚îî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–π');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
bot.action('admin_posts_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_posts')]]);
    const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤*\n\n–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.`;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_broadcast', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user || !isAdmin(user.id)) return;
    await db.collection('users').updateOne({ id: user.id }, { $set: { adminState: 'broadcasting', updatedAt: new Date() } });
    await ctx.reply('üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
  } catch (error) { logError(error, '–†–∞—Å—Å—ã–ª–∫–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_mass_give', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user || !isAdmin(user.id)) return;
    await db.collection('users').updateOne({ id: user.id }, { $set: { adminState: 'mass_give', updatedAt: new Date() } });
    await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å–æ–≤—É—é –≤—ã–¥–∞—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "stars 100" –∏–ª–∏ "mc 50"):');
  } catch (error) { logError(error, '–ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_miner_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const active = await db.collection('users').countDocuments({ 'miner.active': true });
    const agg = await db.collection('users').aggregate([
      { $match: { miner: { $exists: true } } },
      { $group: { _id: null, totalMined: { $sum: { $ifNull: ['$miner.totalMined', 0] } }, avgEff: { $avg: { $ifNull: ['$miner.efficiency', 1] } }, count: { $sum: 1 } } }
    ]).toArray();
    const g = agg[0] || { totalMined: 0, avgEff: 1, count: 0 };
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_miner_settings')]]);
    const message = `‚õèÔ∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞*`+"\n\n"+
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤: \`${active}\``+"\n"+
      `‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–π–Ω–µ—Ä–æ–º: \`${g.count}\``+"\n"+
      `‚îú –°—É–º–º–∞—Ä–Ω–æ –Ω–∞–º–∞–π–Ω–µ–Ω–æ: \`${formatNumber(g.totalMined)}\` MC`+"\n"+
      `‚îî –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \`${(g.avgEff || 1).toFixed(2)}\``;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_miner_levels', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const dist = await db.collection('users').aggregate([
      { $match: { 'miner.level': { $exists: true } } },
      { $group: { _id: '$miner.level', cnt: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]).toArray();
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_miner_settings')]]);
    let message = `‚öôÔ∏è *–£—Ä–æ–≤–Ω–∏ –º–∞–π–Ω–µ—Ä–∞*`+"\n\n";
    if (dist.length === 0) message += `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.`; else dist.forEach(d => { message += `–£—Ä–æ–≤–µ–Ω—å ${d._id}: \`${d.cnt}\``+"\n"; });
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–£—Ä–æ–≤–Ω–∏ –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_referral_bonuses', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_referral_settings')]]);
    const message = `üèÜ *–ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*`+"\n\n"+`–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: \`${config.REFERRAL_BONUS}\` MC.`;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_referral_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const agg = await db.collection('users').aggregate([
      { $group: { _id: null, totalRef: { $sum: { $ifNull: ['$referralsCount', 0] } }, totalEarn: { $sum: { $ifNull: ['$totalReferralEarnings', 0] } }, users: { $sum: 1 } } }
    ]).toArray();
    const g = agg[0] || { totalRef: 0, totalEarn: 0, users: 0 };
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_referral_settings')]]);
    const message = `üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*`+"\n\n"+
      `‚îú –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \`${g.totalRef}\``+"\n"+
      `‚îú –°—É–º–º–∞—Ä–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: \`${formatNumber(g.totalEarn)}\` MC`+"\n"+
      `‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \`${g.users}\``;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_bonus_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const agg = await db.collection('users').aggregate([
      { $group: { _id: null, avgStreak: { $avg: { $ifNull: ['$dailyBonus.streak', 0] } }, maxStreak: { $max: { $ifNull: ['$dailyBonus.streak', 0] } }, gotToday: { $sum: { $cond: [{ $gte: ['$dailyBonus.lastBonus', new Date(Date.now() - 24*60*60*1000)] }, 1, 0] } } } }
    ]).toArray();
    const g = agg[0] || { avgStreak: 0, maxStreak: 0, gotToday: 0 };
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]]);
    const message = `üéÅ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤*`+"\n\n"+
      `‚îú –°—Ä–µ–¥–Ω—è—è —Å–µ—Ä–∏—è: \`${(g.avgStreak || 0).toFixed(1)}\``+"\n"+
      `‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: \`${g.maxStreak || 0}\``+"\n"+
      `‚îî –ü–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ 24—á: \`${g.gotToday}\``;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_bonus_series', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_settings')]]);
    const message = `üî• *–°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤*`+"\n\n"+`–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞. –°–µ—Ä–∏—è —Ä–∞—Å—Ç–µ—Ç –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–∏—è—Ö.`;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–°–µ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_cooldown_bonus', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_cooldowns')]]);
    const message = `üéÅ *–ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞*`+"\n\n"+`–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ 24 —á–∞—Å–∞.`;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_cooldown_miner', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_cooldowns')]]);
    const message = `‚õèÔ∏è *–ö—É–ª–¥–∞—É–Ω –º–∞–π–Ω–µ—Ä–∞*`+"\n\n"+`–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –∑–∞–¥–∞—á–µ–π –±–æ—Ç–∞.`;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–ö—É–ª–¥–∞—É–Ω –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('admin_cooldown_stats', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_cooldowns')]]);
    const message = `‚è±Ô∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤*`+"\n\n"+
      `‚îú –ö—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞: \`${formatTime(config.FARM_COOLDOWN)}\``+"\n"+
      `‚îú –ö—É–ª–¥–∞—É–Ω –±–æ–Ω—É—Å–∞: \`24—á\``+"\n"+
      `‚îî –ü–µ—Ä–∏–æ–¥ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞: \`30–º\``;
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

bot.action('promocode_history', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id); if (!user) return;
    const used = user.usedPromocodes || [];
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'promocode')]]);
    let message = `üìú *–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤*`+"\n\n";
    message += used.length === 0 ? '–í—ã –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã.' : used.map((c, i) => `${i + 1}. ${c}`).join('\n');
    await ctx.editMessageText(message, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
  } catch (error) { logError(error, '–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)'); }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
bot.action('admin_create_post_with_button', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    user.adminState = 'creating_post_with_button';
    await ctx.editMessageText(
      `üìù *–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π*\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n` +
      `–ü–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
      `–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | –°—Å—ã–ª–∫–∞\n\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä:\n` +
      `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è | https://t.me/magnumtap\n\n` +
      `üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π');
  }
});

bot.action('admin_create_post_no_button', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    user.adminState = 'creating_post_no_button';
    await ctx.editMessageText(
      `üìù *–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏*\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n` +
      `üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
bot.action('admin_create_promocode', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    user.adminState = 'creating_promocode';
    await ctx.editMessageText(
      `üé´ *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
      `–ù–∞–∑–≤–∞–Ω–∏–µ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Magnum Coins | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä:\n` +
      `WELCOME | 100 | 50\n\n` +
      `üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    logError(error, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
bot.action('promocode', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    await showPromocodeMenu(ctx, user);
  } catch (error) {
    logError(error, '–ü—Ä–æ–º–æ–∫–æ–¥—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('enter_promocode', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    user.adminState = 'entering_promocode';
    await ctx.editMessageText(
      `üé´ *–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n` +
      `üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    logError(error, '–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
bot.action('support', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìß –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'contact_support')
      ],
      [
        Markup.button.callback('‚ùì FAQ', 'support_faq')
      ],
      [
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings')
      ]
    ]);
    
    const message = 
      `üÜò *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n` +
      `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –º—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n\n` +
      `üìß *–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:*\n` +
      `‚îú –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
      `‚îî –ü–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç\n\n` +
      `‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n` +
      `‚îú –ö–∞–∫ —Ñ–∞—Ä–º–∏—Ç—å Magnum Coins\n` +
      `‚îú –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–π–Ω–µ—Ä\n` +
      `‚îú –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã\n` +
      `‚îî –î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è FAQ
bot.action('support_faq', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üåæ –§–∞—Ä–º FAQ', 'faq_farm'),
        Markup.button.callback('‚õèÔ∏è –ú–∞–π–Ω–µ—Ä FAQ', 'faq_miner')
      ],
      [
        Markup.button.callback('üéÅ –ë–æ–Ω—É—Å—ã FAQ', 'faq_bonus'),
        Markup.button.callback('üíé –û–±–º–µ–Ω FAQ', 'faq_exchange')
      ],
      [
        Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã FAQ', 'faq_promocodes'),
        Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã FAQ', 'faq_referrals')
      ],
      [
        Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è FAQ', 'faq_achievements'),
        Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è FAQ', 'faq_tasks')
      ],
      [
        Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'support')
      ]
    ]);
    
    const message = 
      `‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)*\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n` +
      `üåæ *–§–∞—Ä–º* - –ö–∞–∫ —Ñ–∞—Ä–º–∏—Ç—å Magnum Coins\n` +
      `‚õèÔ∏è *–ú–∞–π–Ω–µ—Ä* - –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥\n` +
      `üéÅ *–ë–æ–Ω—É—Å—ã* - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ —Å–µ—Ä–∏–∏\n` +
      `üíé *–û–±–º–µ–Ω* - –û–±–º–µ–Ω Magnum Coins –Ω–∞ Stars\n` +
      `üé´ *–ü—Ä–æ–º–æ–∫–æ–¥—ã* - –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã\n` +
      `üë• *–†–µ—Ñ–µ—Ä–∞–ª—ã* - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n` +
      `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è* - –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n` +
      `üìã *–ó–∞–¥–∞–Ω–∏—è* - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π\n\n` +
      `üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:`;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logError(error, 'FAQ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.action('admin_farm_reward_set', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–≥—Ä–∞–¥—ã
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_farm_reward', updatedAt: new Date() } }
    );
    
    await ctx.reply('üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É —Ñ–∞—Ä–º–∞ (–≤ Magnum Coins):');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã —Ñ–∞—Ä–º–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_cooldown_farm', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫—É–ª–¥–∞—É–Ω–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_farm_cooldown', updatedAt: new Date() } }
    );
    
    await ctx.reply('‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ —Ñ–∞—Ä–º–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_bonus_base', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –±–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_bonus_base', updatedAt: new Date() } }
    );
    
    await ctx.reply('üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (–≤ Magnum Coins):');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_miner_reward', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_miner_reward', updatedAt: new Date() } }
    );
    
    await ctx.reply('‚õèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –º–∞–π–Ω–µ—Ä–∞ (–≤ Magnum Coins –∑–∞ —á–∞—Å):');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã –º–∞–π–Ω–µ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_referral_reward', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_referral_reward', updatedAt: new Date() } }
    );
    
    await ctx.reply('üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–≤ Magnum Coins):');
  } catch (error) {
    logError(error, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

bot.action('admin_subscription_add', async (ctx) => {
  try {
    const user = await getUser(ctx.from.id);
    if (!user) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    await db.collection('users').updateOne(
      { id: user.id },
      { $set: { adminState: 'setting_subscription_channel', updatedAt: new Date() } }
    );
    
    await ctx.reply('üì¢ –í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (@channel –∏–ª–∏ https://t.me/channel):');
  } catch (error) {
    logError(error, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
  console.log('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', {
    updateType: ctx.updateType,
    userId: ctx.from?.id,
    chatId: ctx.chat?.id,
    messageId: ctx.message?.message_id,
    callbackData: ctx.callbackQuery?.data,
    error: err.message,
    stack: err.stack
  });
});
// ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async function startBot() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ Magnum Stars Bot...');
    
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
      BOT_TOKEN: process.env.BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      MONGODB_URI: process.env.MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      PORT: process.env.PORT || 3000,
      NODE_ENV: process.env.NODE_ENV || 'development'
    });
    
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await connectDB();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    console.log('‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤...');
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:', {
      minerRewardsInterval: '30 –º–∏–Ω—É—Ç',
      cacheCleanupInterval: '5 –º–∏–Ω—É—Ç',
      userCacheTTL: config.USER_CACHE_TTL,
      statsCacheTTL: config.STATS_CACHE_TTL
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–π–Ω–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(() => {
      console.log('‚õèÔ∏è –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥ –º–∞–π–Ω–µ—Ä–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é');
      processMinerRewards();
    }, 30 * 60 * 1000);
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      console.log('üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é');
      const now = Date.now();
      let userCacheCleared = 0;
      let statsCacheCleared = 0;
      
      for (const [key, value] of userCache.entries()) {
        if (now - value.timestamp > config.USER_CACHE_TTL) {
          userCache.delete(key);
          userCacheCleared++;
        }
      }
      
      for (const [key, value] of statsCache.entries()) {
        if (now - value.timestamp > config.STATS_CACHE_TTL) {
          statsCache.delete(key);
          statsCacheCleared++;
        }
      }
      
      if (userCacheCleared > 0 || statsCacheCleared > 0) {
        console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${userCacheCleared}, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ${statsCacheCleared}`);
      }
    }, 5 * 60 * 1000);
    
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    await bot.launch();
    console.log('üöÄ Magnum Stars Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω:', {
      botInfo: await bot.telegram.getMe(),
      config: {
        farmCooldown: config.FARM_COOLDOWN,
        farmReward: config.FARM_BASE_REWARD,
        bonusBase: config.DAILY_BONUS_BASE,
        minerReward: config.MINER_REWARD,
        referralReward: config.REFERRAL_REWARD
      }
    });
    
    // Graceful stop
    process.once('SIGINT', () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
      bot.stop('SIGINT');
    });
    
    process.once('SIGTERM', () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
      bot.stop('SIGTERM');
    });
    console.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    console.log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', {
      error: error.message,
      stack: error.stack,
      config: {
        hasBotToken: !!process.env.BOT_TOKEN,
        hasMongoUri: !!process.env.MONGODB_URI
      }
    });
    process.exit(1);
  }
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================
// –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ, –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
bot.on('text', async (ctx) => {
  try {
    console.log(`üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}: "${ctx.message.text}"`);
    console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${ctx.from.id}`);
    
    const user = await getUser(ctx.from.id);
    if (!user) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞`);
      return;
    }
    
    const text = ctx.message.text;
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ adminState –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, {
      adminState: user.adminState,
      isAdmin: isAdmin(user.id),
      textLength: text.length
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è adminState
    if (user.adminState) {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} —Å adminState:`, {
        adminState: user.adminState,
        text: text,
        textLength: text.length,
        isAdmin: isAdmin(user.id)
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user.adminState === 'creating_support_ticket') {
        console.log(`üÜò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: "${text}"`);
        await handleCreateSupportTicket(ctx, user, text);
        return;
      } else if (user.adminState && user.adminState.startsWith('answering_ticket_')) {
        console.log(`üìù –ê–¥–º–∏–Ω ${ctx.from.id} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç: "${text}"`);
        await handleAdminAnswerTicket(ctx, user, text);
        return;
      } else if (user.adminState === 'entering_promocode') {
        console.log(`üé´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤–≤–æ–¥–∏—Ç –ø—Ä–æ–º–æ–∫–æ–¥: "${text}"`);
        await handleUserEnterPromocode(ctx, user, text);
        return;
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
      if (isAdmin(user.id)) {
        if (user.adminState === 'searching_user') {
          console.log(`üîç –ê–¥–º–∏–Ω ${ctx.from.id} –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${text}"`);
          await handleAdminSearchUser(ctx, user, text);
        } else if (user.adminState === 'banning_user') {
          console.log(`üö´ –ê–¥–º–∏–Ω ${ctx.from.id} –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${text}"`);
          await handleAdminBanUser(ctx, user, text);
        } else if (user.adminState === 'unbanning_user') {
          console.log(`‚úÖ –ê–¥–º–∏–Ω ${ctx.from.id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${text}"`);
          await handleAdminUnbanUser(ctx, user, text);
        } else if (user.adminState === 'setting_farm_reward') {
          console.log(`üåæ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É —Ñ–∞—Ä–º–∞: "${text}"`);
          await handleAdminSetFarmReward(ctx, user, text);
        } else if (user.adminState === 'setting_farm_cooldown') {
          console.log(`‚è∞ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω —Ñ–∞—Ä–º–∞: "${text}"`);
          await handleAdminSetFarmCooldown(ctx, user, text);
        } else if (user.adminState === 'setting_bonus_base') {
          console.log(`üéÅ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å: "${text}"`);
          await handleAdminSetBonusBase(ctx, user, text);
        } else if (user.adminState === 'setting_miner_reward') {
          console.log(`‚õèÔ∏è –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –º–∞–π–Ω–µ—Ä–∞: "${text}"`);
          await handleAdminSetMinerReward(ctx, user, text);
        } else if (user.adminState === 'setting_referral_reward') {
          console.log(`üë• –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É: "${text}"`);
          await handleAdminSetReferralReward(ctx, user, text);
        } else if (user.adminState === 'setting_subscription_channel') {
          console.log(`üì¢ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏: "${text}"`);
          await handleAdminSetSubscriptionChannel(ctx, user, text);
        } else if (user.adminState === 'creating_post_with_button') {
          console.log(`üìù –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π: "${text}"`);
          await handleAdminCreatePostWithButton(ctx, user, text);
        } else if (user.adminState === 'creating_post_no_button') {
          console.log(`üìù –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏: "${text}"`);
          await handleAdminCreatePostNoButton(ctx, user, text);
        } else if (user.adminState === 'creating_promocode') {
          console.log(`üé´ –ê–¥–º–∏–Ω ${ctx.from.id} —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥: "${text}"`);
          await handleAdminCreatePromocode(ctx, user, text);
        } else if (user.adminState === 'adding_reserve_mc') {
          console.log(`‚ûï –ê–¥–º–∏–Ω ${ctx.from.id} –¥–æ–±–∞–≤–ª—è–µ—Ç Magnum Coins –≤ —Ä–µ–∑–µ—Ä–≤: "${text}"`);
          await handleAdminAddReserveMC(ctx, user, text);
        } else if (user.adminState === 'removing_reserve_mc') {
          console.log(`‚ûñ –ê–¥–º–∏–Ω ${ctx.from.id} —É–±–∏—Ä–∞–µ—Ç Magnum Coins –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞: "${text}"`);
          await handleAdminRemoveReserveMC(ctx, user, text);
        } else if (user.adminState === 'adding_reserve_stars') {
          console.log(`‚ûï –ê–¥–º–∏–Ω ${ctx.from.id} –¥–æ–±–∞–≤–ª—è–µ—Ç Stars –≤ —Ä–µ–∑–µ—Ä–≤: "${text}"`);
          await handleAdminAddReserveStars(ctx, user, text);
        } else if (user.adminState === 'removing_reserve_stars') {
          console.log(`‚ûñ –ê–¥–º–∏–Ω ${ctx.from.id} —É–±–∏—Ä–∞–µ—Ç Stars –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞: "${text}"`);
          await handleAdminRemoveReserveStars(ctx, user, text);
        } else if (user.adminState === 'setting_commission') {
          console.log(`üí∏ –ê–¥–º–∏–Ω ${ctx.from.id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é: "${text}"`);
          await handleAdminSetCommission(ctx, user, text);
        } else if (user.adminState === 'broadcasting') {
          console.log(`üì¢ –ê–¥–º–∏–Ω ${ctx.from.id} —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`);
          const cursor = db.collection('users').find({}, { projection: { id: 1 } });
          let sent = 0, errors = 0;
          while (await cursor.hasNext()) {
            const u = await cursor.next();
            try { await ctx.telegram.sendMessage(u.id, text); sent++; } catch (e) { errors++; }
          }
          await db.collection('users').updateOne({ id: user.id }, { $unset: { adminState: '' } });
          await ctx.reply(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}, –æ—à–∏–±–æ–∫: ${errors}`);
        } else if (user.adminState === 'mass_give') {
          console.log(`üí∞ –ê–¥–º–∏–Ω ${ctx.from.id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é –≤—ã–¥–∞—á—É: "${text}"`);
          const parts = text.trim().split(/\s+/);
          if (parts.length < 2) { await ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: "stars 100" –∏–ª–∏ "mc 50"'); return; }
          const type = parts[0].toLowerCase();
          const amount = parseFloat(parts[1]);
          if (!['stars','mc'].includes(type) || !isFinite(amount)) { await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'); return; }
          const inc = type === 'stars' ? { stars: amount, totalEarnedStars: Math.max(amount, 0) } : { magnumCoins: amount, totalEarnedMagnumCoins: Math.max(amount, 0) };
          await db.collection('users').updateMany({}, { $inc: inc, $set: { updatedAt: new Date() } });
          await db.collection('users').updateOne({ id: user.id }, { $unset: { adminState: '' } });
          await ctx.reply(`‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${type} ${amount}`);
        } else {
          console.log(`‚ÑπÔ∏è –ê–¥–º–∏–Ω ${ctx.from.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º adminState: "${text}"`);
          await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
        }
      } else {
        console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º adminState: "${text}"`);
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
      }
    } else {
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç adminState
      if (isAdmin(user.id)) {
        console.log(`‚ÑπÔ∏è –ê–¥–º–∏–Ω ${ctx.from.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –Ω–æ adminState –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: "${text}"`);
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
      } else {
        console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –Ω–æ adminState –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: "${text}"`);
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
      }
    }
    
    console.log(`‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${ctx.from.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${ctx.from.id}:`, error);
    console.log(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:`, {
      userId: ctx.from.id,
      text: ctx.message.text,
      error: error.message,
      stack: error.stack
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (uncaughtException):', error);
  console.log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ uncaughtException:', {
    error: error.message,
    stack: error.stack,
    timestamp: new Date().toISOString(),
    memoryUsage: process.memoryUsage(),
    uptime: process.uptime()
  });
  process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  console.log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ unhandledRejection:', {
    reason: reason,
    promise: promise,
    timestamp: new Date().toISOString(),
    memoryUsage: process.memoryUsage(),
    uptime: process.uptime()
  });
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();