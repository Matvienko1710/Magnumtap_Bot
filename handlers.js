// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Magnum Stars Bot

class Handlers {
  constructor(bot, modules) {
    this.bot = bot;
    this.modules = modules;
    this.setupHandlers();
  }

  setupHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç
    this.setupExchangeHandlers();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–≤–æ–¥–æ–≤
    this.setupWithdrawalHandlers();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    this.setupPromocodeHandlers();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π
    this.setupTaskHandlers();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    this.setupSupportHandlers();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    this.setupAdminHandlers();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    this.setupNavigationHandlers();
  }

  setupExchangeHandlers() {
    // –û–±–º–µ–Ω Magnum –Ω–∞ –∑–≤–µ–∑–¥—ã
    this.bot.action(/^exchange_magnum_to_stars$/, async (ctx) => {
      try {
        const user = await this.modules.userModule.getUser(ctx.from.id);
        
        const message = `ü™ô ‚Üí ‚≠ê **–û–±–º–µ–Ω Magnum Coins –Ω–∞ –∑–≤–µ–∑–¥—ã**\n\n` +
                       `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.magnumCoins}ü™ô\n` +
                       `üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞ (–º–∏–Ω–∏–º—É–º 1ü™ô):\n\n` +
                       `üìù –§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100)`;
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: this.modules.interfaceModule.getMainMenu(user).reply_markup
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        ctx.session = ctx.session || {};
        ctx.session.waitingFor = 'magnum_to_stars_amount';
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ Magnum –Ω–∞ –∑–≤–µ–∑–¥—ã:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –û–±–º–µ–Ω –∑–≤–µ–∑–¥ –Ω–∞ Magnum
    this.bot.action(/^exchange_stars_to_magnum$/, async (ctx) => {
      try {
        const user = await this.modules.userModule.getUser(ctx.from.id);
        
        const message = `‚≠ê ‚Üí ü™ô **–û–±–º–µ–Ω –∑–≤–µ–∑–¥ –Ω–∞ Magnum Coins**\n\n` +
                       `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.stars}‚≠ê\n` +
                       `üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞ (–º–∏–Ω–∏–º—É–º 1‚≠ê):\n\n` +
                       `üìù –§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100)`;
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: this.modules.interfaceModule.getMainMenu(user).reply_markup
        });
        
        ctx.session = ctx.session || {};
        ctx.session.waitingFor = 'stars_to_magnum_amount';
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∑–≤–µ–∑–¥ –Ω–∞ Magnum:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
    this.bot.action(/^exchange_rates$/, async (ctx) => {
      try {
        const rates = await this.modules.exchangeModule.getExchangeRates();
        
        if (rates.success) {
          const message = this.modules.interfaceModule.formatExchangeRates(rates);
          
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: this.modules.interfaceModule.getExchangeMenu().reply_markup
          });
        } else {
          await ctx.reply(rates.message);
        }
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º–µ–Ω–æ–≤
    this.bot.action(/^exchange_stats$/, async (ctx) => {
      try {
        const stats = await this.modules.exchangeModule.getExchangeStats();
        
        const message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º–µ–Ω–æ–≤**\n\n` +
                       `üìà –í—Å–µ–≥–æ –æ–±–º–µ–Ω–æ–≤: ${stats.totalExchanges}\n` +
                       `üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: ${stats.totalVolume}\n` +
                       `üí∏ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: ${stats.totalCommission}\n` +
                       `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${stats.uniqueUsers}\n\n` +
                       `üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n` +
                       `üîÑ –û–±–º–µ–Ω–æ–≤: ${stats.last24h.exchanges}\n` +
                       `üíé –û–±—ä–µ–º: ${stats.last24h.volume}`;
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: this.modules.interfaceModule.getExchangeMenu().reply_markup
        });
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–º–µ–Ω–æ–≤:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤
    this.bot.action(/^exchange_history$/, async (ctx) => {
      try {
        const history = await this.modules.exchangeModule.getExchangeHistory(ctx.from.id, 10);
        
        if (history.length === 0) {
          await ctx.reply('üìú **–ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤**\n\n‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞');
        } else {
          let message = `üìú **–ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤**\n\n`;
          
          history.forEach((exchange, index) => {
            const date = new Date(exchange.createdAt).toLocaleDateString('ru-RU');
            const type = exchange.type === 'magnum_to_stars' ? 'ü™ô‚Üí‚≠ê' : '‚≠ê‚Üíü™ô';
            
            message += `${index + 1}. ${type} ${exchange.amount} ‚Üí ${exchange.received}\n`;
            message += `   üìÖ ${date} | üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${exchange.commission}\n\n`;
          });
          
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: this.modules.interfaceModule.getExchangeMenu().reply_markup
          });
        }
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –¢–æ–ø –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤
    this.bot.action(/^exchange_leaderboard$/, async (ctx) => {
      try {
        const topExchangers = await this.modules.exchangeModule.getTopExchangers(10);
        
        if (topExchangers.length === 0) {
          await ctx.reply('üèÜ **–¢–æ–ø –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤**\n\n‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        } else {
          let message = `üèÜ **–¢–æ–ø –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤**\n\n`;
          
          topExchangers.forEach((user, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÖ';
            message += `${medal} ${index + 1}. @${user.username || 'Unknown'}\n`;
            message += `   üí∞ –û–±—ä–µ–º: ${user.totalVolume} | üîÑ –û–±–º–µ–Ω–æ–≤: ${user.exchangeCount}\n\n`;
          });
          
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: this.modules.interfaceModule.getExchangeMenu().reply_markup
          });
        }
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–æ–ø–∞ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });
  }

  setupWithdrawalHandlers() {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
    this.bot.action(/^create_withdrawal$/, async (ctx) => {
      try {
        const user = await this.modules.userModule.getUser(ctx.from.id);
        
        if (user.magnumCoins < 100) {
          await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ú–∏–Ω–∏–º—É–º: 100ü™ô');
          await ctx.answerCbQuery();
          return;
        }
        
        const message = `üí≥ **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥**\n\n` +
                       `üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: ${user.magnumCoins}ü™ô\n` +
                       `üìä –ú–∏–Ω–∏–º—É–º: 100ü™ô | –ú–∞–∫—Å–∏–º—É–º: 10,000ü™ô\n\n` +
                       `üí° –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞:`;
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: this.modules.interfaceModule.getWithdrawalMethodsMenu().reply_markup
        });
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –ú–µ—Ç–æ–¥—ã –≤—ã–≤–æ–¥–∞
    this.bot.action(/^withdraw_(.+)$/, async (ctx) => {
      try {
        const method = ctx.match[1];
        const user = await this.modules.userModule.getUser(ctx.from.id);
        
        ctx.session = ctx.session || {};
        ctx.session.withdrawalMethod = method;
        ctx.session.waitingFor = 'withdrawal_amount';
        
        const methodNames = {
          'usdt_trc20': 'USDT (TRC20)',
          'btc': 'Bitcoin',
          'eth': 'Ethereum',
          'card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'
        };
        
        const message = `üí≥ **–í—ã–≤–æ–¥ —á–µ—Ä–µ–∑ ${methodNames[method]}**\n\n` +
                       `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.magnumCoins}ü™ô\n` +
                       `üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:\n\n` +
                       `üìù –§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500)`;
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: this.modules.interfaceModule.getWithdrawalMenu().reply_markup
        });
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤
    this.bot.action(/^withdrawal_history$/, async (ctx) => {
      try {
        const history = await this.modules.withdrawalModule.getWithdrawalHistory(ctx.from.id, 10);
        const message = this.modules.interfaceModule.formatWithdrawalHistory(history);
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: this.modules.interfaceModule.getWithdrawalMenu().reply_markup
        });
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤
    this.bot.action(/^withdrawal_stats$/, async (ctx) => {
      try {
        const stats = await this.modules.withdrawalModule.getWithdrawalStats(ctx.from.id);
        
        const message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤**\n\n` +
                       `üí∞ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: ${stats.totalWithdrawn}ü™ô\n` +
                       `üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: ${stats.totalRequests}\n` +
                       `‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: ${stats.approvedRequests}\n` +
                       `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${stats.rejectedRequests}\n` +
                       `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.pendingRequests}\n\n` +
                       `üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–≤–æ–¥: ${stats.lastWithdrawal || '–ù–µ—Ç'}`;
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: this.modules.interfaceModule.getWithdrawalMenu().reply_markup
        });
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–æ–≤:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });
  }

  setupPromocodeHandlers() {
    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    this.bot.action(/^activate_promo$/, async (ctx) => {
      try {
        const message = `üé´ **–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞**\n\n` +
                       `üí° –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\n` +
                       `üìù –§–æ—Ä–º–∞—Ç: –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: WELCOME)`;
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: this.modules.interfaceModule.getPromocodesMenu().reply_markup
        });
        
        ctx.session = ctx.session || {};
        ctx.session.waitingFor = 'promocode';
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    this.bot.action(/^promo_history$/, async (ctx) => {
      try {
        const user = await this.modules.userModule.getUser(ctx.from.id);
        const activatedPromos = user.activatedPromocodes || [];
        
        if (activatedPromos.length === 0) {
          await ctx.reply('üìú **–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤**\n\n‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞');
        } else {
          let message = `üìú **–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤**\n\n`;
          
          activatedPromos.slice(-10).forEach((promo, index) => {
            const date = new Date(promo.activatedAt).toLocaleDateString('ru-RU');
            message += `${index + 1}. üé´ ${promo.code}\n`;
            message += `   üéÅ –ù–∞–≥—Ä–∞–¥–∞: ${promo.reward}\n`;
            message += `   üìÖ ${date}\n\n`;
          });
          
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: this.modules.interfaceModule.getPromocodesMenu().reply_markup
          });
        }
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });
  }

  setupTaskHandlers() {
    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    this.bot.action(/^daily_tasks$/, async (ctx) => {
      try {
        const result = await this.modules.tasksModule.getDailyTasks(ctx.from.id, ctx);
        
        if (result.success) {
          const message = this.modules.interfaceModule.formatDailyTasks(
            result.tasks,
            result.completed,
            result.rewards
          );
          
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: this.modules.interfaceModule.getTasksMenu().reply_markup
          });
        } else {
          await ctx.reply(result.message);
        }
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
    this.bot.action(/^sponsor_tasks$/, async (ctx) => {
      try {
        const result = await this.modules.tasksModule.getSponsorTasks(ctx.from.id, ctx);
        
        if (result.success) {
          let message = `üéÅ **–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è**\n\n`;
          
          result.tasks.forEach((task, index) => {
            const status = task.completed ? '‚úÖ' : '‚è≥';
            message += `${index + 1}. ${status} ${task.name}\n`;
            message += `   üìù ${task.description}\n`;
            message += `   üéÅ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward}‚≠ê\n`;
            if (task.progress !== undefined) {
              message += `   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.progress}/${task.target}\n`;
            }
            message += '\n';
          });
          
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: this.modules.interfaceModule.getTasksMenu().reply_markup
          });
        } else {
          await ctx.reply(result.message);
        }
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    this.bot.action(/^all_achievements$/, async (ctx) => {
      try {
        const result = await this.modules.tasksModule.getAchievements(ctx.from.id, ctx);
        
        if (result.success) {
          const message = this.modules.interfaceModule.formatAchievements(result.achievements);
          
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: this.modules.interfaceModule.getAchievementsMenu().reply_markup
          });
        } else {
          await ctx.reply(result.message);
        }
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });
  }

  setupSupportHandlers() {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
    this.bot.action(/^create_ticket$/, async (ctx) => {
      try {
        const message = `üìù **–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n` +
                       `üí° –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ç–∏–∫–µ—Ç–∞:\n\n` +
                       `üìù –ü—Ä–∏–º–µ—Ä: –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤`;
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: this.modules.interfaceModule.getSupportMenu().reply_markup
        });
        
        ctx.session = ctx.session || {};
        ctx.session.waitingFor = 'ticket_subject';
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã
    this.bot.action(/^my_tickets$/, async (ctx) => {
      try {
        const tickets = await this.modules.supportModule.getUserTickets(ctx.from.id, 5);
        
        if (tickets.length === 0) {
          await ctx.reply('üìã **–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã**\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤');
        } else {
          let message = `üìã **–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã**\n\n`;
          
          tickets.forEach((ticket, index) => {
            const date = new Date(ticket.createdAt).toLocaleDateString('ru-RU');
            const status = ticket.status === 'open' ? 'üü¢' : 
                          ticket.status === 'answered' ? 'üü°' : 
                          ticket.status === 'closed' ? 'üî¥' : '‚ö™';
            
            message += `${index + 1}. ${status} ${ticket.subject}\n`;
            message += `   üìÖ ${date} | üìä ${ticket.status}\n\n`;
          });
          
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: this.modules.interfaceModule.getSupportMenu().reply_markup
          });
        }
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–æ–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // FAQ
    this.bot.action(/^support_faq$/, async (ctx) => {
      try {
        const faq = await this.modules.supportModule.getFaq();
        
        let message = `‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n`;
        
        faq.forEach((item, index) => {
          message += `**${index + 1}. ${item.question}**\n`;
          message += `${item.answer}\n\n`;
        });
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: this.modules.interfaceModule.getSupportMenu().reply_markup
        });
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ FAQ:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });
  }

  setupAdminHandlers() {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞
    this.bot.action(/^admin_stats$/, async (ctx) => {
      try {
        if (!this.modules.interfaceModule.isAdmin(ctx.from.id)) {
          await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
          await ctx.answerCbQuery();
          return;
        }
        
        const stats = await this.modules.adminModule.getAdminStats();
        
        if (stats) {
          const message = `üìä **–ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n` +
                         `üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n` +
                         `üìà –í—Å–µ–≥–æ: ${stats.users.totalUsers}\n` +
                         `üÜï –°–µ–≥–æ–¥–Ω—è: ${stats.today.newUsers}\n` +
                         `‚õèÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤: ${stats.users.activeMiners}\n\n` +
                         `üí∞ **–í—ã–≤–æ–¥—ã**\n` +
                         `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.withdrawals.pendingCount}\n` +
                         `‚úÖ –°–µ–≥–æ–¥–Ω—è –æ–¥–æ–±—Ä–µ–Ω–æ: ${stats.today.approvedWithdrawals}\n` +
                         `‚ùå –°–µ–≥–æ–¥–Ω—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${stats.today.rejectedWithdrawals}\n\n` +
                         `üìã **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n` +
                         `üÜï –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: ${stats.support?.openTickets || 0}\n` +
                         `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.support?.waitingTickets || 0}`;
          
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: this.modules.interfaceModule.getAdminMenu().reply_markup
          });
        } else {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –†–∞—Å—Å—ã–ª–∫–∞
    this.bot.action(/^admin_broadcast$/, async (ctx) => {
      try {
        if (!this.modules.interfaceModule.isAdmin(ctx.from.id)) {
          await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
          await ctx.answerCbQuery();
          return;
        }
        
        const message = `üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n` +
                       `üí° –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n` +
                       `üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ`;
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: this.modules.interfaceModule.getAdminMenu().reply_markup
        });
        
        ctx.session = ctx.session || {};
        ctx.session.waitingFor = 'broadcast_message';
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    this.bot.action(/^admin_users$/, async (ctx) => {
      try {
        if (!this.modules.interfaceModule.isAdmin(ctx.from.id)) {
          await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
          await ctx.answerCbQuery();
          return;
        }
        
        const topUsers = await this.modules.adminModule.getTopUsers(10);
        
        let message = `üë• **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n`;
        
        topUsers.forEach((user, index) => {
          const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÖ';
          message += `${medal} ${index + 1}. @${user.username || 'Unknown'}\n`;
          message += `   üí∞ –ó–≤–µ–∑–¥—ã: ${user.stars} | ü™ô Magnum: ${user.magnumCoins}\n`;
          message += `   üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.invited || 0}\n\n`;
        });
        
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: this.modules.interfaceModule.getAdminMenu().reply_markup
        });
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞–º–∏
    this.bot.action(/^admin_withdrawals$/, async (ctx) => {
      try {
        if (!this.modules.interfaceModule.isAdmin(ctx.from.id)) {
          await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
          await ctx.answerCbQuery();
          return;
        }
        
        const pendingWithdrawals = await this.modules.withdrawalModule.getPendingWithdrawals(10);
        
        if (pendingWithdrawals.length === 0) {
          await ctx.reply('üí∞ **–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥**\n\n‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏');
        } else {
          let message = `üí∞ **–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥**\n\n`;
          
          pendingWithdrawals.forEach((withdrawal, index) => {
            const date = new Date(withdrawal.createdAt).toLocaleDateString('ru-RU');
            message += `${index + 1}. üí≥ ${withdrawal.amount}ü™ô\n`;
            message += `   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.userId}\n`;
            message += `   üìÖ ${date} | üí≥ ${withdrawal.method}\n\n`;
          });
          
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: this.modules.interfaceModule.getAdminMenu().reply_markup
          });
        }
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞–º–∏:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });
  }

  setupNavigationHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    this.bot.action(/^back_to_(.+)$/, async (ctx) => {
      try {
        const section = ctx.match[1];
        const user = await this.modules.userModule.getUser(ctx.from.id);
        
        let keyboard;
        let message = '';
        
        switch (section) {
          case 'main':
            await this.showMainMenu(ctx, user);
            break;
          case 'miner':
            const minerStats = await this.modules.minerModule.getMinerStats(ctx.from.id, ctx);
            message = this.modules.interfaceModule.formatMinerStats(minerStats);
            keyboard = this.modules.interfaceModule.getMinerMenu(user, minerStats);
            break;
          case 'exchange':
            const rates = await this.modules.exchangeModule.getExchangeRates();
            message = this.modules.interfaceModule.formatExchangeRates(rates);
            keyboard = this.modules.interfaceModule.getExchangeMenu();
            break;
          case 'withdrawal':
            message = `üí≥ **–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤**\n\n` +
                     `üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${user.magnumCoins}ü™ô\n` +
                     `üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100ü™ô\n` +
                     `üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10,000ü™ô\n\n` +
                     `üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
            keyboard = this.modules.interfaceModule.getWithdrawalMenu();
            break;
          default:
            await this.showMainMenu(ctx, user);
            break;
        }
        
        if (message && keyboard) {
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: keyboard.reply_markup
          });
        }
        
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
    this.bot.action(/^cancel$/, async (ctx) => {
      try {
        const user = await this.modules.userModule.getUser(ctx.from.id);
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        ctx.session = {};
        
        await this.showMainMenu(ctx, user);
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
    });
  }

  async showMainMenu(ctx, user) {
    const welcomeMessage = `üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!**\n\n` +
                          `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n` +
                          `‚≠ê –ó–≤–µ–∑–¥—ã: ${user.stars}\n` +
                          `ü™ô Magnum Coins: ${user.magnumCoins}\n\n` +
                          `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.reply(welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: this.modules.interfaceModule.getMainMenu(user).reply_markup
    });
  }
}

module.exports = Handlers;