const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');

const bot = new Telegraf(process.env.BOT_TOKEN || '7668979667:AAFrTOKH0nz0pS_XumlAa3xhYKffDm4Sjnk');

const dbPath = './db.json';

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function loadDB() {
  try {
    const data = fs.readFileSync(dbPath, 'utf8');
    return JSON.parse(data);
  } catch (err) {
    return {};
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function saveDB(data) {
  fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUser(id) {
  const db = loadDB();
  if (!db[id]) {
    db[id] = {
      stars: 0,
      lastFarm: 0,
      lastBonus: 0,
      invitedBy: null,
    };
    saveDB(db);
  }
  return db[id];
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUser(id, userData) {
  const db = loadDB();
  db[id] = userData;
  saveDB(db);
}

// üë§ /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
bot.start((ctx) => {
  const userId = ctx.from.id.toString();
  const db = loadDB();

  const args = ctx.message.text.split(' ');
  const referrerId = args[1];

  if (!db[userId]) {
    db[userId] = {
      stars: 0,
      lastFarm: 0,
      lastBonus: 0,
      invitedBy: null,
    };

    // –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
    if (referrerId && referrerId !== userId && db[referrerId]) {
      db[userId].invitedBy = referrerId;
      db[referrerId].stars += 5;
      ctx.telegram.sendMessage(referrerId, `üéâ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞! +5 –∑–≤—ë–∑–¥`);
    }

    saveDB(db);
  }

  ctx.reply(
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.first_name}!\n\n‚≠êÔ∏è –£ —Ç–µ–±—è ${db[userId].stars} –∑–≤—ë–∑–¥.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:`,
    Markup.keyboard([['üë®‚Äçüåæ –§–∞—Ä–º', 'üéÅ –ë–æ–Ω—É—Å'], ['üìä –ë–∞–ª–∞–Ω—Å']]).resize()
  );
});

// üë®‚Äçüåæ –§–∞—Ä–º
bot.hears('üë®‚Äçüåæ –§–∞—Ä–º', async (ctx) => {
  const userId = ctx.from.id.toString();
  const user = getUser(userId);
  const now = Date.now();

  if (now - user.lastFarm < 60 * 1000) {
    const secondsLeft = Math.ceil((60 * 1000 - (now - user.lastFarm)) / 1000);
    return ctx.reply(`‚è≥ –ü–æ–¥–æ–∂–¥–∏ ${secondsLeft} —Å–µ–∫. –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞.`);
  }

  user.lastFarm = now;
  user.stars += 1;
  saveUser(userId, user);

  ctx.reply('‚≠êÔ∏è +1 –∑–≤–µ–∑–¥–∞ –∑–∞ —Ñ–∞—Ä–º!');
});

// üéÅ –ë–æ–Ω—É—Å (—Ä–∞–∑ –≤ 24 —á–∞—Å–∞)
bot.hears('üéÅ –ë–æ–Ω—É—Å', async (ctx) => {
  const userId = ctx.from.id.toString();
  const user = getUser(userId);
  const now = Date.now();

  if (now - user.lastBonus < 24 * 60 * 60 * 1000) {
    const hoursLeft = Math.ceil((24 * 60 * 60 * 1000 - (now - user.lastBonus)) / (60 * 60 * 1000));
    return ctx.reply(`üéÅ –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë ${hoursLeft} —á.`);
  }

  user.lastBonus = now;
  user.stars += 10;
  saveUser(userId, user);

  ctx.reply('üéâ –¢—ã –ø–æ–ª—É—á–∏–ª +10 –∑–≤—ë–∑–¥ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!');
});

// üìä –ë–∞–ª–∞–Ω—Å
bot.hears('üìä –ë–∞–ª–∞–Ω—Å', (ctx) => {
  const userId = ctx.from.id.toString();
  const user = getUser(userId);
  ctx.reply(`‚≠êÔ∏è –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å: ${user.stars} –∑–≤—ë–∑–¥`);
});

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
