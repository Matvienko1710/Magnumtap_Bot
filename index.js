require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');

const bot = new Telegraf(process.env.BOT_TOKEN);
const dbFile = 'database.json';

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã
function loadDB() {
  if (!fs.existsSync(dbFile)) fs.writeFileSync(dbFile, JSON.stringify({}));
  return JSON.parse(fs.readFileSync(dbFile));
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã
function saveDB(db) {
  fs.writeFileSync(dbFile, JSON.stringify(db, null, 2));
}

function getUser(id) {
  const db = loadDB();
  if (!db[id]) db[id] = { stars: 0, bonusTime: 0, referrals: [], balance: 0 };
  saveDB(db);
  return db[id];
}

bot.start((ctx) => {
  const user = getUser(ctx.from.id);
  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', Markup.inlineKeyboard([
    [Markup.button.callback('üöÄ –§–∞—Ä–º –∑–≤—ë–∑–¥', 'farm')],
    [Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
    [Markup.button.callback('üéØ –ó–∞–¥–∞–Ω–∏—è', 'tasks')],
    [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'ref')],
    [Markup.button.callback('üí∏ –í—ã–≤–æ–¥', 'withdraw')],
  ]));
});

bot.action('farm', (ctx) => {
  const db = loadDB();
  const user = getUser(ctx.from.id);
  user.stars += 1;
  saveDB(db);
  ctx.answerCbQuery('–í—ã –ø–æ–ª—É—á–∏–ª–∏ +1 –∑–≤–µ–∑–¥—É üåü');
});

bot.action('bonus', (ctx) => {
  const db = loadDB();
  const user = getUser(ctx.from.id);
  const now = Date.now();
  if (now - user.bonusTime >= 86400000) {
    user.stars += 10;
    user.bonusTime = now;
    saveDB(db);
    ctx.answerCbQuery('üéâ –ë–æ–Ω—É—Å +10 –∑–≤—ë–∑–¥!');
  } else {
    const timeLeft = 86400000 - (now - user.bonusTime);
    const hours = Math.floor(timeLeft / 3600000);
    ctx.answerCbQuery(`–ï—â—ë ${hours} —á –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞`);
  }
});

bot.action('tasks', (ctx) => {
  ctx.answerCbQuery('–ó–∞–¥–∞–Ω–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!');
});

bot.action('ref', (ctx) => {
  ctx.answerCbQuery(`–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: t.me/${ctx.botInfo.username}?start=${ctx.from.id}`);
});

bot.action('withdraw', (ctx) => {
  ctx.answerCbQuery('–ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: 100 –∑–≤—ë–∑–¥');
});

bot.launch();
