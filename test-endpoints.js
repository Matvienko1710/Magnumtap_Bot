#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ Magnum Stars Bot
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-endpoints.js [URL]
 * 
 * –ü—Ä–∏–º–µ—Ä: node test-endpoints.js https://your-app-name.onrender.com
 */

const https = require('https');
const http = require('http');

// –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const baseUrl = process.argv[2] || 'http://localhost:3000';

console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è: ${baseUrl}\n`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(url) {
    return new Promise((resolve, reject) => {
        const client = url.startsWith('https') ? https : http;
        
        const req = client.get(url, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                resolve({
                    statusCode: res.statusCode,
                    headers: res.headers,
                    data: data
                });
            });
        });
        
        req.on('error', (error) => {
            reject(error);
        });
        
        req.setTimeout(10000, () => {
            req.destroy();
            reject(new Error('Timeout'));
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
async function testEndpoint(name, path) {
    const url = `${baseUrl}${path}`;
    console.log(`üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${name}...`);
    console.log(`   URL: ${url}`);
    
    try {
        const startTime = Date.now();
        const response = await makeRequest(url);
        const endTime = Date.now();
        const responseTime = endTime - startTime;
        
        console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${response.statusCode}`);
        console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms`);
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try {
            const jsonData = JSON.parse(response.data);
            console.log(`   üìÑ –û—Ç–≤–µ—Ç: ${JSON.stringify(jsonData, null, 2)}`);
        } catch (e) {
            console.log(`   üìÑ –û—Ç–≤–µ—Ç: ${response.data}`);
        }
        
        console.log('');
        return { success: true, statusCode: response.statusCode, responseTime };
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        console.log('');
        return { success: false, error: error.message };
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
    const endpoints = [
        { name: 'Health Check', path: '/health' },
        { name: 'Ping', path: '/ping' },
        { name: 'Status API', path: '/api/status' },
        { name: 'Root', path: '/' },
        { name: 'Bot Info', path: '/api/bot-info' }
    ];
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...\n');
    
    const results = [];
    
    for (const endpoint of endpoints) {
        const result = await testEndpoint(endpoint.name, endpoint.path);
        results.push({ ...endpoint, ...result });
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    console.log('üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
    console.log('='.repeat(50));
    
    let successCount = 0;
    let totalResponseTime = 0;
    
    results.forEach(result => {
        const status = result.success ? '‚úÖ' : '‚ùå';
        const time = result.success ? `(${result.responseTime}ms)` : '';
        console.log(`${status} ${result.name}: ${result.success ? 'OK' : result.error} ${time}`);
        
        if (result.success) {
            successCount++;
            totalResponseTime += result.responseTime;
        }
    });
    
    console.log('='.repeat(50));
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ: ${successCount}/${results.length}`);
    
    if (successCount > 0) {
        console.log(`‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(totalResponseTime / successCount)}ms`);
    }
    
    if (successCount === results.length) {
        console.log('üéâ –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        console.log('‚úÖ –í–∞—à –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ UptimeRobot');
    } else {
        console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
        console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
});
